'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18034
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="BRSOF")>  _
Partial Public Class BRSOFDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertofBookmark(instance As ofBookmark)
    End Sub
  Partial Private Sub UpdateofBookmark(instance As ofBookmark)
    End Sub
  Partial Private Sub DeleteofBookmark(instance As ofBookmark)
    End Sub
  Partial Private Sub InsertofVersion(instance As ofVersion)
    End Sub
  Partial Private Sub UpdateofVersion(instance As ofVersion)
    End Sub
  Partial Private Sub DeleteofVersion(instance As ofVersion)
    End Sub
  Partial Private Sub InsertofBookmarkPerm(instance As ofBookmarkPerm)
    End Sub
  Partial Private Sub UpdateofBookmarkPerm(instance As ofBookmarkPerm)
    End Sub
  Partial Private Sub DeleteofBookmarkPerm(instance As ofBookmarkPerm)
    End Sub
  Partial Private Sub InsertofBookmarkProp(instance As ofBookmarkProp)
    End Sub
  Partial Private Sub UpdateofBookmarkProp(instance As ofBookmarkProp)
    End Sub
  Partial Private Sub DeleteofBookmarkProp(instance As ofBookmarkProp)
    End Sub
  Partial Private Sub InsertofConversation(instance As ofConversation)
    End Sub
  Partial Private Sub UpdateofConversation(instance As ofConversation)
    End Sub
  Partial Private Sub DeleteofConversation(instance As ofConversation)
    End Sub
  Partial Private Sub InsertofExtComponentConf(instance As ofExtComponentConf)
    End Sub
  Partial Private Sub UpdateofExtComponentConf(instance As ofExtComponentConf)
    End Sub
  Partial Private Sub DeleteofExtComponentConf(instance As ofExtComponentConf)
    End Sub
  Partial Private Sub InsertofGatewayRegistration(instance As ofGatewayRegistration)
    End Sub
  Partial Private Sub UpdateofGatewayRegistration(instance As ofGatewayRegistration)
    End Sub
  Partial Private Sub DeleteofGatewayRegistration(instance As ofGatewayRegistration)
    End Sub
  Partial Private Sub InsertofGroup(instance As ofGroup)
    End Sub
  Partial Private Sub UpdateofGroup(instance As ofGroup)
    End Sub
  Partial Private Sub DeleteofGroup(instance As ofGroup)
    End Sub
  Partial Private Sub InsertofGroupProp(instance As ofGroupProp)
    End Sub
  Partial Private Sub UpdateofGroupProp(instance As ofGroupProp)
    End Sub
  Partial Private Sub DeleteofGroupProp(instance As ofGroupProp)
    End Sub
  Partial Private Sub InsertofGroupUser(instance As ofGroupUser)
    End Sub
  Partial Private Sub UpdateofGroupUser(instance As ofGroupUser)
    End Sub
  Partial Private Sub DeleteofGroupUser(instance As ofGroupUser)
    End Sub
  Partial Private Sub InsertofID(instance As ofID)
    End Sub
  Partial Private Sub UpdateofID(instance As ofID)
    End Sub
  Partial Private Sub DeleteofID(instance As ofID)
    End Sub
  Partial Private Sub InsertofMucAffiliation(instance As ofMucAffiliation)
    End Sub
  Partial Private Sub UpdateofMucAffiliation(instance As ofMucAffiliation)
    End Sub
  Partial Private Sub DeleteofMucAffiliation(instance As ofMucAffiliation)
    End Sub
  Partial Private Sub InsertofMucMember(instance As ofMucMember)
    End Sub
  Partial Private Sub UpdateofMucMember(instance As ofMucMember)
    End Sub
  Partial Private Sub DeleteofMucMember(instance As ofMucMember)
    End Sub
  Partial Private Sub InsertofMucRoom(instance As ofMucRoom)
    End Sub
  Partial Private Sub UpdateofMucRoom(instance As ofMucRoom)
    End Sub
  Partial Private Sub DeleteofMucRoom(instance As ofMucRoom)
    End Sub
  Partial Private Sub InsertofMucRoomProp(instance As ofMucRoomProp)
    End Sub
  Partial Private Sub UpdateofMucRoomProp(instance As ofMucRoomProp)
    End Sub
  Partial Private Sub DeleteofMucRoomProp(instance As ofMucRoomProp)
    End Sub
  Partial Private Sub InsertofMucService(instance As ofMucService)
    End Sub
  Partial Private Sub UpdateofMucService(instance As ofMucService)
    End Sub
  Partial Private Sub DeleteofMucService(instance As ofMucService)
    End Sub
  Partial Private Sub InsertofMucServiceProp(instance As ofMucServiceProp)
    End Sub
  Partial Private Sub UpdateofMucServiceProp(instance As ofMucServiceProp)
    End Sub
  Partial Private Sub DeleteofMucServiceProp(instance As ofMucServiceProp)
    End Sub
  Partial Private Sub InsertofOffline(instance As ofOffline)
    End Sub
  Partial Private Sub UpdateofOffline(instance As ofOffline)
    End Sub
  Partial Private Sub DeleteofOffline(instance As ofOffline)
    End Sub
  Partial Private Sub InsertofPresence(instance As ofPresence)
    End Sub
  Partial Private Sub UpdateofPresence(instance As ofPresence)
    End Sub
  Partial Private Sub DeleteofPresence(instance As ofPresence)
    End Sub
  Partial Private Sub InsertofPrivacyList(instance As ofPrivacyList)
    End Sub
  Partial Private Sub UpdateofPrivacyList(instance As ofPrivacyList)
    End Sub
  Partial Private Sub DeleteofPrivacyList(instance As ofPrivacyList)
    End Sub
  Partial Private Sub InsertofPrivate(instance As ofPrivate)
    End Sub
  Partial Private Sub UpdateofPrivate(instance As ofPrivate)
    End Sub
  Partial Private Sub DeleteofPrivate(instance As ofPrivate)
    End Sub
  Partial Private Sub InsertofProperty(instance As ofProperty)
    End Sub
  Partial Private Sub UpdateofProperty(instance As ofProperty)
    End Sub
  Partial Private Sub DeleteofProperty(instance As ofProperty)
    End Sub
  Partial Private Sub InsertofPubsubAffiliation(instance As ofPubsubAffiliation)
    End Sub
  Partial Private Sub UpdateofPubsubAffiliation(instance As ofPubsubAffiliation)
    End Sub
  Partial Private Sub DeleteofPubsubAffiliation(instance As ofPubsubAffiliation)
    End Sub
  Partial Private Sub InsertofPubsubDefaultConf(instance As ofPubsubDefaultConf)
    End Sub
  Partial Private Sub UpdateofPubsubDefaultConf(instance As ofPubsubDefaultConf)
    End Sub
  Partial Private Sub DeleteofPubsubDefaultConf(instance As ofPubsubDefaultConf)
    End Sub
  Partial Private Sub InsertofPubsubItem(instance As ofPubsubItem)
    End Sub
  Partial Private Sub UpdateofPubsubItem(instance As ofPubsubItem)
    End Sub
  Partial Private Sub DeleteofPubsubItem(instance As ofPubsubItem)
    End Sub
  Partial Private Sub InsertofPubsubNode(instance As ofPubsubNode)
    End Sub
  Partial Private Sub UpdateofPubsubNode(instance As ofPubsubNode)
    End Sub
  Partial Private Sub DeleteofPubsubNode(instance As ofPubsubNode)
    End Sub
  Partial Private Sub InsertofPubsubNodeJIDs(instance As ofPubsubNodeJIDs)
    End Sub
  Partial Private Sub UpdateofPubsubNodeJIDs(instance As ofPubsubNodeJIDs)
    End Sub
  Partial Private Sub DeleteofPubsubNodeJIDs(instance As ofPubsubNodeJIDs)
    End Sub
  Partial Private Sub InsertofPubsubSubscription(instance As ofPubsubSubscription)
    End Sub
  Partial Private Sub UpdateofPubsubSubscription(instance As ofPubsubSubscription)
    End Sub
  Partial Private Sub DeleteofPubsubSubscription(instance As ofPubsubSubscription)
    End Sub
  Partial Private Sub InsertofRemoteServerConf(instance As ofRemoteServerConf)
    End Sub
  Partial Private Sub UpdateofRemoteServerConf(instance As ofRemoteServerConf)
    End Sub
  Partial Private Sub DeleteofRemoteServerConf(instance As ofRemoteServerConf)
    End Sub
  Partial Private Sub InsertofRoster(instance As ofRoster)
    End Sub
  Partial Private Sub UpdateofRoster(instance As ofRoster)
    End Sub
  Partial Private Sub DeleteofRoster(instance As ofRoster)
    End Sub
  Partial Private Sub InsertofRosterGroups(instance As ofRosterGroups)
    End Sub
  Partial Private Sub UpdateofRosterGroups(instance As ofRosterGroups)
    End Sub
  Partial Private Sub DeleteofRosterGroups(instance As ofRosterGroups)
    End Sub
  Partial Private Sub InsertofRRDs(instance As ofRRDs)
    End Sub
  Partial Private Sub UpdateofRRDs(instance As ofRRDs)
    End Sub
  Partial Private Sub DeleteofRRDs(instance As ofRRDs)
    End Sub
  Partial Private Sub InsertofSASLAuthorized(instance As ofSASLAuthorized)
    End Sub
  Partial Private Sub UpdateofSASLAuthorized(instance As ofSASLAuthorized)
    End Sub
  Partial Private Sub DeleteofSASLAuthorized(instance As ofSASLAuthorized)
    End Sub
  Partial Private Sub InsertofSecurityAuditLog(instance As ofSecurityAuditLog)
    End Sub
  Partial Private Sub UpdateofSecurityAuditLog(instance As ofSecurityAuditLog)
    End Sub
  Partial Private Sub DeleteofSecurityAuditLog(instance As ofSecurityAuditLog)
    End Sub
  Partial Private Sub InsertofUser(instance As ofUser)
    End Sub
  Partial Private Sub UpdateofUser(instance As ofUser)
    End Sub
  Partial Private Sub DeleteofUser(instance As ofUser)
    End Sub
  Partial Private Sub InsertofUserFlag(instance As ofUserFlag)
    End Sub
  Partial Private Sub UpdateofUserFlag(instance As ofUserFlag)
    End Sub
  Partial Private Sub DeleteofUserFlag(instance As ofUserFlag)
    End Sub
  Partial Private Sub InsertofUserProp(instance As ofUserProp)
    End Sub
  Partial Private Sub UpdateofUserProp(instance As ofUserProp)
    End Sub
  Partial Private Sub DeleteofUserProp(instance As ofUserProp)
    End Sub
  Partial Private Sub InsertofVCard(instance As ofVCard)
    End Sub
  Partial Private Sub UpdateofVCard(instance As ofVCard)
    End Sub
  Partial Private Sub DeleteofVCard(instance As ofVCard)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("BRSOFConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property ofBookmark() As System.Data.Linq.Table(Of ofBookmark)
		Get
			Return Me.GetTable(Of ofBookmark)
		End Get
	End Property
	
	Public ReadOnly Property ofVersion() As System.Data.Linq.Table(Of ofVersion)
		Get
			Return Me.GetTable(Of ofVersion)
		End Get
	End Property
	
	Public ReadOnly Property ofBookmarkPerm() As System.Data.Linq.Table(Of ofBookmarkPerm)
		Get
			Return Me.GetTable(Of ofBookmarkPerm)
		End Get
	End Property
	
	Public ReadOnly Property ofBookmarkProp() As System.Data.Linq.Table(Of ofBookmarkProp)
		Get
			Return Me.GetTable(Of ofBookmarkProp)
		End Get
	End Property
	
	Public ReadOnly Property ofConParticipant() As System.Data.Linq.Table(Of ofConParticipant)
		Get
			Return Me.GetTable(Of ofConParticipant)
		End Get
	End Property
	
	Public ReadOnly Property ofConversation() As System.Data.Linq.Table(Of ofConversation)
		Get
			Return Me.GetTable(Of ofConversation)
		End Get
	End Property
	
	Public ReadOnly Property ofExtComponentConf() As System.Data.Linq.Table(Of ofExtComponentConf)
		Get
			Return Me.GetTable(Of ofExtComponentConf)
		End Get
	End Property
	
	Public ReadOnly Property ofGatewayAvatars() As System.Data.Linq.Table(Of ofGatewayAvatars)
		Get
			Return Me.GetTable(Of ofGatewayAvatars)
		End Get
	End Property
	
	Public ReadOnly Property ofGatewayPseudoRoster() As System.Data.Linq.Table(Of ofGatewayPseudoRoster)
		Get
			Return Me.GetTable(Of ofGatewayPseudoRoster)
		End Get
	End Property
	
	Public ReadOnly Property ofGatewayRegistration() As System.Data.Linq.Table(Of ofGatewayRegistration)
		Get
			Return Me.GetTable(Of ofGatewayRegistration)
		End Get
	End Property
	
	Public ReadOnly Property ofGatewayRestrictions() As System.Data.Linq.Table(Of ofGatewayRestrictions)
		Get
			Return Me.GetTable(Of ofGatewayRestrictions)
		End Get
	End Property
	
	Public ReadOnly Property ofGatewayVCards() As System.Data.Linq.Table(Of ofGatewayVCards)
		Get
			Return Me.GetTable(Of ofGatewayVCards)
		End Get
	End Property
	
	Public ReadOnly Property ofGroup() As System.Data.Linq.Table(Of ofGroup)
		Get
			Return Me.GetTable(Of ofGroup)
		End Get
	End Property
	
	Public ReadOnly Property ofGroupProp() As System.Data.Linq.Table(Of ofGroupProp)
		Get
			Return Me.GetTable(Of ofGroupProp)
		End Get
	End Property
	
	Public ReadOnly Property ofGroupUser() As System.Data.Linq.Table(Of ofGroupUser)
		Get
			Return Me.GetTable(Of ofGroupUser)
		End Get
	End Property
	
	Public ReadOnly Property ofID() As System.Data.Linq.Table(Of ofID)
		Get
			Return Me.GetTable(Of ofID)
		End Get
	End Property
	
	Public ReadOnly Property ofMessageArchive() As System.Data.Linq.Table(Of ofMessageArchive)
		Get
			Return Me.GetTable(Of ofMessageArchive)
		End Get
	End Property
	
	Public ReadOnly Property ofMucAffiliation() As System.Data.Linq.Table(Of ofMucAffiliation)
		Get
			Return Me.GetTable(Of ofMucAffiliation)
		End Get
	End Property
	
	Public ReadOnly Property ofMucConversationLog() As System.Data.Linq.Table(Of ofMucConversationLog)
		Get
			Return Me.GetTable(Of ofMucConversationLog)
		End Get
	End Property
	
	Public ReadOnly Property ofMucMember() As System.Data.Linq.Table(Of ofMucMember)
		Get
			Return Me.GetTable(Of ofMucMember)
		End Get
	End Property
	
	Public ReadOnly Property ofMucRoom() As System.Data.Linq.Table(Of ofMucRoom)
		Get
			Return Me.GetTable(Of ofMucRoom)
		End Get
	End Property
	
	Public ReadOnly Property ofMucRoomProp() As System.Data.Linq.Table(Of ofMucRoomProp)
		Get
			Return Me.GetTable(Of ofMucRoomProp)
		End Get
	End Property
	
	Public ReadOnly Property ofMucService() As System.Data.Linq.Table(Of ofMucService)
		Get
			Return Me.GetTable(Of ofMucService)
		End Get
	End Property
	
	Public ReadOnly Property ofMucServiceProp() As System.Data.Linq.Table(Of ofMucServiceProp)
		Get
			Return Me.GetTable(Of ofMucServiceProp)
		End Get
	End Property
	
	Public ReadOnly Property ofOffline() As System.Data.Linq.Table(Of ofOffline)
		Get
			Return Me.GetTable(Of ofOffline)
		End Get
	End Property
	
	Public ReadOnly Property ofPresence() As System.Data.Linq.Table(Of ofPresence)
		Get
			Return Me.GetTable(Of ofPresence)
		End Get
	End Property
	
	Public ReadOnly Property ofPrivacyList() As System.Data.Linq.Table(Of ofPrivacyList)
		Get
			Return Me.GetTable(Of ofPrivacyList)
		End Get
	End Property
	
	Public ReadOnly Property ofPrivate() As System.Data.Linq.Table(Of ofPrivate)
		Get
			Return Me.GetTable(Of ofPrivate)
		End Get
	End Property
	
	Public ReadOnly Property ofProperty() As System.Data.Linq.Table(Of ofProperty)
		Get
			Return Me.GetTable(Of ofProperty)
		End Get
	End Property
	
	Public ReadOnly Property ofPubsubAffiliation() As System.Data.Linq.Table(Of ofPubsubAffiliation)
		Get
			Return Me.GetTable(Of ofPubsubAffiliation)
		End Get
	End Property
	
	Public ReadOnly Property ofPubsubDefaultConf() As System.Data.Linq.Table(Of ofPubsubDefaultConf)
		Get
			Return Me.GetTable(Of ofPubsubDefaultConf)
		End Get
	End Property
	
	Public ReadOnly Property ofPubsubItem() As System.Data.Linq.Table(Of ofPubsubItem)
		Get
			Return Me.GetTable(Of ofPubsubItem)
		End Get
	End Property
	
	Public ReadOnly Property ofPubsubNode() As System.Data.Linq.Table(Of ofPubsubNode)
		Get
			Return Me.GetTable(Of ofPubsubNode)
		End Get
	End Property
	
	Public ReadOnly Property ofPubsubNodeGroups() As System.Data.Linq.Table(Of ofPubsubNodeGroups)
		Get
			Return Me.GetTable(Of ofPubsubNodeGroups)
		End Get
	End Property
	
	Public ReadOnly Property ofPubsubNodeJIDs() As System.Data.Linq.Table(Of ofPubsubNodeJIDs)
		Get
			Return Me.GetTable(Of ofPubsubNodeJIDs)
		End Get
	End Property
	
	Public ReadOnly Property ofPubsubSubscription() As System.Data.Linq.Table(Of ofPubsubSubscription)
		Get
			Return Me.GetTable(Of ofPubsubSubscription)
		End Get
	End Property
	
	Public ReadOnly Property ofRemoteServerConf() As System.Data.Linq.Table(Of ofRemoteServerConf)
		Get
			Return Me.GetTable(Of ofRemoteServerConf)
		End Get
	End Property
	
	Public ReadOnly Property ofRoster() As System.Data.Linq.Table(Of ofRoster)
		Get
			Return Me.GetTable(Of ofRoster)
		End Get
	End Property
	
	Public ReadOnly Property ofRosterGroups() As System.Data.Linq.Table(Of ofRosterGroups)
		Get
			Return Me.GetTable(Of ofRosterGroups)
		End Get
	End Property
	
	Public ReadOnly Property ofRRDs() As System.Data.Linq.Table(Of ofRRDs)
		Get
			Return Me.GetTable(Of ofRRDs)
		End Get
	End Property
	
	Public ReadOnly Property ofSASLAuthorized() As System.Data.Linq.Table(Of ofSASLAuthorized)
		Get
			Return Me.GetTable(Of ofSASLAuthorized)
		End Get
	End Property
	
	Public ReadOnly Property ofSecurityAuditLog() As System.Data.Linq.Table(Of ofSecurityAuditLog)
		Get
			Return Me.GetTable(Of ofSecurityAuditLog)
		End Get
	End Property
	
	Public ReadOnly Property ofUser() As System.Data.Linq.Table(Of ofUser)
		Get
			Return Me.GetTable(Of ofUser)
		End Get
	End Property
	
	Public ReadOnly Property ofUserFlag() As System.Data.Linq.Table(Of ofUserFlag)
		Get
			Return Me.GetTable(Of ofUserFlag)
		End Get
	End Property
	
	Public ReadOnly Property ofUserProp() As System.Data.Linq.Table(Of ofUserProp)
		Get
			Return Me.GetTable(Of ofUserProp)
		End Get
	End Property
	
	Public ReadOnly Property ofVCard() As System.Data.Linq.Table(Of ofVCard)
		Get
			Return Me.GetTable(Of ofVCard)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofBookmark")>  _
Partial Public Class ofBookmark
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _bookmarkID As Long
	
	Private _bookmarkType As String
	
	Private _bookmarkName As String
	
	Private _bookmarkValue As String
	
	Private _isGlobal As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnbookmarkIDChanging(value As Long)
    End Sub
    Partial Private Sub OnbookmarkIDChanged()
    End Sub
    Partial Private Sub OnbookmarkTypeChanging(value As String)
    End Sub
    Partial Private Sub OnbookmarkTypeChanged()
    End Sub
    Partial Private Sub OnbookmarkNameChanging(value As String)
    End Sub
    Partial Private Sub OnbookmarkNameChanged()
    End Sub
    Partial Private Sub OnbookmarkValueChanging(value As String)
    End Sub
    Partial Private Sub OnbookmarkValueChanged()
    End Sub
    Partial Private Sub OnisGlobalChanging(value As Integer)
    End Sub
    Partial Private Sub OnisGlobalChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bookmarkID", DbType:="BigInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property bookmarkID() As Long
		Get
			Return Me._bookmarkID
		End Get
		Set
			If ((Me._bookmarkID = value)  _
						= false) Then
				Me.OnbookmarkIDChanging(value)
				Me.SendPropertyChanging
				Me._bookmarkID = value
				Me.SendPropertyChanged("bookmarkID")
				Me.OnbookmarkIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bookmarkType", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property bookmarkType() As String
		Get
			Return Me._bookmarkType
		End Get
		Set
			If (String.Equals(Me._bookmarkType, value) = false) Then
				Me.OnbookmarkTypeChanging(value)
				Me.SendPropertyChanging
				Me._bookmarkType = value
				Me.SendPropertyChanged("bookmarkType")
				Me.OnbookmarkTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bookmarkName", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property bookmarkName() As String
		Get
			Return Me._bookmarkName
		End Get
		Set
			If (String.Equals(Me._bookmarkName, value) = false) Then
				Me.OnbookmarkNameChanging(value)
				Me.SendPropertyChanging
				Me._bookmarkName = value
				Me.SendPropertyChanged("bookmarkName")
				Me.OnbookmarkNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bookmarkValue", DbType:="NVarChar(1024) NOT NULL", CanBeNull:=false)>  _
	Public Property bookmarkValue() As String
		Get
			Return Me._bookmarkValue
		End Get
		Set
			If (String.Equals(Me._bookmarkValue, value) = false) Then
				Me.OnbookmarkValueChanging(value)
				Me.SendPropertyChanging
				Me._bookmarkValue = value
				Me.SendPropertyChanged("bookmarkValue")
				Me.OnbookmarkValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isGlobal", DbType:="Int NOT NULL")>  _
	Public Property isGlobal() As Integer
		Get
			Return Me._isGlobal
		End Get
		Set
			If ((Me._isGlobal = value)  _
						= false) Then
				Me.OnisGlobalChanging(value)
				Me.SendPropertyChanging
				Me._isGlobal = value
				Me.SendPropertyChanged("isGlobal")
				Me.OnisGlobalChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofVersion")>  _
Partial Public Class ofVersion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _name As String
	
	Private _version As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnversionChanging(value As Integer)
    End Sub
    Partial Private Sub OnversionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_version", DbType:="Int NOT NULL")>  _
	Public Property version() As Integer
		Get
			Return Me._version
		End Get
		Set
			If ((Me._version = value)  _
						= false) Then
				Me.OnversionChanging(value)
				Me.SendPropertyChanging
				Me._version = value
				Me.SendPropertyChanged("version")
				Me.OnversionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofBookmarkPerm")>  _
Partial Public Class ofBookmarkPerm
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _bookmarkID As Long
	
	Private _bookmarkType As Byte
	
	Private _name As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnbookmarkIDChanging(value As Long)
    End Sub
    Partial Private Sub OnbookmarkIDChanged()
    End Sub
    Partial Private Sub OnbookmarkTypeChanging(value As Byte)
    End Sub
    Partial Private Sub OnbookmarkTypeChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bookmarkID", DbType:="BigInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property bookmarkID() As Long
		Get
			Return Me._bookmarkID
		End Get
		Set
			If ((Me._bookmarkID = value)  _
						= false) Then
				Me.OnbookmarkIDChanging(value)
				Me.SendPropertyChanging
				Me._bookmarkID = value
				Me.SendPropertyChanged("bookmarkID")
				Me.OnbookmarkIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bookmarkType", DbType:="TinyInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property bookmarkType() As Byte
		Get
			Return Me._bookmarkType
		End Get
		Set
			If ((Me._bookmarkType = value)  _
						= false) Then
				Me.OnbookmarkTypeChanging(value)
				Me.SendPropertyChanging
				Me._bookmarkType = value
				Me.SendPropertyChanged("bookmarkType")
				Me.OnbookmarkTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofBookmarkProp")>  _
Partial Public Class ofBookmarkProp
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _bookmarkID As Long
	
	Private _name As String
	
	Private _propValue As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnbookmarkIDChanging(value As Long)
    End Sub
    Partial Private Sub OnbookmarkIDChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnpropValueChanging(value As String)
    End Sub
    Partial Private Sub OnpropValueChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bookmarkID", DbType:="BigInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property bookmarkID() As Long
		Get
			Return Me._bookmarkID
		End Get
		Set
			If ((Me._bookmarkID = value)  _
						= false) Then
				Me.OnbookmarkIDChanging(value)
				Me.SendPropertyChanging
				Me._bookmarkID = value
				Me.SendPropertyChanged("bookmarkID")
				Me.OnbookmarkIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_propValue", DbType:="NText NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property propValue() As String
		Get
			Return Me._propValue
		End Get
		Set
			If (String.Equals(Me._propValue, value) = false) Then
				Me.OnpropValueChanging(value)
				Me.SendPropertyChanging
				Me._propValue = value
				Me.SendPropertyChanged("propValue")
				Me.OnpropValueChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofConParticipant")>  _
Partial Public Class ofConParticipant
	
	Private _conversationID As Long
	
	Private _joinedDate As Long
	
	Private _leftDate As System.Nullable(Of Long)
	
	Private _bareJID As String
	
	Private _jidResource As String
	
	Private _nickname As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_conversationID", DbType:="BigInt NOT NULL")>  _
	Public Property conversationID() As Long
		Get
			Return Me._conversationID
		End Get
		Set
			If ((Me._conversationID = value)  _
						= false) Then
				Me._conversationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_joinedDate", DbType:="BigInt NOT NULL")>  _
	Public Property joinedDate() As Long
		Get
			Return Me._joinedDate
		End Get
		Set
			If ((Me._joinedDate = value)  _
						= false) Then
				Me._joinedDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_leftDate", DbType:="BigInt")>  _
	Public Property leftDate() As System.Nullable(Of Long)
		Get
			Return Me._leftDate
		End Get
		Set
			If (Me._leftDate.Equals(value) = false) Then
				Me._leftDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bareJID", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property bareJID() As String
		Get
			Return Me._bareJID
		End Get
		Set
			If (String.Equals(Me._bareJID, value) = false) Then
				Me._bareJID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_jidResource", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property jidResource() As String
		Get
			Return Me._jidResource
		End Get
		Set
			If (String.Equals(Me._jidResource, value) = false) Then
				Me._jidResource = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nickname", DbType:="NVarChar(255)")>  _
	Public Property nickname() As String
		Get
			Return Me._nickname
		End Get
		Set
			If (String.Equals(Me._nickname, value) = false) Then
				Me._nickname = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofConversation")>  _
Partial Public Class ofConversation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _conversationID As Long
	
	Private _room As String
	
	Private _isExternal As Byte
	
	Private _startDate As Long
	
	Private _lastActivity As Long
	
	Private _messageCount As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnconversationIDChanging(value As Long)
    End Sub
    Partial Private Sub OnconversationIDChanged()
    End Sub
    Partial Private Sub OnroomChanging(value As String)
    End Sub
    Partial Private Sub OnroomChanged()
    End Sub
    Partial Private Sub OnisExternalChanging(value As Byte)
    End Sub
    Partial Private Sub OnisExternalChanged()
    End Sub
    Partial Private Sub OnstartDateChanging(value As Long)
    End Sub
    Partial Private Sub OnstartDateChanged()
    End Sub
    Partial Private Sub OnlastActivityChanging(value As Long)
    End Sub
    Partial Private Sub OnlastActivityChanged()
    End Sub
    Partial Private Sub OnmessageCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnmessageCountChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_conversationID", DbType:="BigInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property conversationID() As Long
		Get
			Return Me._conversationID
		End Get
		Set
			If ((Me._conversationID = value)  _
						= false) Then
				Me.OnconversationIDChanging(value)
				Me.SendPropertyChanging
				Me._conversationID = value
				Me.SendPropertyChanged("conversationID")
				Me.OnconversationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_room", DbType:="NVarChar(1024)")>  _
	Public Property room() As String
		Get
			Return Me._room
		End Get
		Set
			If (String.Equals(Me._room, value) = false) Then
				Me.OnroomChanging(value)
				Me.SendPropertyChanging
				Me._room = value
				Me.SendPropertyChanged("room")
				Me.OnroomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isExternal", DbType:="TinyInt NOT NULL")>  _
	Public Property isExternal() As Byte
		Get
			Return Me._isExternal
		End Get
		Set
			If ((Me._isExternal = value)  _
						= false) Then
				Me.OnisExternalChanging(value)
				Me.SendPropertyChanging
				Me._isExternal = value
				Me.SendPropertyChanged("isExternal")
				Me.OnisExternalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startDate", DbType:="BigInt NOT NULL")>  _
	Public Property startDate() As Long
		Get
			Return Me._startDate
		End Get
		Set
			If ((Me._startDate = value)  _
						= false) Then
				Me.OnstartDateChanging(value)
				Me.SendPropertyChanging
				Me._startDate = value
				Me.SendPropertyChanged("startDate")
				Me.OnstartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastActivity", DbType:="BigInt NOT NULL")>  _
	Public Property lastActivity() As Long
		Get
			Return Me._lastActivity
		End Get
		Set
			If ((Me._lastActivity = value)  _
						= false) Then
				Me.OnlastActivityChanging(value)
				Me.SendPropertyChanging
				Me._lastActivity = value
				Me.SendPropertyChanged("lastActivity")
				Me.OnlastActivityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_messageCount", DbType:="Int NOT NULL")>  _
	Public Property messageCount() As Integer
		Get
			Return Me._messageCount
		End Get
		Set
			If ((Me._messageCount = value)  _
						= false) Then
				Me.OnmessageCountChanging(value)
				Me.SendPropertyChanging
				Me._messageCount = value
				Me.SendPropertyChanged("messageCount")
				Me.OnmessageCountChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofExtComponentConf")>  _
Partial Public Class ofExtComponentConf
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _subdomain As String
	
	Private _wildcard As Integer
	
	Private _secret As String
	
	Private _permission As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnsubdomainChanging(value As String)
    End Sub
    Partial Private Sub OnsubdomainChanged()
    End Sub
    Partial Private Sub OnwildcardChanging(value As Integer)
    End Sub
    Partial Private Sub OnwildcardChanged()
    End Sub
    Partial Private Sub OnsecretChanging(value As String)
    End Sub
    Partial Private Sub OnsecretChanged()
    End Sub
    Partial Private Sub OnpermissionChanging(value As String)
    End Sub
    Partial Private Sub OnpermissionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_subdomain", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property subdomain() As String
		Get
			Return Me._subdomain
		End Get
		Set
			If (String.Equals(Me._subdomain, value) = false) Then
				Me.OnsubdomainChanging(value)
				Me.SendPropertyChanging
				Me._subdomain = value
				Me.SendPropertyChanged("subdomain")
				Me.OnsubdomainChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_wildcard", DbType:="Int NOT NULL")>  _
	Public Property wildcard() As Integer
		Get
			Return Me._wildcard
		End Get
		Set
			If ((Me._wildcard = value)  _
						= false) Then
				Me.OnwildcardChanging(value)
				Me.SendPropertyChanging
				Me._wildcard = value
				Me.SendPropertyChanged("wildcard")
				Me.OnwildcardChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_secret", DbType:="NVarChar(255)")>  _
	Public Property secret() As String
		Get
			Return Me._secret
		End Get
		Set
			If (String.Equals(Me._secret, value) = false) Then
				Me.OnsecretChanging(value)
				Me.SendPropertyChanging
				Me._secret = value
				Me.SendPropertyChanged("secret")
				Me.OnsecretChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_permission", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property permission() As String
		Get
			Return Me._permission
		End Get
		Set
			If (String.Equals(Me._permission, value) = false) Then
				Me.OnpermissionChanging(value)
				Me.SendPropertyChanging
				Me._permission = value
				Me.SendPropertyChanged("permission")
				Me.OnpermissionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofGatewayAvatars")>  _
Partial Public Class ofGatewayAvatars
	
	Private _jid As String
	
	Private _imageData As String
	
	Private _xmppHash As String
	
	Private _legacyIdentifier As String
	
	Private _createDate As Long
	
	Private _lastUpdate As System.Nullable(Of Long)
	
	Private _imageType As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_jid", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property jid() As String
		Get
			Return Me._jid
		End Get
		Set
			If (String.Equals(Me._jid, value) = false) Then
				Me._jid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_imageData", DbType:="NText NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property imageData() As String
		Get
			Return Me._imageData
		End Get
		Set
			If (String.Equals(Me._imageData, value) = false) Then
				Me._imageData = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_xmppHash", DbType:="NVarChar(255)")>  _
	Public Property xmppHash() As String
		Get
			Return Me._xmppHash
		End Get
		Set
			If (String.Equals(Me._xmppHash, value) = false) Then
				Me._xmppHash = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_legacyIdentifier", DbType:="NVarChar(255)")>  _
	Public Property legacyIdentifier() As String
		Get
			Return Me._legacyIdentifier
		End Get
		Set
			If (String.Equals(Me._legacyIdentifier, value) = false) Then
				Me._legacyIdentifier = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createDate", DbType:="BigInt NOT NULL")>  _
	Public Property createDate() As Long
		Get
			Return Me._createDate
		End Get
		Set
			If ((Me._createDate = value)  _
						= false) Then
				Me._createDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastUpdate", DbType:="BigInt")>  _
	Public Property lastUpdate() As System.Nullable(Of Long)
		Get
			Return Me._lastUpdate
		End Get
		Set
			If (Me._lastUpdate.Equals(value) = false) Then
				Me._lastUpdate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_imageType", DbType:="NVarChar(25)")>  _
	Public Property imageType() As String
		Get
			Return Me._imageType
		End Get
		Set
			If (String.Equals(Me._imageType, value) = false) Then
				Me._imageType = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofGatewayPseudoRoster")>  _
Partial Public Class ofGatewayPseudoRoster
	
	Private _registrationID As Long
	
	Private _username As String
	
	Private _nickname As String
	
	Private _groups As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_registrationID", DbType:="BigInt NOT NULL")>  _
	Public Property registrationID() As Long
		Get
			Return Me._registrationID
		End Get
		Set
			If ((Me._registrationID = value)  _
						= false) Then
				Me._registrationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				Me._username = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nickname", DbType:="NVarChar(255)")>  _
	Public Property nickname() As String
		Get
			Return Me._nickname
		End Get
		Set
			If (String.Equals(Me._nickname, value) = false) Then
				Me._nickname = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_groups", DbType:="NVarChar(255)")>  _
	Public Property groups() As String
		Get
			Return Me._groups
		End Get
		Set
			If (String.Equals(Me._groups, value) = false) Then
				Me._groups = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofGatewayRegistration")>  _
Partial Public Class ofGatewayRegistration
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _registrationID As Long
	
	Private _jid As String
	
	Private _transportType As String
	
	Private _username As String
	
	Private _password As String
	
	Private _nickname As String
	
	Private _registrationDate As Long
	
	Private _lastLogin As System.Nullable(Of Long)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnregistrationIDChanging(value As Long)
    End Sub
    Partial Private Sub OnregistrationIDChanged()
    End Sub
    Partial Private Sub OnjidChanging(value As String)
    End Sub
    Partial Private Sub OnjidChanged()
    End Sub
    Partial Private Sub OntransportTypeChanging(value As String)
    End Sub
    Partial Private Sub OntransportTypeChanged()
    End Sub
    Partial Private Sub OnusernameChanging(value As String)
    End Sub
    Partial Private Sub OnusernameChanged()
    End Sub
    Partial Private Sub OnpasswordChanging(value As String)
    End Sub
    Partial Private Sub OnpasswordChanged()
    End Sub
    Partial Private Sub OnnicknameChanging(value As String)
    End Sub
    Partial Private Sub OnnicknameChanged()
    End Sub
    Partial Private Sub OnregistrationDateChanging(value As Long)
    End Sub
    Partial Private Sub OnregistrationDateChanged()
    End Sub
    Partial Private Sub OnlastLoginChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnlastLoginChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_registrationID", DbType:="BigInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property registrationID() As Long
		Get
			Return Me._registrationID
		End Get
		Set
			If ((Me._registrationID = value)  _
						= false) Then
				Me.OnregistrationIDChanging(value)
				Me.SendPropertyChanging
				Me._registrationID = value
				Me.SendPropertyChanged("registrationID")
				Me.OnregistrationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_jid", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property jid() As String
		Get
			Return Me._jid
		End Get
		Set
			If (String.Equals(Me._jid, value) = false) Then
				Me.OnjidChanging(value)
				Me.SendPropertyChanging
				Me._jid = value
				Me.SendPropertyChanged("jid")
				Me.OnjidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_transportType", DbType:="NVarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property transportType() As String
		Get
			Return Me._transportType
		End Get
		Set
			If (String.Equals(Me._transportType, value) = false) Then
				Me.OntransportTypeChanging(value)
				Me.SendPropertyChanging
				Me._transportType = value
				Me.SendPropertyChanged("transportType")
				Me.OntransportTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				Me.OnusernameChanging(value)
				Me.SendPropertyChanging
				Me._username = value
				Me.SendPropertyChanged("username")
				Me.OnusernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_password", DbType:="NVarChar(255)")>  _
	Public Property password() As String
		Get
			Return Me._password
		End Get
		Set
			If (String.Equals(Me._password, value) = false) Then
				Me.OnpasswordChanging(value)
				Me.SendPropertyChanging
				Me._password = value
				Me.SendPropertyChanged("password")
				Me.OnpasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nickname", DbType:="NVarChar(255)")>  _
	Public Property nickname() As String
		Get
			Return Me._nickname
		End Get
		Set
			If (String.Equals(Me._nickname, value) = false) Then
				Me.OnnicknameChanging(value)
				Me.SendPropertyChanging
				Me._nickname = value
				Me.SendPropertyChanged("nickname")
				Me.OnnicknameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_registrationDate", DbType:="BigInt NOT NULL")>  _
	Public Property registrationDate() As Long
		Get
			Return Me._registrationDate
		End Get
		Set
			If ((Me._registrationDate = value)  _
						= false) Then
				Me.OnregistrationDateChanging(value)
				Me.SendPropertyChanging
				Me._registrationDate = value
				Me.SendPropertyChanged("registrationDate")
				Me.OnregistrationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastLogin", DbType:="BigInt")>  _
	Public Property lastLogin() As System.Nullable(Of Long)
		Get
			Return Me._lastLogin
		End Get
		Set
			If (Me._lastLogin.Equals(value) = false) Then
				Me.OnlastLoginChanging(value)
				Me.SendPropertyChanging
				Me._lastLogin = value
				Me.SendPropertyChanged("lastLogin")
				Me.OnlastLoginChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofGatewayRestrictions")>  _
Partial Public Class ofGatewayRestrictions
	
	Private _transportType As String
	
	Private _username As String
	
	Private _groupname As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_transportType", DbType:="NVarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property transportType() As String
		Get
			Return Me._transportType
		End Get
		Set
			If (String.Equals(Me._transportType, value) = false) Then
				Me._transportType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="NVarChar(255)")>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				Me._username = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_groupname", DbType:="NVarChar(50)")>  _
	Public Property groupname() As String
		Get
			Return Me._groupname
		End Get
		Set
			If (String.Equals(Me._groupname, value) = false) Then
				Me._groupname = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofGatewayVCards")>  _
Partial Public Class ofGatewayVCards
	
	Private _jid As String
	
	Private _value As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_jid", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property jid() As String
		Get
			Return Me._jid
		End Get
		Set
			If (String.Equals(Me._jid, value) = false) Then
				Me._jid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_value", DbType:="NText NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property value() As String
		Get
			Return Me._value
		End Get
		Set
			If (String.Equals(Me._value, value) = false) Then
				Me._value = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofGroup")>  _
Partial Public Class ofGroup
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _groupName As String
	
	Private _description As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OngroupNameChanging(value As String)
    End Sub
    Partial Private Sub OngroupNameChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_groupName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property groupName() As String
		Get
			Return Me._groupName
		End Get
		Set
			If (String.Equals(Me._groupName, value) = false) Then
				Me.OngroupNameChanging(value)
				Me.SendPropertyChanging
				Me._groupName = value
				Me.SendPropertyChanged("groupName")
				Me.OngroupNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="NVarChar(255)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofGroupProp")>  _
Partial Public Class ofGroupProp
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _groupName As String
	
	Private _name As String
	
	Private _propValue As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OngroupNameChanging(value As String)
    End Sub
    Partial Private Sub OngroupNameChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnpropValueChanging(value As String)
    End Sub
    Partial Private Sub OnpropValueChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_groupName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property groupName() As String
		Get
			Return Me._groupName
		End Get
		Set
			If (String.Equals(Me._groupName, value) = false) Then
				Me.OngroupNameChanging(value)
				Me.SendPropertyChanging
				Me._groupName = value
				Me.SendPropertyChanged("groupName")
				Me.OngroupNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_propValue", DbType:="NVarChar(2000) NOT NULL", CanBeNull:=false)>  _
	Public Property propValue() As String
		Get
			Return Me._propValue
		End Get
		Set
			If (String.Equals(Me._propValue, value) = false) Then
				Me.OnpropValueChanging(value)
				Me.SendPropertyChanging
				Me._propValue = value
				Me.SendPropertyChanged("propValue")
				Me.OnpropValueChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofGroupUser")>  _
Partial Public Class ofGroupUser
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _groupName As String
	
	Private _username As String
	
	Private _administrator As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OngroupNameChanging(value As String)
    End Sub
    Partial Private Sub OngroupNameChanged()
    End Sub
    Partial Private Sub OnusernameChanging(value As String)
    End Sub
    Partial Private Sub OnusernameChanged()
    End Sub
    Partial Private Sub OnadministratorChanging(value As Integer)
    End Sub
    Partial Private Sub OnadministratorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_groupName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property groupName() As String
		Get
			Return Me._groupName
		End Get
		Set
			If (String.Equals(Me._groupName, value) = false) Then
				Me.OngroupNameChanging(value)
				Me.SendPropertyChanging
				Me._groupName = value
				Me.SendPropertyChanged("groupName")
				Me.OngroupNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				Me.OnusernameChanging(value)
				Me.SendPropertyChanging
				Me._username = value
				Me.SendPropertyChanged("username")
				Me.OnusernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_administrator", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property administrator() As Integer
		Get
			Return Me._administrator
		End Get
		Set
			If ((Me._administrator = value)  _
						= false) Then
				Me.OnadministratorChanging(value)
				Me.SendPropertyChanging
				Me._administrator = value
				Me.SendPropertyChanged("administrator")
				Me.OnadministratorChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofID")>  _
Partial Public Class ofID
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idType As Integer
	
	Private _id As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidTypeChanging(value As Integer)
    End Sub
    Partial Private Sub OnidTypeChanged()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idType", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property idType() As Integer
		Get
			Return Me._idType
		End Get
		Set
			If ((Me._idType = value)  _
						= false) Then
				Me.OnidTypeChanging(value)
				Me.SendPropertyChanging
				Me._idType = value
				Me.SendPropertyChanged("idType")
				Me.OnidTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="Int NOT NULL")>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofMessageArchive")>  _
Partial Public Class ofMessageArchive
	
	Private _conversationID As Long
	
	Private _fromJID As String
	
	Private _toJID As String
	
	Private _sentDate As Long
	
	Private _body As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_conversationID", DbType:="BigInt NOT NULL")>  _
	Public Property conversationID() As Long
		Get
			Return Me._conversationID
		End Get
		Set
			If ((Me._conversationID = value)  _
						= false) Then
				Me._conversationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fromJID", DbType:="NVarChar(1024) NOT NULL", CanBeNull:=false)>  _
	Public Property fromJID() As String
		Get
			Return Me._fromJID
		End Get
		Set
			If (String.Equals(Me._fromJID, value) = false) Then
				Me._fromJID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_toJID", DbType:="NVarChar(1024) NOT NULL", CanBeNull:=false)>  _
	Public Property toJID() As String
		Get
			Return Me._toJID
		End Get
		Set
			If (String.Equals(Me._toJID, value) = false) Then
				Me._toJID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sentDate", DbType:="BigInt NOT NULL")>  _
	Public Property sentDate() As Long
		Get
			Return Me._sentDate
		End Get
		Set
			If ((Me._sentDate = value)  _
						= false) Then
				Me._sentDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_body", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property body() As String
		Get
			Return Me._body
		End Get
		Set
			If (String.Equals(Me._body, value) = false) Then
				Me._body = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofMucAffiliation")>  _
Partial Public Class ofMucAffiliation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _roomID As Integer
	
	Private _jid As String
	
	Private _affiliation As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnroomIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnroomIDChanged()
    End Sub
    Partial Private Sub OnjidChanging(value As String)
    End Sub
    Partial Private Sub OnjidChanged()
    End Sub
    Partial Private Sub OnaffiliationChanging(value As Integer)
    End Sub
    Partial Private Sub OnaffiliationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_roomID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property roomID() As Integer
		Get
			Return Me._roomID
		End Get
		Set
			If ((Me._roomID = value)  _
						= false) Then
				Me.OnroomIDChanging(value)
				Me.SendPropertyChanging
				Me._roomID = value
				Me.SendPropertyChanged("roomID")
				Me.OnroomIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_jid", DbType:="NVarChar(424) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property jid() As String
		Get
			Return Me._jid
		End Get
		Set
			If (String.Equals(Me._jid, value) = false) Then
				Me.OnjidChanging(value)
				Me.SendPropertyChanging
				Me._jid = value
				Me.SendPropertyChanged("jid")
				Me.OnjidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_affiliation", DbType:="Int NOT NULL")>  _
	Public Property affiliation() As Integer
		Get
			Return Me._affiliation
		End Get
		Set
			If ((Me._affiliation = value)  _
						= false) Then
				Me.OnaffiliationChanging(value)
				Me.SendPropertyChanging
				Me._affiliation = value
				Me.SendPropertyChanged("affiliation")
				Me.OnaffiliationChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofMucConversationLog")>  _
Partial Public Class ofMucConversationLog
	
	Private _roomID As Integer
	
	Private _sender As String
	
	Private _nickname As String
	
	Private _logTime As String
	
	Private _subject As String
	
	Private _body As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_roomID", DbType:="Int NOT NULL")>  _
	Public Property roomID() As Integer
		Get
			Return Me._roomID
		End Get
		Set
			If ((Me._roomID = value)  _
						= false) Then
				Me._roomID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sender", DbType:="NVarChar(1024) NOT NULL", CanBeNull:=false)>  _
	Public Property sender() As String
		Get
			Return Me._sender
		End Get
		Set
			If (String.Equals(Me._sender, value) = false) Then
				Me._sender = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nickname", DbType:="NVarChar(255)")>  _
	Public Property nickname() As String
		Get
			Return Me._nickname
		End Get
		Set
			If (String.Equals(Me._nickname, value) = false) Then
				Me._nickname = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_logTime", DbType:="Char(15) NOT NULL", CanBeNull:=false)>  _
	Public Property logTime() As String
		Get
			Return Me._logTime
		End Get
		Set
			If (String.Equals(Me._logTime, value) = false) Then
				Me._logTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_subject", DbType:="NVarChar(255)")>  _
	Public Property subject() As String
		Get
			Return Me._subject
		End Get
		Set
			If (String.Equals(Me._subject, value) = false) Then
				Me._subject = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_body", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property body() As String
		Get
			Return Me._body
		End Get
		Set
			If (String.Equals(Me._body, value) = false) Then
				Me._body = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofMucMember")>  _
Partial Public Class ofMucMember
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _roomID As Integer
	
	Private _jid As String
	
	Private _nickname As String
	
	Private _firstName As String
	
	Private _lastName As String
	
	Private _url As String
	
	Private _email As String
	
	Private _faqentry As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnroomIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnroomIDChanged()
    End Sub
    Partial Private Sub OnjidChanging(value As String)
    End Sub
    Partial Private Sub OnjidChanged()
    End Sub
    Partial Private Sub OnnicknameChanging(value As String)
    End Sub
    Partial Private Sub OnnicknameChanged()
    End Sub
    Partial Private Sub OnfirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnfirstNameChanged()
    End Sub
    Partial Private Sub OnlastNameChanging(value As String)
    End Sub
    Partial Private Sub OnlastNameChanged()
    End Sub
    Partial Private Sub OnurlChanging(value As String)
    End Sub
    Partial Private Sub OnurlChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub OnfaqentryChanging(value As String)
    End Sub
    Partial Private Sub OnfaqentryChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_roomID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property roomID() As Integer
		Get
			Return Me._roomID
		End Get
		Set
			If ((Me._roomID = value)  _
						= false) Then
				Me.OnroomIDChanging(value)
				Me.SendPropertyChanging
				Me._roomID = value
				Me.SendPropertyChanged("roomID")
				Me.OnroomIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_jid", DbType:="NVarChar(424) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property jid() As String
		Get
			Return Me._jid
		End Get
		Set
			If (String.Equals(Me._jid, value) = false) Then
				Me.OnjidChanging(value)
				Me.SendPropertyChanging
				Me._jid = value
				Me.SendPropertyChanged("jid")
				Me.OnjidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nickname", DbType:="NVarChar(255)")>  _
	Public Property nickname() As String
		Get
			Return Me._nickname
		End Get
		Set
			If (String.Equals(Me._nickname, value) = false) Then
				Me.OnnicknameChanging(value)
				Me.SendPropertyChanging
				Me._nickname = value
				Me.SendPropertyChanged("nickname")
				Me.OnnicknameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_firstName", DbType:="NVarChar(100)")>  _
	Public Property firstName() As String
		Get
			Return Me._firstName
		End Get
		Set
			If (String.Equals(Me._firstName, value) = false) Then
				Me.OnfirstNameChanging(value)
				Me.SendPropertyChanging
				Me._firstName = value
				Me.SendPropertyChanged("firstName")
				Me.OnfirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastName", DbType:="NVarChar(100)")>  _
	Public Property lastName() As String
		Get
			Return Me._lastName
		End Get
		Set
			If (String.Equals(Me._lastName, value) = false) Then
				Me.OnlastNameChanging(value)
				Me.SendPropertyChanging
				Me._lastName = value
				Me.SendPropertyChanged("lastName")
				Me.OnlastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_url", DbType:="NVarChar(100)")>  _
	Public Property url() As String
		Get
			Return Me._url
		End Get
		Set
			If (String.Equals(Me._url, value) = false) Then
				Me.OnurlChanging(value)
				Me.SendPropertyChanging
				Me._url = value
				Me.SendPropertyChanged("url")
				Me.OnurlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="NVarChar(100)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_faqentry", DbType:="NVarChar(100)")>  _
	Public Property faqentry() As String
		Get
			Return Me._faqentry
		End Get
		Set
			If (String.Equals(Me._faqentry, value) = false) Then
				Me.OnfaqentryChanging(value)
				Me.SendPropertyChanging
				Me._faqentry = value
				Me.SendPropertyChanged("faqentry")
				Me.OnfaqentryChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofMucRoom")>  _
Partial Public Class ofMucRoom
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _serviceID As Integer
	
	Private _roomID As Integer
	
	Private _creationDate As String
	
	Private _modificationDate As String
	
	Private _name As String
	
	Private _naturalName As String
	
	Private _description As String
	
	Private _lockedDate As String
	
	Private _emptyDate As String
	
	Private _canChangeSubject As Integer
	
	Private _maxUsers As Integer
	
	Private _publicRoom As Integer
	
	Private _moderated As Integer
	
	Private _membersOnly As Integer
	
	Private _canInvite As Integer
	
	Private _roomPassword As String
	
	Private _canDiscoverJID As Integer
	
	Private _logEnabled As Integer
	
	Private _subject As String
	
	Private _rolesToBroadcast As Integer
	
	Private _useReservedNick As Integer
	
	Private _canChangeNick As Integer
	
	Private _canRegister As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnserviceIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnserviceIDChanged()
    End Sub
    Partial Private Sub OnroomIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnroomIDChanged()
    End Sub
    Partial Private Sub OncreationDateChanging(value As String)
    End Sub
    Partial Private Sub OncreationDateChanged()
    End Sub
    Partial Private Sub OnmodificationDateChanging(value As String)
    End Sub
    Partial Private Sub OnmodificationDateChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnnaturalNameChanging(value As String)
    End Sub
    Partial Private Sub OnnaturalNameChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub OnlockedDateChanging(value As String)
    End Sub
    Partial Private Sub OnlockedDateChanged()
    End Sub
    Partial Private Sub OnemptyDateChanging(value As String)
    End Sub
    Partial Private Sub OnemptyDateChanged()
    End Sub
    Partial Private Sub OncanChangeSubjectChanging(value As Integer)
    End Sub
    Partial Private Sub OncanChangeSubjectChanged()
    End Sub
    Partial Private Sub OnmaxUsersChanging(value As Integer)
    End Sub
    Partial Private Sub OnmaxUsersChanged()
    End Sub
    Partial Private Sub OnpublicRoomChanging(value As Integer)
    End Sub
    Partial Private Sub OnpublicRoomChanged()
    End Sub
    Partial Private Sub OnmoderatedChanging(value As Integer)
    End Sub
    Partial Private Sub OnmoderatedChanged()
    End Sub
    Partial Private Sub OnmembersOnlyChanging(value As Integer)
    End Sub
    Partial Private Sub OnmembersOnlyChanged()
    End Sub
    Partial Private Sub OncanInviteChanging(value As Integer)
    End Sub
    Partial Private Sub OncanInviteChanged()
    End Sub
    Partial Private Sub OnroomPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnroomPasswordChanged()
    End Sub
    Partial Private Sub OncanDiscoverJIDChanging(value As Integer)
    End Sub
    Partial Private Sub OncanDiscoverJIDChanged()
    End Sub
    Partial Private Sub OnlogEnabledChanging(value As Integer)
    End Sub
    Partial Private Sub OnlogEnabledChanged()
    End Sub
    Partial Private Sub OnsubjectChanging(value As String)
    End Sub
    Partial Private Sub OnsubjectChanged()
    End Sub
    Partial Private Sub OnrolesToBroadcastChanging(value As Integer)
    End Sub
    Partial Private Sub OnrolesToBroadcastChanged()
    End Sub
    Partial Private Sub OnuseReservedNickChanging(value As Integer)
    End Sub
    Partial Private Sub OnuseReservedNickChanged()
    End Sub
    Partial Private Sub OncanChangeNickChanging(value As Integer)
    End Sub
    Partial Private Sub OncanChangeNickChanged()
    End Sub
    Partial Private Sub OncanRegisterChanging(value As Integer)
    End Sub
    Partial Private Sub OncanRegisterChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_serviceID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property serviceID() As Integer
		Get
			Return Me._serviceID
		End Get
		Set
			If ((Me._serviceID = value)  _
						= false) Then
				Me.OnserviceIDChanging(value)
				Me.SendPropertyChanging
				Me._serviceID = value
				Me.SendPropertyChanged("serviceID")
				Me.OnserviceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_roomID", DbType:="Int NOT NULL")>  _
	Public Property roomID() As Integer
		Get
			Return Me._roomID
		End Get
		Set
			If ((Me._roomID = value)  _
						= false) Then
				Me.OnroomIDChanging(value)
				Me.SendPropertyChanging
				Me._roomID = value
				Me.SendPropertyChanged("roomID")
				Me.OnroomIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_creationDate", DbType:="Char(15) NOT NULL", CanBeNull:=false)>  _
	Public Property creationDate() As String
		Get
			Return Me._creationDate
		End Get
		Set
			If (String.Equals(Me._creationDate, value) = false) Then
				Me.OncreationDateChanging(value)
				Me.SendPropertyChanging
				Me._creationDate = value
				Me.SendPropertyChanged("creationDate")
				Me.OncreationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modificationDate", DbType:="Char(15) NOT NULL", CanBeNull:=false)>  _
	Public Property modificationDate() As String
		Get
			Return Me._modificationDate
		End Get
		Set
			If (String.Equals(Me._modificationDate, value) = false) Then
				Me.OnmodificationDateChanging(value)
				Me.SendPropertyChanging
				Me._modificationDate = value
				Me.SendPropertyChanged("modificationDate")
				Me.OnmodificationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_naturalName", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property naturalName() As String
		Get
			Return Me._naturalName
		End Get
		Set
			If (String.Equals(Me._naturalName, value) = false) Then
				Me.OnnaturalNameChanging(value)
				Me.SendPropertyChanging
				Me._naturalName = value
				Me.SendPropertyChanged("naturalName")
				Me.OnnaturalNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="NVarChar(255)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lockedDate", DbType:="Char(15) NOT NULL", CanBeNull:=false)>  _
	Public Property lockedDate() As String
		Get
			Return Me._lockedDate
		End Get
		Set
			If (String.Equals(Me._lockedDate, value) = false) Then
				Me.OnlockedDateChanging(value)
				Me.SendPropertyChanging
				Me._lockedDate = value
				Me.SendPropertyChanged("lockedDate")
				Me.OnlockedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_emptyDate", DbType:="Char(15)")>  _
	Public Property emptyDate() As String
		Get
			Return Me._emptyDate
		End Get
		Set
			If (String.Equals(Me._emptyDate, value) = false) Then
				Me.OnemptyDateChanging(value)
				Me.SendPropertyChanging
				Me._emptyDate = value
				Me.SendPropertyChanged("emptyDate")
				Me.OnemptyDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_canChangeSubject", DbType:="Int NOT NULL")>  _
	Public Property canChangeSubject() As Integer
		Get
			Return Me._canChangeSubject
		End Get
		Set
			If ((Me._canChangeSubject = value)  _
						= false) Then
				Me.OncanChangeSubjectChanging(value)
				Me.SendPropertyChanging
				Me._canChangeSubject = value
				Me.SendPropertyChanged("canChangeSubject")
				Me.OncanChangeSubjectChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_maxUsers", DbType:="Int NOT NULL")>  _
	Public Property maxUsers() As Integer
		Get
			Return Me._maxUsers
		End Get
		Set
			If ((Me._maxUsers = value)  _
						= false) Then
				Me.OnmaxUsersChanging(value)
				Me.SendPropertyChanging
				Me._maxUsers = value
				Me.SendPropertyChanged("maxUsers")
				Me.OnmaxUsersChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_publicRoom", DbType:="Int NOT NULL")>  _
	Public Property publicRoom() As Integer
		Get
			Return Me._publicRoom
		End Get
		Set
			If ((Me._publicRoom = value)  _
						= false) Then
				Me.OnpublicRoomChanging(value)
				Me.SendPropertyChanging
				Me._publicRoom = value
				Me.SendPropertyChanged("publicRoom")
				Me.OnpublicRoomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_moderated", DbType:="Int NOT NULL")>  _
	Public Property moderated() As Integer
		Get
			Return Me._moderated
		End Get
		Set
			If ((Me._moderated = value)  _
						= false) Then
				Me.OnmoderatedChanging(value)
				Me.SendPropertyChanging
				Me._moderated = value
				Me.SendPropertyChanged("moderated")
				Me.OnmoderatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_membersOnly", DbType:="Int NOT NULL")>  _
	Public Property membersOnly() As Integer
		Get
			Return Me._membersOnly
		End Get
		Set
			If ((Me._membersOnly = value)  _
						= false) Then
				Me.OnmembersOnlyChanging(value)
				Me.SendPropertyChanging
				Me._membersOnly = value
				Me.SendPropertyChanged("membersOnly")
				Me.OnmembersOnlyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_canInvite", DbType:="Int NOT NULL")>  _
	Public Property canInvite() As Integer
		Get
			Return Me._canInvite
		End Get
		Set
			If ((Me._canInvite = value)  _
						= false) Then
				Me.OncanInviteChanging(value)
				Me.SendPropertyChanging
				Me._canInvite = value
				Me.SendPropertyChanged("canInvite")
				Me.OncanInviteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_roomPassword", DbType:="NVarChar(50)")>  _
	Public Property roomPassword() As String
		Get
			Return Me._roomPassword
		End Get
		Set
			If (String.Equals(Me._roomPassword, value) = false) Then
				Me.OnroomPasswordChanging(value)
				Me.SendPropertyChanging
				Me._roomPassword = value
				Me.SendPropertyChanged("roomPassword")
				Me.OnroomPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_canDiscoverJID", DbType:="Int NOT NULL")>  _
	Public Property canDiscoverJID() As Integer
		Get
			Return Me._canDiscoverJID
		End Get
		Set
			If ((Me._canDiscoverJID = value)  _
						= false) Then
				Me.OncanDiscoverJIDChanging(value)
				Me.SendPropertyChanging
				Me._canDiscoverJID = value
				Me.SendPropertyChanged("canDiscoverJID")
				Me.OncanDiscoverJIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_logEnabled", DbType:="Int NOT NULL")>  _
	Public Property logEnabled() As Integer
		Get
			Return Me._logEnabled
		End Get
		Set
			If ((Me._logEnabled = value)  _
						= false) Then
				Me.OnlogEnabledChanging(value)
				Me.SendPropertyChanging
				Me._logEnabled = value
				Me.SendPropertyChanged("logEnabled")
				Me.OnlogEnabledChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_subject", DbType:="NVarChar(100)")>  _
	Public Property subject() As String
		Get
			Return Me._subject
		End Get
		Set
			If (String.Equals(Me._subject, value) = false) Then
				Me.OnsubjectChanging(value)
				Me.SendPropertyChanging
				Me._subject = value
				Me.SendPropertyChanged("subject")
				Me.OnsubjectChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rolesToBroadcast", DbType:="Int NOT NULL")>  _
	Public Property rolesToBroadcast() As Integer
		Get
			Return Me._rolesToBroadcast
		End Get
		Set
			If ((Me._rolesToBroadcast = value)  _
						= false) Then
				Me.OnrolesToBroadcastChanging(value)
				Me.SendPropertyChanging
				Me._rolesToBroadcast = value
				Me.SendPropertyChanged("rolesToBroadcast")
				Me.OnrolesToBroadcastChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_useReservedNick", DbType:="Int NOT NULL")>  _
	Public Property useReservedNick() As Integer
		Get
			Return Me._useReservedNick
		End Get
		Set
			If ((Me._useReservedNick = value)  _
						= false) Then
				Me.OnuseReservedNickChanging(value)
				Me.SendPropertyChanging
				Me._useReservedNick = value
				Me.SendPropertyChanged("useReservedNick")
				Me.OnuseReservedNickChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_canChangeNick", DbType:="Int NOT NULL")>  _
	Public Property canChangeNick() As Integer
		Get
			Return Me._canChangeNick
		End Get
		Set
			If ((Me._canChangeNick = value)  _
						= false) Then
				Me.OncanChangeNickChanging(value)
				Me.SendPropertyChanging
				Me._canChangeNick = value
				Me.SendPropertyChanged("canChangeNick")
				Me.OncanChangeNickChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_canRegister", DbType:="Int NOT NULL")>  _
	Public Property canRegister() As Integer
		Get
			Return Me._canRegister
		End Get
		Set
			If ((Me._canRegister = value)  _
						= false) Then
				Me.OncanRegisterChanging(value)
				Me.SendPropertyChanging
				Me._canRegister = value
				Me.SendPropertyChanged("canRegister")
				Me.OncanRegisterChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofMucRoomProp")>  _
Partial Public Class ofMucRoomProp
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _roomID As Integer
	
	Private _name As String
	
	Private _propValue As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnroomIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnroomIDChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnpropValueChanging(value As String)
    End Sub
    Partial Private Sub OnpropValueChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_roomID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property roomID() As Integer
		Get
			Return Me._roomID
		End Get
		Set
			If ((Me._roomID = value)  _
						= false) Then
				Me.OnroomIDChanging(value)
				Me.SendPropertyChanging
				Me._roomID = value
				Me.SendPropertyChanged("roomID")
				Me.OnroomIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_propValue", DbType:="NVarChar(2000) NOT NULL", CanBeNull:=false)>  _
	Public Property propValue() As String
		Get
			Return Me._propValue
		End Get
		Set
			If (String.Equals(Me._propValue, value) = false) Then
				Me.OnpropValueChanging(value)
				Me.SendPropertyChanging
				Me._propValue = value
				Me.SendPropertyChanged("propValue")
				Me.OnpropValueChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofMucService")>  _
Partial Public Class ofMucService
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _serviceID As Integer
	
	Private _subdomain As String
	
	Private _description As String
	
	Private _isHidden As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnserviceIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnserviceIDChanged()
    End Sub
    Partial Private Sub OnsubdomainChanging(value As String)
    End Sub
    Partial Private Sub OnsubdomainChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub OnisHiddenChanging(value As Integer)
    End Sub
    Partial Private Sub OnisHiddenChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_serviceID", DbType:="Int NOT NULL")>  _
	Public Property serviceID() As Integer
		Get
			Return Me._serviceID
		End Get
		Set
			If ((Me._serviceID = value)  _
						= false) Then
				Me.OnserviceIDChanging(value)
				Me.SendPropertyChanging
				Me._serviceID = value
				Me.SendPropertyChanged("serviceID")
				Me.OnserviceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_subdomain", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property subdomain() As String
		Get
			Return Me._subdomain
		End Get
		Set
			If (String.Equals(Me._subdomain, value) = false) Then
				Me.OnsubdomainChanging(value)
				Me.SendPropertyChanging
				Me._subdomain = value
				Me.SendPropertyChanged("subdomain")
				Me.OnsubdomainChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="NVarChar(255)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isHidden", DbType:="Int NOT NULL")>  _
	Public Property isHidden() As Integer
		Get
			Return Me._isHidden
		End Get
		Set
			If ((Me._isHidden = value)  _
						= false) Then
				Me.OnisHiddenChanging(value)
				Me.SendPropertyChanging
				Me._isHidden = value
				Me.SendPropertyChanged("isHidden")
				Me.OnisHiddenChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofMucServiceProp")>  _
Partial Public Class ofMucServiceProp
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _serviceID As Integer
	
	Private _name As String
	
	Private _propValue As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnserviceIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnserviceIDChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnpropValueChanging(value As String)
    End Sub
    Partial Private Sub OnpropValueChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_serviceID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property serviceID() As Integer
		Get
			Return Me._serviceID
		End Get
		Set
			If ((Me._serviceID = value)  _
						= false) Then
				Me.OnserviceIDChanging(value)
				Me.SendPropertyChanging
				Me._serviceID = value
				Me.SendPropertyChanged("serviceID")
				Me.OnserviceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_propValue", DbType:="NVarChar(2000) NOT NULL", CanBeNull:=false)>  _
	Public Property propValue() As String
		Get
			Return Me._propValue
		End Get
		Set
			If (String.Equals(Me._propValue, value) = false) Then
				Me.OnpropValueChanging(value)
				Me.SendPropertyChanging
				Me._propValue = value
				Me.SendPropertyChanged("propValue")
				Me.OnpropValueChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofOffline")>  _
Partial Public Class ofOffline
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _username As String
	
	Private _messageID As Integer
	
	Private _creationDate As String
	
	Private _messageSize As Integer
	
	Private _stanza As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnusernameChanging(value As String)
    End Sub
    Partial Private Sub OnusernameChanged()
    End Sub
    Partial Private Sub OnmessageIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnmessageIDChanged()
    End Sub
    Partial Private Sub OncreationDateChanging(value As String)
    End Sub
    Partial Private Sub OncreationDateChanged()
    End Sub
    Partial Private Sub OnmessageSizeChanging(value As Integer)
    End Sub
    Partial Private Sub OnmessageSizeChanged()
    End Sub
    Partial Private Sub OnstanzaChanging(value As String)
    End Sub
    Partial Private Sub OnstanzaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="NVarChar(64) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				Me.OnusernameChanging(value)
				Me.SendPropertyChanging
				Me._username = value
				Me.SendPropertyChanged("username")
				Me.OnusernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_messageID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property messageID() As Integer
		Get
			Return Me._messageID
		End Get
		Set
			If ((Me._messageID = value)  _
						= false) Then
				Me.OnmessageIDChanging(value)
				Me.SendPropertyChanging
				Me._messageID = value
				Me.SendPropertyChanged("messageID")
				Me.OnmessageIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_creationDate", DbType:="Char(15) NOT NULL", CanBeNull:=false)>  _
	Public Property creationDate() As String
		Get
			Return Me._creationDate
		End Get
		Set
			If (String.Equals(Me._creationDate, value) = false) Then
				Me.OncreationDateChanging(value)
				Me.SendPropertyChanging
				Me._creationDate = value
				Me.SendPropertyChanged("creationDate")
				Me.OncreationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_messageSize", DbType:="Int NOT NULL")>  _
	Public Property messageSize() As Integer
		Get
			Return Me._messageSize
		End Get
		Set
			If ((Me._messageSize = value)  _
						= false) Then
				Me.OnmessageSizeChanging(value)
				Me.SendPropertyChanging
				Me._messageSize = value
				Me.SendPropertyChanged("messageSize")
				Me.OnmessageSizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stanza", DbType:="NText NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property stanza() As String
		Get
			Return Me._stanza
		End Get
		Set
			If (String.Equals(Me._stanza, value) = false) Then
				Me.OnstanzaChanging(value)
				Me.SendPropertyChanging
				Me._stanza = value
				Me.SendPropertyChanged("stanza")
				Me.OnstanzaChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofPresence")>  _
Partial Public Class ofPresence
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _username As String
	
	Private _offlinePresence As String
	
	Private _offlineDate As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnusernameChanging(value As String)
    End Sub
    Partial Private Sub OnusernameChanged()
    End Sub
    Partial Private Sub OnofflinePresenceChanging(value As String)
    End Sub
    Partial Private Sub OnofflinePresenceChanged()
    End Sub
    Partial Private Sub OnofflineDateChanging(value As String)
    End Sub
    Partial Private Sub OnofflineDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="NVarChar(64) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				Me.OnusernameChanging(value)
				Me.SendPropertyChanging
				Me._username = value
				Me.SendPropertyChanged("username")
				Me.OnusernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_offlinePresence", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property offlinePresence() As String
		Get
			Return Me._offlinePresence
		End Get
		Set
			If (String.Equals(Me._offlinePresence, value) = false) Then
				Me.OnofflinePresenceChanging(value)
				Me.SendPropertyChanging
				Me._offlinePresence = value
				Me.SendPropertyChanged("offlinePresence")
				Me.OnofflinePresenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_offlineDate", DbType:="Char(15) NOT NULL", CanBeNull:=false)>  _
	Public Property offlineDate() As String
		Get
			Return Me._offlineDate
		End Get
		Set
			If (String.Equals(Me._offlineDate, value) = false) Then
				Me.OnofflineDateChanging(value)
				Me.SendPropertyChanging
				Me._offlineDate = value
				Me.SendPropertyChanged("offlineDate")
				Me.OnofflineDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofPrivacyList")>  _
Partial Public Class ofPrivacyList
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _username As String
	
	Private _name As String
	
	Private _isDefault As Integer
	
	Private _list As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnusernameChanging(value As String)
    End Sub
    Partial Private Sub OnusernameChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnisDefaultChanging(value As Integer)
    End Sub
    Partial Private Sub OnisDefaultChanged()
    End Sub
    Partial Private Sub OnlistChanging(value As String)
    End Sub
    Partial Private Sub OnlistChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="NVarChar(64) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				Me.OnusernameChanging(value)
				Me.SendPropertyChanging
				Me._username = value
				Me.SendPropertyChanged("username")
				Me.OnusernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isDefault", DbType:="Int NOT NULL")>  _
	Public Property isDefault() As Integer
		Get
			Return Me._isDefault
		End Get
		Set
			If ((Me._isDefault = value)  _
						= false) Then
				Me.OnisDefaultChanging(value)
				Me.SendPropertyChanging
				Me._isDefault = value
				Me.SendPropertyChanged("isDefault")
				Me.OnisDefaultChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_list", DbType:="NText NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property list() As String
		Get
			Return Me._list
		End Get
		Set
			If (String.Equals(Me._list, value) = false) Then
				Me.OnlistChanging(value)
				Me.SendPropertyChanging
				Me._list = value
				Me.SendPropertyChanged("list")
				Me.OnlistChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofPrivate")>  _
Partial Public Class ofPrivate
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _username As String
	
	Private _name As String
	
	Private _namespace As String
	
	Private _privateData As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnusernameChanging(value As String)
    End Sub
    Partial Private Sub OnusernameChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnnamespaceChanging(value As String)
    End Sub
    Partial Private Sub OnnamespaceChanged()
    End Sub
    Partial Private Sub OnprivateDataChanging(value As String)
    End Sub
    Partial Private Sub OnprivateDataChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="NVarChar(64) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				Me.OnusernameChanging(value)
				Me.SendPropertyChanging
				Me._username = value
				Me.SendPropertyChanged("username")
				Me.OnusernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="namespace", Storage:="_namespace", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property [namespace]() As String
		Get
			Return Me._namespace
		End Get
		Set
			If (String.Equals(Me._namespace, value) = false) Then
				Me.OnnamespaceChanging(value)
				Me.SendPropertyChanging
				Me._namespace = value
				Me.SendPropertyChanged("[namespace]")
				Me.OnnamespaceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_privateData", DbType:="NText NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property privateData() As String
		Get
			Return Me._privateData
		End Get
		Set
			If (String.Equals(Me._privateData, value) = false) Then
				Me.OnprivateDataChanging(value)
				Me.SendPropertyChanging
				Me._privateData = value
				Me.SendPropertyChanged("privateData")
				Me.OnprivateDataChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofProperty")>  _
Partial Public Class ofProperty
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _name As String
	
	Private _propValue As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnpropValueChanging(value As String)
    End Sub
    Partial Private Sub OnpropValueChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_propValue", DbType:="NText NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property propValue() As String
		Get
			Return Me._propValue
		End Get
		Set
			If (String.Equals(Me._propValue, value) = false) Then
				Me.OnpropValueChanging(value)
				Me.SendPropertyChanging
				Me._propValue = value
				Me.SendPropertyChanged("propValue")
				Me.OnpropValueChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofPubsubAffiliation")>  _
Partial Public Class ofPubsubAffiliation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _serviceID As String
	
	Private _nodeID As String
	
	Private _jid As String
	
	Private _affiliation As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnserviceIDChanging(value As String)
    End Sub
    Partial Private Sub OnserviceIDChanged()
    End Sub
    Partial Private Sub OnnodeIDChanging(value As String)
    End Sub
    Partial Private Sub OnnodeIDChanged()
    End Sub
    Partial Private Sub OnjidChanging(value As String)
    End Sub
    Partial Private Sub OnjidChanged()
    End Sub
    Partial Private Sub OnaffiliationChanging(value As String)
    End Sub
    Partial Private Sub OnaffiliationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_serviceID", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property serviceID() As String
		Get
			Return Me._serviceID
		End Get
		Set
			If (String.Equals(Me._serviceID, value) = false) Then
				Me.OnserviceIDChanging(value)
				Me.SendPropertyChanging
				Me._serviceID = value
				Me.SendPropertyChanged("serviceID")
				Me.OnserviceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nodeID", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property nodeID() As String
		Get
			Return Me._nodeID
		End Get
		Set
			If (String.Equals(Me._nodeID, value) = false) Then
				Me.OnnodeIDChanging(value)
				Me.SendPropertyChanging
				Me._nodeID = value
				Me.SendPropertyChanged("nodeID")
				Me.OnnodeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_jid", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property jid() As String
		Get
			Return Me._jid
		End Get
		Set
			If (String.Equals(Me._jid, value) = false) Then
				Me.OnjidChanging(value)
				Me.SendPropertyChanging
				Me._jid = value
				Me.SendPropertyChanged("jid")
				Me.OnjidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_affiliation", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property affiliation() As String
		Get
			Return Me._affiliation
		End Get
		Set
			If (String.Equals(Me._affiliation, value) = false) Then
				Me.OnaffiliationChanging(value)
				Me.SendPropertyChanging
				Me._affiliation = value
				Me.SendPropertyChanged("affiliation")
				Me.OnaffiliationChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofPubsubDefaultConf")>  _
Partial Public Class ofPubsubDefaultConf
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _serviceID As String
	
	Private _leaf As Integer
	
	Private _deliverPayloads As Integer
	
	Private _maxPayloadSize As Integer
	
	Private _persistItems As Integer
	
	Private _maxItems As Integer
	
	Private _notifyConfigChanges As Integer
	
	Private _notifyDelete As Integer
	
	Private _notifyRetract As Integer
	
	Private _presenceBased As Integer
	
	Private _sendItemSubscribe As Integer
	
	Private _publisherModel As String
	
	Private _subscriptionEnabled As Integer
	
	Private _accessModel As String
	
	Private _language As String
	
	Private _replyPolicy As String
	
	Private _associationPolicy As String
	
	Private _maxLeafNodes As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnserviceIDChanging(value As String)
    End Sub
    Partial Private Sub OnserviceIDChanged()
    End Sub
    Partial Private Sub OnleafChanging(value As Integer)
    End Sub
    Partial Private Sub OnleafChanged()
    End Sub
    Partial Private Sub OndeliverPayloadsChanging(value As Integer)
    End Sub
    Partial Private Sub OndeliverPayloadsChanged()
    End Sub
    Partial Private Sub OnmaxPayloadSizeChanging(value As Integer)
    End Sub
    Partial Private Sub OnmaxPayloadSizeChanged()
    End Sub
    Partial Private Sub OnpersistItemsChanging(value As Integer)
    End Sub
    Partial Private Sub OnpersistItemsChanged()
    End Sub
    Partial Private Sub OnmaxItemsChanging(value As Integer)
    End Sub
    Partial Private Sub OnmaxItemsChanged()
    End Sub
    Partial Private Sub OnnotifyConfigChangesChanging(value As Integer)
    End Sub
    Partial Private Sub OnnotifyConfigChangesChanged()
    End Sub
    Partial Private Sub OnnotifyDeleteChanging(value As Integer)
    End Sub
    Partial Private Sub OnnotifyDeleteChanged()
    End Sub
    Partial Private Sub OnnotifyRetractChanging(value As Integer)
    End Sub
    Partial Private Sub OnnotifyRetractChanged()
    End Sub
    Partial Private Sub OnpresenceBasedChanging(value As Integer)
    End Sub
    Partial Private Sub OnpresenceBasedChanged()
    End Sub
    Partial Private Sub OnsendItemSubscribeChanging(value As Integer)
    End Sub
    Partial Private Sub OnsendItemSubscribeChanged()
    End Sub
    Partial Private Sub OnpublisherModelChanging(value As String)
    End Sub
    Partial Private Sub OnpublisherModelChanged()
    End Sub
    Partial Private Sub OnsubscriptionEnabledChanging(value As Integer)
    End Sub
    Partial Private Sub OnsubscriptionEnabledChanged()
    End Sub
    Partial Private Sub OnaccessModelChanging(value As String)
    End Sub
    Partial Private Sub OnaccessModelChanged()
    End Sub
    Partial Private Sub OnlanguageChanging(value As String)
    End Sub
    Partial Private Sub OnlanguageChanged()
    End Sub
    Partial Private Sub OnreplyPolicyChanging(value As String)
    End Sub
    Partial Private Sub OnreplyPolicyChanged()
    End Sub
    Partial Private Sub OnassociationPolicyChanging(value As String)
    End Sub
    Partial Private Sub OnassociationPolicyChanged()
    End Sub
    Partial Private Sub OnmaxLeafNodesChanging(value As Integer)
    End Sub
    Partial Private Sub OnmaxLeafNodesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_serviceID", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property serviceID() As String
		Get
			Return Me._serviceID
		End Get
		Set
			If (String.Equals(Me._serviceID, value) = false) Then
				Me.OnserviceIDChanging(value)
				Me.SendPropertyChanging
				Me._serviceID = value
				Me.SendPropertyChanged("serviceID")
				Me.OnserviceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_leaf", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property leaf() As Integer
		Get
			Return Me._leaf
		End Get
		Set
			If ((Me._leaf = value)  _
						= false) Then
				Me.OnleafChanging(value)
				Me.SendPropertyChanging
				Me._leaf = value
				Me.SendPropertyChanged("leaf")
				Me.OnleafChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_deliverPayloads", DbType:="Int NOT NULL")>  _
	Public Property deliverPayloads() As Integer
		Get
			Return Me._deliverPayloads
		End Get
		Set
			If ((Me._deliverPayloads = value)  _
						= false) Then
				Me.OndeliverPayloadsChanging(value)
				Me.SendPropertyChanging
				Me._deliverPayloads = value
				Me.SendPropertyChanged("deliverPayloads")
				Me.OndeliverPayloadsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_maxPayloadSize", DbType:="Int NOT NULL")>  _
	Public Property maxPayloadSize() As Integer
		Get
			Return Me._maxPayloadSize
		End Get
		Set
			If ((Me._maxPayloadSize = value)  _
						= false) Then
				Me.OnmaxPayloadSizeChanging(value)
				Me.SendPropertyChanging
				Me._maxPayloadSize = value
				Me.SendPropertyChanged("maxPayloadSize")
				Me.OnmaxPayloadSizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_persistItems", DbType:="Int NOT NULL")>  _
	Public Property persistItems() As Integer
		Get
			Return Me._persistItems
		End Get
		Set
			If ((Me._persistItems = value)  _
						= false) Then
				Me.OnpersistItemsChanging(value)
				Me.SendPropertyChanging
				Me._persistItems = value
				Me.SendPropertyChanged("persistItems")
				Me.OnpersistItemsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_maxItems", DbType:="Int NOT NULL")>  _
	Public Property maxItems() As Integer
		Get
			Return Me._maxItems
		End Get
		Set
			If ((Me._maxItems = value)  _
						= false) Then
				Me.OnmaxItemsChanging(value)
				Me.SendPropertyChanging
				Me._maxItems = value
				Me.SendPropertyChanged("maxItems")
				Me.OnmaxItemsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_notifyConfigChanges", DbType:="Int NOT NULL")>  _
	Public Property notifyConfigChanges() As Integer
		Get
			Return Me._notifyConfigChanges
		End Get
		Set
			If ((Me._notifyConfigChanges = value)  _
						= false) Then
				Me.OnnotifyConfigChangesChanging(value)
				Me.SendPropertyChanging
				Me._notifyConfigChanges = value
				Me.SendPropertyChanged("notifyConfigChanges")
				Me.OnnotifyConfigChangesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_notifyDelete", DbType:="Int NOT NULL")>  _
	Public Property notifyDelete() As Integer
		Get
			Return Me._notifyDelete
		End Get
		Set
			If ((Me._notifyDelete = value)  _
						= false) Then
				Me.OnnotifyDeleteChanging(value)
				Me.SendPropertyChanging
				Me._notifyDelete = value
				Me.SendPropertyChanged("notifyDelete")
				Me.OnnotifyDeleteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_notifyRetract", DbType:="Int NOT NULL")>  _
	Public Property notifyRetract() As Integer
		Get
			Return Me._notifyRetract
		End Get
		Set
			If ((Me._notifyRetract = value)  _
						= false) Then
				Me.OnnotifyRetractChanging(value)
				Me.SendPropertyChanging
				Me._notifyRetract = value
				Me.SendPropertyChanged("notifyRetract")
				Me.OnnotifyRetractChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_presenceBased", DbType:="Int NOT NULL")>  _
	Public Property presenceBased() As Integer
		Get
			Return Me._presenceBased
		End Get
		Set
			If ((Me._presenceBased = value)  _
						= false) Then
				Me.OnpresenceBasedChanging(value)
				Me.SendPropertyChanging
				Me._presenceBased = value
				Me.SendPropertyChanged("presenceBased")
				Me.OnpresenceBasedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sendItemSubscribe", DbType:="Int NOT NULL")>  _
	Public Property sendItemSubscribe() As Integer
		Get
			Return Me._sendItemSubscribe
		End Get
		Set
			If ((Me._sendItemSubscribe = value)  _
						= false) Then
				Me.OnsendItemSubscribeChanging(value)
				Me.SendPropertyChanging
				Me._sendItemSubscribe = value
				Me.SendPropertyChanged("sendItemSubscribe")
				Me.OnsendItemSubscribeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_publisherModel", DbType:="NVarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property publisherModel() As String
		Get
			Return Me._publisherModel
		End Get
		Set
			If (String.Equals(Me._publisherModel, value) = false) Then
				Me.OnpublisherModelChanging(value)
				Me.SendPropertyChanging
				Me._publisherModel = value
				Me.SendPropertyChanged("publisherModel")
				Me.OnpublisherModelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_subscriptionEnabled", DbType:="Int NOT NULL")>  _
	Public Property subscriptionEnabled() As Integer
		Get
			Return Me._subscriptionEnabled
		End Get
		Set
			If ((Me._subscriptionEnabled = value)  _
						= false) Then
				Me.OnsubscriptionEnabledChanging(value)
				Me.SendPropertyChanging
				Me._subscriptionEnabled = value
				Me.SendPropertyChanged("subscriptionEnabled")
				Me.OnsubscriptionEnabledChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accessModel", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property accessModel() As String
		Get
			Return Me._accessModel
		End Get
		Set
			If (String.Equals(Me._accessModel, value) = false) Then
				Me.OnaccessModelChanging(value)
				Me.SendPropertyChanging
				Me._accessModel = value
				Me.SendPropertyChanged("accessModel")
				Me.OnaccessModelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_language", DbType:="NVarChar(255)")>  _
	Public Property language() As String
		Get
			Return Me._language
		End Get
		Set
			If (String.Equals(Me._language, value) = false) Then
				Me.OnlanguageChanging(value)
				Me.SendPropertyChanging
				Me._language = value
				Me.SendPropertyChanged("language")
				Me.OnlanguageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_replyPolicy", DbType:="NVarChar(15)")>  _
	Public Property replyPolicy() As String
		Get
			Return Me._replyPolicy
		End Get
		Set
			If (String.Equals(Me._replyPolicy, value) = false) Then
				Me.OnreplyPolicyChanging(value)
				Me.SendPropertyChanging
				Me._replyPolicy = value
				Me.SendPropertyChanged("replyPolicy")
				Me.OnreplyPolicyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_associationPolicy", DbType:="NVarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property associationPolicy() As String
		Get
			Return Me._associationPolicy
		End Get
		Set
			If (String.Equals(Me._associationPolicy, value) = false) Then
				Me.OnassociationPolicyChanging(value)
				Me.SendPropertyChanging
				Me._associationPolicy = value
				Me.SendPropertyChanged("associationPolicy")
				Me.OnassociationPolicyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_maxLeafNodes", DbType:="Int NOT NULL")>  _
	Public Property maxLeafNodes() As Integer
		Get
			Return Me._maxLeafNodes
		End Get
		Set
			If ((Me._maxLeafNodes = value)  _
						= false) Then
				Me.OnmaxLeafNodesChanging(value)
				Me.SendPropertyChanging
				Me._maxLeafNodes = value
				Me.SendPropertyChanged("maxLeafNodes")
				Me.OnmaxLeafNodesChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofPubsubItem")>  _
Partial Public Class ofPubsubItem
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _serviceID As String
	
	Private _nodeID As String
	
	Private _id As String
	
	Private _jid As String
	
	Private _creationDate As String
	
	Private _payload As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnserviceIDChanging(value As String)
    End Sub
    Partial Private Sub OnserviceIDChanged()
    End Sub
    Partial Private Sub OnnodeIDChanging(value As String)
    End Sub
    Partial Private Sub OnnodeIDChanged()
    End Sub
    Partial Private Sub OnidChanging(value As String)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnjidChanging(value As String)
    End Sub
    Partial Private Sub OnjidChanged()
    End Sub
    Partial Private Sub OncreationDateChanging(value As String)
    End Sub
    Partial Private Sub OncreationDateChanged()
    End Sub
    Partial Private Sub OnpayloadChanging(value As String)
    End Sub
    Partial Private Sub OnpayloadChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_serviceID", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property serviceID() As String
		Get
			Return Me._serviceID
		End Get
		Set
			If (String.Equals(Me._serviceID, value) = false) Then
				Me.OnserviceIDChanging(value)
				Me.SendPropertyChanging
				Me._serviceID = value
				Me.SendPropertyChanged("serviceID")
				Me.OnserviceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nodeID", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property nodeID() As String
		Get
			Return Me._nodeID
		End Get
		Set
			If (String.Equals(Me._nodeID, value) = false) Then
				Me.OnnodeIDChanging(value)
				Me.SendPropertyChanging
				Me._nodeID = value
				Me.SendPropertyChanged("nodeID")
				Me.OnnodeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property id() As String
		Get
			Return Me._id
		End Get
		Set
			If (String.Equals(Me._id, value) = false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_jid", DbType:="NVarChar(1024) NOT NULL", CanBeNull:=false)>  _
	Public Property jid() As String
		Get
			Return Me._jid
		End Get
		Set
			If (String.Equals(Me._jid, value) = false) Then
				Me.OnjidChanging(value)
				Me.SendPropertyChanging
				Me._jid = value
				Me.SendPropertyChanged("jid")
				Me.OnjidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_creationDate", DbType:="Char(15) NOT NULL", CanBeNull:=false)>  _
	Public Property creationDate() As String
		Get
			Return Me._creationDate
		End Get
		Set
			If (String.Equals(Me._creationDate, value) = false) Then
				Me.OncreationDateChanging(value)
				Me.SendPropertyChanging
				Me._creationDate = value
				Me.SendPropertyChanged("creationDate")
				Me.OncreationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_payload", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property payload() As String
		Get
			Return Me._payload
		End Get
		Set
			If (String.Equals(Me._payload, value) = false) Then
				Me.OnpayloadChanging(value)
				Me.SendPropertyChanging
				Me._payload = value
				Me.SendPropertyChanged("payload")
				Me.OnpayloadChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofPubsubNode")>  _
Partial Public Class ofPubsubNode
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _serviceID As String
	
	Private _nodeID As String
	
	Private _leaf As Integer
	
	Private _creationDate As String
	
	Private _modificationDate As String
	
	Private _parent As String
	
	Private _deliverPayloads As Integer
	
	Private _maxPayloadSize As System.Nullable(Of Integer)
	
	Private _persistItems As System.Nullable(Of Integer)
	
	Private _maxItems As System.Nullable(Of Integer)
	
	Private _notifyConfigChanges As Integer
	
	Private _notifyDelete As Integer
	
	Private _notifyRetract As Integer
	
	Private _presenceBased As Integer
	
	Private _sendItemSubscribe As Integer
	
	Private _publisherModel As String
	
	Private _subscriptionEnabled As Integer
	
	Private _configSubscription As Integer
	
	Private _accessModel As String
	
	Private _payloadType As String
	
	Private _bodyXSLT As String
	
	Private _dataformXSLT As String
	
	Private _creator As String
	
	Private _description As String
	
	Private _language As String
	
	Private _name As String
	
	Private _replyPolicy As String
	
	Private _associationPolicy As String
	
	Private _maxLeafNodes As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnserviceIDChanging(value As String)
    End Sub
    Partial Private Sub OnserviceIDChanged()
    End Sub
    Partial Private Sub OnnodeIDChanging(value As String)
    End Sub
    Partial Private Sub OnnodeIDChanged()
    End Sub
    Partial Private Sub OnleafChanging(value As Integer)
    End Sub
    Partial Private Sub OnleafChanged()
    End Sub
    Partial Private Sub OncreationDateChanging(value As String)
    End Sub
    Partial Private Sub OncreationDateChanged()
    End Sub
    Partial Private Sub OnmodificationDateChanging(value As String)
    End Sub
    Partial Private Sub OnmodificationDateChanged()
    End Sub
    Partial Private Sub OnparentChanging(value As String)
    End Sub
    Partial Private Sub OnparentChanged()
    End Sub
    Partial Private Sub OndeliverPayloadsChanging(value As Integer)
    End Sub
    Partial Private Sub OndeliverPayloadsChanged()
    End Sub
    Partial Private Sub OnmaxPayloadSizeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnmaxPayloadSizeChanged()
    End Sub
    Partial Private Sub OnpersistItemsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnpersistItemsChanged()
    End Sub
    Partial Private Sub OnmaxItemsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnmaxItemsChanged()
    End Sub
    Partial Private Sub OnnotifyConfigChangesChanging(value As Integer)
    End Sub
    Partial Private Sub OnnotifyConfigChangesChanged()
    End Sub
    Partial Private Sub OnnotifyDeleteChanging(value As Integer)
    End Sub
    Partial Private Sub OnnotifyDeleteChanged()
    End Sub
    Partial Private Sub OnnotifyRetractChanging(value As Integer)
    End Sub
    Partial Private Sub OnnotifyRetractChanged()
    End Sub
    Partial Private Sub OnpresenceBasedChanging(value As Integer)
    End Sub
    Partial Private Sub OnpresenceBasedChanged()
    End Sub
    Partial Private Sub OnsendItemSubscribeChanging(value As Integer)
    End Sub
    Partial Private Sub OnsendItemSubscribeChanged()
    End Sub
    Partial Private Sub OnpublisherModelChanging(value As String)
    End Sub
    Partial Private Sub OnpublisherModelChanged()
    End Sub
    Partial Private Sub OnsubscriptionEnabledChanging(value As Integer)
    End Sub
    Partial Private Sub OnsubscriptionEnabledChanged()
    End Sub
    Partial Private Sub OnconfigSubscriptionChanging(value As Integer)
    End Sub
    Partial Private Sub OnconfigSubscriptionChanged()
    End Sub
    Partial Private Sub OnaccessModelChanging(value As String)
    End Sub
    Partial Private Sub OnaccessModelChanged()
    End Sub
    Partial Private Sub OnpayloadTypeChanging(value As String)
    End Sub
    Partial Private Sub OnpayloadTypeChanged()
    End Sub
    Partial Private Sub OnbodyXSLTChanging(value As String)
    End Sub
    Partial Private Sub OnbodyXSLTChanged()
    End Sub
    Partial Private Sub OndataformXSLTChanging(value As String)
    End Sub
    Partial Private Sub OndataformXSLTChanged()
    End Sub
    Partial Private Sub OncreatorChanging(value As String)
    End Sub
    Partial Private Sub OncreatorChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub OnlanguageChanging(value As String)
    End Sub
    Partial Private Sub OnlanguageChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnreplyPolicyChanging(value As String)
    End Sub
    Partial Private Sub OnreplyPolicyChanged()
    End Sub
    Partial Private Sub OnassociationPolicyChanging(value As String)
    End Sub
    Partial Private Sub OnassociationPolicyChanged()
    End Sub
    Partial Private Sub OnmaxLeafNodesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnmaxLeafNodesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_serviceID", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property serviceID() As String
		Get
			Return Me._serviceID
		End Get
		Set
			If (String.Equals(Me._serviceID, value) = false) Then
				Me.OnserviceIDChanging(value)
				Me.SendPropertyChanging
				Me._serviceID = value
				Me.SendPropertyChanged("serviceID")
				Me.OnserviceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nodeID", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property nodeID() As String
		Get
			Return Me._nodeID
		End Get
		Set
			If (String.Equals(Me._nodeID, value) = false) Then
				Me.OnnodeIDChanging(value)
				Me.SendPropertyChanging
				Me._nodeID = value
				Me.SendPropertyChanged("nodeID")
				Me.OnnodeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_leaf", DbType:="Int NOT NULL")>  _
	Public Property leaf() As Integer
		Get
			Return Me._leaf
		End Get
		Set
			If ((Me._leaf = value)  _
						= false) Then
				Me.OnleafChanging(value)
				Me.SendPropertyChanging
				Me._leaf = value
				Me.SendPropertyChanged("leaf")
				Me.OnleafChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_creationDate", DbType:="Char(15) NOT NULL", CanBeNull:=false)>  _
	Public Property creationDate() As String
		Get
			Return Me._creationDate
		End Get
		Set
			If (String.Equals(Me._creationDate, value) = false) Then
				Me.OncreationDateChanging(value)
				Me.SendPropertyChanging
				Me._creationDate = value
				Me.SendPropertyChanged("creationDate")
				Me.OncreationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modificationDate", DbType:="Char(15) NOT NULL", CanBeNull:=false)>  _
	Public Property modificationDate() As String
		Get
			Return Me._modificationDate
		End Get
		Set
			If (String.Equals(Me._modificationDate, value) = false) Then
				Me.OnmodificationDateChanging(value)
				Me.SendPropertyChanging
				Me._modificationDate = value
				Me.SendPropertyChanged("modificationDate")
				Me.OnmodificationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_parent", DbType:="NVarChar(100)")>  _
	Public Property parent() As String
		Get
			Return Me._parent
		End Get
		Set
			If (String.Equals(Me._parent, value) = false) Then
				Me.OnparentChanging(value)
				Me.SendPropertyChanging
				Me._parent = value
				Me.SendPropertyChanged("parent")
				Me.OnparentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_deliverPayloads", DbType:="Int NOT NULL")>  _
	Public Property deliverPayloads() As Integer
		Get
			Return Me._deliverPayloads
		End Get
		Set
			If ((Me._deliverPayloads = value)  _
						= false) Then
				Me.OndeliverPayloadsChanging(value)
				Me.SendPropertyChanging
				Me._deliverPayloads = value
				Me.SendPropertyChanged("deliverPayloads")
				Me.OndeliverPayloadsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_maxPayloadSize", DbType:="Int")>  _
	Public Property maxPayloadSize() As System.Nullable(Of Integer)
		Get
			Return Me._maxPayloadSize
		End Get
		Set
			If (Me._maxPayloadSize.Equals(value) = false) Then
				Me.OnmaxPayloadSizeChanging(value)
				Me.SendPropertyChanging
				Me._maxPayloadSize = value
				Me.SendPropertyChanged("maxPayloadSize")
				Me.OnmaxPayloadSizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_persistItems", DbType:="Int")>  _
	Public Property persistItems() As System.Nullable(Of Integer)
		Get
			Return Me._persistItems
		End Get
		Set
			If (Me._persistItems.Equals(value) = false) Then
				Me.OnpersistItemsChanging(value)
				Me.SendPropertyChanging
				Me._persistItems = value
				Me.SendPropertyChanged("persistItems")
				Me.OnpersistItemsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_maxItems", DbType:="Int")>  _
	Public Property maxItems() As System.Nullable(Of Integer)
		Get
			Return Me._maxItems
		End Get
		Set
			If (Me._maxItems.Equals(value) = false) Then
				Me.OnmaxItemsChanging(value)
				Me.SendPropertyChanging
				Me._maxItems = value
				Me.SendPropertyChanged("maxItems")
				Me.OnmaxItemsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_notifyConfigChanges", DbType:="Int NOT NULL")>  _
	Public Property notifyConfigChanges() As Integer
		Get
			Return Me._notifyConfigChanges
		End Get
		Set
			If ((Me._notifyConfigChanges = value)  _
						= false) Then
				Me.OnnotifyConfigChangesChanging(value)
				Me.SendPropertyChanging
				Me._notifyConfigChanges = value
				Me.SendPropertyChanged("notifyConfigChanges")
				Me.OnnotifyConfigChangesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_notifyDelete", DbType:="Int NOT NULL")>  _
	Public Property notifyDelete() As Integer
		Get
			Return Me._notifyDelete
		End Get
		Set
			If ((Me._notifyDelete = value)  _
						= false) Then
				Me.OnnotifyDeleteChanging(value)
				Me.SendPropertyChanging
				Me._notifyDelete = value
				Me.SendPropertyChanged("notifyDelete")
				Me.OnnotifyDeleteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_notifyRetract", DbType:="Int NOT NULL")>  _
	Public Property notifyRetract() As Integer
		Get
			Return Me._notifyRetract
		End Get
		Set
			If ((Me._notifyRetract = value)  _
						= false) Then
				Me.OnnotifyRetractChanging(value)
				Me.SendPropertyChanging
				Me._notifyRetract = value
				Me.SendPropertyChanged("notifyRetract")
				Me.OnnotifyRetractChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_presenceBased", DbType:="Int NOT NULL")>  _
	Public Property presenceBased() As Integer
		Get
			Return Me._presenceBased
		End Get
		Set
			If ((Me._presenceBased = value)  _
						= false) Then
				Me.OnpresenceBasedChanging(value)
				Me.SendPropertyChanging
				Me._presenceBased = value
				Me.SendPropertyChanged("presenceBased")
				Me.OnpresenceBasedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sendItemSubscribe", DbType:="Int NOT NULL")>  _
	Public Property sendItemSubscribe() As Integer
		Get
			Return Me._sendItemSubscribe
		End Get
		Set
			If ((Me._sendItemSubscribe = value)  _
						= false) Then
				Me.OnsendItemSubscribeChanging(value)
				Me.SendPropertyChanging
				Me._sendItemSubscribe = value
				Me.SendPropertyChanged("sendItemSubscribe")
				Me.OnsendItemSubscribeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_publisherModel", DbType:="NVarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property publisherModel() As String
		Get
			Return Me._publisherModel
		End Get
		Set
			If (String.Equals(Me._publisherModel, value) = false) Then
				Me.OnpublisherModelChanging(value)
				Me.SendPropertyChanging
				Me._publisherModel = value
				Me.SendPropertyChanged("publisherModel")
				Me.OnpublisherModelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_subscriptionEnabled", DbType:="Int NOT NULL")>  _
	Public Property subscriptionEnabled() As Integer
		Get
			Return Me._subscriptionEnabled
		End Get
		Set
			If ((Me._subscriptionEnabled = value)  _
						= false) Then
				Me.OnsubscriptionEnabledChanging(value)
				Me.SendPropertyChanging
				Me._subscriptionEnabled = value
				Me.SendPropertyChanged("subscriptionEnabled")
				Me.OnsubscriptionEnabledChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_configSubscription", DbType:="Int NOT NULL")>  _
	Public Property configSubscription() As Integer
		Get
			Return Me._configSubscription
		End Get
		Set
			If ((Me._configSubscription = value)  _
						= false) Then
				Me.OnconfigSubscriptionChanging(value)
				Me.SendPropertyChanging
				Me._configSubscription = value
				Me.SendPropertyChanged("configSubscription")
				Me.OnconfigSubscriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accessModel", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property accessModel() As String
		Get
			Return Me._accessModel
		End Get
		Set
			If (String.Equals(Me._accessModel, value) = false) Then
				Me.OnaccessModelChanging(value)
				Me.SendPropertyChanging
				Me._accessModel = value
				Me.SendPropertyChanged("accessModel")
				Me.OnaccessModelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_payloadType", DbType:="NVarChar(100)")>  _
	Public Property payloadType() As String
		Get
			Return Me._payloadType
		End Get
		Set
			If (String.Equals(Me._payloadType, value) = false) Then
				Me.OnpayloadTypeChanging(value)
				Me.SendPropertyChanging
				Me._payloadType = value
				Me.SendPropertyChanged("payloadType")
				Me.OnpayloadTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bodyXSLT", DbType:="NVarChar(100)")>  _
	Public Property bodyXSLT() As String
		Get
			Return Me._bodyXSLT
		End Get
		Set
			If (String.Equals(Me._bodyXSLT, value) = false) Then
				Me.OnbodyXSLTChanging(value)
				Me.SendPropertyChanging
				Me._bodyXSLT = value
				Me.SendPropertyChanged("bodyXSLT")
				Me.OnbodyXSLTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dataformXSLT", DbType:="NVarChar(100)")>  _
	Public Property dataformXSLT() As String
		Get
			Return Me._dataformXSLT
		End Get
		Set
			If (String.Equals(Me._dataformXSLT, value) = false) Then
				Me.OndataformXSLTChanging(value)
				Me.SendPropertyChanging
				Me._dataformXSLT = value
				Me.SendPropertyChanged("dataformXSLT")
				Me.OndataformXSLTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_creator", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property creator() As String
		Get
			Return Me._creator
		End Get
		Set
			If (String.Equals(Me._creator, value) = false) Then
				Me.OncreatorChanging(value)
				Me.SendPropertyChanging
				Me._creator = value
				Me.SendPropertyChanged("creator")
				Me.OncreatorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="NVarChar(255)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_language", DbType:="NVarChar(255)")>  _
	Public Property language() As String
		Get
			Return Me._language
		End Get
		Set
			If (String.Equals(Me._language, value) = false) Then
				Me.OnlanguageChanging(value)
				Me.SendPropertyChanging
				Me._language = value
				Me.SendPropertyChanged("language")
				Me.OnlanguageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="NVarChar(50)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_replyPolicy", DbType:="NVarChar(15)")>  _
	Public Property replyPolicy() As String
		Get
			Return Me._replyPolicy
		End Get
		Set
			If (String.Equals(Me._replyPolicy, value) = false) Then
				Me.OnreplyPolicyChanging(value)
				Me.SendPropertyChanging
				Me._replyPolicy = value
				Me.SendPropertyChanged("replyPolicy")
				Me.OnreplyPolicyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_associationPolicy", DbType:="NVarChar(15)")>  _
	Public Property associationPolicy() As String
		Get
			Return Me._associationPolicy
		End Get
		Set
			If (String.Equals(Me._associationPolicy, value) = false) Then
				Me.OnassociationPolicyChanging(value)
				Me.SendPropertyChanging
				Me._associationPolicy = value
				Me.SendPropertyChanged("associationPolicy")
				Me.OnassociationPolicyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_maxLeafNodes", DbType:="Int")>  _
	Public Property maxLeafNodes() As System.Nullable(Of Integer)
		Get
			Return Me._maxLeafNodes
		End Get
		Set
			If (Me._maxLeafNodes.Equals(value) = false) Then
				Me.OnmaxLeafNodesChanging(value)
				Me.SendPropertyChanging
				Me._maxLeafNodes = value
				Me.SendPropertyChanged("maxLeafNodes")
				Me.OnmaxLeafNodesChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofPubsubNodeGroups")>  _
Partial Public Class ofPubsubNodeGroups
	
	Private _serviceID As String
	
	Private _nodeID As String
	
	Private _rosterGroup As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_serviceID", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property serviceID() As String
		Get
			Return Me._serviceID
		End Get
		Set
			If (String.Equals(Me._serviceID, value) = false) Then
				Me._serviceID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nodeID", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property nodeID() As String
		Get
			Return Me._nodeID
		End Get
		Set
			If (String.Equals(Me._nodeID, value) = false) Then
				Me._nodeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rosterGroup", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property rosterGroup() As String
		Get
			Return Me._rosterGroup
		End Get
		Set
			If (String.Equals(Me._rosterGroup, value) = false) Then
				Me._rosterGroup = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofPubsubNodeJIDs")>  _
Partial Public Class ofPubsubNodeJIDs
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _serviceID As String
	
	Private _nodeID As String
	
	Private _jid As String
	
	Private _associationType As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnserviceIDChanging(value As String)
    End Sub
    Partial Private Sub OnserviceIDChanged()
    End Sub
    Partial Private Sub OnnodeIDChanging(value As String)
    End Sub
    Partial Private Sub OnnodeIDChanged()
    End Sub
    Partial Private Sub OnjidChanging(value As String)
    End Sub
    Partial Private Sub OnjidChanged()
    End Sub
    Partial Private Sub OnassociationTypeChanging(value As String)
    End Sub
    Partial Private Sub OnassociationTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_serviceID", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property serviceID() As String
		Get
			Return Me._serviceID
		End Get
		Set
			If (String.Equals(Me._serviceID, value) = false) Then
				Me.OnserviceIDChanging(value)
				Me.SendPropertyChanging
				Me._serviceID = value
				Me.SendPropertyChanged("serviceID")
				Me.OnserviceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nodeID", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property nodeID() As String
		Get
			Return Me._nodeID
		End Get
		Set
			If (String.Equals(Me._nodeID, value) = false) Then
				Me.OnnodeIDChanging(value)
				Me.SendPropertyChanging
				Me._nodeID = value
				Me.SendPropertyChanged("nodeID")
				Me.OnnodeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_jid", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property jid() As String
		Get
			Return Me._jid
		End Get
		Set
			If (String.Equals(Me._jid, value) = false) Then
				Me.OnjidChanging(value)
				Me.SendPropertyChanging
				Me._jid = value
				Me.SendPropertyChanged("jid")
				Me.OnjidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_associationType", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property associationType() As String
		Get
			Return Me._associationType
		End Get
		Set
			If (String.Equals(Me._associationType, value) = false) Then
				Me.OnassociationTypeChanging(value)
				Me.SendPropertyChanging
				Me._associationType = value
				Me.SendPropertyChanged("associationType")
				Me.OnassociationTypeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofPubsubSubscription")>  _
Partial Public Class ofPubsubSubscription
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _serviceID As String
	
	Private _nodeID As String
	
	Private _id As String
	
	Private _jid As String
	
	Private _owner As String
	
	Private _state As String
	
	Private _deliver As Integer
	
	Private _digest As Integer
	
	Private _digest_frequency As Integer
	
	Private _expire As String
	
	Private _includeBody As Integer
	
	Private _showValues As String
	
	Private _subscriptionType As String
	
	Private _subscriptionDepth As Integer
	
	Private _keyword As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnserviceIDChanging(value As String)
    End Sub
    Partial Private Sub OnserviceIDChanged()
    End Sub
    Partial Private Sub OnnodeIDChanging(value As String)
    End Sub
    Partial Private Sub OnnodeIDChanged()
    End Sub
    Partial Private Sub OnidChanging(value As String)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnjidChanging(value As String)
    End Sub
    Partial Private Sub OnjidChanged()
    End Sub
    Partial Private Sub OnownerChanging(value As String)
    End Sub
    Partial Private Sub OnownerChanged()
    End Sub
    Partial Private Sub OnstateChanging(value As String)
    End Sub
    Partial Private Sub OnstateChanged()
    End Sub
    Partial Private Sub OndeliverChanging(value As Integer)
    End Sub
    Partial Private Sub OndeliverChanged()
    End Sub
    Partial Private Sub OndigestChanging(value As Integer)
    End Sub
    Partial Private Sub OndigestChanged()
    End Sub
    Partial Private Sub Ondigest_frequencyChanging(value As Integer)
    End Sub
    Partial Private Sub Ondigest_frequencyChanged()
    End Sub
    Partial Private Sub OnexpireChanging(value As String)
    End Sub
    Partial Private Sub OnexpireChanged()
    End Sub
    Partial Private Sub OnincludeBodyChanging(value As Integer)
    End Sub
    Partial Private Sub OnincludeBodyChanged()
    End Sub
    Partial Private Sub OnshowValuesChanging(value As String)
    End Sub
    Partial Private Sub OnshowValuesChanged()
    End Sub
    Partial Private Sub OnsubscriptionTypeChanging(value As String)
    End Sub
    Partial Private Sub OnsubscriptionTypeChanged()
    End Sub
    Partial Private Sub OnsubscriptionDepthChanging(value As Integer)
    End Sub
    Partial Private Sub OnsubscriptionDepthChanged()
    End Sub
    Partial Private Sub OnkeywordChanging(value As String)
    End Sub
    Partial Private Sub OnkeywordChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_serviceID", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property serviceID() As String
		Get
			Return Me._serviceID
		End Get
		Set
			If (String.Equals(Me._serviceID, value) = false) Then
				Me.OnserviceIDChanging(value)
				Me.SendPropertyChanging
				Me._serviceID = value
				Me.SendPropertyChanged("serviceID")
				Me.OnserviceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nodeID", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property nodeID() As String
		Get
			Return Me._nodeID
		End Get
		Set
			If (String.Equals(Me._nodeID, value) = false) Then
				Me.OnnodeIDChanging(value)
				Me.SendPropertyChanging
				Me._nodeID = value
				Me.SendPropertyChanged("nodeID")
				Me.OnnodeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property id() As String
		Get
			Return Me._id
		End Get
		Set
			If (String.Equals(Me._id, value) = false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_jid", DbType:="NVarChar(1024) NOT NULL", CanBeNull:=false)>  _
	Public Property jid() As String
		Get
			Return Me._jid
		End Get
		Set
			If (String.Equals(Me._jid, value) = false) Then
				Me.OnjidChanging(value)
				Me.SendPropertyChanging
				Me._jid = value
				Me.SendPropertyChanged("jid")
				Me.OnjidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_owner", DbType:="NVarChar(1024) NOT NULL", CanBeNull:=false)>  _
	Public Property owner() As String
		Get
			Return Me._owner
		End Get
		Set
			If (String.Equals(Me._owner, value) = false) Then
				Me.OnownerChanging(value)
				Me.SendPropertyChanging
				Me._owner = value
				Me.SendPropertyChanged("owner")
				Me.OnownerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me.OnstateChanging(value)
				Me.SendPropertyChanging
				Me._state = value
				Me.SendPropertyChanged("state")
				Me.OnstateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_deliver", DbType:="Int NOT NULL")>  _
	Public Property deliver() As Integer
		Get
			Return Me._deliver
		End Get
		Set
			If ((Me._deliver = value)  _
						= false) Then
				Me.OndeliverChanging(value)
				Me.SendPropertyChanging
				Me._deliver = value
				Me.SendPropertyChanged("deliver")
				Me.OndeliverChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_digest", DbType:="Int NOT NULL")>  _
	Public Property digest() As Integer
		Get
			Return Me._digest
		End Get
		Set
			If ((Me._digest = value)  _
						= false) Then
				Me.OndigestChanging(value)
				Me.SendPropertyChanging
				Me._digest = value
				Me.SendPropertyChanged("digest")
				Me.OndigestChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_digest_frequency", DbType:="Int NOT NULL")>  _
	Public Property digest_frequency() As Integer
		Get
			Return Me._digest_frequency
		End Get
		Set
			If ((Me._digest_frequency = value)  _
						= false) Then
				Me.Ondigest_frequencyChanging(value)
				Me.SendPropertyChanging
				Me._digest_frequency = value
				Me.SendPropertyChanged("digest_frequency")
				Me.Ondigest_frequencyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expire", DbType:="Char(15)")>  _
	Public Property expire() As String
		Get
			Return Me._expire
		End Get
		Set
			If (String.Equals(Me._expire, value) = false) Then
				Me.OnexpireChanging(value)
				Me.SendPropertyChanging
				Me._expire = value
				Me.SendPropertyChanged("expire")
				Me.OnexpireChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_includeBody", DbType:="Int NOT NULL")>  _
	Public Property includeBody() As Integer
		Get
			Return Me._includeBody
		End Get
		Set
			If ((Me._includeBody = value)  _
						= false) Then
				Me.OnincludeBodyChanging(value)
				Me.SendPropertyChanging
				Me._includeBody = value
				Me.SendPropertyChanged("includeBody")
				Me.OnincludeBodyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_showValues", DbType:="NVarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property showValues() As String
		Get
			Return Me._showValues
		End Get
		Set
			If (String.Equals(Me._showValues, value) = false) Then
				Me.OnshowValuesChanging(value)
				Me.SendPropertyChanging
				Me._showValues = value
				Me.SendPropertyChanged("showValues")
				Me.OnshowValuesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_subscriptionType", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property subscriptionType() As String
		Get
			Return Me._subscriptionType
		End Get
		Set
			If (String.Equals(Me._subscriptionType, value) = false) Then
				Me.OnsubscriptionTypeChanging(value)
				Me.SendPropertyChanging
				Me._subscriptionType = value
				Me.SendPropertyChanged("subscriptionType")
				Me.OnsubscriptionTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_subscriptionDepth", DbType:="Int NOT NULL")>  _
	Public Property subscriptionDepth() As Integer
		Get
			Return Me._subscriptionDepth
		End Get
		Set
			If ((Me._subscriptionDepth = value)  _
						= false) Then
				Me.OnsubscriptionDepthChanging(value)
				Me.SendPropertyChanging
				Me._subscriptionDepth = value
				Me.SendPropertyChanged("subscriptionDepth")
				Me.OnsubscriptionDepthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_keyword", DbType:="NVarChar(200)")>  _
	Public Property keyword() As String
		Get
			Return Me._keyword
		End Get
		Set
			If (String.Equals(Me._keyword, value) = false) Then
				Me.OnkeywordChanging(value)
				Me.SendPropertyChanging
				Me._keyword = value
				Me.SendPropertyChanged("keyword")
				Me.OnkeywordChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofRemoteServerConf")>  _
Partial Public Class ofRemoteServerConf
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _xmppDomain As String
	
	Private _remotePort As System.Nullable(Of Integer)
	
	Private _permission As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnxmppDomainChanging(value As String)
    End Sub
    Partial Private Sub OnxmppDomainChanged()
    End Sub
    Partial Private Sub OnremotePortChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnremotePortChanged()
    End Sub
    Partial Private Sub OnpermissionChanging(value As String)
    End Sub
    Partial Private Sub OnpermissionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_xmppDomain", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property xmppDomain() As String
		Get
			Return Me._xmppDomain
		End Get
		Set
			If (String.Equals(Me._xmppDomain, value) = false) Then
				Me.OnxmppDomainChanging(value)
				Me.SendPropertyChanging
				Me._xmppDomain = value
				Me.SendPropertyChanged("xmppDomain")
				Me.OnxmppDomainChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_remotePort", DbType:="Int")>  _
	Public Property remotePort() As System.Nullable(Of Integer)
		Get
			Return Me._remotePort
		End Get
		Set
			If (Me._remotePort.Equals(value) = false) Then
				Me.OnremotePortChanging(value)
				Me.SendPropertyChanging
				Me._remotePort = value
				Me.SendPropertyChanged("remotePort")
				Me.OnremotePortChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_permission", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property permission() As String
		Get
			Return Me._permission
		End Get
		Set
			If (String.Equals(Me._permission, value) = false) Then
				Me.OnpermissionChanging(value)
				Me.SendPropertyChanging
				Me._permission = value
				Me.SendPropertyChanged("permission")
				Me.OnpermissionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofRoster")>  _
Partial Public Class ofRoster
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rosterID As Integer
	
	Private _username As String
	
	Private _jid As String
	
	Private _sub As Integer
	
	Private _ask As Integer
	
	Private _recv As Integer
	
	Private _nick As String
	
	Private _ofRosterGroups As EntitySet(Of ofRosterGroups)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnrosterIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnrosterIDChanged()
    End Sub
    Partial Private Sub OnusernameChanging(value As String)
    End Sub
    Partial Private Sub OnusernameChanged()
    End Sub
    Partial Private Sub OnjidChanging(value As String)
    End Sub
    Partial Private Sub OnjidChanged()
    End Sub
    Partial Private Sub OnsubChanging(value As Integer)
    End Sub
    Partial Private Sub OnsubChanged()
    End Sub
    Partial Private Sub OnaskChanging(value As Integer)
    End Sub
    Partial Private Sub OnaskChanged()
    End Sub
    Partial Private Sub OnrecvChanging(value As Integer)
    End Sub
    Partial Private Sub OnrecvChanged()
    End Sub
    Partial Private Sub OnnickChanging(value As String)
    End Sub
    Partial Private Sub OnnickChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ofRosterGroups = New EntitySet(Of ofRosterGroups)(AddressOf Me.attach_ofRosterGroups, AddressOf Me.detach_ofRosterGroups)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rosterID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property rosterID() As Integer
		Get
			Return Me._rosterID
		End Get
		Set
			If ((Me._rosterID = value)  _
						= false) Then
				Me.OnrosterIDChanging(value)
				Me.SendPropertyChanging
				Me._rosterID = value
				Me.SendPropertyChanged("rosterID")
				Me.OnrosterIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="NVarChar(64) NOT NULL", CanBeNull:=false)>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				Me.OnusernameChanging(value)
				Me.SendPropertyChanging
				Me._username = value
				Me.SendPropertyChanged("username")
				Me.OnusernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_jid", DbType:="NVarChar(1024) NOT NULL", CanBeNull:=false)>  _
	Public Property jid() As String
		Get
			Return Me._jid
		End Get
		Set
			If (String.Equals(Me._jid, value) = false) Then
				Me.OnjidChanging(value)
				Me.SendPropertyChanging
				Me._jid = value
				Me.SendPropertyChanged("jid")
				Me.OnjidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sub", Storage:="_sub", DbType:="Int NOT NULL")>  _
	Public Property [sub]() As Integer
		Get
			Return Me._sub
		End Get
		Set
			If ((Me._sub = value)  _
						= false) Then
				Me.OnsubChanging(value)
				Me.SendPropertyChanging
				Me._sub = value
				Me.SendPropertyChanged("[sub]")
				Me.OnsubChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ask", DbType:="Int NOT NULL")>  _
	Public Property ask() As Integer
		Get
			Return Me._ask
		End Get
		Set
			If ((Me._ask = value)  _
						= false) Then
				Me.OnaskChanging(value)
				Me.SendPropertyChanging
				Me._ask = value
				Me.SendPropertyChanged("ask")
				Me.OnaskChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recv", DbType:="Int NOT NULL")>  _
	Public Property recv() As Integer
		Get
			Return Me._recv
		End Get
		Set
			If ((Me._recv = value)  _
						= false) Then
				Me.OnrecvChanging(value)
				Me.SendPropertyChanging
				Me._recv = value
				Me.SendPropertyChanged("recv")
				Me.OnrecvChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nick", DbType:="NVarChar(255)")>  _
	Public Property nick() As String
		Get
			Return Me._nick
		End Get
		Set
			If (String.Equals(Me._nick, value) = false) Then
				Me.OnnickChanging(value)
				Me.SendPropertyChanging
				Me._nick = value
				Me.SendPropertyChanged("nick")
				Me.OnnickChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ofRoster_ofRosterGroups", Storage:="_ofRosterGroups", ThisKey:="rosterID", OtherKey:="rosterID")>  _
	Public Property ofRosterGroups() As EntitySet(Of ofRosterGroups)
		Get
			Return Me._ofRosterGroups
		End Get
		Set
			Me._ofRosterGroups.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ofRosterGroups(ByVal entity As ofRosterGroups)
		Me.SendPropertyChanging
		entity.ofRoster = Me
	End Sub
	
	Private Sub detach_ofRosterGroups(ByVal entity As ofRosterGroups)
		Me.SendPropertyChanging
		entity.ofRoster = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofRosterGroups")>  _
Partial Public Class ofRosterGroups
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rosterID As Integer
	
	Private _rank As Integer
	
	Private _groupName As String
	
	Private _ofRoster As EntityRef(Of ofRoster)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnrosterIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnrosterIDChanged()
    End Sub
    Partial Private Sub OnrankChanging(value As Integer)
    End Sub
    Partial Private Sub OnrankChanged()
    End Sub
    Partial Private Sub OngroupNameChanging(value As String)
    End Sub
    Partial Private Sub OngroupNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ofRoster = CType(Nothing, EntityRef(Of ofRoster))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rosterID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property rosterID() As Integer
		Get
			Return Me._rosterID
		End Get
		Set
			If ((Me._rosterID = value)  _
						= false) Then
				If Me._ofRoster.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnrosterIDChanging(value)
				Me.SendPropertyChanging
				Me._rosterID = value
				Me.SendPropertyChanged("rosterID")
				Me.OnrosterIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rank", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property rank() As Integer
		Get
			Return Me._rank
		End Get
		Set
			If ((Me._rank = value)  _
						= false) Then
				Me.OnrankChanging(value)
				Me.SendPropertyChanging
				Me._rank = value
				Me.SendPropertyChanged("rank")
				Me.OnrankChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_groupName", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property groupName() As String
		Get
			Return Me._groupName
		End Get
		Set
			If (String.Equals(Me._groupName, value) = false) Then
				Me.OngroupNameChanging(value)
				Me.SendPropertyChanging
				Me._groupName = value
				Me.SendPropertyChanged("groupName")
				Me.OngroupNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ofRoster_ofRosterGroups", Storage:="_ofRoster", ThisKey:="rosterID", OtherKey:="rosterID", IsForeignKey:=true)>  _
	Public Property ofRoster() As ofRoster
		Get
			Return Me._ofRoster.Entity
		End Get
		Set
			Dim previousValue As ofRoster = Me._ofRoster.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ofRoster.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ofRoster.Entity = Nothing
					previousValue.ofRosterGroups.Remove(Me)
				End If
				Me._ofRoster.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ofRosterGroups.Add(Me)
					Me._rosterID = value.rosterID
				Else
					Me._rosterID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ofRoster")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofRRDs")>  _
Partial Public Class ofRRDs
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As String
	
	Private _updatedDate As Long
	
	Private _bytes As System.Data.Linq.Binary
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As String)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnupdatedDateChanging(value As Long)
    End Sub
    Partial Private Sub OnupdatedDateChanged()
    End Sub
    Partial Private Sub OnbytesChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnbytesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property id() As String
		Get
			Return Me._id
		End Get
		Set
			If (String.Equals(Me._id, value) = false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_updatedDate", DbType:="BigInt NOT NULL")>  _
	Public Property updatedDate() As Long
		Get
			Return Me._updatedDate
		End Get
		Set
			If ((Me._updatedDate = value)  _
						= false) Then
				Me.OnupdatedDateChanging(value)
				Me.SendPropertyChanging
				Me._updatedDate = value
				Me.SendPropertyChanged("updatedDate")
				Me.OnupdatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bytes", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property bytes() As System.Data.Linq.Binary
		Get
			Return Me._bytes
		End Get
		Set
			If (Object.Equals(Me._bytes, value) = false) Then
				Me.OnbytesChanging(value)
				Me.SendPropertyChanging
				Me._bytes = value
				Me.SendPropertyChanged("bytes")
				Me.OnbytesChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofSASLAuthorized")>  _
Partial Public Class ofSASLAuthorized
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _username As String
	
	Private _principal As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnusernameChanging(value As String)
    End Sub
    Partial Private Sub OnusernameChanged()
    End Sub
    Partial Private Sub OnprincipalChanging(value As String)
    End Sub
    Partial Private Sub OnprincipalChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="NVarChar(64) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				Me.OnusernameChanging(value)
				Me.SendPropertyChanging
				Me._username = value
				Me.SendPropertyChanged("username")
				Me.OnusernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_principal", DbType:="NVarChar(2000) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property principal() As String
		Get
			Return Me._principal
		End Get
		Set
			If (String.Equals(Me._principal, value) = false) Then
				Me.OnprincipalChanging(value)
				Me.SendPropertyChanging
				Me._principal = value
				Me.SendPropertyChanged("principal")
				Me.OnprincipalChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofSecurityAuditLog")>  _
Partial Public Class ofSecurityAuditLog
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _msgID As Integer
	
	Private _username As String
	
	Private _entryStamp As Long
	
	Private _summary As String
	
	Private _node As String
	
	Private _details As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnmsgIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnmsgIDChanged()
    End Sub
    Partial Private Sub OnusernameChanging(value As String)
    End Sub
    Partial Private Sub OnusernameChanged()
    End Sub
    Partial Private Sub OnentryStampChanging(value As Long)
    End Sub
    Partial Private Sub OnentryStampChanged()
    End Sub
    Partial Private Sub OnsummaryChanging(value As String)
    End Sub
    Partial Private Sub OnsummaryChanged()
    End Sub
    Partial Private Sub OnnodeChanging(value As String)
    End Sub
    Partial Private Sub OnnodeChanged()
    End Sub
    Partial Private Sub OndetailsChanging(value As String)
    End Sub
    Partial Private Sub OndetailsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_msgID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property msgID() As Integer
		Get
			Return Me._msgID
		End Get
		Set
			If ((Me._msgID = value)  _
						= false) Then
				Me.OnmsgIDChanging(value)
				Me.SendPropertyChanging
				Me._msgID = value
				Me.SendPropertyChanged("msgID")
				Me.OnmsgIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="NVarChar(64) NOT NULL", CanBeNull:=false)>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				Me.OnusernameChanging(value)
				Me.SendPropertyChanging
				Me._username = value
				Me.SendPropertyChanged("username")
				Me.OnusernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_entryStamp", DbType:="BigInt NOT NULL")>  _
	Public Property entryStamp() As Long
		Get
			Return Me._entryStamp
		End Get
		Set
			If ((Me._entryStamp = value)  _
						= false) Then
				Me.OnentryStampChanging(value)
				Me.SendPropertyChanging
				Me._entryStamp = value
				Me.SendPropertyChanged("entryStamp")
				Me.OnentryStampChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_summary", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property summary() As String
		Get
			Return Me._summary
		End Get
		Set
			If (String.Equals(Me._summary, value) = false) Then
				Me.OnsummaryChanging(value)
				Me.SendPropertyChanging
				Me._summary = value
				Me.SendPropertyChanged("summary")
				Me.OnsummaryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_node", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property node() As String
		Get
			Return Me._node
		End Get
		Set
			If (String.Equals(Me._node, value) = false) Then
				Me.OnnodeChanging(value)
				Me.SendPropertyChanging
				Me._node = value
				Me.SendPropertyChanged("node")
				Me.OnnodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_details", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property details() As String
		Get
			Return Me._details
		End Get
		Set
			If (String.Equals(Me._details, value) = false) Then
				Me.OndetailsChanging(value)
				Me.SendPropertyChanging
				Me._details = value
				Me.SendPropertyChanged("details")
				Me.OndetailsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofUser")>  _
Partial Public Class ofUser
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _username As String
	
	Private _plainPassword As String
	
	Private _encryptedPassword As String
	
	Private _name As String
	
	Private _email As String
	
	Private _creationDate As String
	
	Private _modificationDate As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnusernameChanging(value As String)
    End Sub
    Partial Private Sub OnusernameChanged()
    End Sub
    Partial Private Sub OnplainPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnplainPasswordChanged()
    End Sub
    Partial Private Sub OnencryptedPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnencryptedPasswordChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub OncreationDateChanging(value As String)
    End Sub
    Partial Private Sub OncreationDateChanged()
    End Sub
    Partial Private Sub OnmodificationDateChanging(value As String)
    End Sub
    Partial Private Sub OnmodificationDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="NVarChar(64) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				Me.OnusernameChanging(value)
				Me.SendPropertyChanging
				Me._username = value
				Me.SendPropertyChanged("username")
				Me.OnusernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_plainPassword", DbType:="NVarChar(32)")>  _
	Public Property plainPassword() As String
		Get
			Return Me._plainPassword
		End Get
		Set
			If (String.Equals(Me._plainPassword, value) = false) Then
				Me.OnplainPasswordChanging(value)
				Me.SendPropertyChanging
				Me._plainPassword = value
				Me.SendPropertyChanged("plainPassword")
				Me.OnplainPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_encryptedPassword", DbType:="NVarChar(255)")>  _
	Public Property encryptedPassword() As String
		Get
			Return Me._encryptedPassword
		End Get
		Set
			If (String.Equals(Me._encryptedPassword, value) = false) Then
				Me.OnencryptedPasswordChanging(value)
				Me.SendPropertyChanging
				Me._encryptedPassword = value
				Me.SendPropertyChanged("encryptedPassword")
				Me.OnencryptedPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="NVarChar(100)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="VarChar(100)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_creationDate", DbType:="Char(15) NOT NULL", CanBeNull:=false)>  _
	Public Property creationDate() As String
		Get
			Return Me._creationDate
		End Get
		Set
			If (String.Equals(Me._creationDate, value) = false) Then
				Me.OncreationDateChanging(value)
				Me.SendPropertyChanging
				Me._creationDate = value
				Me.SendPropertyChanged("creationDate")
				Me.OncreationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modificationDate", DbType:="Char(15) NOT NULL", CanBeNull:=false)>  _
	Public Property modificationDate() As String
		Get
			Return Me._modificationDate
		End Get
		Set
			If (String.Equals(Me._modificationDate, value) = false) Then
				Me.OnmodificationDateChanging(value)
				Me.SendPropertyChanging
				Me._modificationDate = value
				Me.SendPropertyChanged("modificationDate")
				Me.OnmodificationDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofUserFlag")>  _
Partial Public Class ofUserFlag
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _username As String
	
	Private _name As String
	
	Private _startTime As String
	
	Private _endTime As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnusernameChanging(value As String)
    End Sub
    Partial Private Sub OnusernameChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnstartTimeChanging(value As String)
    End Sub
    Partial Private Sub OnstartTimeChanged()
    End Sub
    Partial Private Sub OnendTimeChanging(value As String)
    End Sub
    Partial Private Sub OnendTimeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="NVarChar(64) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				Me.OnusernameChanging(value)
				Me.SendPropertyChanging
				Me._username = value
				Me.SendPropertyChanged("username")
				Me.OnusernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="Char(15)")>  _
	Public Property startTime() As String
		Get
			Return Me._startTime
		End Get
		Set
			If (String.Equals(Me._startTime, value) = false) Then
				Me.OnstartTimeChanging(value)
				Me.SendPropertyChanging
				Me._startTime = value
				Me.SendPropertyChanged("startTime")
				Me.OnstartTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="Char(15)")>  _
	Public Property endTime() As String
		Get
			Return Me._endTime
		End Get
		Set
			If (String.Equals(Me._endTime, value) = false) Then
				Me.OnendTimeChanging(value)
				Me.SendPropertyChanging
				Me._endTime = value
				Me.SendPropertyChanged("endTime")
				Me.OnendTimeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofUserProp")>  _
Partial Public Class ofUserProp
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _username As String
	
	Private _name As String
	
	Private _propValue As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnusernameChanging(value As String)
    End Sub
    Partial Private Sub OnusernameChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnpropValueChanging(value As String)
    End Sub
    Partial Private Sub OnpropValueChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="NVarChar(64) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				Me.OnusernameChanging(value)
				Me.SendPropertyChanging
				Me._username = value
				Me.SendPropertyChanged("username")
				Me.OnusernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_propValue", DbType:="NVarChar(2000) NOT NULL", CanBeNull:=false)>  _
	Public Property propValue() As String
		Get
			Return Me._propValue
		End Get
		Set
			If (String.Equals(Me._propValue, value) = false) Then
				Me.OnpropValueChanging(value)
				Me.SendPropertyChanging
				Me._propValue = value
				Me.SendPropertyChanged("propValue")
				Me.OnpropValueChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ofVCard")>  _
Partial Public Class ofVCard
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _username As String
	
	Private _vcard As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnusernameChanging(value As String)
    End Sub
    Partial Private Sub OnusernameChanged()
    End Sub
    Partial Private Sub OnvcardChanging(value As String)
    End Sub
    Partial Private Sub OnvcardChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="NVarChar(64) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				Me.OnusernameChanging(value)
				Me.SendPropertyChanging
				Me._username = value
				Me.SendPropertyChanged("username")
				Me.OnusernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vcard", DbType:="NText NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property vcard() As String
		Get
			Return Me._vcard
		End Get
		Set
			If (String.Equals(Me._vcard, value) = false) Then
				Me.OnvcardChanging(value)
				Me.SendPropertyChanging
				Me._vcard = value
				Me.SendPropertyChanged("vcard")
				Me.OnvcardChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
