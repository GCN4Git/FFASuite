'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18034
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection
Imports System.Runtime.Serialization


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="ARTB")>  _
Partial Public Class ArtBDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertARTBOPTCALC_FINGERPRINTS(instance As ARTBOPTCALC_FINGERPRINTS)
    End Sub
  Partial Private Sub UpdateARTBOPTCALC_FINGERPRINTS(instance As ARTBOPTCALC_FINGERPRINTS)
    End Sub
  Partial Private Sub DeleteARTBOPTCALC_FINGERPRINTS(instance As ARTBOPTCALC_FINGERPRINTS)
    End Sub
  Partial Private Sub InsertARTBOPTCALC_LICENSES(instance As ARTBOPTCALC_LICENSES)
    End Sub
  Partial Private Sub UpdateARTBOPTCALC_LICENSES(instance As ARTBOPTCALC_LICENSES)
    End Sub
  Partial Private Sub DeleteARTBOPTCALC_LICENSES(instance As ARTBOPTCALC_LICENSES)
    End Sub
  Partial Private Sub InsertARTBOPTCALC_PRODUCTS(instance As ARTBOPTCALC_PRODUCTS)
    End Sub
  Partial Private Sub UpdateARTBOPTCALC_PRODUCTS(instance As ARTBOPTCALC_PRODUCTS)
    End Sub
  Partial Private Sub DeleteARTBOPTCALC_PRODUCTS(instance As ARTBOPTCALC_PRODUCTS)
    End Sub
  Partial Private Sub InsertARTTBOPTCALC_PAYPAL_IPN(instance As ARTTBOPTCALC_PAYPAL_IPN)
    End Sub
  Partial Private Sub UpdateARTTBOPTCALC_PAYPAL_IPN(instance As ARTTBOPTCALC_PAYPAL_IPN)
    End Sub
  Partial Private Sub DeleteARTTBOPTCALC_PAYPAL_IPN(instance As ARTTBOPTCALC_PAYPAL_IPN)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("ARTBConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property ARTBOPTCALC_FINGERPRINTS() As System.Data.Linq.Table(Of ARTBOPTCALC_FINGERPRINTS)
		Get
			Return Me.GetTable(Of ARTBOPTCALC_FINGERPRINTS)
		End Get
	End Property
	
	Public ReadOnly Property ARTBOPTCALC_LICENSES() As System.Data.Linq.Table(Of ARTBOPTCALC_LICENSES)
		Get
			Return Me.GetTable(Of ARTBOPTCALC_LICENSES)
		End Get
	End Property
	
	Public ReadOnly Property ARTBOPTCALC_PRODUCTS() As System.Data.Linq.Table(Of ARTBOPTCALC_PRODUCTS)
		Get
			Return Me.GetTable(Of ARTBOPTCALC_PRODUCTS)
		End Get
	End Property
	
	Public ReadOnly Property ARTTBOPTCALC_PAYPAL_IPN() As System.Data.Linq.Table(Of ARTTBOPTCALC_PAYPAL_IPN)
		Get
			Return Me.GetTable(Of ARTTBOPTCALC_PAYPAL_IPN)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ARTBOPTCALC_FINGERPRINTS"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class ARTBOPTCALC_FINGERPRINTS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PRODUCT_ID As String
	
	Private _FINGER_PRINT As String
	
	Private _COMPUTER_NAME As String
	
	Private _ACTIVE As Boolean
	
	Private _DEMO_EXPIRATION_DATE As Date
	
	Private _HIDE As Boolean
	
	Private _LICENSE_KEY As String
	
	Private _OFID As String
	
	Private _UPDATER As Boolean
	
	Private _PRICER As Boolean
	
	Private _ARTBOPTCALC_LICENSES As EntityRef(Of ARTBOPTCALC_LICENSES)
	
	Private _ARTBOPTCALC_PRODUCTS As EntityRef(Of ARTBOPTCALC_PRODUCTS)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPRODUCT_IDChanging(value As String)
    End Sub
    Partial Private Sub OnPRODUCT_IDChanged()
    End Sub
    Partial Private Sub OnFINGER_PRINTChanging(value As String)
    End Sub
    Partial Private Sub OnFINGER_PRINTChanged()
    End Sub
    Partial Private Sub OnCOMPUTER_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnCOMPUTER_NAMEChanged()
    End Sub
    Partial Private Sub OnACTIVEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnACTIVEChanged()
    End Sub
    Partial Private Sub OnDEMO_EXPIRATION_DATEChanging(value As Date)
    End Sub
    Partial Private Sub OnDEMO_EXPIRATION_DATEChanged()
    End Sub
    Partial Private Sub OnHIDEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnHIDEChanged()
    End Sub
    Partial Private Sub OnLICENSE_KEYChanging(value As String)
    End Sub
    Partial Private Sub OnLICENSE_KEYChanged()
    End Sub
    Partial Private Sub OnOFIDChanging(value As String)
    End Sub
    Partial Private Sub OnOFIDChanged()
    End Sub
    Partial Private Sub OnUPDATERChanging(value As Boolean)
    End Sub
    Partial Private Sub OnUPDATERChanged()
    End Sub
    Partial Private Sub OnPRICERChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPRICERChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRODUCT_ID", DbType:="NChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property PRODUCT_ID() As String
		Get
			Return Me._PRODUCT_ID
		End Get
		Set
			If (String.Equals(Me._PRODUCT_ID, value) = false) Then
				If Me._ARTBOPTCALC_PRODUCTS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPRODUCT_IDChanging(value)
				Me.SendPropertyChanging
				Me._PRODUCT_ID = value
				Me.SendPropertyChanged("PRODUCT_ID")
				Me.OnPRODUCT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FINGER_PRINT", DbType:="NChar(39) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property FINGER_PRINT() As String
		Get
			Return Me._FINGER_PRINT
		End Get
		Set
			If (String.Equals(Me._FINGER_PRINT, value) = false) Then
				Me.OnFINGER_PRINTChanging(value)
				Me.SendPropertyChanging
				Me._FINGER_PRINT = value
				Me.SendPropertyChanged("FINGER_PRINT")
				Me.OnFINGER_PRINTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COMPUTER_NAME", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property COMPUTER_NAME() As String
		Get
			Return Me._COMPUTER_NAME
		End Get
		Set
			If (String.Equals(Me._COMPUTER_NAME, value) = false) Then
				Me.OnCOMPUTER_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._COMPUTER_NAME = value
				Me.SendPropertyChanged("COMPUTER_NAME")
				Me.OnCOMPUTER_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACTIVE", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property ACTIVE() As Boolean
		Get
			Return Me._ACTIVE
		End Get
		Set
			If ((Me._ACTIVE = value)  _
						= false) Then
				Me.OnACTIVEChanging(value)
				Me.SendPropertyChanging
				Me._ACTIVE = value
				Me.SendPropertyChanged("ACTIVE")
				Me.OnACTIVEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEMO_EXPIRATION_DATE", DbType:="Date NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property DEMO_EXPIRATION_DATE() As Date
		Get
			Return Me._DEMO_EXPIRATION_DATE
		End Get
		Set
			If ((Me._DEMO_EXPIRATION_DATE = value)  _
						= false) Then
				Me.OnDEMO_EXPIRATION_DATEChanging(value)
				Me.SendPropertyChanging
				Me._DEMO_EXPIRATION_DATE = value
				Me.SendPropertyChanged("DEMO_EXPIRATION_DATE")
				Me.OnDEMO_EXPIRATION_DATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HIDE", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property HIDE() As Boolean
		Get
			Return Me._HIDE
		End Get
		Set
			If ((Me._HIDE = value)  _
						= false) Then
				Me.OnHIDEChanging(value)
				Me.SendPropertyChanging
				Me._HIDE = value
				Me.SendPropertyChanged("HIDE")
				Me.OnHIDEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LICENSE_KEY", DbType:="NChar(15) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property LICENSE_KEY() As String
		Get
			Return Me._LICENSE_KEY
		End Get
		Set
			If (String.Equals(Me._LICENSE_KEY, value) = false) Then
				If Me._ARTBOPTCALC_LICENSES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLICENSE_KEYChanging(value)
				Me.SendPropertyChanging
				Me._LICENSE_KEY = value
				Me.SendPropertyChanged("LICENSE_KEY")
				Me.OnLICENSE_KEYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OFID", DbType:="Text", UpdateCheck:=UpdateCheck.Never),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property OFID() As String
		Get
			Return Me._OFID
		End Get
		Set
			If (String.Equals(Me._OFID, value) = false) Then
				Me.OnOFIDChanging(value)
				Me.SendPropertyChanging
				Me._OFID = value
				Me.SendPropertyChanged("OFID")
				Me.OnOFIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UPDATER", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property UPDATER() As Boolean
		Get
			Return Me._UPDATER
		End Get
		Set
			If ((Me._UPDATER = value)  _
						= false) Then
				Me.OnUPDATERChanging(value)
				Me.SendPropertyChanging
				Me._UPDATER = value
				Me.SendPropertyChanged("UPDATER")
				Me.OnUPDATERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICER", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10)>  _
	Public Property PRICER() As Boolean
		Get
			Return Me._PRICER
		End Get
		Set
			If ((Me._PRICER = value)  _
						= false) Then
				Me.OnPRICERChanging(value)
				Me.SendPropertyChanging
				Me._PRICER = value
				Me.SendPropertyChanged("PRICER")
				Me.OnPRICERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ARTBOPTCALC_LICENSES_ARTBOPTCALC_FINGERPRINTS", Storage:="_ARTBOPTCALC_LICENSES", ThisKey:="LICENSE_KEY", OtherKey:="LICENSE_KEY", IsForeignKey:=true)>  _
	Public Property ARTBOPTCALC_LICENSES() As ARTBOPTCALC_LICENSES
		Get
			Return Me._ARTBOPTCALC_LICENSES.Entity
		End Get
		Set
			Dim previousValue As ARTBOPTCALC_LICENSES = Me._ARTBOPTCALC_LICENSES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ARTBOPTCALC_LICENSES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ARTBOPTCALC_LICENSES.Entity = Nothing
					previousValue.ARTBOPTCALC_FINGERPRINTS.Remove(Me)
				End If
				Me._ARTBOPTCALC_LICENSES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ARTBOPTCALC_FINGERPRINTS.Add(Me)
					Me._LICENSE_KEY = value.LICENSE_KEY
				Else
					Me._LICENSE_KEY = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ARTBOPTCALC_LICENSES")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ARTBOPTCALC_PRODUCTS_ARTBOPTCALC_FINGERPRINTS", Storage:="_ARTBOPTCALC_PRODUCTS", ThisKey:="PRODUCT_ID", OtherKey:="PRODUCT_ID", IsForeignKey:=true)>  _
	Public Property ARTBOPTCALC_PRODUCTS() As ARTBOPTCALC_PRODUCTS
		Get
			Return Me._ARTBOPTCALC_PRODUCTS.Entity
		End Get
		Set
			Dim previousValue As ARTBOPTCALC_PRODUCTS = Me._ARTBOPTCALC_PRODUCTS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ARTBOPTCALC_PRODUCTS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ARTBOPTCALC_PRODUCTS.Entity = Nothing
					previousValue.ARTBOPTCALC_FINGERPRINTS.Remove(Me)
				End If
				Me._ARTBOPTCALC_PRODUCTS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ARTBOPTCALC_FINGERPRINTS.Add(Me)
					Me._PRODUCT_ID = value.PRODUCT_ID
				Else
					Me._PRODUCT_ID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ARTBOPTCALC_PRODUCTS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._ARTBOPTCALC_LICENSES = CType(Nothing, EntityRef(Of ARTBOPTCALC_LICENSES))
		Me._ARTBOPTCALC_PRODUCTS = CType(Nothing, EntityRef(Of ARTBOPTCALC_PRODUCTS))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ARTBOPTCALC_LICENSES"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class ARTBOPTCALC_LICENSES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _LICENSE_KEY As String
	
	Private _PRODUCT_ID As String
	
	Private _DEMO As Boolean
	
	Private _MAX_LICENSES As Integer
	
	Private _USED_LICENSES As Integer
	
	Private _LICENSE_PURCH_DATE As System.Nullable(Of Date)
	
	Private _LICENSE_EXP_DATE As System.Nullable(Of Date)
	
	Private _REG_NAME As String
	
	Private _EMAIL As String
	
	Private _FIRSTNAME As String
	
	Private _LASTNAME As String
	
	Private _COMPANY As String
	
	Private _COUNTRY As String
	
	Private _PURCHASE_ID As String
	
	Private _BROKER As Boolean
	
	Private _ARTBOPTCALC_FINGERPRINTS As EntitySet(Of ARTBOPTCALC_FINGERPRINTS)
	
	Private _ARTBOPTCALC_PRODUCTS As EntityRef(Of ARTBOPTCALC_PRODUCTS)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnLICENSE_KEYChanging(value As String)
    End Sub
    Partial Private Sub OnLICENSE_KEYChanged()
    End Sub
    Partial Private Sub OnPRODUCT_IDChanging(value As String)
    End Sub
    Partial Private Sub OnPRODUCT_IDChanged()
    End Sub
    Partial Private Sub OnDEMOChanging(value As Boolean)
    End Sub
    Partial Private Sub OnDEMOChanged()
    End Sub
    Partial Private Sub OnMAX_LICENSESChanging(value As Integer)
    End Sub
    Partial Private Sub OnMAX_LICENSESChanged()
    End Sub
    Partial Private Sub OnUSED_LICENSESChanging(value As Integer)
    End Sub
    Partial Private Sub OnUSED_LICENSESChanged()
    End Sub
    Partial Private Sub OnLICENSE_PURCH_DATEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLICENSE_PURCH_DATEChanged()
    End Sub
    Partial Private Sub OnLICENSE_EXP_DATEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLICENSE_EXP_DATEChanged()
    End Sub
    Partial Private Sub OnREG_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnREG_NAMEChanged()
    End Sub
    Partial Private Sub OnEMAILChanging(value As String)
    End Sub
    Partial Private Sub OnEMAILChanged()
    End Sub
    Partial Private Sub OnFIRSTNAMEChanging(value As String)
    End Sub
    Partial Private Sub OnFIRSTNAMEChanged()
    End Sub
    Partial Private Sub OnLASTNAMEChanging(value As String)
    End Sub
    Partial Private Sub OnLASTNAMEChanged()
    End Sub
    Partial Private Sub OnCOMPANYChanging(value As String)
    End Sub
    Partial Private Sub OnCOMPANYChanged()
    End Sub
    Partial Private Sub OnCOUNTRYChanging(value As String)
    End Sub
    Partial Private Sub OnCOUNTRYChanged()
    End Sub
    Partial Private Sub OnPURCHASE_IDChanging(value As String)
    End Sub
    Partial Private Sub OnPURCHASE_IDChanged()
    End Sub
    Partial Private Sub OnBROKERChanging(value As Boolean)
    End Sub
    Partial Private Sub OnBROKERChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LICENSE_KEY", DbType:="NChar(15) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property LICENSE_KEY() As String
		Get
			Return Me._LICENSE_KEY
		End Get
		Set
			If (String.Equals(Me._LICENSE_KEY, value) = false) Then
				Me.OnLICENSE_KEYChanging(value)
				Me.SendPropertyChanging
				Me._LICENSE_KEY = value
				Me.SendPropertyChanged("LICENSE_KEY")
				Me.OnLICENSE_KEYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRODUCT_ID", DbType:="NChar(10) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property PRODUCT_ID() As String
		Get
			Return Me._PRODUCT_ID
		End Get
		Set
			If (String.Equals(Me._PRODUCT_ID, value) = false) Then
				If Me._ARTBOPTCALC_PRODUCTS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPRODUCT_IDChanging(value)
				Me.SendPropertyChanging
				Me._PRODUCT_ID = value
				Me.SendPropertyChanged("PRODUCT_ID")
				Me.OnPRODUCT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEMO", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property DEMO() As Boolean
		Get
			Return Me._DEMO
		End Get
		Set
			If ((Me._DEMO = value)  _
						= false) Then
				Me.OnDEMOChanging(value)
				Me.SendPropertyChanging
				Me._DEMO = value
				Me.SendPropertyChanged("DEMO")
				Me.OnDEMOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MAX_LICENSES", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property MAX_LICENSES() As Integer
		Get
			Return Me._MAX_LICENSES
		End Get
		Set
			If ((Me._MAX_LICENSES = value)  _
						= false) Then
				Me.OnMAX_LICENSESChanging(value)
				Me.SendPropertyChanging
				Me._MAX_LICENSES = value
				Me.SendPropertyChanged("MAX_LICENSES")
				Me.OnMAX_LICENSESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_USED_LICENSES", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property USED_LICENSES() As Integer
		Get
			Return Me._USED_LICENSES
		End Get
		Set
			If ((Me._USED_LICENSES = value)  _
						= false) Then
				Me.OnUSED_LICENSESChanging(value)
				Me.SendPropertyChanging
				Me._USED_LICENSES = value
				Me.SendPropertyChanged("USED_LICENSES")
				Me.OnUSED_LICENSESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LICENSE_PURCH_DATE", DbType:="Date"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property LICENSE_PURCH_DATE() As System.Nullable(Of Date)
		Get
			Return Me._LICENSE_PURCH_DATE
		End Get
		Set
			If (Me._LICENSE_PURCH_DATE.Equals(value) = false) Then
				Me.OnLICENSE_PURCH_DATEChanging(value)
				Me.SendPropertyChanging
				Me._LICENSE_PURCH_DATE = value
				Me.SendPropertyChanged("LICENSE_PURCH_DATE")
				Me.OnLICENSE_PURCH_DATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LICENSE_EXP_DATE", DbType:="Date"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property LICENSE_EXP_DATE() As System.Nullable(Of Date)
		Get
			Return Me._LICENSE_EXP_DATE
		End Get
		Set
			If (Me._LICENSE_EXP_DATE.Equals(value) = false) Then
				Me.OnLICENSE_EXP_DATEChanging(value)
				Me.SendPropertyChanging
				Me._LICENSE_EXP_DATE = value
				Me.SendPropertyChanged("LICENSE_EXP_DATE")
				Me.OnLICENSE_EXP_DATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REG_NAME", DbType:="Text", UpdateCheck:=UpdateCheck.Never),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property REG_NAME() As String
		Get
			Return Me._REG_NAME
		End Get
		Set
			If (String.Equals(Me._REG_NAME, value) = false) Then
				Me.OnREG_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._REG_NAME = value
				Me.SendPropertyChanged("REG_NAME")
				Me.OnREG_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMAIL", DbType:="Text", UpdateCheck:=UpdateCheck.Never),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10)>  _
	Public Property EMAIL() As String
		Get
			Return Me._EMAIL
		End Get
		Set
			If (String.Equals(Me._EMAIL, value) = false) Then
				Me.OnEMAILChanging(value)
				Me.SendPropertyChanging
				Me._EMAIL = value
				Me.SendPropertyChanged("EMAIL")
				Me.OnEMAILChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIRSTNAME", DbType:="Text", UpdateCheck:=UpdateCheck.Never),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=11)>  _
	Public Property FIRSTNAME() As String
		Get
			Return Me._FIRSTNAME
		End Get
		Set
			If (String.Equals(Me._FIRSTNAME, value) = false) Then
				Me.OnFIRSTNAMEChanging(value)
				Me.SendPropertyChanging
				Me._FIRSTNAME = value
				Me.SendPropertyChanged("FIRSTNAME")
				Me.OnFIRSTNAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LASTNAME", DbType:="Text", UpdateCheck:=UpdateCheck.Never),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=12)>  _
	Public Property LASTNAME() As String
		Get
			Return Me._LASTNAME
		End Get
		Set
			If (String.Equals(Me._LASTNAME, value) = false) Then
				Me.OnLASTNAMEChanging(value)
				Me.SendPropertyChanging
				Me._LASTNAME = value
				Me.SendPropertyChanged("LASTNAME")
				Me.OnLASTNAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COMPANY", DbType:="Text", UpdateCheck:=UpdateCheck.Never),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=13)>  _
	Public Property COMPANY() As String
		Get
			Return Me._COMPANY
		End Get
		Set
			If (String.Equals(Me._COMPANY, value) = false) Then
				Me.OnCOMPANYChanging(value)
				Me.SendPropertyChanging
				Me._COMPANY = value
				Me.SendPropertyChanged("COMPANY")
				Me.OnCOMPANYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COUNTRY", DbType:="Text", UpdateCheck:=UpdateCheck.Never),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=14)>  _
	Public Property COUNTRY() As String
		Get
			Return Me._COUNTRY
		End Get
		Set
			If (String.Equals(Me._COUNTRY, value) = false) Then
				Me.OnCOUNTRYChanging(value)
				Me.SendPropertyChanging
				Me._COUNTRY = value
				Me.SendPropertyChanged("COUNTRY")
				Me.OnCOUNTRYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PURCHASE_ID", DbType:="Text", UpdateCheck:=UpdateCheck.Never),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=15)>  _
	Public Property PURCHASE_ID() As String
		Get
			Return Me._PURCHASE_ID
		End Get
		Set
			If (String.Equals(Me._PURCHASE_ID, value) = false) Then
				Me.OnPURCHASE_IDChanging(value)
				Me.SendPropertyChanging
				Me._PURCHASE_ID = value
				Me.SendPropertyChanged("PURCHASE_ID")
				Me.OnPURCHASE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BROKER", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=16)>  _
	Public Property BROKER() As Boolean
		Get
			Return Me._BROKER
		End Get
		Set
			If ((Me._BROKER = value)  _
						= false) Then
				Me.OnBROKERChanging(value)
				Me.SendPropertyChanging
				Me._BROKER = value
				Me.SendPropertyChanged("BROKER")
				Me.OnBROKERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ARTBOPTCALC_LICENSES_ARTBOPTCALC_FINGERPRINTS", Storage:="_ARTBOPTCALC_FINGERPRINTS", ThisKey:="LICENSE_KEY", OtherKey:="LICENSE_KEY"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=17, EmitDefaultValue:=false)>  _
	Public Property ARTBOPTCALC_FINGERPRINTS() As EntitySet(Of ARTBOPTCALC_FINGERPRINTS)
		Get
			If (Me.serializing  _
						AndAlso (Me._ARTBOPTCALC_FINGERPRINTS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ARTBOPTCALC_FINGERPRINTS
		End Get
		Set
			Me._ARTBOPTCALC_FINGERPRINTS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ARTBOPTCALC_PRODUCTS_ARTBOPTCALC_LICENSES", Storage:="_ARTBOPTCALC_PRODUCTS", ThisKey:="PRODUCT_ID", OtherKey:="PRODUCT_ID", IsForeignKey:=true)>  _
	Public Property ARTBOPTCALC_PRODUCTS() As ARTBOPTCALC_PRODUCTS
		Get
			Return Me._ARTBOPTCALC_PRODUCTS.Entity
		End Get
		Set
			Dim previousValue As ARTBOPTCALC_PRODUCTS = Me._ARTBOPTCALC_PRODUCTS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ARTBOPTCALC_PRODUCTS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ARTBOPTCALC_PRODUCTS.Entity = Nothing
					previousValue.ARTBOPTCALC_LICENSES.Remove(Me)
				End If
				Me._ARTBOPTCALC_PRODUCTS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ARTBOPTCALC_LICENSES.Add(Me)
					Me._PRODUCT_ID = value.PRODUCT_ID
				Else
					Me._PRODUCT_ID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ARTBOPTCALC_PRODUCTS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ARTBOPTCALC_FINGERPRINTS(ByVal entity As ARTBOPTCALC_FINGERPRINTS)
		Me.SendPropertyChanging
		entity.ARTBOPTCALC_LICENSES = Me
	End Sub
	
	Private Sub detach_ARTBOPTCALC_FINGERPRINTS(ByVal entity As ARTBOPTCALC_FINGERPRINTS)
		Me.SendPropertyChanging
		entity.ARTBOPTCALC_LICENSES = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._ARTBOPTCALC_FINGERPRINTS = New EntitySet(Of ARTBOPTCALC_FINGERPRINTS)(AddressOf Me.attach_ARTBOPTCALC_FINGERPRINTS, AddressOf Me.detach_ARTBOPTCALC_FINGERPRINTS)
		Me._ARTBOPTCALC_PRODUCTS = CType(Nothing, EntityRef(Of ARTBOPTCALC_PRODUCTS))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ARTBOPTCALC_PRODUCTS"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class ARTBOPTCALC_PRODUCTS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PRODUCT_ID As String
	
	Private _ACTIVE As Boolean
	
	Private _CCY_ID As Integer
	
	Private _BASE_PRICE As Double
	
	Private _DISCOUNTS As Boolean
	
	Private _DISC_TIER1 As Integer
	
	Private _DISC_PRC1 As Double
	
	Private _DISC_TIER2 As Integer
	
	Private _DISC_PRC2 As Double
	
	Private _DISC_TIER3 As Integer
	
	Private _DISC_PRC3 As Double
	
	Private _DISC_TIER4 As Integer
	
	Private _DISC_PRC4 As Double
	
	Private _ARTBOPTCALC_FINGERPRINTS As EntitySet(Of ARTBOPTCALC_FINGERPRINTS)
	
	Private _ARTBOPTCALC_LICENSES As EntitySet(Of ARTBOPTCALC_LICENSES)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPRODUCT_IDChanging(value As String)
    End Sub
    Partial Private Sub OnPRODUCT_IDChanged()
    End Sub
    Partial Private Sub OnACTIVEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnACTIVEChanged()
    End Sub
    Partial Private Sub OnCCY_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCCY_IDChanged()
    End Sub
    Partial Private Sub OnBASE_PRICEChanging(value As Double)
    End Sub
    Partial Private Sub OnBASE_PRICEChanged()
    End Sub
    Partial Private Sub OnDISCOUNTSChanging(value As Boolean)
    End Sub
    Partial Private Sub OnDISCOUNTSChanged()
    End Sub
    Partial Private Sub OnDISC_TIER1Changing(value As Integer)
    End Sub
    Partial Private Sub OnDISC_TIER1Changed()
    End Sub
    Partial Private Sub OnDISC_PRC1Changing(value As Double)
    End Sub
    Partial Private Sub OnDISC_PRC1Changed()
    End Sub
    Partial Private Sub OnDISC_TIER2Changing(value As Integer)
    End Sub
    Partial Private Sub OnDISC_TIER2Changed()
    End Sub
    Partial Private Sub OnDISC_PRC2Changing(value As Double)
    End Sub
    Partial Private Sub OnDISC_PRC2Changed()
    End Sub
    Partial Private Sub OnDISC_TIER3Changing(value As Integer)
    End Sub
    Partial Private Sub OnDISC_TIER3Changed()
    End Sub
    Partial Private Sub OnDISC_PRC3Changing(value As Double)
    End Sub
    Partial Private Sub OnDISC_PRC3Changed()
    End Sub
    Partial Private Sub OnDISC_TIER4Changing(value As Integer)
    End Sub
    Partial Private Sub OnDISC_TIER4Changed()
    End Sub
    Partial Private Sub OnDISC_PRC4Changing(value As Double)
    End Sub
    Partial Private Sub OnDISC_PRC4Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRODUCT_ID", DbType:="NChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property PRODUCT_ID() As String
		Get
			Return Me._PRODUCT_ID
		End Get
		Set
			If (String.Equals(Me._PRODUCT_ID, value) = false) Then
				Me.OnPRODUCT_IDChanging(value)
				Me.SendPropertyChanging
				Me._PRODUCT_ID = value
				Me.SendPropertyChanged("PRODUCT_ID")
				Me.OnPRODUCT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACTIVE", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property ACTIVE() As Boolean
		Get
			Return Me._ACTIVE
		End Get
		Set
			If ((Me._ACTIVE = value)  _
						= false) Then
				Me.OnACTIVEChanging(value)
				Me.SendPropertyChanging
				Me._ACTIVE = value
				Me.SendPropertyChanged("ACTIVE")
				Me.OnACTIVEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCY_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property CCY_ID() As Integer
		Get
			Return Me._CCY_ID
		End Get
		Set
			If ((Me._CCY_ID = value)  _
						= false) Then
				Me.OnCCY_IDChanging(value)
				Me.SendPropertyChanging
				Me._CCY_ID = value
				Me.SendPropertyChanged("CCY_ID")
				Me.OnCCY_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BASE_PRICE", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property BASE_PRICE() As Double
		Get
			Return Me._BASE_PRICE
		End Get
		Set
			If ((Me._BASE_PRICE = value)  _
						= false) Then
				Me.OnBASE_PRICEChanging(value)
				Me.SendPropertyChanging
				Me._BASE_PRICE = value
				Me.SendPropertyChanged("BASE_PRICE")
				Me.OnBASE_PRICEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DISCOUNTS", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property DISCOUNTS() As Boolean
		Get
			Return Me._DISCOUNTS
		End Get
		Set
			If ((Me._DISCOUNTS = value)  _
						= false) Then
				Me.OnDISCOUNTSChanging(value)
				Me.SendPropertyChanging
				Me._DISCOUNTS = value
				Me.SendPropertyChanged("DISCOUNTS")
				Me.OnDISCOUNTSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DISC_TIER1", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property DISC_TIER1() As Integer
		Get
			Return Me._DISC_TIER1
		End Get
		Set
			If ((Me._DISC_TIER1 = value)  _
						= false) Then
				Me.OnDISC_TIER1Changing(value)
				Me.SendPropertyChanging
				Me._DISC_TIER1 = value
				Me.SendPropertyChanged("DISC_TIER1")
				Me.OnDISC_TIER1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DISC_PRC1", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property DISC_PRC1() As Double
		Get
			Return Me._DISC_PRC1
		End Get
		Set
			If ((Me._DISC_PRC1 = value)  _
						= false) Then
				Me.OnDISC_PRC1Changing(value)
				Me.SendPropertyChanging
				Me._DISC_PRC1 = value
				Me.SendPropertyChanged("DISC_PRC1")
				Me.OnDISC_PRC1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DISC_TIER2", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property DISC_TIER2() As Integer
		Get
			Return Me._DISC_TIER2
		End Get
		Set
			If ((Me._DISC_TIER2 = value)  _
						= false) Then
				Me.OnDISC_TIER2Changing(value)
				Me.SendPropertyChanging
				Me._DISC_TIER2 = value
				Me.SendPropertyChanged("DISC_TIER2")
				Me.OnDISC_TIER2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DISC_PRC2", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property DISC_PRC2() As Double
		Get
			Return Me._DISC_PRC2
		End Get
		Set
			If ((Me._DISC_PRC2 = value)  _
						= false) Then
				Me.OnDISC_PRC2Changing(value)
				Me.SendPropertyChanging
				Me._DISC_PRC2 = value
				Me.SendPropertyChanged("DISC_PRC2")
				Me.OnDISC_PRC2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DISC_TIER3", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10)>  _
	Public Property DISC_TIER3() As Integer
		Get
			Return Me._DISC_TIER3
		End Get
		Set
			If ((Me._DISC_TIER3 = value)  _
						= false) Then
				Me.OnDISC_TIER3Changing(value)
				Me.SendPropertyChanging
				Me._DISC_TIER3 = value
				Me.SendPropertyChanged("DISC_TIER3")
				Me.OnDISC_TIER3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DISC_PRC3", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=11)>  _
	Public Property DISC_PRC3() As Double
		Get
			Return Me._DISC_PRC3
		End Get
		Set
			If ((Me._DISC_PRC3 = value)  _
						= false) Then
				Me.OnDISC_PRC3Changing(value)
				Me.SendPropertyChanging
				Me._DISC_PRC3 = value
				Me.SendPropertyChanged("DISC_PRC3")
				Me.OnDISC_PRC3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DISC_TIER4", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=12)>  _
	Public Property DISC_TIER4() As Integer
		Get
			Return Me._DISC_TIER4
		End Get
		Set
			If ((Me._DISC_TIER4 = value)  _
						= false) Then
				Me.OnDISC_TIER4Changing(value)
				Me.SendPropertyChanging
				Me._DISC_TIER4 = value
				Me.SendPropertyChanged("DISC_TIER4")
				Me.OnDISC_TIER4Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DISC_PRC4", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=13)>  _
	Public Property DISC_PRC4() As Double
		Get
			Return Me._DISC_PRC4
		End Get
		Set
			If ((Me._DISC_PRC4 = value)  _
						= false) Then
				Me.OnDISC_PRC4Changing(value)
				Me.SendPropertyChanging
				Me._DISC_PRC4 = value
				Me.SendPropertyChanged("DISC_PRC4")
				Me.OnDISC_PRC4Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ARTBOPTCALC_PRODUCTS_ARTBOPTCALC_FINGERPRINTS", Storage:="_ARTBOPTCALC_FINGERPRINTS", ThisKey:="PRODUCT_ID", OtherKey:="PRODUCT_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=14, EmitDefaultValue:=false)>  _
	Public Property ARTBOPTCALC_FINGERPRINTS() As EntitySet(Of ARTBOPTCALC_FINGERPRINTS)
		Get
			If (Me.serializing  _
						AndAlso (Me._ARTBOPTCALC_FINGERPRINTS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ARTBOPTCALC_FINGERPRINTS
		End Get
		Set
			Me._ARTBOPTCALC_FINGERPRINTS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ARTBOPTCALC_PRODUCTS_ARTBOPTCALC_LICENSES", Storage:="_ARTBOPTCALC_LICENSES", ThisKey:="PRODUCT_ID", OtherKey:="PRODUCT_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=15, EmitDefaultValue:=false)>  _
	Public Property ARTBOPTCALC_LICENSES() As EntitySet(Of ARTBOPTCALC_LICENSES)
		Get
			If (Me.serializing  _
						AndAlso (Me._ARTBOPTCALC_LICENSES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ARTBOPTCALC_LICENSES
		End Get
		Set
			Me._ARTBOPTCALC_LICENSES.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ARTBOPTCALC_FINGERPRINTS(ByVal entity As ARTBOPTCALC_FINGERPRINTS)
		Me.SendPropertyChanging
		entity.ARTBOPTCALC_PRODUCTS = Me
	End Sub
	
	Private Sub detach_ARTBOPTCALC_FINGERPRINTS(ByVal entity As ARTBOPTCALC_FINGERPRINTS)
		Me.SendPropertyChanging
		entity.ARTBOPTCALC_PRODUCTS = Nothing
	End Sub
	
	Private Sub attach_ARTBOPTCALC_LICENSES(ByVal entity As ARTBOPTCALC_LICENSES)
		Me.SendPropertyChanging
		entity.ARTBOPTCALC_PRODUCTS = Me
	End Sub
	
	Private Sub detach_ARTBOPTCALC_LICENSES(ByVal entity As ARTBOPTCALC_LICENSES)
		Me.SendPropertyChanging
		entity.ARTBOPTCALC_PRODUCTS = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._ARTBOPTCALC_FINGERPRINTS = New EntitySet(Of ARTBOPTCALC_FINGERPRINTS)(AddressOf Me.attach_ARTBOPTCALC_FINGERPRINTS, AddressOf Me.detach_ARTBOPTCALC_FINGERPRINTS)
		Me._ARTBOPTCALC_LICENSES = New EntitySet(Of ARTBOPTCALC_LICENSES)(AddressOf Me.attach_ARTBOPTCALC_LICENSES, AddressOf Me.detach_ARTBOPTCALC_LICENSES)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ARTTBOPTCALC_PAYPAL_IPN"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class ARTTBOPTCALC_PAYPAL_IPN
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LICENSE_ID As Integer
	
	Private _ipn_track_id As String
	
	Private _STATUS As Integer
	
	Private _strRequest As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLICENSE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnLICENSE_IDChanged()
    End Sub
    Partial Private Sub Onipn_track_idChanging(value As String)
    End Sub
    Partial Private Sub Onipn_track_idChanged()
    End Sub
    Partial Private Sub OnSTATUSChanging(value As Integer)
    End Sub
    Partial Private Sub OnSTATUSChanged()
    End Sub
    Partial Private Sub OnstrRequestChanging(value As String)
    End Sub
    Partial Private Sub OnstrRequestChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LICENSE_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property LICENSE_ID() As Integer
		Get
			Return Me._LICENSE_ID
		End Get
		Set
			If ((Me._LICENSE_ID = value)  _
						= false) Then
				Me.OnLICENSE_IDChanging(value)
				Me.SendPropertyChanging
				Me._LICENSE_ID = value
				Me.SendPropertyChanged("LICENSE_ID")
				Me.OnLICENSE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ipn_track_id", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property ipn_track_id() As String
		Get
			Return Me._ipn_track_id
		End Get
		Set
			If (String.Equals(Me._ipn_track_id, value) = false) Then
				Me.Onipn_track_idChanging(value)
				Me.SendPropertyChanging
				Me._ipn_track_id = value
				Me.SendPropertyChanged("ipn_track_id")
				Me.Onipn_track_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_STATUS", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property STATUS() As Integer
		Get
			Return Me._STATUS
		End Get
		Set
			If ((Me._STATUS = value)  _
						= false) Then
				Me.OnSTATUSChanging(value)
				Me.SendPropertyChanging
				Me._STATUS = value
				Me.SendPropertyChanged("STATUS")
				Me.OnSTATUSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strRequest", DbType:="Text", UpdateCheck:=UpdateCheck.Never),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property strRequest() As String
		Get
			Return Me._strRequest
		End Get
		Set
			If (String.Equals(Me._strRequest, value) = false) Then
				Me.OnstrRequestChanging(value)
				Me.SendPropertyChanging
				Me._strRequest = value
				Me.SendPropertyChanged("strRequest")
				Me.OnstrRequestChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class
