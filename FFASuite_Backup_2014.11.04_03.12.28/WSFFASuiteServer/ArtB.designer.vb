'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18034
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection
Imports System.Runtime.Serialization


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="ARTB")>  _
Partial Public Class ArtBDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertACCOUNT_DESKS(instance As ACCOUNT_DESKS)
    End Sub
  Partial Private Sub UpdateACCOUNT_DESKS(instance As ACCOUNT_DESKS)
    End Sub
  Partial Private Sub DeleteACCOUNT_DESKS(instance As ACCOUNT_DESKS)
    End Sub
  Partial Private Sub InsertWET_FLAT_RATES(instance As WET_FLAT_RATES)
    End Sub
  Partial Private Sub UpdateWET_FLAT_RATES(instance As WET_FLAT_RATES)
    End Sub
  Partial Private Sub DeleteWET_FLAT_RATES(instance As WET_FLAT_RATES)
    End Sub
  Partial Private Sub InsertACCOUNT_TYPES(instance As ACCOUNT_TYPES)
    End Sub
  Partial Private Sub UpdateACCOUNT_TYPES(instance As ACCOUNT_TYPES)
    End Sub
  Partial Private Sub DeleteACCOUNT_TYPES(instance As ACCOUNT_TYPES)
    End Sub
  Partial Private Sub InsertACCOUNTS(instance As ACCOUNTS)
    End Sub
  Partial Private Sub UpdateACCOUNTS(instance As ACCOUNTS)
    End Sub
  Partial Private Sub DeleteACCOUNTS(instance As ACCOUNTS)
    End Sub
  Partial Private Sub InsertACCOUNTS_CONTACTS(instance As ACCOUNTS_CONTACTS)
    End Sub
  Partial Private Sub UpdateACCOUNTS_CONTACTS(instance As ACCOUNTS_CONTACTS)
    End Sub
  Partial Private Sub DeleteACCOUNTS_CONTACTS(instance As ACCOUNTS_CONTACTS)
    End Sub
  Partial Private Sub InsertARTBOPTCALC_FINGERPRINTS(instance As ARTBOPTCALC_FINGERPRINTS)
    End Sub
  Partial Private Sub UpdateARTBOPTCALC_FINGERPRINTS(instance As ARTBOPTCALC_FINGERPRINTS)
    End Sub
  Partial Private Sub DeleteARTBOPTCALC_FINGERPRINTS(instance As ARTBOPTCALC_FINGERPRINTS)
    End Sub
  Partial Private Sub InsertARTBOPTCALC_LICENSES(instance As ARTBOPTCALC_LICENSES)
    End Sub
  Partial Private Sub UpdateARTBOPTCALC_LICENSES(instance As ARTBOPTCALC_LICENSES)
    End Sub
  Partial Private Sub DeleteARTBOPTCALC_LICENSES(instance As ARTBOPTCALC_LICENSES)
    End Sub
  Partial Private Sub InsertARTBOPTCALC_PRODUCTS(instance As ARTBOPTCALC_PRODUCTS)
    End Sub
  Partial Private Sub UpdateARTBOPTCALC_PRODUCTS(instance As ARTBOPTCALC_PRODUCTS)
    End Sub
  Partial Private Sub DeleteARTBOPTCALC_PRODUCTS(instance As ARTBOPTCALC_PRODUCTS)
    End Sub
  Partial Private Sub InsertARTTBOPTCALC_PAYPAL_IPN(instance As ARTTBOPTCALC_PAYPAL_IPN)
    End Sub
  Partial Private Sub UpdateARTTBOPTCALC_PAYPAL_IPN(instance As ARTTBOPTCALC_PAYPAL_IPN)
    End Sub
  Partial Private Sub DeleteARTTBOPTCALC_PAYPAL_IPN(instance As ARTTBOPTCALC_PAYPAL_IPN)
    End Sub
  Partial Private Sub InsertBALTIC_FORWARD_RATES(instance As BALTIC_FORWARD_RATES)
    End Sub
  Partial Private Sub UpdateBALTIC_FORWARD_RATES(instance As BALTIC_FORWARD_RATES)
    End Sub
  Partial Private Sub DeleteBALTIC_FORWARD_RATES(instance As BALTIC_FORWARD_RATES)
    End Sub
  Partial Private Sub InsertBALTIC_FTP(instance As BALTIC_FTP)
    End Sub
  Partial Private Sub UpdateBALTIC_FTP(instance As BALTIC_FTP)
    End Sub
  Partial Private Sub DeleteBALTIC_FTP(instance As BALTIC_FTP)
    End Sub
  Partial Private Sub InsertBALTIC_FTP_SETTLEMENT(instance As BALTIC_FTP_SETTLEMENT)
    End Sub
  Partial Private Sub UpdateBALTIC_FTP_SETTLEMENT(instance As BALTIC_FTP_SETTLEMENT)
    End Sub
  Partial Private Sub DeleteBALTIC_FTP_SETTLEMENT(instance As BALTIC_FTP_SETTLEMENT)
    End Sub
  Partial Private Sub InsertBALTIC_MONTHLY_SETTLEMENTS(instance As BALTIC_MONTHLY_SETTLEMENTS)
    End Sub
  Partial Private Sub UpdateBALTIC_MONTHLY_SETTLEMENTS(instance As BALTIC_MONTHLY_SETTLEMENTS)
    End Sub
  Partial Private Sub DeleteBALTIC_MONTHLY_SETTLEMENTS(instance As BALTIC_MONTHLY_SETTLEMENTS)
    End Sub
  Partial Private Sub InsertBALTIC_OPTION_VOLATILITIES(instance As BALTIC_OPTION_VOLATILITIES)
    End Sub
  Partial Private Sub UpdateBALTIC_OPTION_VOLATILITIES(instance As BALTIC_OPTION_VOLATILITIES)
    End Sub
  Partial Private Sub DeleteBALTIC_OPTION_VOLATILITIES(instance As BALTIC_OPTION_VOLATILITIES)
    End Sub
  Partial Private Sub InsertBALTIC_SPOT_RATES(instance As BALTIC_SPOT_RATES)
    End Sub
  Partial Private Sub UpdateBALTIC_SPOT_RATES(instance As BALTIC_SPOT_RATES)
    End Sub
  Partial Private Sub DeleteBALTIC_SPOT_RATES(instance As BALTIC_SPOT_RATES)
    End Sub
  Partial Private Sub InsertBROKER_DESK_TRADE_CLASSES(instance As BROKER_DESK_TRADE_CLASSES)
    End Sub
  Partial Private Sub UpdateBROKER_DESK_TRADE_CLASSES(instance As BROKER_DESK_TRADE_CLASSES)
    End Sub
  Partial Private Sub DeleteBROKER_DESK_TRADE_CLASSES(instance As BROKER_DESK_TRADE_CLASSES)
    End Sub
  Partial Private Sub InsertCCY(instance As CCY)
    End Sub
  Partial Private Sub UpdateCCY(instance As CCY)
    End Sub
  Partial Private Sub DeleteCCY(instance As CCY)
    End Sub
  Partial Private Sub InsertCONTACT_TYPE(instance As CONTACT_TYPE)
    End Sub
  Partial Private Sub UpdateCONTACT_TYPE(instance As CONTACT_TYPE)
    End Sub
  Partial Private Sub DeleteCONTACT_TYPE(instance As CONTACT_TYPE)
    End Sub
  Partial Private Sub InsertCONTACTS(instance As CONTACTS)
    End Sub
  Partial Private Sub UpdateCONTACTS(instance As CONTACTS)
    End Sub
  Partial Private Sub DeleteCONTACTS(instance As CONTACTS)
    End Sub
  Partial Private Sub InsertCONTRACT_SERIES(instance As CONTRACT_SERIES)
    End Sub
  Partial Private Sub UpdateCONTRACT_SERIES(instance As CONTRACT_SERIES)
    End Sub
  Partial Private Sub DeleteCONTRACT_SERIES(instance As CONTRACT_SERIES)
    End Sub
  Partial Private Sub InsertCOUNTERPARTY_LIMITS(instance As COUNTERPARTY_LIMITS)
    End Sub
  Partial Private Sub UpdateCOUNTERPARTY_LIMITS(instance As COUNTERPARTY_LIMITS)
    End Sub
  Partial Private Sub DeleteCOUNTERPARTY_LIMITS(instance As COUNTERPARTY_LIMITS)
    End Sub
  Partial Private Sub InsertCOUNTRIES(instance As COUNTRIES)
    End Sub
  Partial Private Sub UpdateCOUNTRIES(instance As COUNTRIES)
    End Sub
  Partial Private Sub DeleteCOUNTRIES(instance As COUNTRIES)
    End Sub
  Partial Private Sub InsertDESK_EXCHANGES(instance As DESK_EXCHANGES)
    End Sub
  Partial Private Sub UpdateDESK_EXCHANGES(instance As DESK_EXCHANGES)
    End Sub
  Partial Private Sub DeleteDESK_EXCHANGES(instance As DESK_EXCHANGES)
    End Sub
  Partial Private Sub InsertDESK_EXCHANGES_CLEARERS(instance As DESK_EXCHANGES_CLEARERS)
    End Sub
  Partial Private Sub UpdateDESK_EXCHANGES_CLEARERS(instance As DESK_EXCHANGES_CLEARERS)
    End Sub
  Partial Private Sub DeleteDESK_EXCHANGES_CLEARERS(instance As DESK_EXCHANGES_CLEARERS)
    End Sub
  Partial Private Sub InsertDESK_QUALIFIER(instance As DESK_QUALIFIER)
    End Sub
  Partial Private Sub UpdateDESK_QUALIFIER(instance As DESK_QUALIFIER)
    End Sub
  Partial Private Sub DeleteDESK_QUALIFIER(instance As DESK_QUALIFIER)
    End Sub
  Partial Private Sub InsertDESK_TRADE_CLASSES(instance As DESK_TRADE_CLASSES)
    End Sub
  Partial Private Sub UpdateDESK_TRADE_CLASSES(instance As DESK_TRADE_CLASSES)
    End Sub
  Partial Private Sub DeleteDESK_TRADE_CLASSES(instance As DESK_TRADE_CLASSES)
    End Sub
  Partial Private Sub InsertDESK_TRADE_CONFOS(instance As DESK_TRADE_CONFOS)
    End Sub
  Partial Private Sub UpdateDESK_TRADE_CONFOS(instance As DESK_TRADE_CONFOS)
    End Sub
  Partial Private Sub DeleteDESK_TRADE_CONFOS(instance As DESK_TRADE_CONFOS)
    End Sub
  Partial Private Sub InsertDESK_TRADER_VOICE(instance As DESK_TRADER_VOICE)
    End Sub
  Partial Private Sub UpdateDESK_TRADER_VOICE(instance As DESK_TRADER_VOICE)
    End Sub
  Partial Private Sub DeleteDESK_TRADER_VOICE(instance As DESK_TRADER_VOICE)
    End Sub
  Partial Private Sub InsertDESK_TRADERS(instance As DESK_TRADERS)
    End Sub
  Partial Private Sub UpdateDESK_TRADERS(instance As DESK_TRADERS)
    End Sub
  Partial Private Sub DeleteDESK_TRADERS(instance As DESK_TRADERS)
    End Sub
  Partial Private Sub InsertDESK_TRADERS_IM_SUBSCRIPTIONS(instance As DESK_TRADERS_IM_SUBSCRIPTIONS)
    End Sub
  Partial Private Sub UpdateDESK_TRADERS_IM_SUBSCRIPTIONS(instance As DESK_TRADERS_IM_SUBSCRIPTIONS)
    End Sub
  Partial Private Sub DeleteDESK_TRADERS_IM_SUBSCRIPTIONS(instance As DESK_TRADERS_IM_SUBSCRIPTIONS)
    End Sub
  Partial Private Sub InsertEXCHANGE_HOLIDAYS(instance As EXCHANGE_HOLIDAYS)
    End Sub
  Partial Private Sub UpdateEXCHANGE_HOLIDAYS(instance As EXCHANGE_HOLIDAYS)
    End Sub
  Partial Private Sub DeleteEXCHANGE_HOLIDAYS(instance As EXCHANGE_HOLIDAYS)
    End Sub
  Partial Private Sub InsertEXCHANGE_ROUTE_PERIODS(instance As EXCHANGE_ROUTE_PERIODS)
    End Sub
  Partial Private Sub UpdateEXCHANGE_ROUTE_PERIODS(instance As EXCHANGE_ROUTE_PERIODS)
    End Sub
  Partial Private Sub DeleteEXCHANGE_ROUTE_PERIODS(instance As EXCHANGE_ROUTE_PERIODS)
    End Sub
  Partial Private Sub InsertEXCHANGE_ROUTES(instance As EXCHANGE_ROUTES)
    End Sub
  Partial Private Sub UpdateEXCHANGE_ROUTES(instance As EXCHANGE_ROUTES)
    End Sub
  Partial Private Sub DeleteEXCHANGE_ROUTES(instance As EXCHANGE_ROUTES)
    End Sub
  Partial Private Sub InsertEXCHANGES(instance As EXCHANGES)
    End Sub
  Partial Private Sub UpdateEXCHANGES(instance As EXCHANGES)
    End Sub
  Partial Private Sub DeleteEXCHANGES(instance As EXCHANGES)
    End Sub
  Partial Private Sub InsertHOLIDAYS(instance As HOLIDAYS)
    End Sub
  Partial Private Sub UpdateHOLIDAYS(instance As HOLIDAYS)
    End Sub
  Partial Private Sub DeleteHOLIDAYS(instance As HOLIDAYS)
    End Sub
  Partial Private Sub InsertINTEREST_RATES(instance As INTEREST_RATES)
    End Sub
  Partial Private Sub UpdateINTEREST_RATES(instance As INTEREST_RATES)
    End Sub
  Partial Private Sub DeleteINTEREST_RATES(instance As INTEREST_RATES)
    End Sub
  Partial Private Sub InsertISDA_TYPES(instance As ISDA_TYPES)
    End Sub
  Partial Private Sub UpdateISDA_TYPES(instance As ISDA_TYPES)
    End Sub
  Partial Private Sub DeleteISDA_TYPES(instance As ISDA_TYPES)
    End Sub
  Partial Private Sub InsertLAST_DAY_RULE(instance As LAST_DAY_RULE)
    End Sub
  Partial Private Sub UpdateLAST_DAY_RULE(instance As LAST_DAY_RULE)
    End Sub
  Partial Private Sub DeleteLAST_DAY_RULE(instance As LAST_DAY_RULE)
    End Sub
  Partial Private Sub InsertLAST_DAY_RULE_MONTHS(instance As LAST_DAY_RULE_MONTHS)
    End Sub
  Partial Private Sub UpdateLAST_DAY_RULE_MONTHS(instance As LAST_DAY_RULE_MONTHS)
    End Sub
  Partial Private Sub DeleteLAST_DAY_RULE_MONTHS(instance As LAST_DAY_RULE_MONTHS)
    End Sub
  Partial Private Sub InsertLAYOUTS(instance As LAYOUTS)
    End Sub
  Partial Private Sub UpdateLAYOUTS(instance As LAYOUTS)
    End Sub
  Partial Private Sub DeleteLAYOUTS(instance As LAYOUTS)
    End Sub
  Partial Private Sub InsertORDER_GOOD_TILL(instance As ORDER_GOOD_TILL)
    End Sub
  Partial Private Sub UpdateORDER_GOOD_TILL(instance As ORDER_GOOD_TILL)
    End Sub
  Partial Private Sub DeleteORDER_GOOD_TILL(instance As ORDER_GOOD_TILL)
    End Sub
  Partial Private Sub InsertORDER_STATUS(instance As ORDER_STATUS)
    End Sub
  Partial Private Sub UpdateORDER_STATUS(instance As ORDER_STATUS)
    End Sub
  Partial Private Sub DeleteORDER_STATUS(instance As ORDER_STATUS)
    End Sub
  Partial Private Sub InsertORDERS_FFA(instance As ORDERS_FFA)
    End Sub
  Partial Private Sub UpdateORDERS_FFA(instance As ORDERS_FFA)
    End Sub
  Partial Private Sub DeleteORDERS_FFA(instance As ORDERS_FFA)
    End Sub
  Partial Private Sub InsertORDERS_FFA_EXCHANGES(instance As ORDERS_FFA_EXCHANGES)
    End Sub
  Partial Private Sub UpdateORDERS_FFA_EXCHANGES(instance As ORDERS_FFA_EXCHANGES)
    End Sub
  Partial Private Sub DeleteORDERS_FFA_EXCHANGES(instance As ORDERS_FFA_EXCHANGES)
    End Sub
  Partial Private Sub InsertPERIOD_LIMIT_DESCRS(instance As PERIOD_LIMIT_DESCRS)
    End Sub
  Partial Private Sub UpdatePERIOD_LIMIT_DESCRS(instance As PERIOD_LIMIT_DESCRS)
    End Sub
  Partial Private Sub DeletePERIOD_LIMIT_DESCRS(instance As PERIOD_LIMIT_DESCRS)
    End Sub
  Partial Private Sub InsertQUANTITY_QUALIFIERS(instance As QUANTITY_QUALIFIERS)
    End Sub
  Partial Private Sub UpdateQUANTITY_QUALIFIERS(instance As QUANTITY_QUALIFIERS)
    End Sub
  Partial Private Sub DeleteQUANTITY_QUALIFIERS(instance As QUANTITY_QUALIFIERS)
    End Sub
  Partial Private Sub InsertQUANTITY_TYPES(instance As QUANTITY_TYPES)
    End Sub
  Partial Private Sub UpdateQUANTITY_TYPES(instance As QUANTITY_TYPES)
    End Sub
  Partial Private Sub DeleteQUANTITY_TYPES(instance As QUANTITY_TYPES)
    End Sub
  Partial Private Sub InsertQUOTE_TYPES(instance As QUOTE_TYPES)
    End Sub
  Partial Private Sub UpdateQUOTE_TYPES(instance As QUOTE_TYPES)
    End Sub
  Partial Private Sub DeleteQUOTE_TYPES(instance As QUOTE_TYPES)
    End Sub
  Partial Private Sub InsertROUTES(instance As ROUTES)
    End Sub
  Partial Private Sub UpdateROUTES(instance As ROUTES)
    End Sub
  Partial Private Sub DeleteROUTES(instance As ROUTES)
    End Sub
  Partial Private Sub InsertSERVER_INFO(instance As SERVER_INFO)
    End Sub
  Partial Private Sub UpdateSERVER_INFO(instance As SERVER_INFO)
    End Sub
  Partial Private Sub DeleteSERVER_INFO(instance As SERVER_INFO)
    End Sub
  Partial Private Sub InsertSHOW_NAME_TYPES(instance As SHOW_NAME_TYPES)
    End Sub
  Partial Private Sub UpdateSHOW_NAME_TYPES(instance As SHOW_NAME_TYPES)
    End Sub
  Partial Private Sub DeleteSHOW_NAME_TYPES(instance As SHOW_NAME_TYPES)
    End Sub
  Partial Private Sub InsertTRADE_AUTHORITIES(instance As TRADE_AUTHORITIES)
    End Sub
  Partial Private Sub UpdateTRADE_AUTHORITIES(instance As TRADE_AUTHORITIES)
    End Sub
  Partial Private Sub DeleteTRADE_AUTHORITIES(instance As TRADE_AUTHORITIES)
    End Sub
  Partial Private Sub InsertTRADE_CLASS_EXCHANGES(instance As TRADE_CLASS_EXCHANGES)
    End Sub
  Partial Private Sub UpdateTRADE_CLASS_EXCHANGES(instance As TRADE_CLASS_EXCHANGES)
    End Sub
  Partial Private Sub DeleteTRADE_CLASS_EXCHANGES(instance As TRADE_CLASS_EXCHANGES)
    End Sub
  Partial Private Sub InsertTRADE_CLASS_RATIO_SPREADS(instance As TRADE_CLASS_RATIO_SPREADS)
    End Sub
  Partial Private Sub UpdateTRADE_CLASS_RATIO_SPREADS(instance As TRADE_CLASS_RATIO_SPREADS)
    End Sub
  Partial Private Sub DeleteTRADE_CLASS_RATIO_SPREADS(instance As TRADE_CLASS_RATIO_SPREADS)
    End Sub
  Partial Private Sub InsertTRADE_CLASSES(instance As TRADE_CLASSES)
    End Sub
  Partial Private Sub UpdateTRADE_CLASSES(instance As TRADE_CLASSES)
    End Sub
  Partial Private Sub DeleteTRADE_CLASSES(instance As TRADE_CLASSES)
    End Sub
  Partial Private Sub InsertTRADES_FFA(instance As TRADES_FFA)
    End Sub
  Partial Private Sub UpdateTRADES_FFA(instance As TRADES_FFA)
    End Sub
  Partial Private Sub DeleteTRADES_FFA(instance As TRADES_FFA)
    End Sub
  Partial Private Sub InsertVESSEL_CLASS(instance As VESSEL_CLASS)
    End Sub
  Partial Private Sub UpdateVESSEL_CLASS(instance As VESSEL_CLASS)
    End Sub
  Partial Private Sub DeleteVESSEL_CLASS(instance As VESSEL_CLASS)
    End Sub
  Partial Private Sub InsertVESSEL_CLASS_SPREAD_MARGINS(instance As VESSEL_CLASS_SPREAD_MARGINS)
    End Sub
  Partial Private Sub UpdateVESSEL_CLASS_SPREAD_MARGINS(instance As VESSEL_CLASS_SPREAD_MARGINS)
    End Sub
  Partial Private Sub DeleteVESSEL_CLASS_SPREAD_MARGINS(instance As VESSEL_CLASS_SPREAD_MARGINS)
    End Sub
  Partial Private Sub InsertACCOUNTS_ADMIN(instance As ACCOUNTS_ADMIN)
    End Sub
  Partial Private Sub UpdateACCOUNTS_ADMIN(instance As ACCOUNTS_ADMIN)
    End Sub
  Partial Private Sub DeleteACCOUNTS_ADMIN(instance As ACCOUNTS_ADMIN)
    End Sub
  #End Region
	
    Public Sub New()
        MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("ARTBConnectionString").ConnectionString, mappingSource)
        OnCreated()
    End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property ACCOUNT_DESKS() As System.Data.Linq.Table(Of ACCOUNT_DESKS)
		Get
			Return Me.GetTable(Of ACCOUNT_DESKS)
		End Get
	End Property
	
	Public ReadOnly Property WET_FLAT_RATES() As System.Data.Linq.Table(Of WET_FLAT_RATES)
		Get
			Return Me.GetTable(Of WET_FLAT_RATES)
		End Get
	End Property
	
	Public ReadOnly Property ACCOUNT_TYPES() As System.Data.Linq.Table(Of ACCOUNT_TYPES)
		Get
			Return Me.GetTable(Of ACCOUNT_TYPES)
		End Get
	End Property
	
	Public ReadOnly Property ACCOUNTS() As System.Data.Linq.Table(Of ACCOUNTS)
		Get
			Return Me.GetTable(Of ACCOUNTS)
		End Get
	End Property
	
	Public ReadOnly Property ACCOUNTS_CONTACTS() As System.Data.Linq.Table(Of ACCOUNTS_CONTACTS)
		Get
			Return Me.GetTable(Of ACCOUNTS_CONTACTS)
		End Get
	End Property
	
	Public ReadOnly Property ARTBOPTCALC_FINGERPRINTS() As System.Data.Linq.Table(Of ARTBOPTCALC_FINGERPRINTS)
		Get
			Return Me.GetTable(Of ARTBOPTCALC_FINGERPRINTS)
		End Get
	End Property
	
	Public ReadOnly Property ARTBOPTCALC_LICENSES() As System.Data.Linq.Table(Of ARTBOPTCALC_LICENSES)
		Get
			Return Me.GetTable(Of ARTBOPTCALC_LICENSES)
		End Get
	End Property
	
	Public ReadOnly Property ARTBOPTCALC_PRODUCTS() As System.Data.Linq.Table(Of ARTBOPTCALC_PRODUCTS)
		Get
			Return Me.GetTable(Of ARTBOPTCALC_PRODUCTS)
		End Get
	End Property
	
	Public ReadOnly Property ARTTBOPTCALC_PAYPAL_IPN() As System.Data.Linq.Table(Of ARTTBOPTCALC_PAYPAL_IPN)
		Get
			Return Me.GetTable(Of ARTTBOPTCALC_PAYPAL_IPN)
		End Get
	End Property
	
	Public ReadOnly Property BALTIC_FORWARD_RATES() As System.Data.Linq.Table(Of BALTIC_FORWARD_RATES)
		Get
			Return Me.GetTable(Of BALTIC_FORWARD_RATES)
		End Get
	End Property
	
	Public ReadOnly Property BALTIC_FTP() As System.Data.Linq.Table(Of BALTIC_FTP)
		Get
			Return Me.GetTable(Of BALTIC_FTP)
		End Get
	End Property
	
	Public ReadOnly Property BALTIC_FTP_SETTLEMENT() As System.Data.Linq.Table(Of BALTIC_FTP_SETTLEMENT)
		Get
			Return Me.GetTable(Of BALTIC_FTP_SETTLEMENT)
		End Get
	End Property
	
	Public ReadOnly Property BALTIC_MONTHLY_SETTLEMENTS() As System.Data.Linq.Table(Of BALTIC_MONTHLY_SETTLEMENTS)
		Get
			Return Me.GetTable(Of BALTIC_MONTHLY_SETTLEMENTS)
		End Get
	End Property
	
	Public ReadOnly Property BALTIC_OPTION_VOLATILITIES() As System.Data.Linq.Table(Of BALTIC_OPTION_VOLATILITIES)
		Get
			Return Me.GetTable(Of BALTIC_OPTION_VOLATILITIES)
		End Get
	End Property
	
	Public ReadOnly Property BALTIC_SPOT_RATES() As System.Data.Linq.Table(Of BALTIC_SPOT_RATES)
		Get
			Return Me.GetTable(Of BALTIC_SPOT_RATES)
		End Get
	End Property
	
	Public ReadOnly Property BROKER_DESK_TRADE_CLASSES() As System.Data.Linq.Table(Of BROKER_DESK_TRADE_CLASSES)
		Get
			Return Me.GetTable(Of BROKER_DESK_TRADE_CLASSES)
		End Get
	End Property
	
	Public ReadOnly Property CCY() As System.Data.Linq.Table(Of CCY)
		Get
			Return Me.GetTable(Of CCY)
		End Get
	End Property
	
	Public ReadOnly Property CONTACT_TYPE() As System.Data.Linq.Table(Of CONTACT_TYPE)
		Get
			Return Me.GetTable(Of CONTACT_TYPE)
		End Get
	End Property
	
	Public ReadOnly Property CONTACTS() As System.Data.Linq.Table(Of CONTACTS)
		Get
			Return Me.GetTable(Of CONTACTS)
		End Get
	End Property
	
	Public ReadOnly Property CONTRACT_SERIES() As System.Data.Linq.Table(Of CONTRACT_SERIES)
		Get
			Return Me.GetTable(Of CONTRACT_SERIES)
		End Get
	End Property
	
	Public ReadOnly Property COUNTERPARTY_LIMITS() As System.Data.Linq.Table(Of COUNTERPARTY_LIMITS)
		Get
			Return Me.GetTable(Of COUNTERPARTY_LIMITS)
		End Get
	End Property
	
	Public ReadOnly Property COUNTRIES() As System.Data.Linq.Table(Of COUNTRIES)
		Get
			Return Me.GetTable(Of COUNTRIES)
		End Get
	End Property
	
	Public ReadOnly Property DESK_EXCHANGES() As System.Data.Linq.Table(Of DESK_EXCHANGES)
		Get
			Return Me.GetTable(Of DESK_EXCHANGES)
		End Get
	End Property
	
	Public ReadOnly Property DESK_EXCHANGES_CLEARERS() As System.Data.Linq.Table(Of DESK_EXCHANGES_CLEARERS)
		Get
			Return Me.GetTable(Of DESK_EXCHANGES_CLEARERS)
		End Get
	End Property
	
	Public ReadOnly Property DESK_QUALIFIER() As System.Data.Linq.Table(Of DESK_QUALIFIER)
		Get
			Return Me.GetTable(Of DESK_QUALIFIER)
		End Get
	End Property
	
	Public ReadOnly Property DESK_TRADE_CLASSES() As System.Data.Linq.Table(Of DESK_TRADE_CLASSES)
		Get
			Return Me.GetTable(Of DESK_TRADE_CLASSES)
		End Get
	End Property
	
	Public ReadOnly Property DESK_TRADE_CONFOS() As System.Data.Linq.Table(Of DESK_TRADE_CONFOS)
		Get
			Return Me.GetTable(Of DESK_TRADE_CONFOS)
		End Get
	End Property
	
	Public ReadOnly Property DESK_TRADER_VOICE() As System.Data.Linq.Table(Of DESK_TRADER_VOICE)
		Get
			Return Me.GetTable(Of DESK_TRADER_VOICE)
		End Get
	End Property
	
	Public ReadOnly Property DESK_TRADERS() As System.Data.Linq.Table(Of DESK_TRADERS)
		Get
			Return Me.GetTable(Of DESK_TRADERS)
		End Get
	End Property
	
	Public ReadOnly Property DESK_TRADERS_IM_SUBSCRIPTIONS() As System.Data.Linq.Table(Of DESK_TRADERS_IM_SUBSCRIPTIONS)
		Get
			Return Me.GetTable(Of DESK_TRADERS_IM_SUBSCRIPTIONS)
		End Get
	End Property
	
	Public ReadOnly Property EXCHANGE_HOLIDAYS() As System.Data.Linq.Table(Of EXCHANGE_HOLIDAYS)
		Get
			Return Me.GetTable(Of EXCHANGE_HOLIDAYS)
		End Get
	End Property
	
	Public ReadOnly Property EXCHANGE_ROUTE_PERIODS() As System.Data.Linq.Table(Of EXCHANGE_ROUTE_PERIODS)
		Get
			Return Me.GetTable(Of EXCHANGE_ROUTE_PERIODS)
		End Get
	End Property
	
	Public ReadOnly Property EXCHANGE_ROUTES() As System.Data.Linq.Table(Of EXCHANGE_ROUTES)
		Get
			Return Me.GetTable(Of EXCHANGE_ROUTES)
		End Get
	End Property
	
	Public ReadOnly Property EXCHANGES() As System.Data.Linq.Table(Of EXCHANGES)
		Get
			Return Me.GetTable(Of EXCHANGES)
		End Get
	End Property
	
	Public ReadOnly Property HOLIDAYS() As System.Data.Linq.Table(Of HOLIDAYS)
		Get
			Return Me.GetTable(Of HOLIDAYS)
		End Get
	End Property
	
	Public ReadOnly Property INTEREST_RATES() As System.Data.Linq.Table(Of INTEREST_RATES)
		Get
			Return Me.GetTable(Of INTEREST_RATES)
		End Get
	End Property
	
	Public ReadOnly Property ISDA_TYPES() As System.Data.Linq.Table(Of ISDA_TYPES)
		Get
			Return Me.GetTable(Of ISDA_TYPES)
		End Get
	End Property
	
	Public ReadOnly Property LAST_DAY_RULE() As System.Data.Linq.Table(Of LAST_DAY_RULE)
		Get
			Return Me.GetTable(Of LAST_DAY_RULE)
		End Get
	End Property
	
	Public ReadOnly Property LAST_DAY_RULE_MONTHS() As System.Data.Linq.Table(Of LAST_DAY_RULE_MONTHS)
		Get
			Return Me.GetTable(Of LAST_DAY_RULE_MONTHS)
		End Get
	End Property
	
	Public ReadOnly Property LAYOUTS() As System.Data.Linq.Table(Of LAYOUTS)
		Get
			Return Me.GetTable(Of LAYOUTS)
		End Get
	End Property
	
	Public ReadOnly Property ORDER_GOOD_TILL() As System.Data.Linq.Table(Of ORDER_GOOD_TILL)
		Get
			Return Me.GetTable(Of ORDER_GOOD_TILL)
		End Get
	End Property
	
	Public ReadOnly Property ORDER_STATUS() As System.Data.Linq.Table(Of ORDER_STATUS)
		Get
			Return Me.GetTable(Of ORDER_STATUS)
		End Get
	End Property
	
	Public ReadOnly Property ORDERS_FFA() As System.Data.Linq.Table(Of ORDERS_FFA)
		Get
			Return Me.GetTable(Of ORDERS_FFA)
		End Get
	End Property
	
	Public ReadOnly Property ORDERS_FFA_EXCHANGES() As System.Data.Linq.Table(Of ORDERS_FFA_EXCHANGES)
		Get
			Return Me.GetTable(Of ORDERS_FFA_EXCHANGES)
		End Get
	End Property
	
	Public ReadOnly Property PERIOD_LIMIT_DESCRS() As System.Data.Linq.Table(Of PERIOD_LIMIT_DESCRS)
		Get
			Return Me.GetTable(Of PERIOD_LIMIT_DESCRS)
		End Get
	End Property
	
	Public ReadOnly Property QUANTITY_QUALIFIERS() As System.Data.Linq.Table(Of QUANTITY_QUALIFIERS)
		Get
			Return Me.GetTable(Of QUANTITY_QUALIFIERS)
		End Get
	End Property
	
	Public ReadOnly Property QUANTITY_TYPES() As System.Data.Linq.Table(Of QUANTITY_TYPES)
		Get
			Return Me.GetTable(Of QUANTITY_TYPES)
		End Get
	End Property
	
	Public ReadOnly Property QUOTE_TYPES() As System.Data.Linq.Table(Of QUOTE_TYPES)
		Get
			Return Me.GetTable(Of QUOTE_TYPES)
		End Get
	End Property
	
	Public ReadOnly Property ROUTES() As System.Data.Linq.Table(Of ROUTES)
		Get
			Return Me.GetTable(Of ROUTES)
		End Get
	End Property
	
	Public ReadOnly Property SERVER_INFO() As System.Data.Linq.Table(Of SERVER_INFO)
		Get
			Return Me.GetTable(Of SERVER_INFO)
		End Get
	End Property
	
	Public ReadOnly Property SHOW_NAME_TYPES() As System.Data.Linq.Table(Of SHOW_NAME_TYPES)
		Get
			Return Me.GetTable(Of SHOW_NAME_TYPES)
		End Get
	End Property
	
	Public ReadOnly Property TRADE_AUTHORITIES() As System.Data.Linq.Table(Of TRADE_AUTHORITIES)
		Get
			Return Me.GetTable(Of TRADE_AUTHORITIES)
		End Get
	End Property
	
	Public ReadOnly Property TRADE_CLASS_EXCHANGES() As System.Data.Linq.Table(Of TRADE_CLASS_EXCHANGES)
		Get
			Return Me.GetTable(Of TRADE_CLASS_EXCHANGES)
		End Get
	End Property
	
	Public ReadOnly Property TRADE_CLASS_RATIO_SPREADS() As System.Data.Linq.Table(Of TRADE_CLASS_RATIO_SPREADS)
		Get
			Return Me.GetTable(Of TRADE_CLASS_RATIO_SPREADS)
		End Get
	End Property
	
	Public ReadOnly Property TRADE_CLASSES() As System.Data.Linq.Table(Of TRADE_CLASSES)
		Get
			Return Me.GetTable(Of TRADE_CLASSES)
		End Get
	End Property
	
	Public ReadOnly Property TRADES_FFA() As System.Data.Linq.Table(Of TRADES_FFA)
		Get
			Return Me.GetTable(Of TRADES_FFA)
		End Get
	End Property
	
	Public ReadOnly Property VESSEL_CLASS() As System.Data.Linq.Table(Of VESSEL_CLASS)
		Get
			Return Me.GetTable(Of VESSEL_CLASS)
		End Get
	End Property
	
	Public ReadOnly Property VESSEL_CLASS_SPREAD_MARGINS() As System.Data.Linq.Table(Of VESSEL_CLASS_SPREAD_MARGINS)
		Get
			Return Me.GetTable(Of VESSEL_CLASS_SPREAD_MARGINS)
		End Get
	End Property
	
	Public ReadOnly Property ACCOUNTS_ADMIN() As System.Data.Linq.Table(Of ACCOUNTS_ADMIN)
		Get
			Return Me.GetTable(Of ACCOUNTS_ADMIN)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ACCOUNT_DESKS"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class ACCOUNT_DESKS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ACCOUNT_DESK_ID As Integer
	
	Private _ACCOUNT_ID As Integer
	
	Private _DESK_DESCR As String
	
	Private _DESK_QUALIFIER As Short
	
	Private _DESK_ACTIVE As Boolean
	
	Private _SEE_OTHER_DESKS As Boolean
	
	Private _AMMEND_OTHER_DESKS As Boolean
	
	Private _CLEARED_SHOW_NAME As Short
	
	Private _OTC_SHOW_NAME As Short
	
	Private _SUSPENDED As Boolean
	
	Private _LOST_CONNECTION As Short
	
	Private _WAIT_CONNECTION As Short
	
	Private _DEFAULT_NUKE As Short
	
	Private _DEFAULT_SEE As Boolean
	
	Private _DEFAULT_BI As Boolean
	
	Private _BROKER_DESK_TRADE_CLASSES As EntitySet(Of BROKER_DESK_TRADE_CLASSES)
	
	Private _COUNTERPARTY_LIMITS As EntitySet(Of COUNTERPARTY_LIMITS)
	
	Private _COUNTERPARTY_LIMITS1 As EntitySet(Of COUNTERPARTY_LIMITS)
	
	Private _DESK_TRADE_CLASSES As EntitySet(Of DESK_TRADE_CLASSES)
	
	Private _DESK_TRADE_CONFOS As EntitySet(Of DESK_TRADE_CONFOS)
	
	Private _DESK_TRADERS As EntitySet(Of DESK_TRADERS)
	
	Private _ORDERS_FFA As EntitySet(Of ORDERS_FFA)
	
	Private _TRADES_FFA As EntitySet(Of TRADES_FFA)
	
	Private _TRADES_FFA1 As EntitySet(Of TRADES_FFA)
	
	Private _ACCOUNTS As EntityRef(Of ACCOUNTS)
	
	Private _DESK_QUALIFIER1 As EntityRef(Of DESK_QUALIFIER)
	
	Private _SHOW_NAME_TYPES As EntityRef(Of SHOW_NAME_TYPES)
	
	Private _SHOW_NAME_TYPES1 As EntityRef(Of SHOW_NAME_TYPES)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnACCOUNT_DESK_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_DESK_IDChanged()
    End Sub
    Partial Private Sub OnACCOUNT_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_IDChanged()
    End Sub
    Partial Private Sub OnDESK_DESCRChanging(value As String)
    End Sub
    Partial Private Sub OnDESK_DESCRChanged()
    End Sub
    Partial Private Sub OnDESK_QUALIFIERChanging(value As Short)
    End Sub
    Partial Private Sub OnDESK_QUALIFIERChanged()
    End Sub
    Partial Private Sub OnDESK_ACTIVEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnDESK_ACTIVEChanged()
    End Sub
    Partial Private Sub OnSEE_OTHER_DESKSChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSEE_OTHER_DESKSChanged()
    End Sub
    Partial Private Sub OnAMMEND_OTHER_DESKSChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAMMEND_OTHER_DESKSChanged()
    End Sub
    Partial Private Sub OnCLEARED_SHOW_NAMEChanging(value As Short)
    End Sub
    Partial Private Sub OnCLEARED_SHOW_NAMEChanged()
    End Sub
    Partial Private Sub OnOTC_SHOW_NAMEChanging(value As Short)
    End Sub
    Partial Private Sub OnOTC_SHOW_NAMEChanged()
    End Sub
    Partial Private Sub OnSUSPENDEDChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSUSPENDEDChanged()
    End Sub
    Partial Private Sub OnLOST_CONNECTIONChanging(value As Short)
    End Sub
    Partial Private Sub OnLOST_CONNECTIONChanged()
    End Sub
    Partial Private Sub OnWAIT_CONNECTIONChanging(value As Short)
    End Sub
    Partial Private Sub OnWAIT_CONNECTIONChanged()
    End Sub
    Partial Private Sub OnDEFAULT_NUKEChanging(value As Short)
    End Sub
    Partial Private Sub OnDEFAULT_NUKEChanged()
    End Sub
    Partial Private Sub OnDEFAULT_SEEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnDEFAULT_SEEChanged()
    End Sub
    Partial Private Sub OnDEFAULT_BIChanging(value As Boolean)
    End Sub
    Partial Private Sub OnDEFAULT_BIChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_DESK_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ACCOUNT_DESK_ID() As Integer
		Get
			Return Me._ACCOUNT_DESK_ID
		End Get
		Set
			If ((Me._ACCOUNT_DESK_ID = value)  _
						= false) Then
				Me.OnACCOUNT_DESK_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_DESK_ID = value
				Me.SendPropertyChanged("ACCOUNT_DESK_ID")
				Me.OnACCOUNT_DESK_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property ACCOUNT_ID() As Integer
		Get
			Return Me._ACCOUNT_ID
		End Get
		Set
			If ((Me._ACCOUNT_ID = value)  _
						= false) Then
				If Me._ACCOUNTS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACCOUNT_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_ID = value
				Me.SendPropertyChanged("ACCOUNT_ID")
				Me.OnACCOUNT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_DESCR", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property DESK_DESCR() As String
		Get
			Return Me._DESK_DESCR
		End Get
		Set
			If (String.Equals(Me._DESK_DESCR, value) = false) Then
				Me.OnDESK_DESCRChanging(value)
				Me.SendPropertyChanging
				Me._DESK_DESCR = value
				Me.SendPropertyChanged("DESK_DESCR")
				Me.OnDESK_DESCRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_QUALIFIER", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property DESK_QUALIFIER() As Short
		Get
			Return Me._DESK_QUALIFIER
		End Get
		Set
			If ((Me._DESK_QUALIFIER = value)  _
						= false) Then
				If Me._DESK_QUALIFIER1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDESK_QUALIFIERChanging(value)
				Me.SendPropertyChanging
				Me._DESK_QUALIFIER = value
				Me.SendPropertyChanged("DESK_QUALIFIER")
				Me.OnDESK_QUALIFIERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_ACTIVE", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property DESK_ACTIVE() As Boolean
		Get
			Return Me._DESK_ACTIVE
		End Get
		Set
			If ((Me._DESK_ACTIVE = value)  _
						= false) Then
				Me.OnDESK_ACTIVEChanging(value)
				Me.SendPropertyChanging
				Me._DESK_ACTIVE = value
				Me.SendPropertyChanged("DESK_ACTIVE")
				Me.OnDESK_ACTIVEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SEE_OTHER_DESKS", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property SEE_OTHER_DESKS() As Boolean
		Get
			Return Me._SEE_OTHER_DESKS
		End Get
		Set
			If ((Me._SEE_OTHER_DESKS = value)  _
						= false) Then
				Me.OnSEE_OTHER_DESKSChanging(value)
				Me.SendPropertyChanging
				Me._SEE_OTHER_DESKS = value
				Me.SendPropertyChanged("SEE_OTHER_DESKS")
				Me.OnSEE_OTHER_DESKSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AMMEND_OTHER_DESKS", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property AMMEND_OTHER_DESKS() As Boolean
		Get
			Return Me._AMMEND_OTHER_DESKS
		End Get
		Set
			If ((Me._AMMEND_OTHER_DESKS = value)  _
						= false) Then
				Me.OnAMMEND_OTHER_DESKSChanging(value)
				Me.SendPropertyChanging
				Me._AMMEND_OTHER_DESKS = value
				Me.SendPropertyChanged("AMMEND_OTHER_DESKS")
				Me.OnAMMEND_OTHER_DESKSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLEARED_SHOW_NAME", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property CLEARED_SHOW_NAME() As Short
		Get
			Return Me._CLEARED_SHOW_NAME
		End Get
		Set
			If ((Me._CLEARED_SHOW_NAME = value)  _
						= false) Then
				If Me._SHOW_NAME_TYPES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCLEARED_SHOW_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._CLEARED_SHOW_NAME = value
				Me.SendPropertyChanged("CLEARED_SHOW_NAME")
				Me.OnCLEARED_SHOW_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OTC_SHOW_NAME", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property OTC_SHOW_NAME() As Short
		Get
			Return Me._OTC_SHOW_NAME
		End Get
		Set
			If ((Me._OTC_SHOW_NAME = value)  _
						= false) Then
				If Me._SHOW_NAME_TYPES1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnOTC_SHOW_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._OTC_SHOW_NAME = value
				Me.SendPropertyChanged("OTC_SHOW_NAME")
				Me.OnOTC_SHOW_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SUSPENDED", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10)>  _
	Public Property SUSPENDED() As Boolean
		Get
			Return Me._SUSPENDED
		End Get
		Set
			If ((Me._SUSPENDED = value)  _
						= false) Then
				Me.OnSUSPENDEDChanging(value)
				Me.SendPropertyChanging
				Me._SUSPENDED = value
				Me.SendPropertyChanged("SUSPENDED")
				Me.OnSUSPENDEDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOST_CONNECTION", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=11)>  _
	Public Property LOST_CONNECTION() As Short
		Get
			Return Me._LOST_CONNECTION
		End Get
		Set
			If ((Me._LOST_CONNECTION = value)  _
						= false) Then
				Me.OnLOST_CONNECTIONChanging(value)
				Me.SendPropertyChanging
				Me._LOST_CONNECTION = value
				Me.SendPropertyChanged("LOST_CONNECTION")
				Me.OnLOST_CONNECTIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WAIT_CONNECTION", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=12)>  _
	Public Property WAIT_CONNECTION() As Short
		Get
			Return Me._WAIT_CONNECTION
		End Get
		Set
			If ((Me._WAIT_CONNECTION = value)  _
						= false) Then
				Me.OnWAIT_CONNECTIONChanging(value)
				Me.SendPropertyChanging
				Me._WAIT_CONNECTION = value
				Me.SendPropertyChanged("WAIT_CONNECTION")
				Me.OnWAIT_CONNECTIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEFAULT_NUKE", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=13)>  _
	Public Property DEFAULT_NUKE() As Short
		Get
			Return Me._DEFAULT_NUKE
		End Get
		Set
			If ((Me._DEFAULT_NUKE = value)  _
						= false) Then
				Me.OnDEFAULT_NUKEChanging(value)
				Me.SendPropertyChanging
				Me._DEFAULT_NUKE = value
				Me.SendPropertyChanged("DEFAULT_NUKE")
				Me.OnDEFAULT_NUKEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEFAULT_SEE", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=14)>  _
	Public Property DEFAULT_SEE() As Boolean
		Get
			Return Me._DEFAULT_SEE
		End Get
		Set
			If ((Me._DEFAULT_SEE = value)  _
						= false) Then
				Me.OnDEFAULT_SEEChanging(value)
				Me.SendPropertyChanging
				Me._DEFAULT_SEE = value
				Me.SendPropertyChanged("DEFAULT_SEE")
				Me.OnDEFAULT_SEEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEFAULT_BI", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=15)>  _
	Public Property DEFAULT_BI() As Boolean
		Get
			Return Me._DEFAULT_BI
		End Get
		Set
			If ((Me._DEFAULT_BI = value)  _
						= false) Then
				Me.OnDEFAULT_BIChanging(value)
				Me.SendPropertyChanging
				Me._DEFAULT_BI = value
				Me.SendPropertyChanged("DEFAULT_BI")
				Me.OnDEFAULT_BIChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESKS_BROKER_DESK_TRADE_CLASSES", Storage:="_BROKER_DESK_TRADE_CLASSES", ThisKey:="ACCOUNT_DESK_ID", OtherKey:="ACCOUNT_DESK_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=16, EmitDefaultValue:=false)>  _
	Public Property BROKER_DESK_TRADE_CLASSES() As EntitySet(Of BROKER_DESK_TRADE_CLASSES)
		Get
			If (Me.serializing  _
						AndAlso (Me._BROKER_DESK_TRADE_CLASSES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._BROKER_DESK_TRADE_CLASSES
		End Get
		Set
			Me._BROKER_DESK_TRADE_CLASSES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESKS_COUNTERPARTY_LIMITS", Storage:="_COUNTERPARTY_LIMITS", ThisKey:="ACCOUNT_DESK_ID", OtherKey:="PRI_ACCOUNT_DESK_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=17, EmitDefaultValue:=false)>  _
	Public Property COUNTERPARTY_LIMITS() As EntitySet(Of COUNTERPARTY_LIMITS)
		Get
			If (Me.serializing  _
						AndAlso (Me._COUNTERPARTY_LIMITS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._COUNTERPARTY_LIMITS
		End Get
		Set
			Me._COUNTERPARTY_LIMITS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESKS_COUNTERPARTY_LIMITS1", Storage:="_COUNTERPARTY_LIMITS1", ThisKey:="ACCOUNT_DESK_ID", OtherKey:="SEC_ACCOUNT_DESK_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=18, EmitDefaultValue:=false)>  _
	Public Property COUNTERPARTY_LIMITS1() As EntitySet(Of COUNTERPARTY_LIMITS)
		Get
			If (Me.serializing  _
						AndAlso (Me._COUNTERPARTY_LIMITS1.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._COUNTERPARTY_LIMITS1
		End Get
		Set
			Me._COUNTERPARTY_LIMITS1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESKS_DESK_TRADE_CLASSES", Storage:="_DESK_TRADE_CLASSES", ThisKey:="ACCOUNT_DESK_ID", OtherKey:="ACCOUNT_DESK_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=19, EmitDefaultValue:=false)>  _
	Public Property DESK_TRADE_CLASSES() As EntitySet(Of DESK_TRADE_CLASSES)
		Get
			If (Me.serializing  _
						AndAlso (Me._DESK_TRADE_CLASSES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._DESK_TRADE_CLASSES
		End Get
		Set
			Me._DESK_TRADE_CLASSES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESKS_DESK_TRADE_CONFOS", Storage:="_DESK_TRADE_CONFOS", ThisKey:="ACCOUNT_DESK_ID", OtherKey:="ACCOUNT_DESK_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=20, EmitDefaultValue:=false)>  _
	Public Property DESK_TRADE_CONFOS() As EntitySet(Of DESK_TRADE_CONFOS)
		Get
			If (Me.serializing  _
						AndAlso (Me._DESK_TRADE_CONFOS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._DESK_TRADE_CONFOS
		End Get
		Set
			Me._DESK_TRADE_CONFOS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESKS_DESK_TRADERS", Storage:="_DESK_TRADERS", ThisKey:="ACCOUNT_DESK_ID", OtherKey:="ACCOUNT_DESK_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=21, EmitDefaultValue:=false)>  _
	Public Property DESK_TRADERS() As EntitySet(Of DESK_TRADERS)
		Get
			If (Me.serializing  _
						AndAlso (Me._DESK_TRADERS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._DESK_TRADERS
		End Get
		Set
			Me._DESK_TRADERS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESKS_ORDERS_FFA", Storage:="_ORDERS_FFA", ThisKey:="ACCOUNT_DESK_ID", OtherKey:="INFORM_DESK_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=22, EmitDefaultValue:=false)>  _
	Public Property ORDERS_FFA() As EntitySet(Of ORDERS_FFA)
		Get
			If (Me.serializing  _
						AndAlso (Me._ORDERS_FFA.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ORDERS_FFA
		End Get
		Set
			Me._ORDERS_FFA.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESKS_TRADES_FFA", Storage:="_TRADES_FFA", ThisKey:="ACCOUNT_DESK_ID", OtherKey:="INFORM_DESK_ID1"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=23, EmitDefaultValue:=false)>  _
	Public Property TRADES_FFA() As EntitySet(Of TRADES_FFA)
		Get
			If (Me.serializing  _
						AndAlso (Me._TRADES_FFA.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._TRADES_FFA
		End Get
		Set
			Me._TRADES_FFA.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESKS_TRADES_FFA1", Storage:="_TRADES_FFA1", ThisKey:="ACCOUNT_DESK_ID", OtherKey:="INFORM_DESK_ID2"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=24, EmitDefaultValue:=false)>  _
	Public Property TRADES_FFA1() As EntitySet(Of TRADES_FFA)
		Get
			If (Me.serializing  _
						AndAlso (Me._TRADES_FFA1.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._TRADES_FFA1
		End Get
		Set
			Me._TRADES_FFA1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_ACCOUNT_DESKS", Storage:="_ACCOUNTS", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNTS() As ACCOUNTS
		Get
			Return Me._ACCOUNTS.Entity
		End Get
		Set
			Dim previousValue As ACCOUNTS = Me._ACCOUNTS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNTS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNTS.Entity = Nothing
					previousValue.ACCOUNT_DESKS.Remove(Me)
				End If
				Me._ACCOUNTS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ACCOUNT_DESKS.Add(Me)
					Me._ACCOUNT_ID = value.ACCOUNT_ID
				Else
					Me._ACCOUNT_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNTS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_QUALIFIER_ACCOUNT_DESKS", Storage:="_DESK_QUALIFIER1", ThisKey:="DESK_QUALIFIER", OtherKey:="DESK_QUALIFIER", IsForeignKey:=true)>  _
	Public Property DESK_QUALIFIER1() As DESK_QUALIFIER
		Get
			Return Me._DESK_QUALIFIER1.Entity
		End Get
		Set
			Dim previousValue As DESK_QUALIFIER = Me._DESK_QUALIFIER1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DESK_QUALIFIER1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DESK_QUALIFIER1.Entity = Nothing
					previousValue.ACCOUNT_DESKS.Remove(Me)
				End If
				Me._DESK_QUALIFIER1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ACCOUNT_DESKS.Add(Me)
					Me._DESK_QUALIFIER = value.DESK_QUALIFIER
				Else
					Me._DESK_QUALIFIER = CType(Nothing, Short)
				End If
				Me.SendPropertyChanged("DESK_QUALIFIER1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SHOW_NAME_TYPES_ACCOUNT_DESKS", Storage:="_SHOW_NAME_TYPES", ThisKey:="CLEARED_SHOW_NAME", OtherKey:="SHOW_NAME_ID", IsForeignKey:=true)>  _
	Public Property SHOW_NAME_TYPES() As SHOW_NAME_TYPES
		Get
			Return Me._SHOW_NAME_TYPES.Entity
		End Get
		Set
			Dim previousValue As SHOW_NAME_TYPES = Me._SHOW_NAME_TYPES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SHOW_NAME_TYPES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SHOW_NAME_TYPES.Entity = Nothing
					previousValue.ACCOUNT_DESKS.Remove(Me)
				End If
				Me._SHOW_NAME_TYPES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ACCOUNT_DESKS.Add(Me)
					Me._CLEARED_SHOW_NAME = value.SHOW_NAME_ID
				Else
					Me._CLEARED_SHOW_NAME = CType(Nothing, Short)
				End If
				Me.SendPropertyChanged("SHOW_NAME_TYPES")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SHOW_NAME_TYPES_ACCOUNT_DESKS1", Storage:="_SHOW_NAME_TYPES1", ThisKey:="OTC_SHOW_NAME", OtherKey:="SHOW_NAME_ID", IsForeignKey:=true)>  _
	Public Property SHOW_NAME_TYPES1() As SHOW_NAME_TYPES
		Get
			Return Me._SHOW_NAME_TYPES1.Entity
		End Get
		Set
			Dim previousValue As SHOW_NAME_TYPES = Me._SHOW_NAME_TYPES1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SHOW_NAME_TYPES1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SHOW_NAME_TYPES1.Entity = Nothing
					previousValue.ACCOUNT_DESKS1.Remove(Me)
				End If
				Me._SHOW_NAME_TYPES1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ACCOUNT_DESKS1.Add(Me)
					Me._OTC_SHOW_NAME = value.SHOW_NAME_ID
				Else
					Me._OTC_SHOW_NAME = CType(Nothing, Short)
				End If
				Me.SendPropertyChanged("SHOW_NAME_TYPES1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BROKER_DESK_TRADE_CLASSES(ByVal entity As BROKER_DESK_TRADE_CLASSES)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESKS = Me
	End Sub
	
	Private Sub detach_BROKER_DESK_TRADE_CLASSES(ByVal entity As BROKER_DESK_TRADE_CLASSES)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESKS = Nothing
	End Sub
	
	Private Sub attach_COUNTERPARTY_LIMITS(ByVal entity As COUNTERPARTY_LIMITS)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESKS = Me
	End Sub
	
	Private Sub detach_COUNTERPARTY_LIMITS(ByVal entity As COUNTERPARTY_LIMITS)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESKS = Nothing
	End Sub
	
	Private Sub attach_COUNTERPARTY_LIMITS1(ByVal entity As COUNTERPARTY_LIMITS)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESKS1 = Me
	End Sub
	
	Private Sub detach_COUNTERPARTY_LIMITS1(ByVal entity As COUNTERPARTY_LIMITS)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESKS1 = Nothing
	End Sub
	
	Private Sub attach_DESK_TRADE_CLASSES(ByVal entity As DESK_TRADE_CLASSES)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESKS = Me
	End Sub
	
	Private Sub detach_DESK_TRADE_CLASSES(ByVal entity As DESK_TRADE_CLASSES)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESKS = Nothing
	End Sub
	
	Private Sub attach_DESK_TRADE_CONFOS(ByVal entity As DESK_TRADE_CONFOS)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESKS = Me
	End Sub
	
	Private Sub detach_DESK_TRADE_CONFOS(ByVal entity As DESK_TRADE_CONFOS)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESKS = Nothing
	End Sub
	
	Private Sub attach_DESK_TRADERS(ByVal entity As DESK_TRADERS)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESKS = Me
	End Sub
	
	Private Sub detach_DESK_TRADERS(ByVal entity As DESK_TRADERS)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESKS = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFA(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESKS = Me
	End Sub
	
	Private Sub detach_ORDERS_FFA(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESKS = Nothing
	End Sub
	
	Private Sub attach_TRADES_FFA(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESKS = Me
	End Sub
	
	Private Sub detach_TRADES_FFA(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESKS = Nothing
	End Sub
	
	Private Sub attach_TRADES_FFA1(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESKS1 = Me
	End Sub
	
	Private Sub detach_TRADES_FFA1(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESKS1 = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._BROKER_DESK_TRADE_CLASSES = New EntitySet(Of BROKER_DESK_TRADE_CLASSES)(AddressOf Me.attach_BROKER_DESK_TRADE_CLASSES, AddressOf Me.detach_BROKER_DESK_TRADE_CLASSES)
		Me._COUNTERPARTY_LIMITS = New EntitySet(Of COUNTERPARTY_LIMITS)(AddressOf Me.attach_COUNTERPARTY_LIMITS, AddressOf Me.detach_COUNTERPARTY_LIMITS)
		Me._COUNTERPARTY_LIMITS1 = New EntitySet(Of COUNTERPARTY_LIMITS)(AddressOf Me.attach_COUNTERPARTY_LIMITS1, AddressOf Me.detach_COUNTERPARTY_LIMITS1)
		Me._DESK_TRADE_CLASSES = New EntitySet(Of DESK_TRADE_CLASSES)(AddressOf Me.attach_DESK_TRADE_CLASSES, AddressOf Me.detach_DESK_TRADE_CLASSES)
		Me._DESK_TRADE_CONFOS = New EntitySet(Of DESK_TRADE_CONFOS)(AddressOf Me.attach_DESK_TRADE_CONFOS, AddressOf Me.detach_DESK_TRADE_CONFOS)
		Me._DESK_TRADERS = New EntitySet(Of DESK_TRADERS)(AddressOf Me.attach_DESK_TRADERS, AddressOf Me.detach_DESK_TRADERS)
		Me._ORDERS_FFA = New EntitySet(Of ORDERS_FFA)(AddressOf Me.attach_ORDERS_FFA, AddressOf Me.detach_ORDERS_FFA)
		Me._TRADES_FFA = New EntitySet(Of TRADES_FFA)(AddressOf Me.attach_TRADES_FFA, AddressOf Me.detach_TRADES_FFA)
		Me._TRADES_FFA1 = New EntitySet(Of TRADES_FFA)(AddressOf Me.attach_TRADES_FFA1, AddressOf Me.detach_TRADES_FFA1)
		Me._ACCOUNTS = CType(Nothing, EntityRef(Of ACCOUNTS))
		Me._DESK_QUALIFIER1 = CType(Nothing, EntityRef(Of DESK_QUALIFIER))
		Me._SHOW_NAME_TYPES = CType(Nothing, EntityRef(Of SHOW_NAME_TYPES))
		Me._SHOW_NAME_TYPES1 = CType(Nothing, EntityRef(Of SHOW_NAME_TYPES))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.WET_FLAT_RATES"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class WET_FLAT_RATES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ROUTE_ID As Integer
	
	Private _FLAT_YEAR As Integer
	
	Private _FLAT_RATE As Double
	
	Private _PROJECTION As Boolean
	
	Private _ROUTES As EntityRef(Of ROUTES)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnFLAT_YEARChanging(value As Integer)
    End Sub
    Partial Private Sub OnFLAT_YEARChanged()
    End Sub
    Partial Private Sub OnFLAT_RATEChanging(value As Double)
    End Sub
    Partial Private Sub OnFLAT_RATEChanged()
    End Sub
    Partial Private Sub OnPROJECTIONChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPROJECTIONChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If Me._ROUTES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FLAT_YEAR", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property FLAT_YEAR() As Integer
		Get
			Return Me._FLAT_YEAR
		End Get
		Set
			If ((Me._FLAT_YEAR = value)  _
						= false) Then
				Me.OnFLAT_YEARChanging(value)
				Me.SendPropertyChanging
				Me._FLAT_YEAR = value
				Me.SendPropertyChanged("FLAT_YEAR")
				Me.OnFLAT_YEARChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FLAT_RATE", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property FLAT_RATE() As Double
		Get
			Return Me._FLAT_RATE
		End Get
		Set
			If ((Me._FLAT_RATE = value)  _
						= false) Then
				Me.OnFLAT_RATEChanging(value)
				Me.SendPropertyChanging
				Me._FLAT_RATE = value
				Me.SendPropertyChanged("FLAT_RATE")
				Me.OnFLAT_RATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROJECTION", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property PROJECTION() As Boolean
		Get
			Return Me._PROJECTION
		End Get
		Set
			If ((Me._PROJECTION = value)  _
						= false) Then
				Me.OnPROJECTIONChanging(value)
				Me.SendPropertyChanging
				Me._PROJECTION = value
				Me.SendPropertyChanged("PROJECTION")
				Me.OnPROJECTIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_WET_FLAT_RATES", Storage:="_ROUTES", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTES() As ROUTES
		Get
			Return Me._ROUTES.Entity
		End Get
		Set
			Dim previousValue As ROUTES = Me._ROUTES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTES.Entity = Nothing
					previousValue.WET_FLAT_RATES.Remove(Me)
				End If
				Me._ROUTES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.WET_FLAT_RATES.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTES")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._ROUTES = CType(Nothing, EntityRef(Of ROUTES))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ACCOUNT_TYPES"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class ACCOUNT_TYPES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ACCOUNT_TYPE_ID As Integer
	
	Private _ACCOUNT_TYPE_DESCR As String
	
	Private _ACCOUNTS As EntitySet(Of ACCOUNTS)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnACCOUNT_TYPE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_TYPE_IDChanged()
    End Sub
    Partial Private Sub OnACCOUNT_TYPE_DESCRChanging(value As String)
    End Sub
    Partial Private Sub OnACCOUNT_TYPE_DESCRChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_TYPE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ACCOUNT_TYPE_ID() As Integer
		Get
			Return Me._ACCOUNT_TYPE_ID
		End Get
		Set
			If ((Me._ACCOUNT_TYPE_ID = value)  _
						= false) Then
				Me.OnACCOUNT_TYPE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_TYPE_ID = value
				Me.SendPropertyChanged("ACCOUNT_TYPE_ID")
				Me.OnACCOUNT_TYPE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_TYPE_DESCR", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property ACCOUNT_TYPE_DESCR() As String
		Get
			Return Me._ACCOUNT_TYPE_DESCR
		End Get
		Set
			If (String.Equals(Me._ACCOUNT_TYPE_DESCR, value) = false) Then
				Me.OnACCOUNT_TYPE_DESCRChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_TYPE_DESCR = value
				Me.SendPropertyChanged("ACCOUNT_TYPE_DESCR")
				Me.OnACCOUNT_TYPE_DESCRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_TYPES_ACCOUNTS", Storage:="_ACCOUNTS", ThisKey:="ACCOUNT_TYPE_ID", OtherKey:="ACCOUNT_TYPE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3, EmitDefaultValue:=false)>  _
	Public Property ACCOUNTS() As EntitySet(Of ACCOUNTS)
		Get
			If (Me.serializing  _
						AndAlso (Me._ACCOUNTS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ACCOUNTS
		End Get
		Set
			Me._ACCOUNTS.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ACCOUNTS(ByVal entity As ACCOUNTS)
		Me.SendPropertyChanging
		entity.ACCOUNT_TYPES = Me
	End Sub
	
	Private Sub detach_ACCOUNTS(ByVal entity As ACCOUNTS)
		Me.SendPropertyChanging
		entity.ACCOUNT_TYPES = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._ACCOUNTS = New EntitySet(Of ACCOUNTS)(AddressOf Me.attach_ACCOUNTS, AddressOf Me.detach_ACCOUNTS)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ACCOUNTS"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class ACCOUNTS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ACCOUNT_ID As Integer
	
	Private _FULL_NAME As String
	
	Private _SHORT_NAME As String
	
	Private _STREET As String
	
	Private _CITY As String
	
	Private _REGION As String
	
	Private _ZIPCODE As String
	
	Private _COUNTRY_ID As Integer
	
	Private _TEL_B1 As String
	
	Private _TEL_B2 As String
	
	Private _FAX_B As String
	
	Private _EMAIL As String
	
	Private _WEBSITE As String
	
	Private _ACCOUNT_TYPE_ID As Integer
	
	Private _TRADE_AUTHORISED As Boolean
	
	Private _DEFAULT_CCY As Integer
	
	Private _CAN_DELETE As Boolean
	
	Private _BROKER_ID As Integer
	
	Private _SUSPENDED As Boolean
	
	Private _DEFAULT_BROKER_CLIENT As System.Nullable(Of Integer)
	
	Private _ACCOUNT_DESKS As EntitySet(Of ACCOUNT_DESKS)
	
	Private _ACCOUNTS1 As EntitySet(Of ACCOUNTS)
	
	Private _ACCOUNTS3 As EntitySet(Of ACCOUNTS)
	
	Private _ACCOUNTS_CONTACTS As EntitySet(Of ACCOUNTS_CONTACTS)
	
	Private _CONTRACT_SERIES As EntitySet(Of CONTRACT_SERIES)
	
	Private _DESK_EXCHANGES_CLEARERS As EntitySet(Of DESK_EXCHANGES_CLEARERS)
	
	Private _DESK_TRADE_CLASSES As EntitySet(Of DESK_TRADE_CLASSES)
	
	Private _DESK_TRADERS As EntitySet(Of DESK_TRADERS)
	
	Private _EXCHANGES As EntitySet(Of EXCHANGES)
	
	Private _EXCHANGES1 As EntitySet(Of EXCHANGES)
	
	Private _ORDERS_FFA As EntitySet(Of ORDERS_FFA)
	
	Private _ORDERS_FFA_EXCHANGES As EntitySet(Of ORDERS_FFA_EXCHANGES)
	
	Private _TRADES_FFA As EntitySet(Of TRADES_FFA)
	
	Private _TRADES_FFA1 As EntitySet(Of TRADES_FFA)
	
	Private _TRADES_FFA2 As EntitySet(Of TRADES_FFA)
	
	Private _TRADES_FFA3 As EntitySet(Of TRADES_FFA)
	
	Private _ACCOUNTS_ADMIN As EntitySet(Of ACCOUNTS_ADMIN)
	
	Private _ACCOUNT_TYPES As EntityRef(Of ACCOUNT_TYPES)
	
	Private _ACCOUNTS As EntityRef(Of ACCOUNTS)
	
	Private _ACCOUNTS2 As EntityRef(Of ACCOUNTS)
	
	Private _CCY As EntityRef(Of CCY)
	
	Private _COUNTRIES As EntityRef(Of COUNTRIES)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnACCOUNT_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_IDChanged()
    End Sub
    Partial Private Sub OnFULL_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnFULL_NAMEChanged()
    End Sub
    Partial Private Sub OnSHORT_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnSHORT_NAMEChanged()
    End Sub
    Partial Private Sub OnSTREETChanging(value As String)
    End Sub
    Partial Private Sub OnSTREETChanged()
    End Sub
    Partial Private Sub OnCITYChanging(value As String)
    End Sub
    Partial Private Sub OnCITYChanged()
    End Sub
    Partial Private Sub OnREGIONChanging(value As String)
    End Sub
    Partial Private Sub OnREGIONChanged()
    End Sub
    Partial Private Sub OnZIPCODEChanging(value As String)
    End Sub
    Partial Private Sub OnZIPCODEChanged()
    End Sub
    Partial Private Sub OnCOUNTRY_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCOUNTRY_IDChanged()
    End Sub
    Partial Private Sub OnTEL_B1Changing(value As String)
    End Sub
    Partial Private Sub OnTEL_B1Changed()
    End Sub
    Partial Private Sub OnTEL_B2Changing(value As String)
    End Sub
    Partial Private Sub OnTEL_B2Changed()
    End Sub
    Partial Private Sub OnFAX_BChanging(value As String)
    End Sub
    Partial Private Sub OnFAX_BChanged()
    End Sub
    Partial Private Sub OnEMAILChanging(value As String)
    End Sub
    Partial Private Sub OnEMAILChanged()
    End Sub
    Partial Private Sub OnWEBSITEChanging(value As String)
    End Sub
    Partial Private Sub OnWEBSITEChanged()
    End Sub
    Partial Private Sub OnACCOUNT_TYPE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_TYPE_IDChanged()
    End Sub
    Partial Private Sub OnTRADE_AUTHORISEDChanging(value As Boolean)
    End Sub
    Partial Private Sub OnTRADE_AUTHORISEDChanged()
    End Sub
    Partial Private Sub OnDEFAULT_CCYChanging(value As Integer)
    End Sub
    Partial Private Sub OnDEFAULT_CCYChanged()
    End Sub
    Partial Private Sub OnCAN_DELETEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCAN_DELETEChanged()
    End Sub
    Partial Private Sub OnBROKER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBROKER_IDChanged()
    End Sub
    Partial Private Sub OnSUSPENDEDChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSUSPENDEDChanged()
    End Sub
    Partial Private Sub OnDEFAULT_BROKER_CLIENTChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDEFAULT_BROKER_CLIENTChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ACCOUNT_ID() As Integer
		Get
			Return Me._ACCOUNT_ID
		End Get
		Set
			If ((Me._ACCOUNT_ID = value)  _
						= false) Then
				Me.OnACCOUNT_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_ID = value
				Me.SendPropertyChanged("ACCOUNT_ID")
				Me.OnACCOUNT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FULL_NAME", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property FULL_NAME() As String
		Get
			Return Me._FULL_NAME
		End Get
		Set
			If (String.Equals(Me._FULL_NAME, value) = false) Then
				Me.OnFULL_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._FULL_NAME = value
				Me.SendPropertyChanged("FULL_NAME")
				Me.OnFULL_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SHORT_NAME", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property SHORT_NAME() As String
		Get
			Return Me._SHORT_NAME
		End Get
		Set
			If (String.Equals(Me._SHORT_NAME, value) = false) Then
				Me.OnSHORT_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._SHORT_NAME = value
				Me.SendPropertyChanged("SHORT_NAME")
				Me.OnSHORT_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_STREET", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property STREET() As String
		Get
			Return Me._STREET
		End Get
		Set
			If (String.Equals(Me._STREET, value) = false) Then
				Me.OnSTREETChanging(value)
				Me.SendPropertyChanging
				Me._STREET = value
				Me.SendPropertyChanged("STREET")
				Me.OnSTREETChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CITY", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property CITY() As String
		Get
			Return Me._CITY
		End Get
		Set
			If (String.Equals(Me._CITY, value) = false) Then
				Me.OnCITYChanging(value)
				Me.SendPropertyChanging
				Me._CITY = value
				Me.SendPropertyChanged("CITY")
				Me.OnCITYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REGION", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property REGION() As String
		Get
			Return Me._REGION
		End Get
		Set
			If (String.Equals(Me._REGION, value) = false) Then
				Me.OnREGIONChanging(value)
				Me.SendPropertyChanging
				Me._REGION = value
				Me.SendPropertyChanged("REGION")
				Me.OnREGIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ZIPCODE", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property ZIPCODE() As String
		Get
			Return Me._ZIPCODE
		End Get
		Set
			If (String.Equals(Me._ZIPCODE, value) = false) Then
				Me.OnZIPCODEChanging(value)
				Me.SendPropertyChanging
				Me._ZIPCODE = value
				Me.SendPropertyChanged("ZIPCODE")
				Me.OnZIPCODEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COUNTRY_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property COUNTRY_ID() As Integer
		Get
			Return Me._COUNTRY_ID
		End Get
		Set
			If ((Me._COUNTRY_ID = value)  _
						= false) Then
				If Me._COUNTRIES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCOUNTRY_IDChanging(value)
				Me.SendPropertyChanging
				Me._COUNTRY_ID = value
				Me.SendPropertyChanged("COUNTRY_ID")
				Me.OnCOUNTRY_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TEL_B1", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property TEL_B1() As String
		Get
			Return Me._TEL_B1
		End Get
		Set
			If (String.Equals(Me._TEL_B1, value) = false) Then
				Me.OnTEL_B1Changing(value)
				Me.SendPropertyChanging
				Me._TEL_B1 = value
				Me.SendPropertyChanged("TEL_B1")
				Me.OnTEL_B1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TEL_B2", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10)>  _
	Public Property TEL_B2() As String
		Get
			Return Me._TEL_B2
		End Get
		Set
			If (String.Equals(Me._TEL_B2, value) = false) Then
				Me.OnTEL_B2Changing(value)
				Me.SendPropertyChanging
				Me._TEL_B2 = value
				Me.SendPropertyChanged("TEL_B2")
				Me.OnTEL_B2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FAX_B", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=11)>  _
	Public Property FAX_B() As String
		Get
			Return Me._FAX_B
		End Get
		Set
			If (String.Equals(Me._FAX_B, value) = false) Then
				Me.OnFAX_BChanging(value)
				Me.SendPropertyChanging
				Me._FAX_B = value
				Me.SendPropertyChanged("FAX_B")
				Me.OnFAX_BChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMAIL", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=12)>  _
	Public Property EMAIL() As String
		Get
			Return Me._EMAIL
		End Get
		Set
			If (String.Equals(Me._EMAIL, value) = false) Then
				Me.OnEMAILChanging(value)
				Me.SendPropertyChanging
				Me._EMAIL = value
				Me.SendPropertyChanged("EMAIL")
				Me.OnEMAILChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WEBSITE", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=13)>  _
	Public Property WEBSITE() As String
		Get
			Return Me._WEBSITE
		End Get
		Set
			If (String.Equals(Me._WEBSITE, value) = false) Then
				Me.OnWEBSITEChanging(value)
				Me.SendPropertyChanging
				Me._WEBSITE = value
				Me.SendPropertyChanged("WEBSITE")
				Me.OnWEBSITEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_TYPE_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=14)>  _
	Public Property ACCOUNT_TYPE_ID() As Integer
		Get
			Return Me._ACCOUNT_TYPE_ID
		End Get
		Set
			If ((Me._ACCOUNT_TYPE_ID = value)  _
						= false) Then
				If Me._ACCOUNT_TYPES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACCOUNT_TYPE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_TYPE_ID = value
				Me.SendPropertyChanged("ACCOUNT_TYPE_ID")
				Me.OnACCOUNT_TYPE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_AUTHORISED", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=15)>  _
	Public Property TRADE_AUTHORISED() As Boolean
		Get
			Return Me._TRADE_AUTHORISED
		End Get
		Set
			If ((Me._TRADE_AUTHORISED = value)  _
						= false) Then
				Me.OnTRADE_AUTHORISEDChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_AUTHORISED = value
				Me.SendPropertyChanged("TRADE_AUTHORISED")
				Me.OnTRADE_AUTHORISEDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEFAULT_CCY", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=16)>  _
	Public Property DEFAULT_CCY() As Integer
		Get
			Return Me._DEFAULT_CCY
		End Get
		Set
			If ((Me._DEFAULT_CCY = value)  _
						= false) Then
				If Me._CCY.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDEFAULT_CCYChanging(value)
				Me.SendPropertyChanging
				Me._DEFAULT_CCY = value
				Me.SendPropertyChanged("DEFAULT_CCY")
				Me.OnDEFAULT_CCYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CAN_DELETE", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=17)>  _
	Public Property CAN_DELETE() As Boolean
		Get
			Return Me._CAN_DELETE
		End Get
		Set
			If ((Me._CAN_DELETE = value)  _
						= false) Then
				Me.OnCAN_DELETEChanging(value)
				Me.SendPropertyChanging
				Me._CAN_DELETE = value
				Me.SendPropertyChanged("CAN_DELETE")
				Me.OnCAN_DELETEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BROKER_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=18)>  _
	Public Property BROKER_ID() As Integer
		Get
			Return Me._BROKER_ID
		End Get
		Set
			If ((Me._BROKER_ID = value)  _
						= false) Then
				If Me._ACCOUNTS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBROKER_IDChanging(value)
				Me.SendPropertyChanging
				Me._BROKER_ID = value
				Me.SendPropertyChanged("BROKER_ID")
				Me.OnBROKER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SUSPENDED", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=19)>  _
	Public Property SUSPENDED() As Boolean
		Get
			Return Me._SUSPENDED
		End Get
		Set
			If ((Me._SUSPENDED = value)  _
						= false) Then
				Me.OnSUSPENDEDChanging(value)
				Me.SendPropertyChanging
				Me._SUSPENDED = value
				Me.SendPropertyChanged("SUSPENDED")
				Me.OnSUSPENDEDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEFAULT_BROKER_CLIENT", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=20)>  _
	Public Property DEFAULT_BROKER_CLIENT() As System.Nullable(Of Integer)
		Get
			Return Me._DEFAULT_BROKER_CLIENT
		End Get
		Set
			If (Me._DEFAULT_BROKER_CLIENT.Equals(value) = false) Then
				If Me._ACCOUNTS2.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDEFAULT_BROKER_CLIENTChanging(value)
				Me.SendPropertyChanging
				Me._DEFAULT_BROKER_CLIENT = value
				Me.SendPropertyChanged("DEFAULT_BROKER_CLIENT")
				Me.OnDEFAULT_BROKER_CLIENTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_ACCOUNT_DESKS", Storage:="_ACCOUNT_DESKS", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=21, EmitDefaultValue:=false)>  _
	Public Property ACCOUNT_DESKS() As EntitySet(Of ACCOUNT_DESKS)
		Get
			If (Me.serializing  _
						AndAlso (Me._ACCOUNT_DESKS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ACCOUNT_DESKS
		End Get
		Set
			Me._ACCOUNT_DESKS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_ACCOUNTS", Storage:="_ACCOUNTS1", ThisKey:="ACCOUNT_ID", OtherKey:="BROKER_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=22, EmitDefaultValue:=false)>  _
	Public Property ACCOUNTS1() As EntitySet(Of ACCOUNTS)
		Get
			If (Me.serializing  _
						AndAlso (Me._ACCOUNTS1.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ACCOUNTS1
		End Get
		Set
			Me._ACCOUNTS1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_ACCOUNTS1", Storage:="_ACCOUNTS3", ThisKey:="ACCOUNT_ID", OtherKey:="DEFAULT_BROKER_CLIENT"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=23, EmitDefaultValue:=false)>  _
	Public Property ACCOUNTS3() As EntitySet(Of ACCOUNTS)
		Get
			If (Me.serializing  _
						AndAlso (Me._ACCOUNTS3.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ACCOUNTS3
		End Get
		Set
			Me._ACCOUNTS3.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_ACCOUNTS_CONTACTS", Storage:="_ACCOUNTS_CONTACTS", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=24, EmitDefaultValue:=false)>  _
	Public Property ACCOUNTS_CONTACTS() As EntitySet(Of ACCOUNTS_CONTACTS)
		Get
			If (Me.serializing  _
						AndAlso (Me._ACCOUNTS_CONTACTS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ACCOUNTS_CONTACTS
		End Get
		Set
			Me._ACCOUNTS_CONTACTS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_CONTRACT_SERIES", Storage:="_CONTRACT_SERIES", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=25, EmitDefaultValue:=false)>  _
	Public Property CONTRACT_SERIES() As EntitySet(Of CONTRACT_SERIES)
		Get
			If (Me.serializing  _
						AndAlso (Me._CONTRACT_SERIES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._CONTRACT_SERIES
		End Get
		Set
			Me._CONTRACT_SERIES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_DESK_EXCHANGES_CLEARERS", Storage:="_DESK_EXCHANGES_CLEARERS", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=26, EmitDefaultValue:=false)>  _
	Public Property DESK_EXCHANGES_CLEARERS() As EntitySet(Of DESK_EXCHANGES_CLEARERS)
		Get
			If (Me.serializing  _
						AndAlso (Me._DESK_EXCHANGES_CLEARERS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._DESK_EXCHANGES_CLEARERS
		End Get
		Set
			Me._DESK_EXCHANGES_CLEARERS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_DESK_TRADE_CLASSES", Storage:="_DESK_TRADE_CLASSES", ThisKey:="ACCOUNT_ID", OtherKey:="BROKER_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=27, EmitDefaultValue:=false)>  _
	Public Property DESK_TRADE_CLASSES() As EntitySet(Of DESK_TRADE_CLASSES)
		Get
			If (Me.serializing  _
						AndAlso (Me._DESK_TRADE_CLASSES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._DESK_TRADE_CLASSES
		End Get
		Set
			Me._DESK_TRADE_CLASSES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_DESK_TRADERS", Storage:="_DESK_TRADERS", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=28, EmitDefaultValue:=false)>  _
	Public Property DESK_TRADERS() As EntitySet(Of DESK_TRADERS)
		Get
			If (Me.serializing  _
						AndAlso (Me._DESK_TRADERS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._DESK_TRADERS
		End Get
		Set
			Me._DESK_TRADERS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_EXCHANGES", Storage:="_EXCHANGES", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=29, EmitDefaultValue:=false)>  _
	Public Property EXCHANGES() As EntitySet(Of EXCHANGES)
		Get
			If (Me.serializing  _
						AndAlso (Me._EXCHANGES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._EXCHANGES
		End Get
		Set
			Me._EXCHANGES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_EXCHANGES1", Storage:="_EXCHANGES1", ThisKey:="ACCOUNT_ID", OtherKey:="DEFAULT_CLEARER_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=30, EmitDefaultValue:=false)>  _
	Public Property EXCHANGES1() As EntitySet(Of EXCHANGES)
		Get
			If (Me.serializing  _
						AndAlso (Me._EXCHANGES1.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._EXCHANGES1
		End Get
		Set
			Me._EXCHANGES1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_ORDERS_FFA", Storage:="_ORDERS_FFA", ThisKey:="ACCOUNT_ID", OtherKey:="CLEARER_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=31, EmitDefaultValue:=false)>  _
	Public Property ORDERS_FFA() As EntitySet(Of ORDERS_FFA)
		Get
			If (Me.serializing  _
						AndAlso (Me._ORDERS_FFA.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ORDERS_FFA
		End Get
		Set
			Me._ORDERS_FFA.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_ORDERS_FFA_EXCHANGES", Storage:="_ORDERS_FFA_EXCHANGES", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=32, EmitDefaultValue:=false)>  _
	Public Property ORDERS_FFA_EXCHANGES() As EntitySet(Of ORDERS_FFA_EXCHANGES)
		Get
			If (Me.serializing  _
						AndAlso (Me._ORDERS_FFA_EXCHANGES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ORDERS_FFA_EXCHANGES
		End Get
		Set
			Me._ORDERS_FFA_EXCHANGES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_TRADES_FFA", Storage:="_TRADES_FFA", ThisKey:="ACCOUNT_ID", OtherKey:="CLEARING_ID1"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=33, EmitDefaultValue:=false)>  _
	Public Property TRADES_FFA() As EntitySet(Of TRADES_FFA)
		Get
			If (Me.serializing  _
						AndAlso (Me._TRADES_FFA.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._TRADES_FFA
		End Get
		Set
			Me._TRADES_FFA.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_TRADES_FFA1", Storage:="_TRADES_FFA1", ThisKey:="ACCOUNT_ID", OtherKey:="CLEARING_ID2"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=34, EmitDefaultValue:=false)>  _
	Public Property TRADES_FFA1() As EntitySet(Of TRADES_FFA)
		Get
			If (Me.serializing  _
						AndAlso (Me._TRADES_FFA1.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._TRADES_FFA1
		End Get
		Set
			Me._TRADES_FFA1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_TRADES_FFA2", Storage:="_TRADES_FFA2", ThisKey:="ACCOUNT_ID", OtherKey:="BROKER_ID1"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=35, EmitDefaultValue:=false)>  _
	Public Property TRADES_FFA2() As EntitySet(Of TRADES_FFA)
		Get
			If (Me.serializing  _
						AndAlso (Me._TRADES_FFA2.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._TRADES_FFA2
		End Get
		Set
			Me._TRADES_FFA2.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_TRADES_FFA3", Storage:="_TRADES_FFA3", ThisKey:="ACCOUNT_ID", OtherKey:="BROKER_ID2"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=36, EmitDefaultValue:=false)>  _
	Public Property TRADES_FFA3() As EntitySet(Of TRADES_FFA)
		Get
			If (Me.serializing  _
						AndAlso (Me._TRADES_FFA3.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._TRADES_FFA3
		End Get
		Set
			Me._TRADES_FFA3.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_ACCOUNTS_ADMIN", Storage:="_ACCOUNTS_ADMIN", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=37, EmitDefaultValue:=false)>  _
	Public Property ACCOUNTS_ADMIN() As EntitySet(Of ACCOUNTS_ADMIN)
		Get
			If (Me.serializing  _
						AndAlso (Me._ACCOUNTS_ADMIN.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ACCOUNTS_ADMIN
		End Get
		Set
			Me._ACCOUNTS_ADMIN.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_TYPES_ACCOUNTS", Storage:="_ACCOUNT_TYPES", ThisKey:="ACCOUNT_TYPE_ID", OtherKey:="ACCOUNT_TYPE_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT_TYPES() As ACCOUNT_TYPES
		Get
			Return Me._ACCOUNT_TYPES.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT_TYPES = Me._ACCOUNT_TYPES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT_TYPES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT_TYPES.Entity = Nothing
					previousValue.ACCOUNTS.Remove(Me)
				End If
				Me._ACCOUNT_TYPES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ACCOUNTS.Add(Me)
					Me._ACCOUNT_TYPE_ID = value.ACCOUNT_TYPE_ID
				Else
					Me._ACCOUNT_TYPE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNT_TYPES")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_ACCOUNTS", Storage:="_ACCOUNTS", ThisKey:="BROKER_ID", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNTS() As ACCOUNTS
		Get
			Return Me._ACCOUNTS.Entity
		End Get
		Set
			Dim previousValue As ACCOUNTS = Me._ACCOUNTS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNTS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNTS.Entity = Nothing
					previousValue.ACCOUNTS1.Remove(Me)
				End If
				Me._ACCOUNTS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ACCOUNTS1.Add(Me)
					Me._BROKER_ID = value.ACCOUNT_ID
				Else
					Me._BROKER_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNTS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_ACCOUNTS1", Storage:="_ACCOUNTS2", ThisKey:="DEFAULT_BROKER_CLIENT", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNTS2() As ACCOUNTS
		Get
			Return Me._ACCOUNTS2.Entity
		End Get
		Set
			Dim previousValue As ACCOUNTS = Me._ACCOUNTS2.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNTS2.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNTS2.Entity = Nothing
					previousValue.ACCOUNTS3.Remove(Me)
				End If
				Me._ACCOUNTS2.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ACCOUNTS3.Add(Me)
					Me._DEFAULT_BROKER_CLIENT = value.ACCOUNT_ID
				Else
					Me._DEFAULT_BROKER_CLIENT = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ACCOUNTS2")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CCY_ACCOUNTS", Storage:="_CCY", ThisKey:="DEFAULT_CCY", OtherKey:="CCY_ID", IsForeignKey:=true)>  _
	Public Property CCY() As CCY
		Get
			Return Me._CCY.Entity
		End Get
		Set
			Dim previousValue As CCY = Me._CCY.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CCY.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CCY.Entity = Nothing
					previousValue.ACCOUNTS.Remove(Me)
				End If
				Me._CCY.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ACCOUNTS.Add(Me)
					Me._DEFAULT_CCY = value.CCY_ID
				Else
					Me._DEFAULT_CCY = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CCY")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="COUNTRIES_ACCOUNTS", Storage:="_COUNTRIES", ThisKey:="COUNTRY_ID", OtherKey:="COUNTRY_ID", IsForeignKey:=true)>  _
	Public Property COUNTRIES() As COUNTRIES
		Get
			Return Me._COUNTRIES.Entity
		End Get
		Set
			Dim previousValue As COUNTRIES = Me._COUNTRIES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._COUNTRIES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._COUNTRIES.Entity = Nothing
					previousValue.ACCOUNTS.Remove(Me)
				End If
				Me._COUNTRIES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ACCOUNTS.Add(Me)
					Me._COUNTRY_ID = value.COUNTRY_ID
				Else
					Me._COUNTRY_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("COUNTRIES")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ACCOUNT_DESKS(ByVal entity As ACCOUNT_DESKS)
		Me.SendPropertyChanging
		entity.ACCOUNTS = Me
	End Sub
	
	Private Sub detach_ACCOUNT_DESKS(ByVal entity As ACCOUNT_DESKS)
		Me.SendPropertyChanging
		entity.ACCOUNTS = Nothing
	End Sub
	
	Private Sub attach_ACCOUNTS1(ByVal entity As ACCOUNTS)
		Me.SendPropertyChanging
		entity.ACCOUNTS = Me
	End Sub
	
	Private Sub detach_ACCOUNTS1(ByVal entity As ACCOUNTS)
		Me.SendPropertyChanging
		entity.ACCOUNTS = Nothing
	End Sub
	
	Private Sub attach_ACCOUNTS3(ByVal entity As ACCOUNTS)
		Me.SendPropertyChanging
		entity.ACCOUNTS2 = Me
	End Sub
	
	Private Sub detach_ACCOUNTS3(ByVal entity As ACCOUNTS)
		Me.SendPropertyChanging
		entity.ACCOUNTS2 = Nothing
	End Sub
	
	Private Sub attach_ACCOUNTS_CONTACTS(ByVal entity As ACCOUNTS_CONTACTS)
		Me.SendPropertyChanging
		entity.ACCOUNTS = Me
	End Sub
	
	Private Sub detach_ACCOUNTS_CONTACTS(ByVal entity As ACCOUNTS_CONTACTS)
		Me.SendPropertyChanging
		entity.ACCOUNTS = Nothing
	End Sub
	
	Private Sub attach_CONTRACT_SERIES(ByVal entity As CONTRACT_SERIES)
		Me.SendPropertyChanging
		entity.ACCOUNTS = Me
	End Sub
	
	Private Sub detach_CONTRACT_SERIES(ByVal entity As CONTRACT_SERIES)
		Me.SendPropertyChanging
		entity.ACCOUNTS = Nothing
	End Sub
	
	Private Sub attach_DESK_EXCHANGES_CLEARERS(ByVal entity As DESK_EXCHANGES_CLEARERS)
		Me.SendPropertyChanging
		entity.ACCOUNTS = Me
	End Sub
	
	Private Sub detach_DESK_EXCHANGES_CLEARERS(ByVal entity As DESK_EXCHANGES_CLEARERS)
		Me.SendPropertyChanging
		entity.ACCOUNTS = Nothing
	End Sub
	
	Private Sub attach_DESK_TRADE_CLASSES(ByVal entity As DESK_TRADE_CLASSES)
		Me.SendPropertyChanging
		entity.ACCOUNTS = Me
	End Sub
	
	Private Sub detach_DESK_TRADE_CLASSES(ByVal entity As DESK_TRADE_CLASSES)
		Me.SendPropertyChanging
		entity.ACCOUNTS = Nothing
	End Sub
	
	Private Sub attach_DESK_TRADERS(ByVal entity As DESK_TRADERS)
		Me.SendPropertyChanging
		entity.ACCOUNTS = Me
	End Sub
	
	Private Sub detach_DESK_TRADERS(ByVal entity As DESK_TRADERS)
		Me.SendPropertyChanging
		entity.ACCOUNTS = Nothing
	End Sub
	
	Private Sub attach_EXCHANGES(ByVal entity As EXCHANGES)
		Me.SendPropertyChanging
		entity.ACCOUNTS = Me
	End Sub
	
	Private Sub detach_EXCHANGES(ByVal entity As EXCHANGES)
		Me.SendPropertyChanging
		entity.ACCOUNTS = Nothing
	End Sub
	
	Private Sub attach_EXCHANGES1(ByVal entity As EXCHANGES)
		Me.SendPropertyChanging
		entity.ACCOUNTS1 = Me
	End Sub
	
	Private Sub detach_EXCHANGES1(ByVal entity As EXCHANGES)
		Me.SendPropertyChanging
		entity.ACCOUNTS1 = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFA(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNTS = Me
	End Sub
	
	Private Sub detach_ORDERS_FFA(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNTS = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFA_EXCHANGES(ByVal entity As ORDERS_FFA_EXCHANGES)
		Me.SendPropertyChanging
		entity.ACCOUNTS = Me
	End Sub
	
	Private Sub detach_ORDERS_FFA_EXCHANGES(ByVal entity As ORDERS_FFA_EXCHANGES)
		Me.SendPropertyChanging
		entity.ACCOUNTS = Nothing
	End Sub
	
	Private Sub attach_TRADES_FFA(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNTS = Me
	End Sub
	
	Private Sub detach_TRADES_FFA(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNTS = Nothing
	End Sub
	
	Private Sub attach_TRADES_FFA1(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNTS1 = Me
	End Sub
	
	Private Sub detach_TRADES_FFA1(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNTS1 = Nothing
	End Sub
	
	Private Sub attach_TRADES_FFA2(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNTS2 = Me
	End Sub
	
	Private Sub detach_TRADES_FFA2(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNTS2 = Nothing
	End Sub
	
	Private Sub attach_TRADES_FFA3(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNTS3 = Me
	End Sub
	
	Private Sub detach_TRADES_FFA3(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNTS3 = Nothing
	End Sub
	
	Private Sub attach_ACCOUNTS_ADMIN(ByVal entity As ACCOUNTS_ADMIN)
		Me.SendPropertyChanging
		entity.ACCOUNTS = Me
	End Sub
	
	Private Sub detach_ACCOUNTS_ADMIN(ByVal entity As ACCOUNTS_ADMIN)
		Me.SendPropertyChanging
		entity.ACCOUNTS = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._ACCOUNT_DESKS = New EntitySet(Of ACCOUNT_DESKS)(AddressOf Me.attach_ACCOUNT_DESKS, AddressOf Me.detach_ACCOUNT_DESKS)
		Me._ACCOUNTS1 = New EntitySet(Of ACCOUNTS)(AddressOf Me.attach_ACCOUNTS1, AddressOf Me.detach_ACCOUNTS1)
		Me._ACCOUNTS3 = New EntitySet(Of ACCOUNTS)(AddressOf Me.attach_ACCOUNTS3, AddressOf Me.detach_ACCOUNTS3)
		Me._ACCOUNTS_CONTACTS = New EntitySet(Of ACCOUNTS_CONTACTS)(AddressOf Me.attach_ACCOUNTS_CONTACTS, AddressOf Me.detach_ACCOUNTS_CONTACTS)
		Me._CONTRACT_SERIES = New EntitySet(Of CONTRACT_SERIES)(AddressOf Me.attach_CONTRACT_SERIES, AddressOf Me.detach_CONTRACT_SERIES)
		Me._DESK_EXCHANGES_CLEARERS = New EntitySet(Of DESK_EXCHANGES_CLEARERS)(AddressOf Me.attach_DESK_EXCHANGES_CLEARERS, AddressOf Me.detach_DESK_EXCHANGES_CLEARERS)
		Me._DESK_TRADE_CLASSES = New EntitySet(Of DESK_TRADE_CLASSES)(AddressOf Me.attach_DESK_TRADE_CLASSES, AddressOf Me.detach_DESK_TRADE_CLASSES)
		Me._DESK_TRADERS = New EntitySet(Of DESK_TRADERS)(AddressOf Me.attach_DESK_TRADERS, AddressOf Me.detach_DESK_TRADERS)
		Me._EXCHANGES = New EntitySet(Of EXCHANGES)(AddressOf Me.attach_EXCHANGES, AddressOf Me.detach_EXCHANGES)
		Me._EXCHANGES1 = New EntitySet(Of EXCHANGES)(AddressOf Me.attach_EXCHANGES1, AddressOf Me.detach_EXCHANGES1)
		Me._ORDERS_FFA = New EntitySet(Of ORDERS_FFA)(AddressOf Me.attach_ORDERS_FFA, AddressOf Me.detach_ORDERS_FFA)
		Me._ORDERS_FFA_EXCHANGES = New EntitySet(Of ORDERS_FFA_EXCHANGES)(AddressOf Me.attach_ORDERS_FFA_EXCHANGES, AddressOf Me.detach_ORDERS_FFA_EXCHANGES)
		Me._TRADES_FFA = New EntitySet(Of TRADES_FFA)(AddressOf Me.attach_TRADES_FFA, AddressOf Me.detach_TRADES_FFA)
		Me._TRADES_FFA1 = New EntitySet(Of TRADES_FFA)(AddressOf Me.attach_TRADES_FFA1, AddressOf Me.detach_TRADES_FFA1)
		Me._TRADES_FFA2 = New EntitySet(Of TRADES_FFA)(AddressOf Me.attach_TRADES_FFA2, AddressOf Me.detach_TRADES_FFA2)
		Me._TRADES_FFA3 = New EntitySet(Of TRADES_FFA)(AddressOf Me.attach_TRADES_FFA3, AddressOf Me.detach_TRADES_FFA3)
		Me._ACCOUNTS_ADMIN = New EntitySet(Of ACCOUNTS_ADMIN)(AddressOf Me.attach_ACCOUNTS_ADMIN, AddressOf Me.detach_ACCOUNTS_ADMIN)
		Me._ACCOUNT_TYPES = CType(Nothing, EntityRef(Of ACCOUNT_TYPES))
		Me._ACCOUNTS = CType(Nothing, EntityRef(Of ACCOUNTS))
		Me._ACCOUNTS2 = CType(Nothing, EntityRef(Of ACCOUNTS))
		Me._CCY = CType(Nothing, EntityRef(Of CCY))
		Me._COUNTRIES = CType(Nothing, EntityRef(Of COUNTRIES))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ACCOUNTS_CONTACTS"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class ACCOUNTS_CONTACTS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ACCOUNTS_CONTACTS_ID As Integer
	
	Private _ACCOUNT_ID As Integer
	
	Private _CONTACT_ID As Integer
	
	Private _ACTIVE As Boolean
	
	Private _MAIN_CONTACT As Boolean
	
	Private _ACCOUNTS As EntityRef(Of ACCOUNTS)
	
	Private _CONTACTS As EntityRef(Of CONTACTS)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnACCOUNTS_CONTACTS_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNTS_CONTACTS_IDChanged()
    End Sub
    Partial Private Sub OnACCOUNT_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_IDChanged()
    End Sub
    Partial Private Sub OnCONTACT_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCONTACT_IDChanged()
    End Sub
    Partial Private Sub OnACTIVEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnACTIVEChanged()
    End Sub
    Partial Private Sub OnMAIN_CONTACTChanging(value As Boolean)
    End Sub
    Partial Private Sub OnMAIN_CONTACTChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNTS_CONTACTS_ID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ACCOUNTS_CONTACTS_ID() As Integer
		Get
			Return Me._ACCOUNTS_CONTACTS_ID
		End Get
		Set
			If ((Me._ACCOUNTS_CONTACTS_ID = value)  _
						= false) Then
				Me.OnACCOUNTS_CONTACTS_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNTS_CONTACTS_ID = value
				Me.SendPropertyChanged("ACCOUNTS_CONTACTS_ID")
				Me.OnACCOUNTS_CONTACTS_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property ACCOUNT_ID() As Integer
		Get
			Return Me._ACCOUNT_ID
		End Get
		Set
			If ((Me._ACCOUNT_ID = value)  _
						= false) Then
				If Me._ACCOUNTS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACCOUNT_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_ID = value
				Me.SendPropertyChanged("ACCOUNT_ID")
				Me.OnACCOUNT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONTACT_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property CONTACT_ID() As Integer
		Get
			Return Me._CONTACT_ID
		End Get
		Set
			If ((Me._CONTACT_ID = value)  _
						= false) Then
				If Me._CONTACTS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCONTACT_IDChanging(value)
				Me.SendPropertyChanging
				Me._CONTACT_ID = value
				Me.SendPropertyChanged("CONTACT_ID")
				Me.OnCONTACT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACTIVE", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property ACTIVE() As Boolean
		Get
			Return Me._ACTIVE
		End Get
		Set
			If ((Me._ACTIVE = value)  _
						= false) Then
				Me.OnACTIVEChanging(value)
				Me.SendPropertyChanging
				Me._ACTIVE = value
				Me.SendPropertyChanged("ACTIVE")
				Me.OnACTIVEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MAIN_CONTACT", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property MAIN_CONTACT() As Boolean
		Get
			Return Me._MAIN_CONTACT
		End Get
		Set
			If ((Me._MAIN_CONTACT = value)  _
						= false) Then
				Me.OnMAIN_CONTACTChanging(value)
				Me.SendPropertyChanging
				Me._MAIN_CONTACT = value
				Me.SendPropertyChanged("MAIN_CONTACT")
				Me.OnMAIN_CONTACTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_ACCOUNTS_CONTACTS", Storage:="_ACCOUNTS", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNTS() As ACCOUNTS
		Get
			Return Me._ACCOUNTS.Entity
		End Get
		Set
			Dim previousValue As ACCOUNTS = Me._ACCOUNTS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNTS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNTS.Entity = Nothing
					previousValue.ACCOUNTS_CONTACTS.Remove(Me)
				End If
				Me._ACCOUNTS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ACCOUNTS_CONTACTS.Add(Me)
					Me._ACCOUNT_ID = value.ACCOUNT_ID
				Else
					Me._ACCOUNT_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNTS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONTACTS_ACCOUNTS_CONTACTS", Storage:="_CONTACTS", ThisKey:="CONTACT_ID", OtherKey:="CONTACT_ID", IsForeignKey:=true)>  _
	Public Property CONTACTS() As CONTACTS
		Get
			Return Me._CONTACTS.Entity
		End Get
		Set
			Dim previousValue As CONTACTS = Me._CONTACTS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CONTACTS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CONTACTS.Entity = Nothing
					previousValue.ACCOUNTS_CONTACTS.Remove(Me)
				End If
				Me._CONTACTS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ACCOUNTS_CONTACTS.Add(Me)
					Me._CONTACT_ID = value.CONTACT_ID
				Else
					Me._CONTACT_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CONTACTS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._ACCOUNTS = CType(Nothing, EntityRef(Of ACCOUNTS))
		Me._CONTACTS = CType(Nothing, EntityRef(Of CONTACTS))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ARTBOPTCALC_FINGERPRINTS"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class ARTBOPTCALC_FINGERPRINTS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PRODUCT_ID As String
	
	Private _FINGER_PRINT As String
	
	Private _COMPUTER_NAME As String
	
	Private _ACTIVE As Boolean
	
	Private _DEMO_EXPIRATION_DATE As Date
	
	Private _HIDE As Boolean
	
	Private _LICENSE_KEY As String
	
	Private _OFID As String
	
	Private _UPDATER As Boolean
	
	Private _PRICER As Boolean
	
	Private _ARTBOPTCALC_LICENSES As EntityRef(Of ARTBOPTCALC_LICENSES)
	
	Private _ARTBOPTCALC_PRODUCTS As EntityRef(Of ARTBOPTCALC_PRODUCTS)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPRODUCT_IDChanging(value As String)
    End Sub
    Partial Private Sub OnPRODUCT_IDChanged()
    End Sub
    Partial Private Sub OnFINGER_PRINTChanging(value As String)
    End Sub
    Partial Private Sub OnFINGER_PRINTChanged()
    End Sub
    Partial Private Sub OnCOMPUTER_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnCOMPUTER_NAMEChanged()
    End Sub
    Partial Private Sub OnACTIVEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnACTIVEChanged()
    End Sub
    Partial Private Sub OnDEMO_EXPIRATION_DATEChanging(value As Date)
    End Sub
    Partial Private Sub OnDEMO_EXPIRATION_DATEChanged()
    End Sub
    Partial Private Sub OnHIDEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnHIDEChanged()
    End Sub
    Partial Private Sub OnLICENSE_KEYChanging(value As String)
    End Sub
    Partial Private Sub OnLICENSE_KEYChanged()
    End Sub
    Partial Private Sub OnOFIDChanging(value As String)
    End Sub
    Partial Private Sub OnOFIDChanged()
    End Sub
    Partial Private Sub OnUPDATERChanging(value As Boolean)
    End Sub
    Partial Private Sub OnUPDATERChanged()
    End Sub
    Partial Private Sub OnPRICERChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPRICERChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRODUCT_ID", DbType:="NChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property PRODUCT_ID() As String
		Get
			Return Me._PRODUCT_ID
		End Get
		Set
			If (String.Equals(Me._PRODUCT_ID, value) = false) Then
				If Me._ARTBOPTCALC_PRODUCTS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPRODUCT_IDChanging(value)
				Me.SendPropertyChanging
				Me._PRODUCT_ID = value
				Me.SendPropertyChanged("PRODUCT_ID")
				Me.OnPRODUCT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FINGER_PRINT", DbType:="NChar(39) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property FINGER_PRINT() As String
		Get
			Return Me._FINGER_PRINT
		End Get
		Set
			If (String.Equals(Me._FINGER_PRINT, value) = false) Then
				Me.OnFINGER_PRINTChanging(value)
				Me.SendPropertyChanging
				Me._FINGER_PRINT = value
				Me.SendPropertyChanged("FINGER_PRINT")
				Me.OnFINGER_PRINTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COMPUTER_NAME", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property COMPUTER_NAME() As String
		Get
			Return Me._COMPUTER_NAME
		End Get
		Set
			If (String.Equals(Me._COMPUTER_NAME, value) = false) Then
				Me.OnCOMPUTER_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._COMPUTER_NAME = value
				Me.SendPropertyChanged("COMPUTER_NAME")
				Me.OnCOMPUTER_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACTIVE", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property ACTIVE() As Boolean
		Get
			Return Me._ACTIVE
		End Get
		Set
			If ((Me._ACTIVE = value)  _
						= false) Then
				Me.OnACTIVEChanging(value)
				Me.SendPropertyChanging
				Me._ACTIVE = value
				Me.SendPropertyChanged("ACTIVE")
				Me.OnACTIVEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEMO_EXPIRATION_DATE", DbType:="Date NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property DEMO_EXPIRATION_DATE() As Date
		Get
			Return Me._DEMO_EXPIRATION_DATE
		End Get
		Set
			If ((Me._DEMO_EXPIRATION_DATE = value)  _
						= false) Then
				Me.OnDEMO_EXPIRATION_DATEChanging(value)
				Me.SendPropertyChanging
				Me._DEMO_EXPIRATION_DATE = value
				Me.SendPropertyChanged("DEMO_EXPIRATION_DATE")
				Me.OnDEMO_EXPIRATION_DATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HIDE", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property HIDE() As Boolean
		Get
			Return Me._HIDE
		End Get
		Set
			If ((Me._HIDE = value)  _
						= false) Then
				Me.OnHIDEChanging(value)
				Me.SendPropertyChanging
				Me._HIDE = value
				Me.SendPropertyChanged("HIDE")
				Me.OnHIDEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LICENSE_KEY", DbType:="NChar(15) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property LICENSE_KEY() As String
		Get
			Return Me._LICENSE_KEY
		End Get
		Set
			If (String.Equals(Me._LICENSE_KEY, value) = false) Then
				If Me._ARTBOPTCALC_LICENSES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLICENSE_KEYChanging(value)
				Me.SendPropertyChanging
				Me._LICENSE_KEY = value
				Me.SendPropertyChanged("LICENSE_KEY")
				Me.OnLICENSE_KEYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OFID", DbType:="Text", UpdateCheck:=UpdateCheck.Never),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property OFID() As String
		Get
			Return Me._OFID
		End Get
		Set
			If (String.Equals(Me._OFID, value) = false) Then
				Me.OnOFIDChanging(value)
				Me.SendPropertyChanging
				Me._OFID = value
				Me.SendPropertyChanged("OFID")
				Me.OnOFIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UPDATER", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property UPDATER() As Boolean
		Get
			Return Me._UPDATER
		End Get
		Set
			If ((Me._UPDATER = value)  _
						= false) Then
				Me.OnUPDATERChanging(value)
				Me.SendPropertyChanging
				Me._UPDATER = value
				Me.SendPropertyChanged("UPDATER")
				Me.OnUPDATERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICER", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10)>  _
	Public Property PRICER() As Boolean
		Get
			Return Me._PRICER
		End Get
		Set
			If ((Me._PRICER = value)  _
						= false) Then
				Me.OnPRICERChanging(value)
				Me.SendPropertyChanging
				Me._PRICER = value
				Me.SendPropertyChanged("PRICER")
				Me.OnPRICERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ARTBOPTCALC_LICENSES_ARTBOPTCALC_FINGERPRINTS", Storage:="_ARTBOPTCALC_LICENSES", ThisKey:="LICENSE_KEY", OtherKey:="LICENSE_KEY", IsForeignKey:=true)>  _
	Public Property ARTBOPTCALC_LICENSES() As ARTBOPTCALC_LICENSES
		Get
			Return Me._ARTBOPTCALC_LICENSES.Entity
		End Get
		Set
			Dim previousValue As ARTBOPTCALC_LICENSES = Me._ARTBOPTCALC_LICENSES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ARTBOPTCALC_LICENSES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ARTBOPTCALC_LICENSES.Entity = Nothing
					previousValue.ARTBOPTCALC_FINGERPRINTS.Remove(Me)
				End If
				Me._ARTBOPTCALC_LICENSES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ARTBOPTCALC_FINGERPRINTS.Add(Me)
					Me._LICENSE_KEY = value.LICENSE_KEY
				Else
					Me._LICENSE_KEY = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ARTBOPTCALC_LICENSES")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ARTBOPTCALC_PRODUCTS_ARTBOPTCALC_FINGERPRINTS", Storage:="_ARTBOPTCALC_PRODUCTS", ThisKey:="PRODUCT_ID", OtherKey:="PRODUCT_ID", IsForeignKey:=true)>  _
	Public Property ARTBOPTCALC_PRODUCTS() As ARTBOPTCALC_PRODUCTS
		Get
			Return Me._ARTBOPTCALC_PRODUCTS.Entity
		End Get
		Set
			Dim previousValue As ARTBOPTCALC_PRODUCTS = Me._ARTBOPTCALC_PRODUCTS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ARTBOPTCALC_PRODUCTS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ARTBOPTCALC_PRODUCTS.Entity = Nothing
					previousValue.ARTBOPTCALC_FINGERPRINTS.Remove(Me)
				End If
				Me._ARTBOPTCALC_PRODUCTS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ARTBOPTCALC_FINGERPRINTS.Add(Me)
					Me._PRODUCT_ID = value.PRODUCT_ID
				Else
					Me._PRODUCT_ID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ARTBOPTCALC_PRODUCTS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._ARTBOPTCALC_LICENSES = CType(Nothing, EntityRef(Of ARTBOPTCALC_LICENSES))
		Me._ARTBOPTCALC_PRODUCTS = CType(Nothing, EntityRef(Of ARTBOPTCALC_PRODUCTS))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ARTBOPTCALC_LICENSES"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class ARTBOPTCALC_LICENSES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _LICENSE_KEY As String
	
	Private _PRODUCT_ID As String
	
	Private _DEMO As Boolean
	
	Private _MAX_LICENSES As Integer
	
	Private _USED_LICENSES As Integer
	
	Private _LICENSE_PURCH_DATE As System.Nullable(Of Date)
	
	Private _LICENSE_EXP_DATE As System.Nullable(Of Date)
	
	Private _REG_NAME As String
	
	Private _EMAIL As String
	
	Private _FIRSTNAME As String
	
	Private _LASTNAME As String
	
	Private _COMPANY As String
	
	Private _COUNTRY As String
	
	Private _PURCHASE_ID As String
	
	Private _BROKER As Boolean
	
	Private _ARTBOPTCALC_FINGERPRINTS As EntitySet(Of ARTBOPTCALC_FINGERPRINTS)
	
	Private _ARTBOPTCALC_PRODUCTS As EntityRef(Of ARTBOPTCALC_PRODUCTS)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnLICENSE_KEYChanging(value As String)
    End Sub
    Partial Private Sub OnLICENSE_KEYChanged()
    End Sub
    Partial Private Sub OnPRODUCT_IDChanging(value As String)
    End Sub
    Partial Private Sub OnPRODUCT_IDChanged()
    End Sub
    Partial Private Sub OnDEMOChanging(value As Boolean)
    End Sub
    Partial Private Sub OnDEMOChanged()
    End Sub
    Partial Private Sub OnMAX_LICENSESChanging(value As Integer)
    End Sub
    Partial Private Sub OnMAX_LICENSESChanged()
    End Sub
    Partial Private Sub OnUSED_LICENSESChanging(value As Integer)
    End Sub
    Partial Private Sub OnUSED_LICENSESChanged()
    End Sub
    Partial Private Sub OnLICENSE_PURCH_DATEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLICENSE_PURCH_DATEChanged()
    End Sub
    Partial Private Sub OnLICENSE_EXP_DATEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLICENSE_EXP_DATEChanged()
    End Sub
    Partial Private Sub OnREG_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnREG_NAMEChanged()
    End Sub
    Partial Private Sub OnEMAILChanging(value As String)
    End Sub
    Partial Private Sub OnEMAILChanged()
    End Sub
    Partial Private Sub OnFIRSTNAMEChanging(value As String)
    End Sub
    Partial Private Sub OnFIRSTNAMEChanged()
    End Sub
    Partial Private Sub OnLASTNAMEChanging(value As String)
    End Sub
    Partial Private Sub OnLASTNAMEChanged()
    End Sub
    Partial Private Sub OnCOMPANYChanging(value As String)
    End Sub
    Partial Private Sub OnCOMPANYChanged()
    End Sub
    Partial Private Sub OnCOUNTRYChanging(value As String)
    End Sub
    Partial Private Sub OnCOUNTRYChanged()
    End Sub
    Partial Private Sub OnPURCHASE_IDChanging(value As String)
    End Sub
    Partial Private Sub OnPURCHASE_IDChanged()
    End Sub
    Partial Private Sub OnBROKERChanging(value As Boolean)
    End Sub
    Partial Private Sub OnBROKERChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LICENSE_KEY", DbType:="NChar(15) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property LICENSE_KEY() As String
		Get
			Return Me._LICENSE_KEY
		End Get
		Set
			If (String.Equals(Me._LICENSE_KEY, value) = false) Then
				Me.OnLICENSE_KEYChanging(value)
				Me.SendPropertyChanging
				Me._LICENSE_KEY = value
				Me.SendPropertyChanged("LICENSE_KEY")
				Me.OnLICENSE_KEYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRODUCT_ID", DbType:="NChar(10) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property PRODUCT_ID() As String
		Get
			Return Me._PRODUCT_ID
		End Get
		Set
			If (String.Equals(Me._PRODUCT_ID, value) = false) Then
				If Me._ARTBOPTCALC_PRODUCTS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPRODUCT_IDChanging(value)
				Me.SendPropertyChanging
				Me._PRODUCT_ID = value
				Me.SendPropertyChanged("PRODUCT_ID")
				Me.OnPRODUCT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEMO", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property DEMO() As Boolean
		Get
			Return Me._DEMO
		End Get
		Set
			If ((Me._DEMO = value)  _
						= false) Then
				Me.OnDEMOChanging(value)
				Me.SendPropertyChanging
				Me._DEMO = value
				Me.SendPropertyChanged("DEMO")
				Me.OnDEMOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MAX_LICENSES", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property MAX_LICENSES() As Integer
		Get
			Return Me._MAX_LICENSES
		End Get
		Set
			If ((Me._MAX_LICENSES = value)  _
						= false) Then
				Me.OnMAX_LICENSESChanging(value)
				Me.SendPropertyChanging
				Me._MAX_LICENSES = value
				Me.SendPropertyChanged("MAX_LICENSES")
				Me.OnMAX_LICENSESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_USED_LICENSES", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property USED_LICENSES() As Integer
		Get
			Return Me._USED_LICENSES
		End Get
		Set
			If ((Me._USED_LICENSES = value)  _
						= false) Then
				Me.OnUSED_LICENSESChanging(value)
				Me.SendPropertyChanging
				Me._USED_LICENSES = value
				Me.SendPropertyChanged("USED_LICENSES")
				Me.OnUSED_LICENSESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LICENSE_PURCH_DATE", DbType:="Date"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property LICENSE_PURCH_DATE() As System.Nullable(Of Date)
		Get
			Return Me._LICENSE_PURCH_DATE
		End Get
		Set
			If (Me._LICENSE_PURCH_DATE.Equals(value) = false) Then
				Me.OnLICENSE_PURCH_DATEChanging(value)
				Me.SendPropertyChanging
				Me._LICENSE_PURCH_DATE = value
				Me.SendPropertyChanged("LICENSE_PURCH_DATE")
				Me.OnLICENSE_PURCH_DATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LICENSE_EXP_DATE", DbType:="Date"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property LICENSE_EXP_DATE() As System.Nullable(Of Date)
		Get
			Return Me._LICENSE_EXP_DATE
		End Get
		Set
			If (Me._LICENSE_EXP_DATE.Equals(value) = false) Then
				Me.OnLICENSE_EXP_DATEChanging(value)
				Me.SendPropertyChanging
				Me._LICENSE_EXP_DATE = value
				Me.SendPropertyChanged("LICENSE_EXP_DATE")
				Me.OnLICENSE_EXP_DATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REG_NAME", DbType:="Text", UpdateCheck:=UpdateCheck.Never),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property REG_NAME() As String
		Get
			Return Me._REG_NAME
		End Get
		Set
			If (String.Equals(Me._REG_NAME, value) = false) Then
				Me.OnREG_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._REG_NAME = value
				Me.SendPropertyChanged("REG_NAME")
				Me.OnREG_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMAIL", DbType:="Text", UpdateCheck:=UpdateCheck.Never),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10)>  _
	Public Property EMAIL() As String
		Get
			Return Me._EMAIL
		End Get
		Set
			If (String.Equals(Me._EMAIL, value) = false) Then
				Me.OnEMAILChanging(value)
				Me.SendPropertyChanging
				Me._EMAIL = value
				Me.SendPropertyChanged("EMAIL")
				Me.OnEMAILChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIRSTNAME", DbType:="Text", UpdateCheck:=UpdateCheck.Never),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=11)>  _
	Public Property FIRSTNAME() As String
		Get
			Return Me._FIRSTNAME
		End Get
		Set
			If (String.Equals(Me._FIRSTNAME, value) = false) Then
				Me.OnFIRSTNAMEChanging(value)
				Me.SendPropertyChanging
				Me._FIRSTNAME = value
				Me.SendPropertyChanged("FIRSTNAME")
				Me.OnFIRSTNAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LASTNAME", DbType:="Text", UpdateCheck:=UpdateCheck.Never),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=12)>  _
	Public Property LASTNAME() As String
		Get
			Return Me._LASTNAME
		End Get
		Set
			If (String.Equals(Me._LASTNAME, value) = false) Then
				Me.OnLASTNAMEChanging(value)
				Me.SendPropertyChanging
				Me._LASTNAME = value
				Me.SendPropertyChanged("LASTNAME")
				Me.OnLASTNAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COMPANY", DbType:="Text", UpdateCheck:=UpdateCheck.Never),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=13)>  _
	Public Property COMPANY() As String
		Get
			Return Me._COMPANY
		End Get
		Set
			If (String.Equals(Me._COMPANY, value) = false) Then
				Me.OnCOMPANYChanging(value)
				Me.SendPropertyChanging
				Me._COMPANY = value
				Me.SendPropertyChanged("COMPANY")
				Me.OnCOMPANYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COUNTRY", DbType:="Text", UpdateCheck:=UpdateCheck.Never),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=14)>  _
	Public Property COUNTRY() As String
		Get
			Return Me._COUNTRY
		End Get
		Set
			If (String.Equals(Me._COUNTRY, value) = false) Then
				Me.OnCOUNTRYChanging(value)
				Me.SendPropertyChanging
				Me._COUNTRY = value
				Me.SendPropertyChanged("COUNTRY")
				Me.OnCOUNTRYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PURCHASE_ID", DbType:="Text", UpdateCheck:=UpdateCheck.Never),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=15)>  _
	Public Property PURCHASE_ID() As String
		Get
			Return Me._PURCHASE_ID
		End Get
		Set
			If (String.Equals(Me._PURCHASE_ID, value) = false) Then
				Me.OnPURCHASE_IDChanging(value)
				Me.SendPropertyChanging
				Me._PURCHASE_ID = value
				Me.SendPropertyChanged("PURCHASE_ID")
				Me.OnPURCHASE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BROKER", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=16)>  _
	Public Property BROKER() As Boolean
		Get
			Return Me._BROKER
		End Get
		Set
			If ((Me._BROKER = value)  _
						= false) Then
				Me.OnBROKERChanging(value)
				Me.SendPropertyChanging
				Me._BROKER = value
				Me.SendPropertyChanged("BROKER")
				Me.OnBROKERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ARTBOPTCALC_LICENSES_ARTBOPTCALC_FINGERPRINTS", Storage:="_ARTBOPTCALC_FINGERPRINTS", ThisKey:="LICENSE_KEY", OtherKey:="LICENSE_KEY"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=17, EmitDefaultValue:=false)>  _
	Public Property ARTBOPTCALC_FINGERPRINTS() As EntitySet(Of ARTBOPTCALC_FINGERPRINTS)
		Get
			If (Me.serializing  _
						AndAlso (Me._ARTBOPTCALC_FINGERPRINTS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ARTBOPTCALC_FINGERPRINTS
		End Get
		Set
			Me._ARTBOPTCALC_FINGERPRINTS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ARTBOPTCALC_PRODUCTS_ARTBOPTCALC_LICENSES", Storage:="_ARTBOPTCALC_PRODUCTS", ThisKey:="PRODUCT_ID", OtherKey:="PRODUCT_ID", IsForeignKey:=true)>  _
	Public Property ARTBOPTCALC_PRODUCTS() As ARTBOPTCALC_PRODUCTS
		Get
			Return Me._ARTBOPTCALC_PRODUCTS.Entity
		End Get
		Set
			Dim previousValue As ARTBOPTCALC_PRODUCTS = Me._ARTBOPTCALC_PRODUCTS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ARTBOPTCALC_PRODUCTS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ARTBOPTCALC_PRODUCTS.Entity = Nothing
					previousValue.ARTBOPTCALC_LICENSES.Remove(Me)
				End If
				Me._ARTBOPTCALC_PRODUCTS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ARTBOPTCALC_LICENSES.Add(Me)
					Me._PRODUCT_ID = value.PRODUCT_ID
				Else
					Me._PRODUCT_ID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ARTBOPTCALC_PRODUCTS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ARTBOPTCALC_FINGERPRINTS(ByVal entity As ARTBOPTCALC_FINGERPRINTS)
		Me.SendPropertyChanging
		entity.ARTBOPTCALC_LICENSES = Me
	End Sub
	
	Private Sub detach_ARTBOPTCALC_FINGERPRINTS(ByVal entity As ARTBOPTCALC_FINGERPRINTS)
		Me.SendPropertyChanging
		entity.ARTBOPTCALC_LICENSES = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._ARTBOPTCALC_FINGERPRINTS = New EntitySet(Of ARTBOPTCALC_FINGERPRINTS)(AddressOf Me.attach_ARTBOPTCALC_FINGERPRINTS, AddressOf Me.detach_ARTBOPTCALC_FINGERPRINTS)
		Me._ARTBOPTCALC_PRODUCTS = CType(Nothing, EntityRef(Of ARTBOPTCALC_PRODUCTS))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ARTBOPTCALC_PRODUCTS"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class ARTBOPTCALC_PRODUCTS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PRODUCT_ID As String
	
	Private _ACTIVE As Boolean
	
	Private _CCY_ID As Integer
	
	Private _BASE_PRICE As Double
	
	Private _DISCOUNTS As Boolean
	
	Private _DISC_TIER1 As Integer
	
	Private _DISC_PRC1 As Double
	
	Private _DISC_TIER2 As Integer
	
	Private _DISC_PRC2 As Double
	
	Private _DISC_TIER3 As Integer
	
	Private _DISC_PRC3 As Double
	
	Private _DISC_TIER4 As Integer
	
	Private _DISC_PRC4 As Double
	
	Private _ARTBOPTCALC_FINGERPRINTS As EntitySet(Of ARTBOPTCALC_FINGERPRINTS)
	
	Private _ARTBOPTCALC_LICENSES As EntitySet(Of ARTBOPTCALC_LICENSES)
	
	Private _CCY As EntityRef(Of CCY)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPRODUCT_IDChanging(value As String)
    End Sub
    Partial Private Sub OnPRODUCT_IDChanged()
    End Sub
    Partial Private Sub OnACTIVEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnACTIVEChanged()
    End Sub
    Partial Private Sub OnCCY_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCCY_IDChanged()
    End Sub
    Partial Private Sub OnBASE_PRICEChanging(value As Double)
    End Sub
    Partial Private Sub OnBASE_PRICEChanged()
    End Sub
    Partial Private Sub OnDISCOUNTSChanging(value As Boolean)
    End Sub
    Partial Private Sub OnDISCOUNTSChanged()
    End Sub
    Partial Private Sub OnDISC_TIER1Changing(value As Integer)
    End Sub
    Partial Private Sub OnDISC_TIER1Changed()
    End Sub
    Partial Private Sub OnDISC_PRC1Changing(value As Double)
    End Sub
    Partial Private Sub OnDISC_PRC1Changed()
    End Sub
    Partial Private Sub OnDISC_TIER2Changing(value As Integer)
    End Sub
    Partial Private Sub OnDISC_TIER2Changed()
    End Sub
    Partial Private Sub OnDISC_PRC2Changing(value As Double)
    End Sub
    Partial Private Sub OnDISC_PRC2Changed()
    End Sub
    Partial Private Sub OnDISC_TIER3Changing(value As Integer)
    End Sub
    Partial Private Sub OnDISC_TIER3Changed()
    End Sub
    Partial Private Sub OnDISC_PRC3Changing(value As Double)
    End Sub
    Partial Private Sub OnDISC_PRC3Changed()
    End Sub
    Partial Private Sub OnDISC_TIER4Changing(value As Integer)
    End Sub
    Partial Private Sub OnDISC_TIER4Changed()
    End Sub
    Partial Private Sub OnDISC_PRC4Changing(value As Double)
    End Sub
    Partial Private Sub OnDISC_PRC4Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRODUCT_ID", DbType:="NChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property PRODUCT_ID() As String
		Get
			Return Me._PRODUCT_ID
		End Get
		Set
			If (String.Equals(Me._PRODUCT_ID, value) = false) Then
				Me.OnPRODUCT_IDChanging(value)
				Me.SendPropertyChanging
				Me._PRODUCT_ID = value
				Me.SendPropertyChanged("PRODUCT_ID")
				Me.OnPRODUCT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACTIVE", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property ACTIVE() As Boolean
		Get
			Return Me._ACTIVE
		End Get
		Set
			If ((Me._ACTIVE = value)  _
						= false) Then
				Me.OnACTIVEChanging(value)
				Me.SendPropertyChanging
				Me._ACTIVE = value
				Me.SendPropertyChanged("ACTIVE")
				Me.OnACTIVEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCY_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property CCY_ID() As Integer
		Get
			Return Me._CCY_ID
		End Get
		Set
			If ((Me._CCY_ID = value)  _
						= false) Then
				If Me._CCY.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCCY_IDChanging(value)
				Me.SendPropertyChanging
				Me._CCY_ID = value
				Me.SendPropertyChanged("CCY_ID")
				Me.OnCCY_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BASE_PRICE", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property BASE_PRICE() As Double
		Get
			Return Me._BASE_PRICE
		End Get
		Set
			If ((Me._BASE_PRICE = value)  _
						= false) Then
				Me.OnBASE_PRICEChanging(value)
				Me.SendPropertyChanging
				Me._BASE_PRICE = value
				Me.SendPropertyChanged("BASE_PRICE")
				Me.OnBASE_PRICEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DISCOUNTS", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property DISCOUNTS() As Boolean
		Get
			Return Me._DISCOUNTS
		End Get
		Set
			If ((Me._DISCOUNTS = value)  _
						= false) Then
				Me.OnDISCOUNTSChanging(value)
				Me.SendPropertyChanging
				Me._DISCOUNTS = value
				Me.SendPropertyChanged("DISCOUNTS")
				Me.OnDISCOUNTSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DISC_TIER1", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property DISC_TIER1() As Integer
		Get
			Return Me._DISC_TIER1
		End Get
		Set
			If ((Me._DISC_TIER1 = value)  _
						= false) Then
				Me.OnDISC_TIER1Changing(value)
				Me.SendPropertyChanging
				Me._DISC_TIER1 = value
				Me.SendPropertyChanged("DISC_TIER1")
				Me.OnDISC_TIER1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DISC_PRC1", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property DISC_PRC1() As Double
		Get
			Return Me._DISC_PRC1
		End Get
		Set
			If ((Me._DISC_PRC1 = value)  _
						= false) Then
				Me.OnDISC_PRC1Changing(value)
				Me.SendPropertyChanging
				Me._DISC_PRC1 = value
				Me.SendPropertyChanged("DISC_PRC1")
				Me.OnDISC_PRC1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DISC_TIER2", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property DISC_TIER2() As Integer
		Get
			Return Me._DISC_TIER2
		End Get
		Set
			If ((Me._DISC_TIER2 = value)  _
						= false) Then
				Me.OnDISC_TIER2Changing(value)
				Me.SendPropertyChanging
				Me._DISC_TIER2 = value
				Me.SendPropertyChanged("DISC_TIER2")
				Me.OnDISC_TIER2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DISC_PRC2", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property DISC_PRC2() As Double
		Get
			Return Me._DISC_PRC2
		End Get
		Set
			If ((Me._DISC_PRC2 = value)  _
						= false) Then
				Me.OnDISC_PRC2Changing(value)
				Me.SendPropertyChanging
				Me._DISC_PRC2 = value
				Me.SendPropertyChanged("DISC_PRC2")
				Me.OnDISC_PRC2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DISC_TIER3", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10)>  _
	Public Property DISC_TIER3() As Integer
		Get
			Return Me._DISC_TIER3
		End Get
		Set
			If ((Me._DISC_TIER3 = value)  _
						= false) Then
				Me.OnDISC_TIER3Changing(value)
				Me.SendPropertyChanging
				Me._DISC_TIER3 = value
				Me.SendPropertyChanged("DISC_TIER3")
				Me.OnDISC_TIER3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DISC_PRC3", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=11)>  _
	Public Property DISC_PRC3() As Double
		Get
			Return Me._DISC_PRC3
		End Get
		Set
			If ((Me._DISC_PRC3 = value)  _
						= false) Then
				Me.OnDISC_PRC3Changing(value)
				Me.SendPropertyChanging
				Me._DISC_PRC3 = value
				Me.SendPropertyChanged("DISC_PRC3")
				Me.OnDISC_PRC3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DISC_TIER4", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=12)>  _
	Public Property DISC_TIER4() As Integer
		Get
			Return Me._DISC_TIER4
		End Get
		Set
			If ((Me._DISC_TIER4 = value)  _
						= false) Then
				Me.OnDISC_TIER4Changing(value)
				Me.SendPropertyChanging
				Me._DISC_TIER4 = value
				Me.SendPropertyChanged("DISC_TIER4")
				Me.OnDISC_TIER4Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DISC_PRC4", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=13)>  _
	Public Property DISC_PRC4() As Double
		Get
			Return Me._DISC_PRC4
		End Get
		Set
			If ((Me._DISC_PRC4 = value)  _
						= false) Then
				Me.OnDISC_PRC4Changing(value)
				Me.SendPropertyChanging
				Me._DISC_PRC4 = value
				Me.SendPropertyChanged("DISC_PRC4")
				Me.OnDISC_PRC4Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ARTBOPTCALC_PRODUCTS_ARTBOPTCALC_FINGERPRINTS", Storage:="_ARTBOPTCALC_FINGERPRINTS", ThisKey:="PRODUCT_ID", OtherKey:="PRODUCT_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=14, EmitDefaultValue:=false)>  _
	Public Property ARTBOPTCALC_FINGERPRINTS() As EntitySet(Of ARTBOPTCALC_FINGERPRINTS)
		Get
			If (Me.serializing  _
						AndAlso (Me._ARTBOPTCALC_FINGERPRINTS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ARTBOPTCALC_FINGERPRINTS
		End Get
		Set
			Me._ARTBOPTCALC_FINGERPRINTS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ARTBOPTCALC_PRODUCTS_ARTBOPTCALC_LICENSES", Storage:="_ARTBOPTCALC_LICENSES", ThisKey:="PRODUCT_ID", OtherKey:="PRODUCT_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=15, EmitDefaultValue:=false)>  _
	Public Property ARTBOPTCALC_LICENSES() As EntitySet(Of ARTBOPTCALC_LICENSES)
		Get
			If (Me.serializing  _
						AndAlso (Me._ARTBOPTCALC_LICENSES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ARTBOPTCALC_LICENSES
		End Get
		Set
			Me._ARTBOPTCALC_LICENSES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CCY_ARTBOPTCALC_PRODUCTS", Storage:="_CCY", ThisKey:="CCY_ID", OtherKey:="CCY_ID", IsForeignKey:=true)>  _
	Public Property CCY() As CCY
		Get
			Return Me._CCY.Entity
		End Get
		Set
			Dim previousValue As CCY = Me._CCY.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CCY.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CCY.Entity = Nothing
					previousValue.ARTBOPTCALC_PRODUCTS.Remove(Me)
				End If
				Me._CCY.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ARTBOPTCALC_PRODUCTS.Add(Me)
					Me._CCY_ID = value.CCY_ID
				Else
					Me._CCY_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CCY")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ARTBOPTCALC_FINGERPRINTS(ByVal entity As ARTBOPTCALC_FINGERPRINTS)
		Me.SendPropertyChanging
		entity.ARTBOPTCALC_PRODUCTS = Me
	End Sub
	
	Private Sub detach_ARTBOPTCALC_FINGERPRINTS(ByVal entity As ARTBOPTCALC_FINGERPRINTS)
		Me.SendPropertyChanging
		entity.ARTBOPTCALC_PRODUCTS = Nothing
	End Sub
	
	Private Sub attach_ARTBOPTCALC_LICENSES(ByVal entity As ARTBOPTCALC_LICENSES)
		Me.SendPropertyChanging
		entity.ARTBOPTCALC_PRODUCTS = Me
	End Sub
	
	Private Sub detach_ARTBOPTCALC_LICENSES(ByVal entity As ARTBOPTCALC_LICENSES)
		Me.SendPropertyChanging
		entity.ARTBOPTCALC_PRODUCTS = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._ARTBOPTCALC_FINGERPRINTS = New EntitySet(Of ARTBOPTCALC_FINGERPRINTS)(AddressOf Me.attach_ARTBOPTCALC_FINGERPRINTS, AddressOf Me.detach_ARTBOPTCALC_FINGERPRINTS)
		Me._ARTBOPTCALC_LICENSES = New EntitySet(Of ARTBOPTCALC_LICENSES)(AddressOf Me.attach_ARTBOPTCALC_LICENSES, AddressOf Me.detach_ARTBOPTCALC_LICENSES)
		Me._CCY = CType(Nothing, EntityRef(Of CCY))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ARTTBOPTCALC_PAYPAL_IPN"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class ARTTBOPTCALC_PAYPAL_IPN
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LICENSE_ID As Integer
	
	Private _ipn_track_id As String
	
	Private _STATUS As Integer
	
	Private _strRequest As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLICENSE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnLICENSE_IDChanged()
    End Sub
    Partial Private Sub Onipn_track_idChanging(value As String)
    End Sub
    Partial Private Sub Onipn_track_idChanged()
    End Sub
    Partial Private Sub OnSTATUSChanging(value As Integer)
    End Sub
    Partial Private Sub OnSTATUSChanged()
    End Sub
    Partial Private Sub OnstrRequestChanging(value As String)
    End Sub
    Partial Private Sub OnstrRequestChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LICENSE_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property LICENSE_ID() As Integer
		Get
			Return Me._LICENSE_ID
		End Get
		Set
			If ((Me._LICENSE_ID = value)  _
						= false) Then
				Me.OnLICENSE_IDChanging(value)
				Me.SendPropertyChanging
				Me._LICENSE_ID = value
				Me.SendPropertyChanged("LICENSE_ID")
				Me.OnLICENSE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ipn_track_id", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property ipn_track_id() As String
		Get
			Return Me._ipn_track_id
		End Get
		Set
			If (String.Equals(Me._ipn_track_id, value) = false) Then
				Me.Onipn_track_idChanging(value)
				Me.SendPropertyChanging
				Me._ipn_track_id = value
				Me.SendPropertyChanged("ipn_track_id")
				Me.Onipn_track_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_STATUS", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property STATUS() As Integer
		Get
			Return Me._STATUS
		End Get
		Set
			If ((Me._STATUS = value)  _
						= false) Then
				Me.OnSTATUSChanging(value)
				Me.SendPropertyChanging
				Me._STATUS = value
				Me.SendPropertyChanged("STATUS")
				Me.OnSTATUSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strRequest", DbType:="Text", UpdateCheck:=UpdateCheck.Never),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property strRequest() As String
		Get
			Return Me._strRequest
		End Get
		Set
			If (String.Equals(Me._strRequest, value) = false) Then
				Me.OnstrRequestChanging(value)
				Me.SendPropertyChanging
				Me._strRequest = value
				Me.SendPropertyChanged("strRequest")
				Me.OnstrRequestChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BALTIC_FORWARD_RATES"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class BALTIC_FORWARD_RATES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ROUTE_ID As Integer
	
	Private _CMSROUTE_ID As String
	
	Private _FIXING_DATE As Date
	
	Private _NEXT_ROLLOVER_DATE As System.Nullable(Of Date)
	
	Private _FIXING As Double
	
	Private _REPORTDESC As String
	
	Private _MM1 As System.Nullable(Of Short)
	
	Private _YY1 As System.Nullable(Of Short)
	
	Private _MM2 As System.Nullable(Of Short)
	
	Private _YY2 As System.Nullable(Of Short)
	
	Private _PERIOD As String
	
	Private _YY As System.Nullable(Of Integer)
	
	Private _BALTIC_FTP As EntityRef(Of BALTIC_FTP)
	
	Private _ROUTES As EntityRef(Of ROUTES)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnCMSROUTE_IDChanging(value As String)
    End Sub
    Partial Private Sub OnCMSROUTE_IDChanged()
    End Sub
    Partial Private Sub OnFIXING_DATEChanging(value As Date)
    End Sub
    Partial Private Sub OnFIXING_DATEChanged()
    End Sub
    Partial Private Sub OnNEXT_ROLLOVER_DATEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnNEXT_ROLLOVER_DATEChanged()
    End Sub
    Partial Private Sub OnFIXINGChanging(value As Double)
    End Sub
    Partial Private Sub OnFIXINGChanged()
    End Sub
    Partial Private Sub OnREPORTDESCChanging(value As String)
    End Sub
    Partial Private Sub OnREPORTDESCChanged()
    End Sub
    Partial Private Sub OnMM1Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMM1Changed()
    End Sub
    Partial Private Sub OnYY1Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnYY1Changed()
    End Sub
    Partial Private Sub OnMM2Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMM2Changed()
    End Sub
    Partial Private Sub OnYY2Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnYY2Changed()
    End Sub
    Partial Private Sub OnPERIODChanging(value As String)
    End Sub
    Partial Private Sub OnPERIODChanged()
    End Sub
    Partial Private Sub OnYYChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnYYChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If (Me._BALTIC_FTP.HasLoadedOrAssignedValue OrElse Me._ROUTES.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CMSROUTE_ID", DbType:="VarChar(15) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property CMSROUTE_ID() As String
		Get
			Return Me._CMSROUTE_ID
		End Get
		Set
			If (String.Equals(Me._CMSROUTE_ID, value) = false) Then
				If Me._BALTIC_FTP.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCMSROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._CMSROUTE_ID = value
				Me.SendPropertyChanged("CMSROUTE_ID")
				Me.OnCMSROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING_DATE", DbType:="Date NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property FIXING_DATE() As Date
		Get
			Return Me._FIXING_DATE
		End Get
		Set
			If ((Me._FIXING_DATE = value)  _
						= false) Then
				Me.OnFIXING_DATEChanging(value)
				Me.SendPropertyChanging
				Me._FIXING_DATE = value
				Me.SendPropertyChanged("FIXING_DATE")
				Me.OnFIXING_DATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NEXT_ROLLOVER_DATE", DbType:="Date"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property NEXT_ROLLOVER_DATE() As System.Nullable(Of Date)
		Get
			Return Me._NEXT_ROLLOVER_DATE
		End Get
		Set
			If (Me._NEXT_ROLLOVER_DATE.Equals(value) = false) Then
				Me.OnNEXT_ROLLOVER_DATEChanging(value)
				Me.SendPropertyChanging
				Me._NEXT_ROLLOVER_DATE = value
				Me.SendPropertyChanged("NEXT_ROLLOVER_DATE")
				Me.OnNEXT_ROLLOVER_DATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property FIXING() As Double
		Get
			Return Me._FIXING
		End Get
		Set
			If ((Me._FIXING = value)  _
						= false) Then
				Me.OnFIXINGChanging(value)
				Me.SendPropertyChanging
				Me._FIXING = value
				Me.SendPropertyChanged("FIXING")
				Me.OnFIXINGChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REPORTDESC", DbType:="VarChar(15)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property REPORTDESC() As String
		Get
			Return Me._REPORTDESC
		End Get
		Set
			If (String.Equals(Me._REPORTDESC, value) = false) Then
				Me.OnREPORTDESCChanging(value)
				Me.SendPropertyChanging
				Me._REPORTDESC = value
				Me.SendPropertyChanged("REPORTDESC")
				Me.OnREPORTDESCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM1", DbType:="SmallInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property MM1() As System.Nullable(Of Short)
		Get
			Return Me._MM1
		End Get
		Set
			If (Me._MM1.Equals(value) = false) Then
				Me.OnMM1Changing(value)
				Me.SendPropertyChanging
				Me._MM1 = value
				Me.SendPropertyChanged("MM1")
				Me.OnMM1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY1", DbType:="SmallInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property YY1() As System.Nullable(Of Short)
		Get
			Return Me._YY1
		End Get
		Set
			If (Me._YY1.Equals(value) = false) Then
				Me.OnYY1Changing(value)
				Me.SendPropertyChanging
				Me._YY1 = value
				Me.SendPropertyChanged("YY1")
				Me.OnYY1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM2", DbType:="SmallInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property MM2() As System.Nullable(Of Short)
		Get
			Return Me._MM2
		End Get
		Set
			If (Me._MM2.Equals(value) = false) Then
				Me.OnMM2Changing(value)
				Me.SendPropertyChanging
				Me._MM2 = value
				Me.SendPropertyChanged("MM2")
				Me.OnMM2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY2", DbType:="SmallInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10)>  _
	Public Property YY2() As System.Nullable(Of Short)
		Get
			Return Me._YY2
		End Get
		Set
			If (Me._YY2.Equals(value) = false) Then
				Me.OnYY2Changing(value)
				Me.SendPropertyChanging
				Me._YY2 = value
				Me.SendPropertyChanged("YY2")
				Me.OnYY2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PERIOD", DbType:="VarChar(15)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=11)>  _
	Public Property PERIOD() As String
		Get
			Return Me._PERIOD
		End Get
		Set
			If (String.Equals(Me._PERIOD, value) = false) Then
				Me.OnPERIODChanging(value)
				Me.SendPropertyChanging
				Me._PERIOD = value
				Me.SendPropertyChanged("PERIOD")
				Me.OnPERIODChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=12)>  _
	Public Property YY() As System.Nullable(Of Integer)
		Get
			Return Me._YY
		End Get
		Set
			If (Me._YY.Equals(value) = false) Then
				Me.OnYYChanging(value)
				Me.SendPropertyChanging
				Me._YY = value
				Me.SendPropertyChanged("YY")
				Me.OnYYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BALTIC_FTP_BALTIC_FORWARD_RATES", Storage:="_BALTIC_FTP", ThisKey:="ROUTE_ID,CMSROUTE_ID", OtherKey:="ROUTE_ID,CMSROUTE_ID", IsForeignKey:=true)>  _
	Public Property BALTIC_FTP() As BALTIC_FTP
		Get
			Return Me._BALTIC_FTP.Entity
		End Get
		Set
			Dim previousValue As BALTIC_FTP = Me._BALTIC_FTP.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._BALTIC_FTP.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._BALTIC_FTP.Entity = Nothing
					previousValue.BALTIC_FORWARD_RATES.Remove(Me)
				End If
				Me._BALTIC_FTP.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BALTIC_FORWARD_RATES.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
					Me._CMSROUTE_ID = value.CMSROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
					Me._CMSROUTE_ID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("BALTIC_FTP")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_BALTIC_FORWARD_RATES", Storage:="_ROUTES", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTES() As ROUTES
		Get
			Return Me._ROUTES.Entity
		End Get
		Set
			Dim previousValue As ROUTES = Me._ROUTES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTES.Entity = Nothing
					previousValue.BALTIC_FORWARD_RATES.Remove(Me)
				End If
				Me._ROUTES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BALTIC_FORWARD_RATES.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTES")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._BALTIC_FTP = CType(Nothing, EntityRef(Of BALTIC_FTP))
		Me._ROUTES = CType(Nothing, EntityRef(Of ROUTES))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BALTIC_FTP"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class BALTIC_FTP
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _ROUTE_ID As Integer
	
	Private _CMSROUTE_ID As String
	
	Private _PERIOD As Char
	
	Private _QUALIFIER As Char
	
	Private _BALTIC_FORWARD_RATES As EntitySet(Of BALTIC_FORWARD_RATES)
	
	Private _BALTIC_OPTION_VOLATILITIES As EntitySet(Of BALTIC_OPTION_VOLATILITIES)
	
	Private _ROUTES As EntityRef(Of ROUTES)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnCMSROUTE_IDChanging(value As String)
    End Sub
    Partial Private Sub OnCMSROUTE_IDChanged()
    End Sub
    Partial Private Sub OnPERIODChanging(value As Char)
    End Sub
    Partial Private Sub OnPERIODChanged()
    End Sub
    Partial Private Sub OnQUALIFIERChanging(value As Char)
    End Sub
    Partial Private Sub OnQUALIFIERChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If Me._ROUTES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CMSROUTE_ID", DbType:="VarChar(15) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property CMSROUTE_ID() As String
		Get
			Return Me._CMSROUTE_ID
		End Get
		Set
			If (String.Equals(Me._CMSROUTE_ID, value) = false) Then
				Me.OnCMSROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._CMSROUTE_ID = value
				Me.SendPropertyChanged("CMSROUTE_ID")
				Me.OnCMSROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PERIOD", DbType:="Char(1) NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property PERIOD() As Char
		Get
			Return Me._PERIOD
		End Get
		Set
			If ((Me._PERIOD = value)  _
						= false) Then
				Me.OnPERIODChanging(value)
				Me.SendPropertyChanging
				Me._PERIOD = value
				Me.SendPropertyChanged("PERIOD")
				Me.OnPERIODChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUALIFIER", DbType:="Char(1) NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property QUALIFIER() As Char
		Get
			Return Me._QUALIFIER
		End Get
		Set
			If ((Me._QUALIFIER = value)  _
						= false) Then
				Me.OnQUALIFIERChanging(value)
				Me.SendPropertyChanging
				Me._QUALIFIER = value
				Me.SendPropertyChanged("QUALIFIER")
				Me.OnQUALIFIERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BALTIC_FTP_BALTIC_FORWARD_RATES", Storage:="_BALTIC_FORWARD_RATES", ThisKey:="ROUTE_ID,CMSROUTE_ID", OtherKey:="ROUTE_ID,CMSROUTE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6, EmitDefaultValue:=false)>  _
	Public Property BALTIC_FORWARD_RATES() As EntitySet(Of BALTIC_FORWARD_RATES)
		Get
			If (Me.serializing  _
						AndAlso (Me._BALTIC_FORWARD_RATES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._BALTIC_FORWARD_RATES
		End Get
		Set
			Me._BALTIC_FORWARD_RATES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BALTIC_FTP_BALTIC_OPTION_VOLATILITIES", Storage:="_BALTIC_OPTION_VOLATILITIES", ThisKey:="ROUTE_ID,CMSROUTE_ID", OtherKey:="ROUTE_ID,CMSROUTE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7, EmitDefaultValue:=false)>  _
	Public Property BALTIC_OPTION_VOLATILITIES() As EntitySet(Of BALTIC_OPTION_VOLATILITIES)
		Get
			If (Me.serializing  _
						AndAlso (Me._BALTIC_OPTION_VOLATILITIES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._BALTIC_OPTION_VOLATILITIES
		End Get
		Set
			Me._BALTIC_OPTION_VOLATILITIES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_BALTIC_FTP", Storage:="_ROUTES", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTES() As ROUTES
		Get
			Return Me._ROUTES.Entity
		End Get
		Set
			Dim previousValue As ROUTES = Me._ROUTES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTES.Entity = Nothing
					previousValue.BALTIC_FTP.Remove(Me)
				End If
				Me._ROUTES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BALTIC_FTP.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTES")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BALTIC_FORWARD_RATES(ByVal entity As BALTIC_FORWARD_RATES)
		Me.SendPropertyChanging
		entity.BALTIC_FTP = Me
	End Sub
	
	Private Sub detach_BALTIC_FORWARD_RATES(ByVal entity As BALTIC_FORWARD_RATES)
		Me.SendPropertyChanging
		entity.BALTIC_FTP = Nothing
	End Sub
	
	Private Sub attach_BALTIC_OPTION_VOLATILITIES(ByVal entity As BALTIC_OPTION_VOLATILITIES)
		Me.SendPropertyChanging
		entity.BALTIC_FTP = Me
	End Sub
	
	Private Sub detach_BALTIC_OPTION_VOLATILITIES(ByVal entity As BALTIC_OPTION_VOLATILITIES)
		Me.SendPropertyChanging
		entity.BALTIC_FTP = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._BALTIC_FORWARD_RATES = New EntitySet(Of BALTIC_FORWARD_RATES)(AddressOf Me.attach_BALTIC_FORWARD_RATES, AddressOf Me.detach_BALTIC_FORWARD_RATES)
		Me._BALTIC_OPTION_VOLATILITIES = New EntitySet(Of BALTIC_OPTION_VOLATILITIES)(AddressOf Me.attach_BALTIC_OPTION_VOLATILITIES, AddressOf Me.detach_BALTIC_OPTION_VOLATILITIES)
		Me._ROUTES = CType(Nothing, EntityRef(Of ROUTES))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BALTIC_FTP_SETTLEMENT"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class BALTIC_FTP_SETTLEMENT
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ROUTE_ID As Integer
	
	Private _CMSROUTE_ID As String
	
	Private _ROUTES As EntityRef(Of ROUTES)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnCMSROUTE_IDChanging(value As String)
    End Sub
    Partial Private Sub OnCMSROUTE_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If Me._ROUTES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CMSROUTE_ID", DbType:="VarChar(15) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property CMSROUTE_ID() As String
		Get
			Return Me._CMSROUTE_ID
		End Get
		Set
			If (String.Equals(Me._CMSROUTE_ID, value) = false) Then
				Me.OnCMSROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._CMSROUTE_ID = value
				Me.SendPropertyChanged("CMSROUTE_ID")
				Me.OnCMSROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_BALTIC_FTP_SETTLEMENT", Storage:="_ROUTES", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTES() As ROUTES
		Get
			Return Me._ROUTES.Entity
		End Get
		Set
			Dim previousValue As ROUTES = Me._ROUTES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTES.Entity = Nothing
					previousValue.BALTIC_FTP_SETTLEMENT.Remove(Me)
				End If
				Me._ROUTES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BALTIC_FTP_SETTLEMENT.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTES")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._ROUTES = CType(Nothing, EntityRef(Of ROUTES))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BALTIC_MONTHLY_SETTLEMENTS"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class BALTIC_MONTHLY_SETTLEMENTS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ROUTE_ID As Integer
	
	Private _FIXING_DATE As Date
	
	Private _FIXINGEM As Double
	
	Private _FIXING7 As Double
	
	Private _FIXING10 As Double
	
	Private _FIXING_MONTH As Short
	
	Private _FIXING_YEAR As Integer
	
	Private _ROUTES As EntityRef(Of ROUTES)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnFIXING_DATEChanging(value As Date)
    End Sub
    Partial Private Sub OnFIXING_DATEChanged()
    End Sub
    Partial Private Sub OnFIXINGEMChanging(value As Double)
    End Sub
    Partial Private Sub OnFIXINGEMChanged()
    End Sub
    Partial Private Sub OnFIXING7Changing(value As Double)
    End Sub
    Partial Private Sub OnFIXING7Changed()
    End Sub
    Partial Private Sub OnFIXING10Changing(value As Double)
    End Sub
    Partial Private Sub OnFIXING10Changed()
    End Sub
    Partial Private Sub OnFIXING_MONTHChanging(value As Short)
    End Sub
    Partial Private Sub OnFIXING_MONTHChanged()
    End Sub
    Partial Private Sub OnFIXING_YEARChanging(value As Integer)
    End Sub
    Partial Private Sub OnFIXING_YEARChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If Me._ROUTES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING_DATE", DbType:="Date NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property FIXING_DATE() As Date
		Get
			Return Me._FIXING_DATE
		End Get
		Set
			If ((Me._FIXING_DATE = value)  _
						= false) Then
				Me.OnFIXING_DATEChanging(value)
				Me.SendPropertyChanging
				Me._FIXING_DATE = value
				Me.SendPropertyChanged("FIXING_DATE")
				Me.OnFIXING_DATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXINGEM", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property FIXINGEM() As Double
		Get
			Return Me._FIXINGEM
		End Get
		Set
			If ((Me._FIXINGEM = value)  _
						= false) Then
				Me.OnFIXINGEMChanging(value)
				Me.SendPropertyChanging
				Me._FIXINGEM = value
				Me.SendPropertyChanged("FIXINGEM")
				Me.OnFIXINGEMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING7", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property FIXING7() As Double
		Get
			Return Me._FIXING7
		End Get
		Set
			If ((Me._FIXING7 = value)  _
						= false) Then
				Me.OnFIXING7Changing(value)
				Me.SendPropertyChanging
				Me._FIXING7 = value
				Me.SendPropertyChanged("FIXING7")
				Me.OnFIXING7Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING10", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property FIXING10() As Double
		Get
			Return Me._FIXING10
		End Get
		Set
			If ((Me._FIXING10 = value)  _
						= false) Then
				Me.OnFIXING10Changing(value)
				Me.SendPropertyChanging
				Me._FIXING10 = value
				Me.SendPropertyChanged("FIXING10")
				Me.OnFIXING10Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING_MONTH", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property FIXING_MONTH() As Short
		Get
			Return Me._FIXING_MONTH
		End Get
		Set
			If ((Me._FIXING_MONTH = value)  _
						= false) Then
				Me.OnFIXING_MONTHChanging(value)
				Me.SendPropertyChanging
				Me._FIXING_MONTH = value
				Me.SendPropertyChanged("FIXING_MONTH")
				Me.OnFIXING_MONTHChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING_YEAR", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property FIXING_YEAR() As Integer
		Get
			Return Me._FIXING_YEAR
		End Get
		Set
			If ((Me._FIXING_YEAR = value)  _
						= false) Then
				Me.OnFIXING_YEARChanging(value)
				Me.SendPropertyChanging
				Me._FIXING_YEAR = value
				Me.SendPropertyChanged("FIXING_YEAR")
				Me.OnFIXING_YEARChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_BALTIC_MONTHLY_SETTLEMENTS", Storage:="_ROUTES", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTES() As ROUTES
		Get
			Return Me._ROUTES.Entity
		End Get
		Set
			Dim previousValue As ROUTES = Me._ROUTES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTES.Entity = Nothing
					previousValue.BALTIC_MONTHLY_SETTLEMENTS.Remove(Me)
				End If
				Me._ROUTES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BALTIC_MONTHLY_SETTLEMENTS.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTES")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._ROUTES = CType(Nothing, EntityRef(Of ROUTES))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BALTIC_OPTION_VOLATILITIES"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class BALTIC_OPTION_VOLATILITIES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ROUTE_ID As Integer
	
	Private _CMSROUTE_ID As String
	
	Private _FIXING_DATE As Date
	
	Private _NEXT_ROLLOVER_DATE As Date
	
	Private _FIXING As Double
	
	Private _REPORTDESC As String
	
	Private _MM1 As System.Nullable(Of Short)
	
	Private _YY1 As System.Nullable(Of Short)
	
	Private _MM2 As System.Nullable(Of Short)
	
	Private _YY2 As System.Nullable(Of Short)
	
	Private _PERIOD As String
	
	Private _YY As System.Nullable(Of Integer)
	
	Private _BALTIC_FTP As EntityRef(Of BALTIC_FTP)
	
	Private _ROUTES As EntityRef(Of ROUTES)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnCMSROUTE_IDChanging(value As String)
    End Sub
    Partial Private Sub OnCMSROUTE_IDChanged()
    End Sub
    Partial Private Sub OnFIXING_DATEChanging(value As Date)
    End Sub
    Partial Private Sub OnFIXING_DATEChanged()
    End Sub
    Partial Private Sub OnNEXT_ROLLOVER_DATEChanging(value As Date)
    End Sub
    Partial Private Sub OnNEXT_ROLLOVER_DATEChanged()
    End Sub
    Partial Private Sub OnFIXINGChanging(value As Double)
    End Sub
    Partial Private Sub OnFIXINGChanged()
    End Sub
    Partial Private Sub OnREPORTDESCChanging(value As String)
    End Sub
    Partial Private Sub OnREPORTDESCChanged()
    End Sub
    Partial Private Sub OnMM1Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMM1Changed()
    End Sub
    Partial Private Sub OnYY1Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnYY1Changed()
    End Sub
    Partial Private Sub OnMM2Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMM2Changed()
    End Sub
    Partial Private Sub OnYY2Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnYY2Changed()
    End Sub
    Partial Private Sub OnPERIODChanging(value As String)
    End Sub
    Partial Private Sub OnPERIODChanged()
    End Sub
    Partial Private Sub OnYYChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnYYChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If (Me._BALTIC_FTP.HasLoadedOrAssignedValue OrElse Me._ROUTES.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CMSROUTE_ID", DbType:="VarChar(15) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property CMSROUTE_ID() As String
		Get
			Return Me._CMSROUTE_ID
		End Get
		Set
			If (String.Equals(Me._CMSROUTE_ID, value) = false) Then
				If Me._BALTIC_FTP.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCMSROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._CMSROUTE_ID = value
				Me.SendPropertyChanged("CMSROUTE_ID")
				Me.OnCMSROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING_DATE", DbType:="Date NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property FIXING_DATE() As Date
		Get
			Return Me._FIXING_DATE
		End Get
		Set
			If ((Me._FIXING_DATE = value)  _
						= false) Then
				Me.OnFIXING_DATEChanging(value)
				Me.SendPropertyChanging
				Me._FIXING_DATE = value
				Me.SendPropertyChanged("FIXING_DATE")
				Me.OnFIXING_DATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NEXT_ROLLOVER_DATE", DbType:="Date NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property NEXT_ROLLOVER_DATE() As Date
		Get
			Return Me._NEXT_ROLLOVER_DATE
		End Get
		Set
			If ((Me._NEXT_ROLLOVER_DATE = value)  _
						= false) Then
				Me.OnNEXT_ROLLOVER_DATEChanging(value)
				Me.SendPropertyChanging
				Me._NEXT_ROLLOVER_DATE = value
				Me.SendPropertyChanged("NEXT_ROLLOVER_DATE")
				Me.OnNEXT_ROLLOVER_DATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property FIXING() As Double
		Get
			Return Me._FIXING
		End Get
		Set
			If ((Me._FIXING = value)  _
						= false) Then
				Me.OnFIXINGChanging(value)
				Me.SendPropertyChanging
				Me._FIXING = value
				Me.SendPropertyChanged("FIXING")
				Me.OnFIXINGChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REPORTDESC", DbType:="VarChar(15)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property REPORTDESC() As String
		Get
			Return Me._REPORTDESC
		End Get
		Set
			If (String.Equals(Me._REPORTDESC, value) = false) Then
				Me.OnREPORTDESCChanging(value)
				Me.SendPropertyChanging
				Me._REPORTDESC = value
				Me.SendPropertyChanged("REPORTDESC")
				Me.OnREPORTDESCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM1", DbType:="SmallInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property MM1() As System.Nullable(Of Short)
		Get
			Return Me._MM1
		End Get
		Set
			If (Me._MM1.Equals(value) = false) Then
				Me.OnMM1Changing(value)
				Me.SendPropertyChanging
				Me._MM1 = value
				Me.SendPropertyChanged("MM1")
				Me.OnMM1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY1", DbType:="SmallInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property YY1() As System.Nullable(Of Short)
		Get
			Return Me._YY1
		End Get
		Set
			If (Me._YY1.Equals(value) = false) Then
				Me.OnYY1Changing(value)
				Me.SendPropertyChanging
				Me._YY1 = value
				Me.SendPropertyChanged("YY1")
				Me.OnYY1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM2", DbType:="SmallInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property MM2() As System.Nullable(Of Short)
		Get
			Return Me._MM2
		End Get
		Set
			If (Me._MM2.Equals(value) = false) Then
				Me.OnMM2Changing(value)
				Me.SendPropertyChanging
				Me._MM2 = value
				Me.SendPropertyChanged("MM2")
				Me.OnMM2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY2", DbType:="SmallInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10)>  _
	Public Property YY2() As System.Nullable(Of Short)
		Get
			Return Me._YY2
		End Get
		Set
			If (Me._YY2.Equals(value) = false) Then
				Me.OnYY2Changing(value)
				Me.SendPropertyChanging
				Me._YY2 = value
				Me.SendPropertyChanged("YY2")
				Me.OnYY2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PERIOD", DbType:="VarChar(15)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=11)>  _
	Public Property PERIOD() As String
		Get
			Return Me._PERIOD
		End Get
		Set
			If (String.Equals(Me._PERIOD, value) = false) Then
				Me.OnPERIODChanging(value)
				Me.SendPropertyChanging
				Me._PERIOD = value
				Me.SendPropertyChanged("PERIOD")
				Me.OnPERIODChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=12)>  _
	Public Property YY() As System.Nullable(Of Integer)
		Get
			Return Me._YY
		End Get
		Set
			If (Me._YY.Equals(value) = false) Then
				Me.OnYYChanging(value)
				Me.SendPropertyChanging
				Me._YY = value
				Me.SendPropertyChanged("YY")
				Me.OnYYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BALTIC_FTP_BALTIC_OPTION_VOLATILITIES", Storage:="_BALTIC_FTP", ThisKey:="ROUTE_ID,CMSROUTE_ID", OtherKey:="ROUTE_ID,CMSROUTE_ID", IsForeignKey:=true)>  _
	Public Property BALTIC_FTP() As BALTIC_FTP
		Get
			Return Me._BALTIC_FTP.Entity
		End Get
		Set
			Dim previousValue As BALTIC_FTP = Me._BALTIC_FTP.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._BALTIC_FTP.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._BALTIC_FTP.Entity = Nothing
					previousValue.BALTIC_OPTION_VOLATILITIES.Remove(Me)
				End If
				Me._BALTIC_FTP.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BALTIC_OPTION_VOLATILITIES.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
					Me._CMSROUTE_ID = value.CMSROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
					Me._CMSROUTE_ID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("BALTIC_FTP")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_BALTIC_OPTION_VOLATILITIES", Storage:="_ROUTES", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTES() As ROUTES
		Get
			Return Me._ROUTES.Entity
		End Get
		Set
			Dim previousValue As ROUTES = Me._ROUTES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTES.Entity = Nothing
					previousValue.BALTIC_OPTION_VOLATILITIES.Remove(Me)
				End If
				Me._ROUTES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BALTIC_OPTION_VOLATILITIES.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTES")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._BALTIC_FTP = CType(Nothing, EntityRef(Of BALTIC_FTP))
		Me._ROUTES = CType(Nothing, EntityRef(Of ROUTES))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BALTIC_SPOT_RATES"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class BALTIC_SPOT_RATES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ROUTE_ID As Integer
	
	Private _FIXING_DATE As Date
	
	Private _FIXING As Double
	
	Private _ROUTES As EntityRef(Of ROUTES)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnFIXING_DATEChanging(value As Date)
    End Sub
    Partial Private Sub OnFIXING_DATEChanged()
    End Sub
    Partial Private Sub OnFIXINGChanging(value As Double)
    End Sub
    Partial Private Sub OnFIXINGChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If Me._ROUTES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING_DATE", DbType:="Date NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property FIXING_DATE() As Date
		Get
			Return Me._FIXING_DATE
		End Get
		Set
			If ((Me._FIXING_DATE = value)  _
						= false) Then
				Me.OnFIXING_DATEChanging(value)
				Me.SendPropertyChanging
				Me._FIXING_DATE = value
				Me.SendPropertyChanged("FIXING_DATE")
				Me.OnFIXING_DATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property FIXING() As Double
		Get
			Return Me._FIXING
		End Get
		Set
			If ((Me._FIXING = value)  _
						= false) Then
				Me.OnFIXINGChanging(value)
				Me.SendPropertyChanging
				Me._FIXING = value
				Me.SendPropertyChanged("FIXING")
				Me.OnFIXINGChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_BALTIC_SPOT_RATES", Storage:="_ROUTES", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTES() As ROUTES
		Get
			Return Me._ROUTES.Entity
		End Get
		Set
			Dim previousValue As ROUTES = Me._ROUTES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTES.Entity = Nothing
					previousValue.BALTIC_SPOT_RATES.Remove(Me)
				End If
				Me._ROUTES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BALTIC_SPOT_RATES.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTES")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._ROUTES = CType(Nothing, EntityRef(Of ROUTES))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BROKER_DESK_TRADE_CLASSES"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class BROKER_DESK_TRADE_CLASSES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ACCOUNT_DESK_ID As Integer
	
	Private _TRADE_CLASS_SHORT As Char
	
	Private _ACCOUNT_DESKS As EntityRef(Of ACCOUNT_DESKS)
	
	Private _TRADE_CLASSES As EntityRef(Of TRADE_CLASSES)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnACCOUNT_DESK_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_DESK_IDChanged()
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanging(value As Char)
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_DESK_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ACCOUNT_DESK_ID() As Integer
		Get
			Return Me._ACCOUNT_DESK_ID
		End Get
		Set
			If ((Me._ACCOUNT_DESK_ID = value)  _
						= false) Then
				If Me._ACCOUNT_DESKS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACCOUNT_DESK_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_DESK_ID = value
				Me.SendPropertyChanged("ACCOUNT_DESK_ID")
				Me.OnACCOUNT_DESK_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_CLASS_SHORT", DbType:="Char(1) NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property TRADE_CLASS_SHORT() As Char
		Get
			Return Me._TRADE_CLASS_SHORT
		End Get
		Set
			If ((Me._TRADE_CLASS_SHORT = value)  _
						= false) Then
				If Me._TRADE_CLASSES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTRADE_CLASS_SHORTChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_CLASS_SHORT = value
				Me.SendPropertyChanged("TRADE_CLASS_SHORT")
				Me.OnTRADE_CLASS_SHORTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESKS_BROKER_DESK_TRADE_CLASSES", Storage:="_ACCOUNT_DESKS", ThisKey:="ACCOUNT_DESK_ID", OtherKey:="ACCOUNT_DESK_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT_DESKS() As ACCOUNT_DESKS
		Get
			Return Me._ACCOUNT_DESKS.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT_DESKS = Me._ACCOUNT_DESKS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT_DESKS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT_DESKS.Entity = Nothing
					previousValue.BROKER_DESK_TRADE_CLASSES.Remove(Me)
				End If
				Me._ACCOUNT_DESKS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BROKER_DESK_TRADE_CLASSES.Add(Me)
					Me._ACCOUNT_DESK_ID = value.ACCOUNT_DESK_ID
				Else
					Me._ACCOUNT_DESK_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNT_DESKS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASSES_BROKER_DESK_TRADE_CLASSES", Storage:="_TRADE_CLASSES", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="TRADE_CLASS_SHORT", IsForeignKey:=true)>  _
	Public Property TRADE_CLASSES() As TRADE_CLASSES
		Get
			Return Me._TRADE_CLASSES.Entity
		End Get
		Set
			Dim previousValue As TRADE_CLASSES = Me._TRADE_CLASSES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TRADE_CLASSES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TRADE_CLASSES.Entity = Nothing
					previousValue.BROKER_DESK_TRADE_CLASSES.Remove(Me)
				End If
				Me._TRADE_CLASSES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BROKER_DESK_TRADE_CLASSES.Add(Me)
					Me._TRADE_CLASS_SHORT = value.TRADE_CLASS_SHORT
				Else
					Me._TRADE_CLASS_SHORT = CType(Nothing, Char)
				End If
				Me.SendPropertyChanged("TRADE_CLASSES")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._ACCOUNT_DESKS = CType(Nothing, EntityRef(Of ACCOUNT_DESKS))
		Me._TRADE_CLASSES = CType(Nothing, EntityRef(Of TRADE_CLASSES))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CCY"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class CCY
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CCY_ID As Integer
	
	Private _CCY As String
	
	Private _CCY_DESCR As String
	
	Private _CCY_SYMBOL As String
	
	Private _CCY_UNICODE As Integer
	
	Private _ACCOUNTS As EntitySet(Of ACCOUNTS)
	
	Private _ARTBOPTCALC_PRODUCTS As EntitySet(Of ARTBOPTCALC_PRODUCTS)
	
	Private _INTEREST_RATES As EntitySet(Of INTEREST_RATES)
	
	Private _ROUTES As EntitySet(Of ROUTES)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCCY_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCCY_IDChanged()
    End Sub
    Partial Private Sub OnCCYChanging(value As String)
    End Sub
    Partial Private Sub OnCCYChanged()
    End Sub
    Partial Private Sub OnCCY_DESCRChanging(value As String)
    End Sub
    Partial Private Sub OnCCY_DESCRChanged()
    End Sub
    Partial Private Sub OnCCY_SYMBOLChanging(value As String)
    End Sub
    Partial Private Sub OnCCY_SYMBOLChanged()
    End Sub
    Partial Private Sub OnCCY_UNICODEChanging(value As Integer)
    End Sub
    Partial Private Sub OnCCY_UNICODEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCY_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property CCY_ID() As Integer
		Get
			Return Me._CCY_ID
		End Get
		Set
			If ((Me._CCY_ID = value)  _
						= false) Then
				Me.OnCCY_IDChanging(value)
				Me.SendPropertyChanging
				Me._CCY_ID = value
				Me.SendPropertyChanged("CCY_ID")
				Me.OnCCY_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCY", DbType:="NVarChar(5)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property CCY() As String
		Get
			Return Me._CCY
		End Get
		Set
			If (String.Equals(Me._CCY, value) = false) Then
				Me.OnCCYChanging(value)
				Me.SendPropertyChanging
				Me._CCY = value
				Me.SendPropertyChanged("CCY")
				Me.OnCCYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCY_DESCR", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property CCY_DESCR() As String
		Get
			Return Me._CCY_DESCR
		End Get
		Set
			If (String.Equals(Me._CCY_DESCR, value) = false) Then
				Me.OnCCY_DESCRChanging(value)
				Me.SendPropertyChanging
				Me._CCY_DESCR = value
				Me.SendPropertyChanged("CCY_DESCR")
				Me.OnCCY_DESCRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCY_SYMBOL", DbType:="NVarChar(1)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property CCY_SYMBOL() As String
		Get
			Return Me._CCY_SYMBOL
		End Get
		Set
			If (String.Equals(Me._CCY_SYMBOL, value) = false) Then
				Me.OnCCY_SYMBOLChanging(value)
				Me.SendPropertyChanging
				Me._CCY_SYMBOL = value
				Me.SendPropertyChanged("CCY_SYMBOL")
				Me.OnCCY_SYMBOLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCY_UNICODE", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property CCY_UNICODE() As Integer
		Get
			Return Me._CCY_UNICODE
		End Get
		Set
			If ((Me._CCY_UNICODE = value)  _
						= false) Then
				Me.OnCCY_UNICODEChanging(value)
				Me.SendPropertyChanging
				Me._CCY_UNICODE = value
				Me.SendPropertyChanged("CCY_UNICODE")
				Me.OnCCY_UNICODEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CCY_ACCOUNTS", Storage:="_ACCOUNTS", ThisKey:="CCY_ID", OtherKey:="DEFAULT_CCY"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6, EmitDefaultValue:=false)>  _
	Public Property ACCOUNTS() As EntitySet(Of ACCOUNTS)
		Get
			If (Me.serializing  _
						AndAlso (Me._ACCOUNTS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ACCOUNTS
		End Get
		Set
			Me._ACCOUNTS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CCY_ARTBOPTCALC_PRODUCTS", Storage:="_ARTBOPTCALC_PRODUCTS", ThisKey:="CCY_ID", OtherKey:="CCY_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7, EmitDefaultValue:=false)>  _
	Public Property ARTBOPTCALC_PRODUCTS() As EntitySet(Of ARTBOPTCALC_PRODUCTS)
		Get
			If (Me.serializing  _
						AndAlso (Me._ARTBOPTCALC_PRODUCTS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ARTBOPTCALC_PRODUCTS
		End Get
		Set
			Me._ARTBOPTCALC_PRODUCTS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CCY_INTEREST_RATES", Storage:="_INTEREST_RATES", ThisKey:="CCY_ID", OtherKey:="CCY_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8, EmitDefaultValue:=false)>  _
	Public Property INTEREST_RATES() As EntitySet(Of INTEREST_RATES)
		Get
			If (Me.serializing  _
						AndAlso (Me._INTEREST_RATES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._INTEREST_RATES
		End Get
		Set
			Me._INTEREST_RATES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CCY_ROUTES", Storage:="_ROUTES", ThisKey:="CCY_ID", OtherKey:="CCY_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9, EmitDefaultValue:=false)>  _
	Public Property ROUTES() As EntitySet(Of ROUTES)
		Get
			If (Me.serializing  _
						AndAlso (Me._ROUTES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ROUTES
		End Get
		Set
			Me._ROUTES.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ACCOUNTS(ByVal entity As ACCOUNTS)
		Me.SendPropertyChanging
		entity.CCY = Me
	End Sub
	
	Private Sub detach_ACCOUNTS(ByVal entity As ACCOUNTS)
		Me.SendPropertyChanging
		entity.CCY = Nothing
	End Sub
	
	Private Sub attach_ARTBOPTCALC_PRODUCTS(ByVal entity As ARTBOPTCALC_PRODUCTS)
		Me.SendPropertyChanging
		entity.CCY = Me
	End Sub
	
	Private Sub detach_ARTBOPTCALC_PRODUCTS(ByVal entity As ARTBOPTCALC_PRODUCTS)
		Me.SendPropertyChanging
		entity.CCY = Nothing
	End Sub
	
	Private Sub attach_INTEREST_RATES(ByVal entity As INTEREST_RATES)
		Me.SendPropertyChanging
		entity.CCY = Me
	End Sub
	
	Private Sub detach_INTEREST_RATES(ByVal entity As INTEREST_RATES)
		Me.SendPropertyChanging
		entity.CCY = Nothing
	End Sub
	
	Private Sub attach_ROUTES(ByVal entity As ROUTES)
		Me.SendPropertyChanging
		entity.CCY = Me
	End Sub
	
	Private Sub detach_ROUTES(ByVal entity As ROUTES)
		Me.SendPropertyChanging
		entity.CCY = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._ACCOUNTS = New EntitySet(Of ACCOUNTS)(AddressOf Me.attach_ACCOUNTS, AddressOf Me.detach_ACCOUNTS)
		Me._ARTBOPTCALC_PRODUCTS = New EntitySet(Of ARTBOPTCALC_PRODUCTS)(AddressOf Me.attach_ARTBOPTCALC_PRODUCTS, AddressOf Me.detach_ARTBOPTCALC_PRODUCTS)
		Me._INTEREST_RATES = New EntitySet(Of INTEREST_RATES)(AddressOf Me.attach_INTEREST_RATES, AddressOf Me.detach_INTEREST_RATES)
		Me._ROUTES = New EntitySet(Of ROUTES)(AddressOf Me.attach_ROUTES, AddressOf Me.detach_ROUTES)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CONTACT_TYPE"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class CONTACT_TYPE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CONTACT_TYPE_ID As Integer
	
	Private _CONTACT_TYPEDES As String
	
	Private _CONTACTS As EntitySet(Of CONTACTS)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCONTACT_TYPE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCONTACT_TYPE_IDChanged()
    End Sub
    Partial Private Sub OnCONTACT_TYPEDESChanging(value As String)
    End Sub
    Partial Private Sub OnCONTACT_TYPEDESChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONTACT_TYPE_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property CONTACT_TYPE_ID() As Integer
		Get
			Return Me._CONTACT_TYPE_ID
		End Get
		Set
			If ((Me._CONTACT_TYPE_ID = value)  _
						= false) Then
				Me.OnCONTACT_TYPE_IDChanging(value)
				Me.SendPropertyChanging
				Me._CONTACT_TYPE_ID = value
				Me.SendPropertyChanged("CONTACT_TYPE_ID")
				Me.OnCONTACT_TYPE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONTACT_TYPEDES", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property CONTACT_TYPEDES() As String
		Get
			Return Me._CONTACT_TYPEDES
		End Get
		Set
			If (String.Equals(Me._CONTACT_TYPEDES, value) = false) Then
				Me.OnCONTACT_TYPEDESChanging(value)
				Me.SendPropertyChanging
				Me._CONTACT_TYPEDES = value
				Me.SendPropertyChanged("CONTACT_TYPEDES")
				Me.OnCONTACT_TYPEDESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONTACT_TYPE_CONTACTS", Storage:="_CONTACTS", ThisKey:="CONTACT_TYPE_ID", OtherKey:="CONTACT_TYPE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3, EmitDefaultValue:=false)>  _
	Public Property CONTACTS() As EntitySet(Of CONTACTS)
		Get
			If (Me.serializing  _
						AndAlso (Me._CONTACTS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._CONTACTS
		End Get
		Set
			Me._CONTACTS.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CONTACTS(ByVal entity As CONTACTS)
		Me.SendPropertyChanging
		entity.CONTACT_TYPE = Me
	End Sub
	
	Private Sub detach_CONTACTS(ByVal entity As CONTACTS)
		Me.SendPropertyChanging
		entity.CONTACT_TYPE = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._CONTACTS = New EntitySet(Of CONTACTS)(AddressOf Me.attach_CONTACTS, AddressOf Me.detach_CONTACTS)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CONTACTS"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class CONTACTS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CONTACT_ID As Integer
	
	Private _FIRSTNAME As String
	
	Private _LASTNAME As String
	
	Private _TITLE As String
	
	Private _EMAIL1 As String
	
	Private _EMAIL2 As String
	
	Private _EMAIL3 As String
	
	Private _MSN As String
	
	Private _YAHOO As String
	
	Private _TEL_B1 As String
	
	Private _TEL_B2 As String
	
	Private _TEL_MBL1 As String
	
	Private _TEL_MBL2 As String
	
	Private _TEL_H1 As String
	
	Private _FAX_B As String
	
	Private _FAX_H As String
	
	Private _CONTACT_TYPE_ID As System.Nullable(Of Integer)
	
	Private _STREET As String
	
	Private _CITY As String
	
	Private _REGION As String
	
	Private _ZIPCODE As String
	
	Private _COUNTRY_ID As System.Nullable(Of Integer)
	
	Private _ACCOUNTS_CONTACTS As EntitySet(Of ACCOUNTS_CONTACTS)
	
	Private _DESK_TRADE_CONFOS As EntitySet(Of DESK_TRADE_CONFOS)
	
	Private _DESK_TRADERS As EntitySet(Of DESK_TRADERS)
	
	Private _CONTACT_TYPE As EntityRef(Of CONTACT_TYPE)
	
	Private _COUNTRIES As EntityRef(Of COUNTRIES)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCONTACT_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCONTACT_IDChanged()
    End Sub
    Partial Private Sub OnFIRSTNAMEChanging(value As String)
    End Sub
    Partial Private Sub OnFIRSTNAMEChanged()
    End Sub
    Partial Private Sub OnLASTNAMEChanging(value As String)
    End Sub
    Partial Private Sub OnLASTNAMEChanged()
    End Sub
    Partial Private Sub OnTITLEChanging(value As String)
    End Sub
    Partial Private Sub OnTITLEChanged()
    End Sub
    Partial Private Sub OnEMAIL1Changing(value As String)
    End Sub
    Partial Private Sub OnEMAIL1Changed()
    End Sub
    Partial Private Sub OnEMAIL2Changing(value As String)
    End Sub
    Partial Private Sub OnEMAIL2Changed()
    End Sub
    Partial Private Sub OnEMAIL3Changing(value As String)
    End Sub
    Partial Private Sub OnEMAIL3Changed()
    End Sub
    Partial Private Sub OnMSNChanging(value As String)
    End Sub
    Partial Private Sub OnMSNChanged()
    End Sub
    Partial Private Sub OnYAHOOChanging(value As String)
    End Sub
    Partial Private Sub OnYAHOOChanged()
    End Sub
    Partial Private Sub OnTEL_B1Changing(value As String)
    End Sub
    Partial Private Sub OnTEL_B1Changed()
    End Sub
    Partial Private Sub OnTEL_B2Changing(value As String)
    End Sub
    Partial Private Sub OnTEL_B2Changed()
    End Sub
    Partial Private Sub OnTEL_MBL1Changing(value As String)
    End Sub
    Partial Private Sub OnTEL_MBL1Changed()
    End Sub
    Partial Private Sub OnTEL_MBL2Changing(value As String)
    End Sub
    Partial Private Sub OnTEL_MBL2Changed()
    End Sub
    Partial Private Sub OnTEL_H1Changing(value As String)
    End Sub
    Partial Private Sub OnTEL_H1Changed()
    End Sub
    Partial Private Sub OnFAX_BChanging(value As String)
    End Sub
    Partial Private Sub OnFAX_BChanged()
    End Sub
    Partial Private Sub OnFAX_HChanging(value As String)
    End Sub
    Partial Private Sub OnFAX_HChanged()
    End Sub
    Partial Private Sub OnCONTACT_TYPE_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCONTACT_TYPE_IDChanged()
    End Sub
    Partial Private Sub OnSTREETChanging(value As String)
    End Sub
    Partial Private Sub OnSTREETChanged()
    End Sub
    Partial Private Sub OnCITYChanging(value As String)
    End Sub
    Partial Private Sub OnCITYChanged()
    End Sub
    Partial Private Sub OnREGIONChanging(value As String)
    End Sub
    Partial Private Sub OnREGIONChanged()
    End Sub
    Partial Private Sub OnZIPCODEChanging(value As String)
    End Sub
    Partial Private Sub OnZIPCODEChanged()
    End Sub
    Partial Private Sub OnCOUNTRY_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCOUNTRY_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONTACT_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property CONTACT_ID() As Integer
		Get
			Return Me._CONTACT_ID
		End Get
		Set
			If ((Me._CONTACT_ID = value)  _
						= false) Then
				Me.OnCONTACT_IDChanging(value)
				Me.SendPropertyChanging
				Me._CONTACT_ID = value
				Me.SendPropertyChanged("CONTACT_ID")
				Me.OnCONTACT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIRSTNAME", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property FIRSTNAME() As String
		Get
			Return Me._FIRSTNAME
		End Get
		Set
			If (String.Equals(Me._FIRSTNAME, value) = false) Then
				Me.OnFIRSTNAMEChanging(value)
				Me.SendPropertyChanging
				Me._FIRSTNAME = value
				Me.SendPropertyChanged("FIRSTNAME")
				Me.OnFIRSTNAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LASTNAME", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property LASTNAME() As String
		Get
			Return Me._LASTNAME
		End Get
		Set
			If (String.Equals(Me._LASTNAME, value) = false) Then
				Me.OnLASTNAMEChanging(value)
				Me.SendPropertyChanging
				Me._LASTNAME = value
				Me.SendPropertyChanged("LASTNAME")
				Me.OnLASTNAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TITLE", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property TITLE() As String
		Get
			Return Me._TITLE
		End Get
		Set
			If (String.Equals(Me._TITLE, value) = false) Then
				Me.OnTITLEChanging(value)
				Me.SendPropertyChanging
				Me._TITLE = value
				Me.SendPropertyChanged("TITLE")
				Me.OnTITLEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMAIL1", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property EMAIL1() As String
		Get
			Return Me._EMAIL1
		End Get
		Set
			If (String.Equals(Me._EMAIL1, value) = false) Then
				Me.OnEMAIL1Changing(value)
				Me.SendPropertyChanging
				Me._EMAIL1 = value
				Me.SendPropertyChanged("EMAIL1")
				Me.OnEMAIL1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMAIL2", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property EMAIL2() As String
		Get
			Return Me._EMAIL2
		End Get
		Set
			If (String.Equals(Me._EMAIL2, value) = false) Then
				Me.OnEMAIL2Changing(value)
				Me.SendPropertyChanging
				Me._EMAIL2 = value
				Me.SendPropertyChanged("EMAIL2")
				Me.OnEMAIL2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMAIL3", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property EMAIL3() As String
		Get
			Return Me._EMAIL3
		End Get
		Set
			If (String.Equals(Me._EMAIL3, value) = false) Then
				Me.OnEMAIL3Changing(value)
				Me.SendPropertyChanging
				Me._EMAIL3 = value
				Me.SendPropertyChanged("EMAIL3")
				Me.OnEMAIL3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MSN", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property MSN() As String
		Get
			Return Me._MSN
		End Get
		Set
			If (String.Equals(Me._MSN, value) = false) Then
				Me.OnMSNChanging(value)
				Me.SendPropertyChanging
				Me._MSN = value
				Me.SendPropertyChanged("MSN")
				Me.OnMSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YAHOO", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property YAHOO() As String
		Get
			Return Me._YAHOO
		End Get
		Set
			If (String.Equals(Me._YAHOO, value) = false) Then
				Me.OnYAHOOChanging(value)
				Me.SendPropertyChanging
				Me._YAHOO = value
				Me.SendPropertyChanged("YAHOO")
				Me.OnYAHOOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TEL_B1", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10)>  _
	Public Property TEL_B1() As String
		Get
			Return Me._TEL_B1
		End Get
		Set
			If (String.Equals(Me._TEL_B1, value) = false) Then
				Me.OnTEL_B1Changing(value)
				Me.SendPropertyChanging
				Me._TEL_B1 = value
				Me.SendPropertyChanged("TEL_B1")
				Me.OnTEL_B1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TEL_B2", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=11)>  _
	Public Property TEL_B2() As String
		Get
			Return Me._TEL_B2
		End Get
		Set
			If (String.Equals(Me._TEL_B2, value) = false) Then
				Me.OnTEL_B2Changing(value)
				Me.SendPropertyChanging
				Me._TEL_B2 = value
				Me.SendPropertyChanged("TEL_B2")
				Me.OnTEL_B2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TEL_MBL1", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=12)>  _
	Public Property TEL_MBL1() As String
		Get
			Return Me._TEL_MBL1
		End Get
		Set
			If (String.Equals(Me._TEL_MBL1, value) = false) Then
				Me.OnTEL_MBL1Changing(value)
				Me.SendPropertyChanging
				Me._TEL_MBL1 = value
				Me.SendPropertyChanged("TEL_MBL1")
				Me.OnTEL_MBL1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TEL_MBL2", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=13)>  _
	Public Property TEL_MBL2() As String
		Get
			Return Me._TEL_MBL2
		End Get
		Set
			If (String.Equals(Me._TEL_MBL2, value) = false) Then
				Me.OnTEL_MBL2Changing(value)
				Me.SendPropertyChanging
				Me._TEL_MBL2 = value
				Me.SendPropertyChanged("TEL_MBL2")
				Me.OnTEL_MBL2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TEL_H1", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=14)>  _
	Public Property TEL_H1() As String
		Get
			Return Me._TEL_H1
		End Get
		Set
			If (String.Equals(Me._TEL_H1, value) = false) Then
				Me.OnTEL_H1Changing(value)
				Me.SendPropertyChanging
				Me._TEL_H1 = value
				Me.SendPropertyChanged("TEL_H1")
				Me.OnTEL_H1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FAX_B", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=15)>  _
	Public Property FAX_B() As String
		Get
			Return Me._FAX_B
		End Get
		Set
			If (String.Equals(Me._FAX_B, value) = false) Then
				Me.OnFAX_BChanging(value)
				Me.SendPropertyChanging
				Me._FAX_B = value
				Me.SendPropertyChanged("FAX_B")
				Me.OnFAX_BChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FAX_H", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=16)>  _
	Public Property FAX_H() As String
		Get
			Return Me._FAX_H
		End Get
		Set
			If (String.Equals(Me._FAX_H, value) = false) Then
				Me.OnFAX_HChanging(value)
				Me.SendPropertyChanging
				Me._FAX_H = value
				Me.SendPropertyChanged("FAX_H")
				Me.OnFAX_HChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONTACT_TYPE_ID", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=17)>  _
	Public Property CONTACT_TYPE_ID() As System.Nullable(Of Integer)
		Get
			Return Me._CONTACT_TYPE_ID
		End Get
		Set
			If (Me._CONTACT_TYPE_ID.Equals(value) = false) Then
				If Me._CONTACT_TYPE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCONTACT_TYPE_IDChanging(value)
				Me.SendPropertyChanging
				Me._CONTACT_TYPE_ID = value
				Me.SendPropertyChanged("CONTACT_TYPE_ID")
				Me.OnCONTACT_TYPE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_STREET", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=18)>  _
	Public Property STREET() As String
		Get
			Return Me._STREET
		End Get
		Set
			If (String.Equals(Me._STREET, value) = false) Then
				Me.OnSTREETChanging(value)
				Me.SendPropertyChanging
				Me._STREET = value
				Me.SendPropertyChanged("STREET")
				Me.OnSTREETChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CITY", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=19)>  _
	Public Property CITY() As String
		Get
			Return Me._CITY
		End Get
		Set
			If (String.Equals(Me._CITY, value) = false) Then
				Me.OnCITYChanging(value)
				Me.SendPropertyChanging
				Me._CITY = value
				Me.SendPropertyChanged("CITY")
				Me.OnCITYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REGION", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=20)>  _
	Public Property REGION() As String
		Get
			Return Me._REGION
		End Get
		Set
			If (String.Equals(Me._REGION, value) = false) Then
				Me.OnREGIONChanging(value)
				Me.SendPropertyChanging
				Me._REGION = value
				Me.SendPropertyChanged("REGION")
				Me.OnREGIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ZIPCODE", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=21)>  _
	Public Property ZIPCODE() As String
		Get
			Return Me._ZIPCODE
		End Get
		Set
			If (String.Equals(Me._ZIPCODE, value) = false) Then
				Me.OnZIPCODEChanging(value)
				Me.SendPropertyChanging
				Me._ZIPCODE = value
				Me.SendPropertyChanged("ZIPCODE")
				Me.OnZIPCODEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COUNTRY_ID", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=22)>  _
	Public Property COUNTRY_ID() As System.Nullable(Of Integer)
		Get
			Return Me._COUNTRY_ID
		End Get
		Set
			If (Me._COUNTRY_ID.Equals(value) = false) Then
				If Me._COUNTRIES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCOUNTRY_IDChanging(value)
				Me.SendPropertyChanging
				Me._COUNTRY_ID = value
				Me.SendPropertyChanged("COUNTRY_ID")
				Me.OnCOUNTRY_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONTACTS_ACCOUNTS_CONTACTS", Storage:="_ACCOUNTS_CONTACTS", ThisKey:="CONTACT_ID", OtherKey:="CONTACT_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=23, EmitDefaultValue:=false)>  _
	Public Property ACCOUNTS_CONTACTS() As EntitySet(Of ACCOUNTS_CONTACTS)
		Get
			If (Me.serializing  _
						AndAlso (Me._ACCOUNTS_CONTACTS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ACCOUNTS_CONTACTS
		End Get
		Set
			Me._ACCOUNTS_CONTACTS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONTACTS_DESK_TRADE_CONFOS", Storage:="_DESK_TRADE_CONFOS", ThisKey:="CONTACT_ID", OtherKey:="CONTACT_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=24, EmitDefaultValue:=false)>  _
	Public Property DESK_TRADE_CONFOS() As EntitySet(Of DESK_TRADE_CONFOS)
		Get
			If (Me.serializing  _
						AndAlso (Me._DESK_TRADE_CONFOS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._DESK_TRADE_CONFOS
		End Get
		Set
			Me._DESK_TRADE_CONFOS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONTACTS_DESK_TRADERS", Storage:="_DESK_TRADERS", ThisKey:="CONTACT_ID", OtherKey:="CONTACT_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=25, EmitDefaultValue:=false)>  _
	Public Property DESK_TRADERS() As EntitySet(Of DESK_TRADERS)
		Get
			If (Me.serializing  _
						AndAlso (Me._DESK_TRADERS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._DESK_TRADERS
		End Get
		Set
			Me._DESK_TRADERS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONTACT_TYPE_CONTACTS", Storage:="_CONTACT_TYPE", ThisKey:="CONTACT_TYPE_ID", OtherKey:="CONTACT_TYPE_ID", IsForeignKey:=true)>  _
	Public Property CONTACT_TYPE() As CONTACT_TYPE
		Get
			Return Me._CONTACT_TYPE.Entity
		End Get
		Set
			Dim previousValue As CONTACT_TYPE = Me._CONTACT_TYPE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CONTACT_TYPE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CONTACT_TYPE.Entity = Nothing
					previousValue.CONTACTS.Remove(Me)
				End If
				Me._CONTACT_TYPE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CONTACTS.Add(Me)
					Me._CONTACT_TYPE_ID = value.CONTACT_TYPE_ID
				Else
					Me._CONTACT_TYPE_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("CONTACT_TYPE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="COUNTRIES_CONTACTS", Storage:="_COUNTRIES", ThisKey:="COUNTRY_ID", OtherKey:="COUNTRY_ID", IsForeignKey:=true)>  _
	Public Property COUNTRIES() As COUNTRIES
		Get
			Return Me._COUNTRIES.Entity
		End Get
		Set
			Dim previousValue As COUNTRIES = Me._COUNTRIES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._COUNTRIES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._COUNTRIES.Entity = Nothing
					previousValue.CONTACTS.Remove(Me)
				End If
				Me._COUNTRIES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CONTACTS.Add(Me)
					Me._COUNTRY_ID = value.COUNTRY_ID
				Else
					Me._COUNTRY_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("COUNTRIES")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ACCOUNTS_CONTACTS(ByVal entity As ACCOUNTS_CONTACTS)
		Me.SendPropertyChanging
		entity.CONTACTS = Me
	End Sub
	
	Private Sub detach_ACCOUNTS_CONTACTS(ByVal entity As ACCOUNTS_CONTACTS)
		Me.SendPropertyChanging
		entity.CONTACTS = Nothing
	End Sub
	
	Private Sub attach_DESK_TRADE_CONFOS(ByVal entity As DESK_TRADE_CONFOS)
		Me.SendPropertyChanging
		entity.CONTACTS = Me
	End Sub
	
	Private Sub detach_DESK_TRADE_CONFOS(ByVal entity As DESK_TRADE_CONFOS)
		Me.SendPropertyChanging
		entity.CONTACTS = Nothing
	End Sub
	
	Private Sub attach_DESK_TRADERS(ByVal entity As DESK_TRADERS)
		Me.SendPropertyChanging
		entity.CONTACTS = Me
	End Sub
	
	Private Sub detach_DESK_TRADERS(ByVal entity As DESK_TRADERS)
		Me.SendPropertyChanging
		entity.CONTACTS = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._ACCOUNTS_CONTACTS = New EntitySet(Of ACCOUNTS_CONTACTS)(AddressOf Me.attach_ACCOUNTS_CONTACTS, AddressOf Me.detach_ACCOUNTS_CONTACTS)
		Me._DESK_TRADE_CONFOS = New EntitySet(Of DESK_TRADE_CONFOS)(AddressOf Me.attach_DESK_TRADE_CONFOS, AddressOf Me.detach_DESK_TRADE_CONFOS)
		Me._DESK_TRADERS = New EntitySet(Of DESK_TRADERS)(AddressOf Me.attach_DESK_TRADERS, AddressOf Me.detach_DESK_TRADERS)
		Me._CONTACT_TYPE = CType(Nothing, EntityRef(Of CONTACT_TYPE))
		Me._COUNTRIES = CType(Nothing, EntityRef(Of COUNTRIES))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CONTRACT_SERIES"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class CONTRACT_SERIES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ROUTE_ID As Integer
	
	Private _ACCOUNT_ID As Integer
	
	Private _FRONT_MONTHS As Short
	
	Private _FRONT_QUARTERS As Short
	
	Private _FRONT_HALF_YEARS As Short
	
	Private _FRONT_YEARS As Short
	
	Private _FRONT_MAX_MONTHS As Short
	
	Private _ACCOUNTS As EntityRef(Of ACCOUNTS)
	
	Private _ROUTES As EntityRef(Of ROUTES)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnACCOUNT_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_IDChanged()
    End Sub
    Partial Private Sub OnFRONT_MONTHSChanging(value As Short)
    End Sub
    Partial Private Sub OnFRONT_MONTHSChanged()
    End Sub
    Partial Private Sub OnFRONT_QUARTERSChanging(value As Short)
    End Sub
    Partial Private Sub OnFRONT_QUARTERSChanged()
    End Sub
    Partial Private Sub OnFRONT_HALF_YEARSChanging(value As Short)
    End Sub
    Partial Private Sub OnFRONT_HALF_YEARSChanged()
    End Sub
    Partial Private Sub OnFRONT_YEARSChanging(value As Short)
    End Sub
    Partial Private Sub OnFRONT_YEARSChanged()
    End Sub
    Partial Private Sub OnFRONT_MAX_MONTHSChanging(value As Short)
    End Sub
    Partial Private Sub OnFRONT_MAX_MONTHSChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If Me._ROUTES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property ACCOUNT_ID() As Integer
		Get
			Return Me._ACCOUNT_ID
		End Get
		Set
			If ((Me._ACCOUNT_ID = value)  _
						= false) Then
				If Me._ACCOUNTS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACCOUNT_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_ID = value
				Me.SendPropertyChanged("ACCOUNT_ID")
				Me.OnACCOUNT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FRONT_MONTHS", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property FRONT_MONTHS() As Short
		Get
			Return Me._FRONT_MONTHS
		End Get
		Set
			If ((Me._FRONT_MONTHS = value)  _
						= false) Then
				Me.OnFRONT_MONTHSChanging(value)
				Me.SendPropertyChanging
				Me._FRONT_MONTHS = value
				Me.SendPropertyChanged("FRONT_MONTHS")
				Me.OnFRONT_MONTHSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FRONT_QUARTERS", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property FRONT_QUARTERS() As Short
		Get
			Return Me._FRONT_QUARTERS
		End Get
		Set
			If ((Me._FRONT_QUARTERS = value)  _
						= false) Then
				Me.OnFRONT_QUARTERSChanging(value)
				Me.SendPropertyChanging
				Me._FRONT_QUARTERS = value
				Me.SendPropertyChanged("FRONT_QUARTERS")
				Me.OnFRONT_QUARTERSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FRONT_HALF_YEARS", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property FRONT_HALF_YEARS() As Short
		Get
			Return Me._FRONT_HALF_YEARS
		End Get
		Set
			If ((Me._FRONT_HALF_YEARS = value)  _
						= false) Then
				Me.OnFRONT_HALF_YEARSChanging(value)
				Me.SendPropertyChanging
				Me._FRONT_HALF_YEARS = value
				Me.SendPropertyChanged("FRONT_HALF_YEARS")
				Me.OnFRONT_HALF_YEARSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FRONT_YEARS", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property FRONT_YEARS() As Short
		Get
			Return Me._FRONT_YEARS
		End Get
		Set
			If ((Me._FRONT_YEARS = value)  _
						= false) Then
				Me.OnFRONT_YEARSChanging(value)
				Me.SendPropertyChanging
				Me._FRONT_YEARS = value
				Me.SendPropertyChanged("FRONT_YEARS")
				Me.OnFRONT_YEARSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FRONT_MAX_MONTHS", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property FRONT_MAX_MONTHS() As Short
		Get
			Return Me._FRONT_MAX_MONTHS
		End Get
		Set
			If ((Me._FRONT_MAX_MONTHS = value)  _
						= false) Then
				Me.OnFRONT_MAX_MONTHSChanging(value)
				Me.SendPropertyChanging
				Me._FRONT_MAX_MONTHS = value
				Me.SendPropertyChanged("FRONT_MAX_MONTHS")
				Me.OnFRONT_MAX_MONTHSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_CONTRACT_SERIES", Storage:="_ACCOUNTS", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNTS() As ACCOUNTS
		Get
			Return Me._ACCOUNTS.Entity
		End Get
		Set
			Dim previousValue As ACCOUNTS = Me._ACCOUNTS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNTS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNTS.Entity = Nothing
					previousValue.CONTRACT_SERIES.Remove(Me)
				End If
				Me._ACCOUNTS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CONTRACT_SERIES.Add(Me)
					Me._ACCOUNT_ID = value.ACCOUNT_ID
				Else
					Me._ACCOUNT_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNTS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_CONTRACT_SERIES", Storage:="_ROUTES", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTES() As ROUTES
		Get
			Return Me._ROUTES.Entity
		End Get
		Set
			Dim previousValue As ROUTES = Me._ROUTES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTES.Entity = Nothing
					previousValue.CONTRACT_SERIES.Remove(Me)
				End If
				Me._ROUTES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CONTRACT_SERIES.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTES")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._ACCOUNTS = CType(Nothing, EntityRef(Of ACCOUNTS))
		Me._ROUTES = CType(Nothing, EntityRef(Of ROUTES))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.COUNTERPARTY_LIMITS"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class COUNTERPARTY_LIMITS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PRI_ACCOUNT_DESK_ID As Integer
	
	Private _SEC_ACCOUNT_DESK_ID As Integer
	
	Private _CLEARED As Boolean
	
	Private _CLEARED_SHOW_NAME As Short
	
	Private _OTC As Boolean
	
	Private _OTC_SHOW_NAME As Short
	
	Private _PERIOD_LIMIT As Integer
	
	Private _ACCOUNT_DESKS As EntityRef(Of ACCOUNT_DESKS)
	
	Private _ACCOUNT_DESKS1 As EntityRef(Of ACCOUNT_DESKS)
	
	Private _PERIOD_LIMIT_DESCRS As EntityRef(Of PERIOD_LIMIT_DESCRS)
	
	Private _SHOW_NAME_TYPES As EntityRef(Of SHOW_NAME_TYPES)
	
	Private _SHOW_NAME_TYPES1 As EntityRef(Of SHOW_NAME_TYPES)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPRI_ACCOUNT_DESK_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPRI_ACCOUNT_DESK_IDChanged()
    End Sub
    Partial Private Sub OnSEC_ACCOUNT_DESK_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSEC_ACCOUNT_DESK_IDChanged()
    End Sub
    Partial Private Sub OnCLEAREDChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCLEAREDChanged()
    End Sub
    Partial Private Sub OnCLEARED_SHOW_NAMEChanging(value As Short)
    End Sub
    Partial Private Sub OnCLEARED_SHOW_NAMEChanged()
    End Sub
    Partial Private Sub OnOTCChanging(value As Boolean)
    End Sub
    Partial Private Sub OnOTCChanged()
    End Sub
    Partial Private Sub OnOTC_SHOW_NAMEChanging(value As Short)
    End Sub
    Partial Private Sub OnOTC_SHOW_NAMEChanged()
    End Sub
    Partial Private Sub OnPERIOD_LIMITChanging(value As Integer)
    End Sub
    Partial Private Sub OnPERIOD_LIMITChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRI_ACCOUNT_DESK_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property PRI_ACCOUNT_DESK_ID() As Integer
		Get
			Return Me._PRI_ACCOUNT_DESK_ID
		End Get
		Set
			If ((Me._PRI_ACCOUNT_DESK_ID = value)  _
						= false) Then
				If Me._ACCOUNT_DESKS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPRI_ACCOUNT_DESK_IDChanging(value)
				Me.SendPropertyChanging
				Me._PRI_ACCOUNT_DESK_ID = value
				Me.SendPropertyChanged("PRI_ACCOUNT_DESK_ID")
				Me.OnPRI_ACCOUNT_DESK_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SEC_ACCOUNT_DESK_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property SEC_ACCOUNT_DESK_ID() As Integer
		Get
			Return Me._SEC_ACCOUNT_DESK_ID
		End Get
		Set
			If ((Me._SEC_ACCOUNT_DESK_ID = value)  _
						= false) Then
				If Me._ACCOUNT_DESKS1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSEC_ACCOUNT_DESK_IDChanging(value)
				Me.SendPropertyChanging
				Me._SEC_ACCOUNT_DESK_ID = value
				Me.SendPropertyChanged("SEC_ACCOUNT_DESK_ID")
				Me.OnSEC_ACCOUNT_DESK_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLEARED", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property CLEARED() As Boolean
		Get
			Return Me._CLEARED
		End Get
		Set
			If ((Me._CLEARED = value)  _
						= false) Then
				Me.OnCLEAREDChanging(value)
				Me.SendPropertyChanging
				Me._CLEARED = value
				Me.SendPropertyChanged("CLEARED")
				Me.OnCLEAREDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLEARED_SHOW_NAME", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property CLEARED_SHOW_NAME() As Short
		Get
			Return Me._CLEARED_SHOW_NAME
		End Get
		Set
			If ((Me._CLEARED_SHOW_NAME = value)  _
						= false) Then
				If Me._SHOW_NAME_TYPES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCLEARED_SHOW_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._CLEARED_SHOW_NAME = value
				Me.SendPropertyChanged("CLEARED_SHOW_NAME")
				Me.OnCLEARED_SHOW_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OTC", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property OTC() As Boolean
		Get
			Return Me._OTC
		End Get
		Set
			If ((Me._OTC = value)  _
						= false) Then
				Me.OnOTCChanging(value)
				Me.SendPropertyChanging
				Me._OTC = value
				Me.SendPropertyChanged("OTC")
				Me.OnOTCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OTC_SHOW_NAME", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property OTC_SHOW_NAME() As Short
		Get
			Return Me._OTC_SHOW_NAME
		End Get
		Set
			If ((Me._OTC_SHOW_NAME = value)  _
						= false) Then
				If Me._SHOW_NAME_TYPES1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnOTC_SHOW_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._OTC_SHOW_NAME = value
				Me.SendPropertyChanged("OTC_SHOW_NAME")
				Me.OnOTC_SHOW_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PERIOD_LIMIT", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property PERIOD_LIMIT() As Integer
		Get
			Return Me._PERIOD_LIMIT
		End Get
		Set
			If ((Me._PERIOD_LIMIT = value)  _
						= false) Then
				If Me._PERIOD_LIMIT_DESCRS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPERIOD_LIMITChanging(value)
				Me.SendPropertyChanging
				Me._PERIOD_LIMIT = value
				Me.SendPropertyChanged("PERIOD_LIMIT")
				Me.OnPERIOD_LIMITChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESKS_COUNTERPARTY_LIMITS", Storage:="_ACCOUNT_DESKS", ThisKey:="PRI_ACCOUNT_DESK_ID", OtherKey:="ACCOUNT_DESK_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT_DESKS() As ACCOUNT_DESKS
		Get
			Return Me._ACCOUNT_DESKS.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT_DESKS = Me._ACCOUNT_DESKS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT_DESKS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT_DESKS.Entity = Nothing
					previousValue.COUNTERPARTY_LIMITS.Remove(Me)
				End If
				Me._ACCOUNT_DESKS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.COUNTERPARTY_LIMITS.Add(Me)
					Me._PRI_ACCOUNT_DESK_ID = value.ACCOUNT_DESK_ID
				Else
					Me._PRI_ACCOUNT_DESK_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNT_DESKS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESKS_COUNTERPARTY_LIMITS1", Storage:="_ACCOUNT_DESKS1", ThisKey:="SEC_ACCOUNT_DESK_ID", OtherKey:="ACCOUNT_DESK_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT_DESKS1() As ACCOUNT_DESKS
		Get
			Return Me._ACCOUNT_DESKS1.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT_DESKS = Me._ACCOUNT_DESKS1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT_DESKS1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT_DESKS1.Entity = Nothing
					previousValue.COUNTERPARTY_LIMITS1.Remove(Me)
				End If
				Me._ACCOUNT_DESKS1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.COUNTERPARTY_LIMITS1.Add(Me)
					Me._SEC_ACCOUNT_DESK_ID = value.ACCOUNT_DESK_ID
				Else
					Me._SEC_ACCOUNT_DESK_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNT_DESKS1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PERIOD_LIMIT_DESCRS_COUNTERPARTY_LIMITS", Storage:="_PERIOD_LIMIT_DESCRS", ThisKey:="PERIOD_LIMIT", OtherKey:="PERIOD_LIMIT", IsForeignKey:=true)>  _
	Public Property PERIOD_LIMIT_DESCRS() As PERIOD_LIMIT_DESCRS
		Get
			Return Me._PERIOD_LIMIT_DESCRS.Entity
		End Get
		Set
			Dim previousValue As PERIOD_LIMIT_DESCRS = Me._PERIOD_LIMIT_DESCRS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PERIOD_LIMIT_DESCRS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PERIOD_LIMIT_DESCRS.Entity = Nothing
					previousValue.COUNTERPARTY_LIMITS.Remove(Me)
				End If
				Me._PERIOD_LIMIT_DESCRS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.COUNTERPARTY_LIMITS.Add(Me)
					Me._PERIOD_LIMIT = value.PERIOD_LIMIT
				Else
					Me._PERIOD_LIMIT = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PERIOD_LIMIT_DESCRS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SHOW_NAME_TYPES_COUNTERPARTY_LIMITS", Storage:="_SHOW_NAME_TYPES", ThisKey:="CLEARED_SHOW_NAME", OtherKey:="SHOW_NAME_ID", IsForeignKey:=true)>  _
	Public Property SHOW_NAME_TYPES() As SHOW_NAME_TYPES
		Get
			Return Me._SHOW_NAME_TYPES.Entity
		End Get
		Set
			Dim previousValue As SHOW_NAME_TYPES = Me._SHOW_NAME_TYPES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SHOW_NAME_TYPES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SHOW_NAME_TYPES.Entity = Nothing
					previousValue.COUNTERPARTY_LIMITS.Remove(Me)
				End If
				Me._SHOW_NAME_TYPES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.COUNTERPARTY_LIMITS.Add(Me)
					Me._CLEARED_SHOW_NAME = value.SHOW_NAME_ID
				Else
					Me._CLEARED_SHOW_NAME = CType(Nothing, Short)
				End If
				Me.SendPropertyChanged("SHOW_NAME_TYPES")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SHOW_NAME_TYPES_COUNTERPARTY_LIMITS1", Storage:="_SHOW_NAME_TYPES1", ThisKey:="OTC_SHOW_NAME", OtherKey:="SHOW_NAME_ID", IsForeignKey:=true)>  _
	Public Property SHOW_NAME_TYPES1() As SHOW_NAME_TYPES
		Get
			Return Me._SHOW_NAME_TYPES1.Entity
		End Get
		Set
			Dim previousValue As SHOW_NAME_TYPES = Me._SHOW_NAME_TYPES1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SHOW_NAME_TYPES1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SHOW_NAME_TYPES1.Entity = Nothing
					previousValue.COUNTERPARTY_LIMITS1.Remove(Me)
				End If
				Me._SHOW_NAME_TYPES1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.COUNTERPARTY_LIMITS1.Add(Me)
					Me._OTC_SHOW_NAME = value.SHOW_NAME_ID
				Else
					Me._OTC_SHOW_NAME = CType(Nothing, Short)
				End If
				Me.SendPropertyChanged("SHOW_NAME_TYPES1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._ACCOUNT_DESKS = CType(Nothing, EntityRef(Of ACCOUNT_DESKS))
		Me._ACCOUNT_DESKS1 = CType(Nothing, EntityRef(Of ACCOUNT_DESKS))
		Me._PERIOD_LIMIT_DESCRS = CType(Nothing, EntityRef(Of PERIOD_LIMIT_DESCRS))
		Me._SHOW_NAME_TYPES = CType(Nothing, EntityRef(Of SHOW_NAME_TYPES))
		Me._SHOW_NAME_TYPES1 = CType(Nothing, EntityRef(Of SHOW_NAME_TYPES))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.COUNTRIES"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class COUNTRIES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _COUNTRY_ID As Integer
	
	Private _COUNTRY_ISO As String
	
	Private _COUNTRY_UN As String
	
	Private _COUNTRY_DESCR As String
	
	Private _ACCOUNTS As EntitySet(Of ACCOUNTS)
	
	Private _CONTACTS As EntitySet(Of CONTACTS)
	
	Private _EXCHANGES As EntitySet(Of EXCHANGES)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCOUNTRY_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCOUNTRY_IDChanged()
    End Sub
    Partial Private Sub OnCOUNTRY_ISOChanging(value As String)
    End Sub
    Partial Private Sub OnCOUNTRY_ISOChanged()
    End Sub
    Partial Private Sub OnCOUNTRY_UNChanging(value As String)
    End Sub
    Partial Private Sub OnCOUNTRY_UNChanged()
    End Sub
    Partial Private Sub OnCOUNTRY_DESCRChanging(value As String)
    End Sub
    Partial Private Sub OnCOUNTRY_DESCRChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COUNTRY_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property COUNTRY_ID() As Integer
		Get
			Return Me._COUNTRY_ID
		End Get
		Set
			If ((Me._COUNTRY_ID = value)  _
						= false) Then
				Me.OnCOUNTRY_IDChanging(value)
				Me.SendPropertyChanging
				Me._COUNTRY_ID = value
				Me.SendPropertyChanged("COUNTRY_ID")
				Me.OnCOUNTRY_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COUNTRY_ISO", DbType:="NVarChar(3) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property COUNTRY_ISO() As String
		Get
			Return Me._COUNTRY_ISO
		End Get
		Set
			If (String.Equals(Me._COUNTRY_ISO, value) = false) Then
				Me.OnCOUNTRY_ISOChanging(value)
				Me.SendPropertyChanging
				Me._COUNTRY_ISO = value
				Me.SendPropertyChanged("COUNTRY_ISO")
				Me.OnCOUNTRY_ISOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COUNTRY_UN", DbType:="NVarChar(3) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property COUNTRY_UN() As String
		Get
			Return Me._COUNTRY_UN
		End Get
		Set
			If (String.Equals(Me._COUNTRY_UN, value) = false) Then
				Me.OnCOUNTRY_UNChanging(value)
				Me.SendPropertyChanging
				Me._COUNTRY_UN = value
				Me.SendPropertyChanged("COUNTRY_UN")
				Me.OnCOUNTRY_UNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COUNTRY_DESCR", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property COUNTRY_DESCR() As String
		Get
			Return Me._COUNTRY_DESCR
		End Get
		Set
			If (String.Equals(Me._COUNTRY_DESCR, value) = false) Then
				Me.OnCOUNTRY_DESCRChanging(value)
				Me.SendPropertyChanging
				Me._COUNTRY_DESCR = value
				Me.SendPropertyChanged("COUNTRY_DESCR")
				Me.OnCOUNTRY_DESCRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="COUNTRIES_ACCOUNTS", Storage:="_ACCOUNTS", ThisKey:="COUNTRY_ID", OtherKey:="COUNTRY_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5, EmitDefaultValue:=false)>  _
	Public Property ACCOUNTS() As EntitySet(Of ACCOUNTS)
		Get
			If (Me.serializing  _
						AndAlso (Me._ACCOUNTS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ACCOUNTS
		End Get
		Set
			Me._ACCOUNTS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="COUNTRIES_CONTACTS", Storage:="_CONTACTS", ThisKey:="COUNTRY_ID", OtherKey:="COUNTRY_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6, EmitDefaultValue:=false)>  _
	Public Property CONTACTS() As EntitySet(Of CONTACTS)
		Get
			If (Me.serializing  _
						AndAlso (Me._CONTACTS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._CONTACTS
		End Get
		Set
			Me._CONTACTS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="COUNTRIES_EXCHANGES", Storage:="_EXCHANGES", ThisKey:="COUNTRY_ID", OtherKey:="COUNTRY_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7, EmitDefaultValue:=false)>  _
	Public Property EXCHANGES() As EntitySet(Of EXCHANGES)
		Get
			If (Me.serializing  _
						AndAlso (Me._EXCHANGES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._EXCHANGES
		End Get
		Set
			Me._EXCHANGES.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ACCOUNTS(ByVal entity As ACCOUNTS)
		Me.SendPropertyChanging
		entity.COUNTRIES = Me
	End Sub
	
	Private Sub detach_ACCOUNTS(ByVal entity As ACCOUNTS)
		Me.SendPropertyChanging
		entity.COUNTRIES = Nothing
	End Sub
	
	Private Sub attach_CONTACTS(ByVal entity As CONTACTS)
		Me.SendPropertyChanging
		entity.COUNTRIES = Me
	End Sub
	
	Private Sub detach_CONTACTS(ByVal entity As CONTACTS)
		Me.SendPropertyChanging
		entity.COUNTRIES = Nothing
	End Sub
	
	Private Sub attach_EXCHANGES(ByVal entity As EXCHANGES)
		Me.SendPropertyChanging
		entity.COUNTRIES = Me
	End Sub
	
	Private Sub detach_EXCHANGES(ByVal entity As EXCHANGES)
		Me.SendPropertyChanging
		entity.COUNTRIES = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._ACCOUNTS = New EntitySet(Of ACCOUNTS)(AddressOf Me.attach_ACCOUNTS, AddressOf Me.detach_ACCOUNTS)
		Me._CONTACTS = New EntitySet(Of CONTACTS)(AddressOf Me.attach_CONTACTS, AddressOf Me.detach_CONTACTS)
		Me._EXCHANGES = New EntitySet(Of EXCHANGES)(AddressOf Me.attach_EXCHANGES, AddressOf Me.detach_EXCHANGES)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DESK_EXCHANGES"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class DESK_EXCHANGES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ACCOUNT_DESK_ID As Integer
	
	Private _EXCHANGE_ID As Integer
	
	Private _TRADE_CLASS_SHORT As Char
	
	Private _ACTIVE As Boolean
	
	Private _ORDER_INCLUDE As Boolean
	
	Private _RANKING As Integer
	
	Private _DESK_EXCHANGES_CLEARERS As EntitySet(Of DESK_EXCHANGES_CLEARERS)
	
	Private _DESK_TRADE_CLASSES As EntityRef(Of DESK_TRADE_CLASSES)
	
	Private _EXCHANGES As EntityRef(Of EXCHANGES)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnACCOUNT_DESK_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_DESK_IDChanged()
    End Sub
    Partial Private Sub OnEXCHANGE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEXCHANGE_IDChanged()
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanging(value As Char)
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanged()
    End Sub
    Partial Private Sub OnACTIVEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnACTIVEChanged()
    End Sub
    Partial Private Sub OnORDER_INCLUDEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnORDER_INCLUDEChanged()
    End Sub
    Partial Private Sub OnRANKINGChanging(value As Integer)
    End Sub
    Partial Private Sub OnRANKINGChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_DESK_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ACCOUNT_DESK_ID() As Integer
		Get
			Return Me._ACCOUNT_DESK_ID
		End Get
		Set
			If ((Me._ACCOUNT_DESK_ID = value)  _
						= false) Then
				If Me._DESK_TRADE_CLASSES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACCOUNT_DESK_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_DESK_ID = value
				Me.SendPropertyChanged("ACCOUNT_DESK_ID")
				Me.OnACCOUNT_DESK_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property EXCHANGE_ID() As Integer
		Get
			Return Me._EXCHANGE_ID
		End Get
		Set
			If ((Me._EXCHANGE_ID = value)  _
						= false) Then
				If Me._EXCHANGES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEXCHANGE_IDChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_ID = value
				Me.SendPropertyChanged("EXCHANGE_ID")
				Me.OnEXCHANGE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_CLASS_SHORT", DbType:="Char(1) NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property TRADE_CLASS_SHORT() As Char
		Get
			Return Me._TRADE_CLASS_SHORT
		End Get
		Set
			If ((Me._TRADE_CLASS_SHORT = value)  _
						= false) Then
				If Me._DESK_TRADE_CLASSES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTRADE_CLASS_SHORTChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_CLASS_SHORT = value
				Me.SendPropertyChanged("TRADE_CLASS_SHORT")
				Me.OnTRADE_CLASS_SHORTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACTIVE", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property ACTIVE() As Boolean
		Get
			Return Me._ACTIVE
		End Get
		Set
			If ((Me._ACTIVE = value)  _
						= false) Then
				Me.OnACTIVEChanging(value)
				Me.SendPropertyChanging
				Me._ACTIVE = value
				Me.SendPropertyChanged("ACTIVE")
				Me.OnACTIVEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_INCLUDE", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property ORDER_INCLUDE() As Boolean
		Get
			Return Me._ORDER_INCLUDE
		End Get
		Set
			If ((Me._ORDER_INCLUDE = value)  _
						= false) Then
				Me.OnORDER_INCLUDEChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_INCLUDE = value
				Me.SendPropertyChanged("ORDER_INCLUDE")
				Me.OnORDER_INCLUDEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RANKING", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property RANKING() As Integer
		Get
			Return Me._RANKING
		End Get
		Set
			If ((Me._RANKING = value)  _
						= false) Then
				Me.OnRANKINGChanging(value)
				Me.SendPropertyChanging
				Me._RANKING = value
				Me.SendPropertyChanged("RANKING")
				Me.OnRANKINGChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_EXCHANGES_DESK_EXCHANGES_CLEARERS", Storage:="_DESK_EXCHANGES_CLEARERS", ThisKey:="ACCOUNT_DESK_ID,EXCHANGE_ID,TRADE_CLASS_SHORT", OtherKey:="ACCOUNT_DESK_ID,EXCHANGE_ID,TRADE_CLASS_SHORT"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7, EmitDefaultValue:=false)>  _
	Public Property DESK_EXCHANGES_CLEARERS() As EntitySet(Of DESK_EXCHANGES_CLEARERS)
		Get
			If (Me.serializing  _
						AndAlso (Me._DESK_EXCHANGES_CLEARERS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._DESK_EXCHANGES_CLEARERS
		End Get
		Set
			Me._DESK_EXCHANGES_CLEARERS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADE_CLASSES_DESK_EXCHANGES", Storage:="_DESK_TRADE_CLASSES", ThisKey:="ACCOUNT_DESK_ID,TRADE_CLASS_SHORT", OtherKey:="ACCOUNT_DESK_ID,TRADE_CLASS_SHORT", IsForeignKey:=true)>  _
	Public Property DESK_TRADE_CLASSES() As DESK_TRADE_CLASSES
		Get
			Return Me._DESK_TRADE_CLASSES.Entity
		End Get
		Set
			Dim previousValue As DESK_TRADE_CLASSES = Me._DESK_TRADE_CLASSES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DESK_TRADE_CLASSES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DESK_TRADE_CLASSES.Entity = Nothing
					previousValue.DESK_EXCHANGES.Remove(Me)
				End If
				Me._DESK_TRADE_CLASSES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_EXCHANGES.Add(Me)
					Me._ACCOUNT_DESK_ID = value.ACCOUNT_DESK_ID
					Me._TRADE_CLASS_SHORT = value.TRADE_CLASS_SHORT
				Else
					Me._ACCOUNT_DESK_ID = CType(Nothing, Integer)
					Me._TRADE_CLASS_SHORT = CType(Nothing, Char)
				End If
				Me.SendPropertyChanged("DESK_TRADE_CLASSES")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EXCHANGES_DESK_EXCHANGES", Storage:="_EXCHANGES", ThisKey:="EXCHANGE_ID", OtherKey:="EXCHANGE_ID", IsForeignKey:=true)>  _
	Public Property EXCHANGES() As EXCHANGES
		Get
			Return Me._EXCHANGES.Entity
		End Get
		Set
			Dim previousValue As EXCHANGES = Me._EXCHANGES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EXCHANGES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EXCHANGES.Entity = Nothing
					previousValue.DESK_EXCHANGES.Remove(Me)
				End If
				Me._EXCHANGES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_EXCHANGES.Add(Me)
					Me._EXCHANGE_ID = value.EXCHANGE_ID
				Else
					Me._EXCHANGE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("EXCHANGES")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DESK_EXCHANGES_CLEARERS(ByVal entity As DESK_EXCHANGES_CLEARERS)
		Me.SendPropertyChanging
		entity.DESK_EXCHANGES = Me
	End Sub
	
	Private Sub detach_DESK_EXCHANGES_CLEARERS(ByVal entity As DESK_EXCHANGES_CLEARERS)
		Me.SendPropertyChanging
		entity.DESK_EXCHANGES = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._DESK_EXCHANGES_CLEARERS = New EntitySet(Of DESK_EXCHANGES_CLEARERS)(AddressOf Me.attach_DESK_EXCHANGES_CLEARERS, AddressOf Me.detach_DESK_EXCHANGES_CLEARERS)
		Me._DESK_TRADE_CLASSES = CType(Nothing, EntityRef(Of DESK_TRADE_CLASSES))
		Me._EXCHANGES = CType(Nothing, EntityRef(Of EXCHANGES))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DESK_EXCHANGES_CLEARERS"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class DESK_EXCHANGES_CLEARERS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ACCOUNT_DESK_ID As Integer
	
	Private _EXCHANGE_ID As Integer
	
	Private _ACCOUNT_ID As Integer
	
	Private _TRADE_CLASS_SHORT As Char
	
	Private _CLEARER_ACCOUNT As String
	
	Private _CLEARER_EXTRA1 As String
	
	Private _CLEARER_EXTRA2 As String
	
	Private _CLEARER_EXTRA3 As String
	
	Private _ACTIVE As Boolean
	
	Private _MAIN As Boolean
	
	Private _FORCE_TO_OTC As Boolean
	
	Private _ISDA_ID As Integer
	
	Private _ACCOUNTS As EntityRef(Of ACCOUNTS)
	
	Private _DESK_EXCHANGES As EntityRef(Of DESK_EXCHANGES)
	
	Private _ISDA_TYPES As EntityRef(Of ISDA_TYPES)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnACCOUNT_DESK_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_DESK_IDChanged()
    End Sub
    Partial Private Sub OnEXCHANGE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEXCHANGE_IDChanged()
    End Sub
    Partial Private Sub OnACCOUNT_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_IDChanged()
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanging(value As Char)
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanged()
    End Sub
    Partial Private Sub OnCLEARER_ACCOUNTChanging(value As String)
    End Sub
    Partial Private Sub OnCLEARER_ACCOUNTChanged()
    End Sub
    Partial Private Sub OnCLEARER_EXTRA1Changing(value As String)
    End Sub
    Partial Private Sub OnCLEARER_EXTRA1Changed()
    End Sub
    Partial Private Sub OnCLEARER_EXTRA2Changing(value As String)
    End Sub
    Partial Private Sub OnCLEARER_EXTRA2Changed()
    End Sub
    Partial Private Sub OnCLEARER_EXTRA3Changing(value As String)
    End Sub
    Partial Private Sub OnCLEARER_EXTRA3Changed()
    End Sub
    Partial Private Sub OnACTIVEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnACTIVEChanged()
    End Sub
    Partial Private Sub OnMAINChanging(value As Boolean)
    End Sub
    Partial Private Sub OnMAINChanged()
    End Sub
    Partial Private Sub OnFORCE_TO_OTCChanging(value As Boolean)
    End Sub
    Partial Private Sub OnFORCE_TO_OTCChanged()
    End Sub
    Partial Private Sub OnISDA_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnISDA_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_DESK_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ACCOUNT_DESK_ID() As Integer
		Get
			Return Me._ACCOUNT_DESK_ID
		End Get
		Set
			If ((Me._ACCOUNT_DESK_ID = value)  _
						= false) Then
				If Me._DESK_EXCHANGES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACCOUNT_DESK_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_DESK_ID = value
				Me.SendPropertyChanged("ACCOUNT_DESK_ID")
				Me.OnACCOUNT_DESK_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property EXCHANGE_ID() As Integer
		Get
			Return Me._EXCHANGE_ID
		End Get
		Set
			If ((Me._EXCHANGE_ID = value)  _
						= false) Then
				If Me._DESK_EXCHANGES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEXCHANGE_IDChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_ID = value
				Me.SendPropertyChanged("EXCHANGE_ID")
				Me.OnEXCHANGE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property ACCOUNT_ID() As Integer
		Get
			Return Me._ACCOUNT_ID
		End Get
		Set
			If ((Me._ACCOUNT_ID = value)  _
						= false) Then
				If Me._ACCOUNTS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACCOUNT_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_ID = value
				Me.SendPropertyChanged("ACCOUNT_ID")
				Me.OnACCOUNT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_CLASS_SHORT", DbType:="Char(1) NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property TRADE_CLASS_SHORT() As Char
		Get
			Return Me._TRADE_CLASS_SHORT
		End Get
		Set
			If ((Me._TRADE_CLASS_SHORT = value)  _
						= false) Then
				If Me._DESK_EXCHANGES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTRADE_CLASS_SHORTChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_CLASS_SHORT = value
				Me.SendPropertyChanged("TRADE_CLASS_SHORT")
				Me.OnTRADE_CLASS_SHORTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLEARER_ACCOUNT", DbType:="VarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property CLEARER_ACCOUNT() As String
		Get
			Return Me._CLEARER_ACCOUNT
		End Get
		Set
			If (String.Equals(Me._CLEARER_ACCOUNT, value) = false) Then
				Me.OnCLEARER_ACCOUNTChanging(value)
				Me.SendPropertyChanging
				Me._CLEARER_ACCOUNT = value
				Me.SendPropertyChanged("CLEARER_ACCOUNT")
				Me.OnCLEARER_ACCOUNTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLEARER_EXTRA1", DbType:="VarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property CLEARER_EXTRA1() As String
		Get
			Return Me._CLEARER_EXTRA1
		End Get
		Set
			If (String.Equals(Me._CLEARER_EXTRA1, value) = false) Then
				Me.OnCLEARER_EXTRA1Changing(value)
				Me.SendPropertyChanging
				Me._CLEARER_EXTRA1 = value
				Me.SendPropertyChanged("CLEARER_EXTRA1")
				Me.OnCLEARER_EXTRA1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLEARER_EXTRA2", DbType:="VarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property CLEARER_EXTRA2() As String
		Get
			Return Me._CLEARER_EXTRA2
		End Get
		Set
			If (String.Equals(Me._CLEARER_EXTRA2, value) = false) Then
				Me.OnCLEARER_EXTRA2Changing(value)
				Me.SendPropertyChanging
				Me._CLEARER_EXTRA2 = value
				Me.SendPropertyChanged("CLEARER_EXTRA2")
				Me.OnCLEARER_EXTRA2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLEARER_EXTRA3", DbType:="VarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property CLEARER_EXTRA3() As String
		Get
			Return Me._CLEARER_EXTRA3
		End Get
		Set
			If (String.Equals(Me._CLEARER_EXTRA3, value) = false) Then
				Me.OnCLEARER_EXTRA3Changing(value)
				Me.SendPropertyChanging
				Me._CLEARER_EXTRA3 = value
				Me.SendPropertyChanged("CLEARER_EXTRA3")
				Me.OnCLEARER_EXTRA3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACTIVE", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property ACTIVE() As Boolean
		Get
			Return Me._ACTIVE
		End Get
		Set
			If ((Me._ACTIVE = value)  _
						= false) Then
				Me.OnACTIVEChanging(value)
				Me.SendPropertyChanging
				Me._ACTIVE = value
				Me.SendPropertyChanged("ACTIVE")
				Me.OnACTIVEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MAIN", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10)>  _
	Public Property MAIN() As Boolean
		Get
			Return Me._MAIN
		End Get
		Set
			If ((Me._MAIN = value)  _
						= false) Then
				Me.OnMAINChanging(value)
				Me.SendPropertyChanging
				Me._MAIN = value
				Me.SendPropertyChanged("MAIN")
				Me.OnMAINChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FORCE_TO_OTC", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=11)>  _
	Public Property FORCE_TO_OTC() As Boolean
		Get
			Return Me._FORCE_TO_OTC
		End Get
		Set
			If ((Me._FORCE_TO_OTC = value)  _
						= false) Then
				Me.OnFORCE_TO_OTCChanging(value)
				Me.SendPropertyChanging
				Me._FORCE_TO_OTC = value
				Me.SendPropertyChanged("FORCE_TO_OTC")
				Me.OnFORCE_TO_OTCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ISDA_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=12)>  _
	Public Property ISDA_ID() As Integer
		Get
			Return Me._ISDA_ID
		End Get
		Set
			If ((Me._ISDA_ID = value)  _
						= false) Then
				If Me._ISDA_TYPES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnISDA_IDChanging(value)
				Me.SendPropertyChanging
				Me._ISDA_ID = value
				Me.SendPropertyChanged("ISDA_ID")
				Me.OnISDA_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_DESK_EXCHANGES_CLEARERS", Storage:="_ACCOUNTS", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNTS() As ACCOUNTS
		Get
			Return Me._ACCOUNTS.Entity
		End Get
		Set
			Dim previousValue As ACCOUNTS = Me._ACCOUNTS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNTS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNTS.Entity = Nothing
					previousValue.DESK_EXCHANGES_CLEARERS.Remove(Me)
				End If
				Me._ACCOUNTS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_EXCHANGES_CLEARERS.Add(Me)
					Me._ACCOUNT_ID = value.ACCOUNT_ID
				Else
					Me._ACCOUNT_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNTS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_EXCHANGES_DESK_EXCHANGES_CLEARERS", Storage:="_DESK_EXCHANGES", ThisKey:="ACCOUNT_DESK_ID,EXCHANGE_ID,TRADE_CLASS_SHORT", OtherKey:="ACCOUNT_DESK_ID,EXCHANGE_ID,TRADE_CLASS_SHORT", IsForeignKey:=true)>  _
	Public Property DESK_EXCHANGES() As DESK_EXCHANGES
		Get
			Return Me._DESK_EXCHANGES.Entity
		End Get
		Set
			Dim previousValue As DESK_EXCHANGES = Me._DESK_EXCHANGES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DESK_EXCHANGES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DESK_EXCHANGES.Entity = Nothing
					previousValue.DESK_EXCHANGES_CLEARERS.Remove(Me)
				End If
				Me._DESK_EXCHANGES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_EXCHANGES_CLEARERS.Add(Me)
					Me._ACCOUNT_DESK_ID = value.ACCOUNT_DESK_ID
					Me._EXCHANGE_ID = value.EXCHANGE_ID
					Me._TRADE_CLASS_SHORT = value.TRADE_CLASS_SHORT
				Else
					Me._ACCOUNT_DESK_ID = CType(Nothing, Integer)
					Me._EXCHANGE_ID = CType(Nothing, Integer)
					Me._TRADE_CLASS_SHORT = CType(Nothing, Char)
				End If
				Me.SendPropertyChanged("DESK_EXCHANGES")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ISDA_TYPES_DESK_EXCHANGES_CLEARERS", Storage:="_ISDA_TYPES", ThisKey:="ISDA_ID", OtherKey:="ISDA_ID", IsForeignKey:=true)>  _
	Public Property ISDA_TYPES() As ISDA_TYPES
		Get
			Return Me._ISDA_TYPES.Entity
		End Get
		Set
			Dim previousValue As ISDA_TYPES = Me._ISDA_TYPES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ISDA_TYPES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ISDA_TYPES.Entity = Nothing
					previousValue.DESK_EXCHANGES_CLEARERS.Remove(Me)
				End If
				Me._ISDA_TYPES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_EXCHANGES_CLEARERS.Add(Me)
					Me._ISDA_ID = value.ISDA_ID
				Else
					Me._ISDA_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ISDA_TYPES")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._ACCOUNTS = CType(Nothing, EntityRef(Of ACCOUNTS))
		Me._DESK_EXCHANGES = CType(Nothing, EntityRef(Of DESK_EXCHANGES))
		Me._ISDA_TYPES = CType(Nothing, EntityRef(Of ISDA_TYPES))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DESK_QUALIFIER"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class DESK_QUALIFIER
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DESK_QUALIFIER As Short
	
	Private _DESK_QUALIFIER_DESCR As String
	
	Private _ACCOUNT_DESKS As EntitySet(Of ACCOUNT_DESKS)
	
	Private _DESK_QUALIFIER2 As EntityRef(Of DESK_QUALIFIER)
	
	Private _DESK_QUALIFIER1 As EntityRef(Of DESK_QUALIFIER)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDESK_QUALIFIERChanging(value As Short)
    End Sub
    Partial Private Sub OnDESK_QUALIFIERChanged()
    End Sub
    Partial Private Sub OnDESK_QUALIFIER_DESCRChanging(value As String)
    End Sub
    Partial Private Sub OnDESK_QUALIFIER_DESCRChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_QUALIFIER", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property DESK_QUALIFIER() As Short
		Get
			Return Me._DESK_QUALIFIER
		End Get
		Set
			If ((Me._DESK_QUALIFIER = value)  _
						= false) Then
				If Me._DESK_QUALIFIER1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDESK_QUALIFIERChanging(value)
				Me.SendPropertyChanging
				Me._DESK_QUALIFIER = value
				Me.SendPropertyChanged("DESK_QUALIFIER")
				Me.OnDESK_QUALIFIERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_QUALIFIER_DESCR", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property DESK_QUALIFIER_DESCR() As String
		Get
			Return Me._DESK_QUALIFIER_DESCR
		End Get
		Set
			If (String.Equals(Me._DESK_QUALIFIER_DESCR, value) = false) Then
				Me.OnDESK_QUALIFIER_DESCRChanging(value)
				Me.SendPropertyChanging
				Me._DESK_QUALIFIER_DESCR = value
				Me.SendPropertyChanged("DESK_QUALIFIER_DESCR")
				Me.OnDESK_QUALIFIER_DESCRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_QUALIFIER_ACCOUNT_DESKS", Storage:="_ACCOUNT_DESKS", ThisKey:="DESK_QUALIFIER", OtherKey:="DESK_QUALIFIER"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3, EmitDefaultValue:=false)>  _
	Public Property ACCOUNT_DESKS() As EntitySet(Of ACCOUNT_DESKS)
		Get
			If (Me.serializing  _
						AndAlso (Me._ACCOUNT_DESKS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ACCOUNT_DESKS
		End Get
		Set
			Me._ACCOUNT_DESKS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_QUALIFIER_DESK_QUALIFIER", Storage:="_DESK_QUALIFIER2", ThisKey:="DESK_QUALIFIER", OtherKey:="DESK_QUALIFIER", IsUnique:=true, IsForeignKey:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4, EmitDefaultValue:=false)>  _
	Public Property DESK_QUALIFIER2() As DESK_QUALIFIER
		Get
			If (Me.serializing  _
						AndAlso (Me._DESK_QUALIFIER2.HasLoadedOrAssignedValue = false)) Then
				Return Nothing
			End If
			Return Me._DESK_QUALIFIER2.Entity
		End Get
		Set
			Dim previousValue As DESK_QUALIFIER = Me._DESK_QUALIFIER2.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DESK_QUALIFIER2.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DESK_QUALIFIER2.Entity = Nothing
					previousValue.DESK_QUALIFIER1 = Nothing
				End If
				Me._DESK_QUALIFIER2.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.DESK_QUALIFIER1 = Me
				End If
				Me.SendPropertyChanged("DESK_QUALIFIER2")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_QUALIFIER_DESK_QUALIFIER", Storage:="_DESK_QUALIFIER1", ThisKey:="DESK_QUALIFIER", OtherKey:="DESK_QUALIFIER", IsForeignKey:=true)>  _
	Public Property DESK_QUALIFIER1() As DESK_QUALIFIER
		Get
			Return Me._DESK_QUALIFIER1.Entity
		End Get
		Set
			Dim previousValue As DESK_QUALIFIER = Me._DESK_QUALIFIER1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DESK_QUALIFIER1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DESK_QUALIFIER1.Entity = Nothing
					previousValue.DESK_QUALIFIER2 = Nothing
				End If
				Me._DESK_QUALIFIER1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_QUALIFIER2 = Me
					Me._DESK_QUALIFIER = value.DESK_QUALIFIER
				Else
					Me._DESK_QUALIFIER = CType(Nothing, Short)
				End If
				Me.SendPropertyChanged("DESK_QUALIFIER1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ACCOUNT_DESKS(ByVal entity As ACCOUNT_DESKS)
		Me.SendPropertyChanging
		entity.DESK_QUALIFIER1 = Me
	End Sub
	
	Private Sub detach_ACCOUNT_DESKS(ByVal entity As ACCOUNT_DESKS)
		Me.SendPropertyChanging
		entity.DESK_QUALIFIER1 = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._ACCOUNT_DESKS = New EntitySet(Of ACCOUNT_DESKS)(AddressOf Me.attach_ACCOUNT_DESKS, AddressOf Me.detach_ACCOUNT_DESKS)
		Me._DESK_QUALIFIER2 = CType(Nothing, EntityRef(Of DESK_QUALIFIER))
		Me._DESK_QUALIFIER1 = CType(Nothing, EntityRef(Of DESK_QUALIFIER))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DESK_TRADE_CLASSES"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class DESK_TRADE_CLASSES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ACCOUNT_DESK_ID As Integer
	
	Private _TRADE_CLASS_SHORT As Char
	
	Private _ACTIVE As Boolean
	
	Private _BROKER_ID As Integer
	
	Private _DESK_EXCHANGES As EntitySet(Of DESK_EXCHANGES)
	
	Private _ACCOUNTS As EntityRef(Of ACCOUNTS)
	
	Private _ACCOUNT_DESKS As EntityRef(Of ACCOUNT_DESKS)
	
	Private _TRADE_CLASSES As EntityRef(Of TRADE_CLASSES)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnACCOUNT_DESK_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_DESK_IDChanged()
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanging(value As Char)
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanged()
    End Sub
    Partial Private Sub OnACTIVEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnACTIVEChanged()
    End Sub
    Partial Private Sub OnBROKER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBROKER_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_DESK_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ACCOUNT_DESK_ID() As Integer
		Get
			Return Me._ACCOUNT_DESK_ID
		End Get
		Set
			If ((Me._ACCOUNT_DESK_ID = value)  _
						= false) Then
				If Me._ACCOUNT_DESKS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACCOUNT_DESK_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_DESK_ID = value
				Me.SendPropertyChanged("ACCOUNT_DESK_ID")
				Me.OnACCOUNT_DESK_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_CLASS_SHORT", DbType:="Char(1) NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property TRADE_CLASS_SHORT() As Char
		Get
			Return Me._TRADE_CLASS_SHORT
		End Get
		Set
			If ((Me._TRADE_CLASS_SHORT = value)  _
						= false) Then
				If Me._TRADE_CLASSES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTRADE_CLASS_SHORTChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_CLASS_SHORT = value
				Me.SendPropertyChanged("TRADE_CLASS_SHORT")
				Me.OnTRADE_CLASS_SHORTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACTIVE", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property ACTIVE() As Boolean
		Get
			Return Me._ACTIVE
		End Get
		Set
			If ((Me._ACTIVE = value)  _
						= false) Then
				Me.OnACTIVEChanging(value)
				Me.SendPropertyChanging
				Me._ACTIVE = value
				Me.SendPropertyChanged("ACTIVE")
				Me.OnACTIVEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BROKER_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property BROKER_ID() As Integer
		Get
			Return Me._BROKER_ID
		End Get
		Set
			If ((Me._BROKER_ID = value)  _
						= false) Then
				If Me._ACCOUNTS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBROKER_IDChanging(value)
				Me.SendPropertyChanging
				Me._BROKER_ID = value
				Me.SendPropertyChanged("BROKER_ID")
				Me.OnBROKER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADE_CLASSES_DESK_EXCHANGES", Storage:="_DESK_EXCHANGES", ThisKey:="ACCOUNT_DESK_ID,TRADE_CLASS_SHORT", OtherKey:="ACCOUNT_DESK_ID,TRADE_CLASS_SHORT"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5, EmitDefaultValue:=false)>  _
	Public Property DESK_EXCHANGES() As EntitySet(Of DESK_EXCHANGES)
		Get
			If (Me.serializing  _
						AndAlso (Me._DESK_EXCHANGES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._DESK_EXCHANGES
		End Get
		Set
			Me._DESK_EXCHANGES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_DESK_TRADE_CLASSES", Storage:="_ACCOUNTS", ThisKey:="BROKER_ID", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNTS() As ACCOUNTS
		Get
			Return Me._ACCOUNTS.Entity
		End Get
		Set
			Dim previousValue As ACCOUNTS = Me._ACCOUNTS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNTS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNTS.Entity = Nothing
					previousValue.DESK_TRADE_CLASSES.Remove(Me)
				End If
				Me._ACCOUNTS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADE_CLASSES.Add(Me)
					Me._BROKER_ID = value.ACCOUNT_ID
				Else
					Me._BROKER_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNTS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESKS_DESK_TRADE_CLASSES", Storage:="_ACCOUNT_DESKS", ThisKey:="ACCOUNT_DESK_ID", OtherKey:="ACCOUNT_DESK_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT_DESKS() As ACCOUNT_DESKS
		Get
			Return Me._ACCOUNT_DESKS.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT_DESKS = Me._ACCOUNT_DESKS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT_DESKS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT_DESKS.Entity = Nothing
					previousValue.DESK_TRADE_CLASSES.Remove(Me)
				End If
				Me._ACCOUNT_DESKS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADE_CLASSES.Add(Me)
					Me._ACCOUNT_DESK_ID = value.ACCOUNT_DESK_ID
				Else
					Me._ACCOUNT_DESK_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNT_DESKS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASSES_DESK_TRADE_CLASSES", Storage:="_TRADE_CLASSES", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="TRADE_CLASS_SHORT", IsForeignKey:=true)>  _
	Public Property TRADE_CLASSES() As TRADE_CLASSES
		Get
			Return Me._TRADE_CLASSES.Entity
		End Get
		Set
			Dim previousValue As TRADE_CLASSES = Me._TRADE_CLASSES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TRADE_CLASSES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TRADE_CLASSES.Entity = Nothing
					previousValue.DESK_TRADE_CLASSES.Remove(Me)
				End If
				Me._TRADE_CLASSES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADE_CLASSES.Add(Me)
					Me._TRADE_CLASS_SHORT = value.TRADE_CLASS_SHORT
				Else
					Me._TRADE_CLASS_SHORT = CType(Nothing, Char)
				End If
				Me.SendPropertyChanged("TRADE_CLASSES")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DESK_EXCHANGES(ByVal entity As DESK_EXCHANGES)
		Me.SendPropertyChanging
		entity.DESK_TRADE_CLASSES = Me
	End Sub
	
	Private Sub detach_DESK_EXCHANGES(ByVal entity As DESK_EXCHANGES)
		Me.SendPropertyChanging
		entity.DESK_TRADE_CLASSES = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._DESK_EXCHANGES = New EntitySet(Of DESK_EXCHANGES)(AddressOf Me.attach_DESK_EXCHANGES, AddressOf Me.detach_DESK_EXCHANGES)
		Me._ACCOUNTS = CType(Nothing, EntityRef(Of ACCOUNTS))
		Me._ACCOUNT_DESKS = CType(Nothing, EntityRef(Of ACCOUNT_DESKS))
		Me._TRADE_CLASSES = CType(Nothing, EntityRef(Of TRADE_CLASSES))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DESK_TRADE_CONFOS"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class DESK_TRADE_CONFOS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ACCOUNT_DESK_ID As Integer
	
	Private _CONTACT_ID As Integer
	
	Private _SEND_TRADE_EMAIL As Boolean
	
	Private _SEND_TRADE_RECAP As Boolean
	
	Private _SEND_TRADE_SMS As Boolean
	
	Private _ACCOUNT_DESKS As EntityRef(Of ACCOUNT_DESKS)
	
	Private _CONTACTS As EntityRef(Of CONTACTS)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnACCOUNT_DESK_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_DESK_IDChanged()
    End Sub
    Partial Private Sub OnCONTACT_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCONTACT_IDChanged()
    End Sub
    Partial Private Sub OnSEND_TRADE_EMAILChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSEND_TRADE_EMAILChanged()
    End Sub
    Partial Private Sub OnSEND_TRADE_RECAPChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSEND_TRADE_RECAPChanged()
    End Sub
    Partial Private Sub OnSEND_TRADE_SMSChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSEND_TRADE_SMSChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_DESK_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ACCOUNT_DESK_ID() As Integer
		Get
			Return Me._ACCOUNT_DESK_ID
		End Get
		Set
			If ((Me._ACCOUNT_DESK_ID = value)  _
						= false) Then
				If Me._ACCOUNT_DESKS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACCOUNT_DESK_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_DESK_ID = value
				Me.SendPropertyChanged("ACCOUNT_DESK_ID")
				Me.OnACCOUNT_DESK_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONTACT_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property CONTACT_ID() As Integer
		Get
			Return Me._CONTACT_ID
		End Get
		Set
			If ((Me._CONTACT_ID = value)  _
						= false) Then
				If Me._CONTACTS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCONTACT_IDChanging(value)
				Me.SendPropertyChanging
				Me._CONTACT_ID = value
				Me.SendPropertyChanged("CONTACT_ID")
				Me.OnCONTACT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SEND_TRADE_EMAIL", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property SEND_TRADE_EMAIL() As Boolean
		Get
			Return Me._SEND_TRADE_EMAIL
		End Get
		Set
			If ((Me._SEND_TRADE_EMAIL = value)  _
						= false) Then
				Me.OnSEND_TRADE_EMAILChanging(value)
				Me.SendPropertyChanging
				Me._SEND_TRADE_EMAIL = value
				Me.SendPropertyChanged("SEND_TRADE_EMAIL")
				Me.OnSEND_TRADE_EMAILChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SEND_TRADE_RECAP", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property SEND_TRADE_RECAP() As Boolean
		Get
			Return Me._SEND_TRADE_RECAP
		End Get
		Set
			If ((Me._SEND_TRADE_RECAP = value)  _
						= false) Then
				Me.OnSEND_TRADE_RECAPChanging(value)
				Me.SendPropertyChanging
				Me._SEND_TRADE_RECAP = value
				Me.SendPropertyChanged("SEND_TRADE_RECAP")
				Me.OnSEND_TRADE_RECAPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SEND_TRADE_SMS", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property SEND_TRADE_SMS() As Boolean
		Get
			Return Me._SEND_TRADE_SMS
		End Get
		Set
			If ((Me._SEND_TRADE_SMS = value)  _
						= false) Then
				Me.OnSEND_TRADE_SMSChanging(value)
				Me.SendPropertyChanging
				Me._SEND_TRADE_SMS = value
				Me.SendPropertyChanged("SEND_TRADE_SMS")
				Me.OnSEND_TRADE_SMSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESKS_DESK_TRADE_CONFOS", Storage:="_ACCOUNT_DESKS", ThisKey:="ACCOUNT_DESK_ID", OtherKey:="ACCOUNT_DESK_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT_DESKS() As ACCOUNT_DESKS
		Get
			Return Me._ACCOUNT_DESKS.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT_DESKS = Me._ACCOUNT_DESKS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT_DESKS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT_DESKS.Entity = Nothing
					previousValue.DESK_TRADE_CONFOS.Remove(Me)
				End If
				Me._ACCOUNT_DESKS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADE_CONFOS.Add(Me)
					Me._ACCOUNT_DESK_ID = value.ACCOUNT_DESK_ID
				Else
					Me._ACCOUNT_DESK_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNT_DESKS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONTACTS_DESK_TRADE_CONFOS", Storage:="_CONTACTS", ThisKey:="CONTACT_ID", OtherKey:="CONTACT_ID", IsForeignKey:=true)>  _
	Public Property CONTACTS() As CONTACTS
		Get
			Return Me._CONTACTS.Entity
		End Get
		Set
			Dim previousValue As CONTACTS = Me._CONTACTS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CONTACTS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CONTACTS.Entity = Nothing
					previousValue.DESK_TRADE_CONFOS.Remove(Me)
				End If
				Me._CONTACTS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADE_CONFOS.Add(Me)
					Me._CONTACT_ID = value.CONTACT_ID
				Else
					Me._CONTACT_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CONTACTS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._ACCOUNT_DESKS = CType(Nothing, EntityRef(Of ACCOUNT_DESKS))
		Me._CONTACTS = CType(Nothing, EntityRef(Of CONTACTS))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DESK_TRADER_VOICE"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class DESK_TRADER_VOICE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DESK_TRADER_ID As Integer
	
	Private _TRADE_CLASS_SHORT As Char
	
	Private _VESSEL_CLASS_ID As Integer
	
	Private _ROUTE_ID As Integer
	
	Private _VOICE_SUBSCRIBE As Boolean
	
	Private _DESK_TRADERS As EntityRef(Of DESK_TRADERS)
	
	Private _ROUTES As EntityRef(Of ROUTES)
	
	Private _TRADE_CLASSES As EntityRef(Of TRADE_CLASSES)
	
	Private _VESSEL_CLASS As EntityRef(Of VESSEL_CLASS)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDESK_TRADER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDESK_TRADER_IDChanged()
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanging(value As Char)
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanged()
    End Sub
    Partial Private Sub OnVESSEL_CLASS_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnVESSEL_CLASS_IDChanged()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnVOICE_SUBSCRIBEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnVOICE_SUBSCRIBEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_TRADER_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property DESK_TRADER_ID() As Integer
		Get
			Return Me._DESK_TRADER_ID
		End Get
		Set
			If ((Me._DESK_TRADER_ID = value)  _
						= false) Then
				If Me._DESK_TRADERS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDESK_TRADER_IDChanging(value)
				Me.SendPropertyChanging
				Me._DESK_TRADER_ID = value
				Me.SendPropertyChanged("DESK_TRADER_ID")
				Me.OnDESK_TRADER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_CLASS_SHORT", DbType:="Char(1) NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property TRADE_CLASS_SHORT() As Char
		Get
			Return Me._TRADE_CLASS_SHORT
		End Get
		Set
			If ((Me._TRADE_CLASS_SHORT = value)  _
						= false) Then
				If Me._TRADE_CLASSES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTRADE_CLASS_SHORTChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_CLASS_SHORT = value
				Me.SendPropertyChanged("TRADE_CLASS_SHORT")
				Me.OnTRADE_CLASS_SHORTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VESSEL_CLASS_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property VESSEL_CLASS_ID() As Integer
		Get
			Return Me._VESSEL_CLASS_ID
		End Get
		Set
			If ((Me._VESSEL_CLASS_ID = value)  _
						= false) Then
				If Me._VESSEL_CLASS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnVESSEL_CLASS_IDChanging(value)
				Me.SendPropertyChanging
				Me._VESSEL_CLASS_ID = value
				Me.SendPropertyChanged("VESSEL_CLASS_ID")
				Me.OnVESSEL_CLASS_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If Me._ROUTES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VOICE_SUBSCRIBE", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property VOICE_SUBSCRIBE() As Boolean
		Get
			Return Me._VOICE_SUBSCRIBE
		End Get
		Set
			If ((Me._VOICE_SUBSCRIBE = value)  _
						= false) Then
				Me.OnVOICE_SUBSCRIBEChanging(value)
				Me.SendPropertyChanging
				Me._VOICE_SUBSCRIBE = value
				Me.SendPropertyChanged("VOICE_SUBSCRIBE")
				Me.OnVOICE_SUBSCRIBEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADERS_DESK_TRADER_VOICE", Storage:="_DESK_TRADERS", ThisKey:="DESK_TRADER_ID", OtherKey:="DESK_TRADER_ID", IsForeignKey:=true)>  _
	Public Property DESK_TRADERS() As DESK_TRADERS
		Get
			Return Me._DESK_TRADERS.Entity
		End Get
		Set
			Dim previousValue As DESK_TRADERS = Me._DESK_TRADERS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DESK_TRADERS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DESK_TRADERS.Entity = Nothing
					previousValue.DESK_TRADER_VOICE.Remove(Me)
				End If
				Me._DESK_TRADERS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADER_VOICE.Add(Me)
					Me._DESK_TRADER_ID = value.DESK_TRADER_ID
				Else
					Me._DESK_TRADER_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DESK_TRADERS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_DESK_TRADER_VOICE", Storage:="_ROUTES", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTES() As ROUTES
		Get
			Return Me._ROUTES.Entity
		End Get
		Set
			Dim previousValue As ROUTES = Me._ROUTES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTES.Entity = Nothing
					previousValue.DESK_TRADER_VOICE.Remove(Me)
				End If
				Me._ROUTES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADER_VOICE.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTES")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASSES_DESK_TRADER_VOICE", Storage:="_TRADE_CLASSES", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="TRADE_CLASS_SHORT", IsForeignKey:=true)>  _
	Public Property TRADE_CLASSES() As TRADE_CLASSES
		Get
			Return Me._TRADE_CLASSES.Entity
		End Get
		Set
			Dim previousValue As TRADE_CLASSES = Me._TRADE_CLASSES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TRADE_CLASSES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TRADE_CLASSES.Entity = Nothing
					previousValue.DESK_TRADER_VOICE.Remove(Me)
				End If
				Me._TRADE_CLASSES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADER_VOICE.Add(Me)
					Me._TRADE_CLASS_SHORT = value.TRADE_CLASS_SHORT
				Else
					Me._TRADE_CLASS_SHORT = CType(Nothing, Char)
				End If
				Me.SendPropertyChanged("TRADE_CLASSES")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="VESSEL_CLASS_DESK_TRADER_VOICE", Storage:="_VESSEL_CLASS", ThisKey:="VESSEL_CLASS_ID", OtherKey:="VESSEL_CLASS_ID", IsForeignKey:=true)>  _
	Public Property VESSEL_CLASS() As VESSEL_CLASS
		Get
			Return Me._VESSEL_CLASS.Entity
		End Get
		Set
			Dim previousValue As VESSEL_CLASS = Me._VESSEL_CLASS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._VESSEL_CLASS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._VESSEL_CLASS.Entity = Nothing
					previousValue.DESK_TRADER_VOICE.Remove(Me)
				End If
				Me._VESSEL_CLASS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADER_VOICE.Add(Me)
					Me._VESSEL_CLASS_ID = value.VESSEL_CLASS_ID
				Else
					Me._VESSEL_CLASS_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("VESSEL_CLASS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._DESK_TRADERS = CType(Nothing, EntityRef(Of DESK_TRADERS))
		Me._ROUTES = CType(Nothing, EntityRef(Of ROUTES))
		Me._TRADE_CLASSES = CType(Nothing, EntityRef(Of TRADE_CLASSES))
		Me._VESSEL_CLASS = CType(Nothing, EntityRef(Of VESSEL_CLASS))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DESK_TRADERS"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class DESK_TRADERS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DESK_TRADER_ID As Integer
	
	Private _ACCOUNT_DESK_ID As Integer
	
	Private _ACCOUNT_ID As Integer
	
	Private _CONTACT_ID As Integer
	
	Private _AUTHORISED As Boolean
	
	Private _AUTHORISATION_RECEIVED As Boolean
	
	Private _RECEIVED_WHEN As System.Nullable(Of Date)
	
	Private _EXPIRES_WHEN As System.Nullable(Of Date)
	
	Private _TRADE_AUTHORITY As Short
	
	Private _USERNAME As String
	
	Private _PASSWORD As String
	
	Private _EXPIRED As Boolean
	
	Private _OF_ID As String
	
	Private _OF_PASSWORD As String
	
	Private _IS_DESK_ADMIN As Boolean
	
	Private _SUSPENDED As Boolean
	
	Private _TOOLBAR_SHOW As Boolean
	
	Private _DEFAULT_MARKET As Char
	
	Private _DEFAULT_SHOW_NAMES As Boolean
	
	Private _GRID_MARKET_DEPTH As Integer
	
	Private _BID_COLOR As Integer
	
	Private _OFFER_COLOR As Integer
	
	Private _FONT_TYPE As Short
	
	Private _CHANGE_PSW As Boolean
	
	Private _AGREES_TO_STATEMENT As Boolean
	
	Private _INDICATIVES_VISIBLE As Boolean
	
	Private _ONE_CLICK_HIT As Boolean
	
	Private _DESK_TRADER_VOICE As EntitySet(Of DESK_TRADER_VOICE)
	
	Private _DESK_TRADERS_IM_SUBSCRIPTIONS As EntitySet(Of DESK_TRADERS_IM_SUBSCRIPTIONS)
	
	Private _LAYOUTS As EntitySet(Of LAYOUTS)
	
	Private _ORDERS_FFA As EntitySet(Of ORDERS_FFA)
	
	Private _ORDERS_FFA1 As EntitySet(Of ORDERS_FFA)
	
	Private _ORDERS_FFA2 As EntitySet(Of ORDERS_FFA)
	
	Private _TRADES_FFA As EntitySet(Of TRADES_FFA)
	
	Private _TRADES_FFA1 As EntitySet(Of TRADES_FFA)
	
	Private _ACCOUNT_DESKS As EntityRef(Of ACCOUNT_DESKS)
	
	Private _ACCOUNTS As EntityRef(Of ACCOUNTS)
	
	Private _CONTACTS As EntityRef(Of CONTACTS)
	
	Private _TRADE_AUTHORITIES As EntityRef(Of TRADE_AUTHORITIES)
	
	Private _TRADE_CLASSES As EntityRef(Of TRADE_CLASSES)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDESK_TRADER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDESK_TRADER_IDChanged()
    End Sub
    Partial Private Sub OnACCOUNT_DESK_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_DESK_IDChanged()
    End Sub
    Partial Private Sub OnACCOUNT_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_IDChanged()
    End Sub
    Partial Private Sub OnCONTACT_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCONTACT_IDChanged()
    End Sub
    Partial Private Sub OnAUTHORISEDChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAUTHORISEDChanged()
    End Sub
    Partial Private Sub OnAUTHORISATION_RECEIVEDChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAUTHORISATION_RECEIVEDChanged()
    End Sub
    Partial Private Sub OnRECEIVED_WHENChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnRECEIVED_WHENChanged()
    End Sub
    Partial Private Sub OnEXPIRES_WHENChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEXPIRES_WHENChanged()
    End Sub
    Partial Private Sub OnTRADE_AUTHORITYChanging(value As Short)
    End Sub
    Partial Private Sub OnTRADE_AUTHORITYChanged()
    End Sub
    Partial Private Sub OnUSERNAMEChanging(value As String)
    End Sub
    Partial Private Sub OnUSERNAMEChanged()
    End Sub
    Partial Private Sub OnPASSWORDChanging(value As String)
    End Sub
    Partial Private Sub OnPASSWORDChanged()
    End Sub
    Partial Private Sub OnEXPIREDChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEXPIREDChanged()
    End Sub
    Partial Private Sub OnOF_IDChanging(value As String)
    End Sub
    Partial Private Sub OnOF_IDChanged()
    End Sub
    Partial Private Sub OnOF_PASSWORDChanging(value As String)
    End Sub
    Partial Private Sub OnOF_PASSWORDChanged()
    End Sub
    Partial Private Sub OnIS_DESK_ADMINChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIS_DESK_ADMINChanged()
    End Sub
    Partial Private Sub OnSUSPENDEDChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSUSPENDEDChanged()
    End Sub
    Partial Private Sub OnTOOLBAR_SHOWChanging(value As Boolean)
    End Sub
    Partial Private Sub OnTOOLBAR_SHOWChanged()
    End Sub
    Partial Private Sub OnDEFAULT_MARKETChanging(value As Char)
    End Sub
    Partial Private Sub OnDEFAULT_MARKETChanged()
    End Sub
    Partial Private Sub OnDEFAULT_SHOW_NAMESChanging(value As Boolean)
    End Sub
    Partial Private Sub OnDEFAULT_SHOW_NAMESChanged()
    End Sub
    Partial Private Sub OnGRID_MARKET_DEPTHChanging(value As Integer)
    End Sub
    Partial Private Sub OnGRID_MARKET_DEPTHChanged()
    End Sub
    Partial Private Sub OnBID_COLORChanging(value As Integer)
    End Sub
    Partial Private Sub OnBID_COLORChanged()
    End Sub
    Partial Private Sub OnOFFER_COLORChanging(value As Integer)
    End Sub
    Partial Private Sub OnOFFER_COLORChanged()
    End Sub
    Partial Private Sub OnFONT_TYPEChanging(value As Short)
    End Sub
    Partial Private Sub OnFONT_TYPEChanged()
    End Sub
    Partial Private Sub OnCHANGE_PSWChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCHANGE_PSWChanged()
    End Sub
    Partial Private Sub OnAGREES_TO_STATEMENTChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAGREES_TO_STATEMENTChanged()
    End Sub
    Partial Private Sub OnINDICATIVES_VISIBLEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnINDICATIVES_VISIBLEChanged()
    End Sub
    Partial Private Sub OnONE_CLICK_HITChanging(value As Boolean)
    End Sub
    Partial Private Sub OnONE_CLICK_HITChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_TRADER_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property DESK_TRADER_ID() As Integer
		Get
			Return Me._DESK_TRADER_ID
		End Get
		Set
			If ((Me._DESK_TRADER_ID = value)  _
						= false) Then
				Me.OnDESK_TRADER_IDChanging(value)
				Me.SendPropertyChanging
				Me._DESK_TRADER_ID = value
				Me.SendPropertyChanged("DESK_TRADER_ID")
				Me.OnDESK_TRADER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_DESK_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property ACCOUNT_DESK_ID() As Integer
		Get
			Return Me._ACCOUNT_DESK_ID
		End Get
		Set
			If ((Me._ACCOUNT_DESK_ID = value)  _
						= false) Then
				If Me._ACCOUNT_DESKS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACCOUNT_DESK_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_DESK_ID = value
				Me.SendPropertyChanged("ACCOUNT_DESK_ID")
				Me.OnACCOUNT_DESK_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property ACCOUNT_ID() As Integer
		Get
			Return Me._ACCOUNT_ID
		End Get
		Set
			If ((Me._ACCOUNT_ID = value)  _
						= false) Then
				If Me._ACCOUNTS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACCOUNT_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_ID = value
				Me.SendPropertyChanged("ACCOUNT_ID")
				Me.OnACCOUNT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONTACT_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property CONTACT_ID() As Integer
		Get
			Return Me._CONTACT_ID
		End Get
		Set
			If ((Me._CONTACT_ID = value)  _
						= false) Then
				If Me._CONTACTS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCONTACT_IDChanging(value)
				Me.SendPropertyChanging
				Me._CONTACT_ID = value
				Me.SendPropertyChanged("CONTACT_ID")
				Me.OnCONTACT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AUTHORISED", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property AUTHORISED() As Boolean
		Get
			Return Me._AUTHORISED
		End Get
		Set
			If ((Me._AUTHORISED = value)  _
						= false) Then
				Me.OnAUTHORISEDChanging(value)
				Me.SendPropertyChanging
				Me._AUTHORISED = value
				Me.SendPropertyChanged("AUTHORISED")
				Me.OnAUTHORISEDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AUTHORISATION_RECEIVED", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property AUTHORISATION_RECEIVED() As Boolean
		Get
			Return Me._AUTHORISATION_RECEIVED
		End Get
		Set
			If ((Me._AUTHORISATION_RECEIVED = value)  _
						= false) Then
				Me.OnAUTHORISATION_RECEIVEDChanging(value)
				Me.SendPropertyChanging
				Me._AUTHORISATION_RECEIVED = value
				Me.SendPropertyChanged("AUTHORISATION_RECEIVED")
				Me.OnAUTHORISATION_RECEIVEDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RECEIVED_WHEN", DbType:="DateTime"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property RECEIVED_WHEN() As System.Nullable(Of Date)
		Get
			Return Me._RECEIVED_WHEN
		End Get
		Set
			If (Me._RECEIVED_WHEN.Equals(value) = false) Then
				Me.OnRECEIVED_WHENChanging(value)
				Me.SendPropertyChanging
				Me._RECEIVED_WHEN = value
				Me.SendPropertyChanged("RECEIVED_WHEN")
				Me.OnRECEIVED_WHENChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXPIRES_WHEN", DbType:="DateTime"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property EXPIRES_WHEN() As System.Nullable(Of Date)
		Get
			Return Me._EXPIRES_WHEN
		End Get
		Set
			If (Me._EXPIRES_WHEN.Equals(value) = false) Then
				Me.OnEXPIRES_WHENChanging(value)
				Me.SendPropertyChanging
				Me._EXPIRES_WHEN = value
				Me.SendPropertyChanged("EXPIRES_WHEN")
				Me.OnEXPIRES_WHENChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_AUTHORITY", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property TRADE_AUTHORITY() As Short
		Get
			Return Me._TRADE_AUTHORITY
		End Get
		Set
			If ((Me._TRADE_AUTHORITY = value)  _
						= false) Then
				If Me._TRADE_AUTHORITIES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTRADE_AUTHORITYChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_AUTHORITY = value
				Me.SendPropertyChanged("TRADE_AUTHORITY")
				Me.OnTRADE_AUTHORITYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_USERNAME", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10)>  _
	Public Property USERNAME() As String
		Get
			Return Me._USERNAME
		End Get
		Set
			If (String.Equals(Me._USERNAME, value) = false) Then
				Me.OnUSERNAMEChanging(value)
				Me.SendPropertyChanging
				Me._USERNAME = value
				Me.SendPropertyChanged("USERNAME")
				Me.OnUSERNAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PASSWORD", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=11)>  _
	Public Property PASSWORD() As String
		Get
			Return Me._PASSWORD
		End Get
		Set
			If (String.Equals(Me._PASSWORD, value) = false) Then
				Me.OnPASSWORDChanging(value)
				Me.SendPropertyChanging
				Me._PASSWORD = value
				Me.SendPropertyChanged("PASSWORD")
				Me.OnPASSWORDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXPIRED", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=12)>  _
	Public Property EXPIRED() As Boolean
		Get
			Return Me._EXPIRED
		End Get
		Set
			If ((Me._EXPIRED = value)  _
						= false) Then
				Me.OnEXPIREDChanging(value)
				Me.SendPropertyChanging
				Me._EXPIRED = value
				Me.SendPropertyChanged("EXPIRED")
				Me.OnEXPIREDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OF_ID", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=13)>  _
	Public Property OF_ID() As String
		Get
			Return Me._OF_ID
		End Get
		Set
			If (String.Equals(Me._OF_ID, value) = false) Then
				Me.OnOF_IDChanging(value)
				Me.SendPropertyChanging
				Me._OF_ID = value
				Me.SendPropertyChanged("OF_ID")
				Me.OnOF_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OF_PASSWORD", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=14)>  _
	Public Property OF_PASSWORD() As String
		Get
			Return Me._OF_PASSWORD
		End Get
		Set
			If (String.Equals(Me._OF_PASSWORD, value) = false) Then
				Me.OnOF_PASSWORDChanging(value)
				Me.SendPropertyChanging
				Me._OF_PASSWORD = value
				Me.SendPropertyChanged("OF_PASSWORD")
				Me.OnOF_PASSWORDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IS_DESK_ADMIN", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=15)>  _
	Public Property IS_DESK_ADMIN() As Boolean
		Get
			Return Me._IS_DESK_ADMIN
		End Get
		Set
			If ((Me._IS_DESK_ADMIN = value)  _
						= false) Then
				Me.OnIS_DESK_ADMINChanging(value)
				Me.SendPropertyChanging
				Me._IS_DESK_ADMIN = value
				Me.SendPropertyChanged("IS_DESK_ADMIN")
				Me.OnIS_DESK_ADMINChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SUSPENDED", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=16)>  _
	Public Property SUSPENDED() As Boolean
		Get
			Return Me._SUSPENDED
		End Get
		Set
			If ((Me._SUSPENDED = value)  _
						= false) Then
				Me.OnSUSPENDEDChanging(value)
				Me.SendPropertyChanging
				Me._SUSPENDED = value
				Me.SendPropertyChanged("SUSPENDED")
				Me.OnSUSPENDEDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TOOLBAR_SHOW", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=17)>  _
	Public Property TOOLBAR_SHOW() As Boolean
		Get
			Return Me._TOOLBAR_SHOW
		End Get
		Set
			If ((Me._TOOLBAR_SHOW = value)  _
						= false) Then
				Me.OnTOOLBAR_SHOWChanging(value)
				Me.SendPropertyChanging
				Me._TOOLBAR_SHOW = value
				Me.SendPropertyChanged("TOOLBAR_SHOW")
				Me.OnTOOLBAR_SHOWChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEFAULT_MARKET", DbType:="Char(1) NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=18)>  _
	Public Property DEFAULT_MARKET() As Char
		Get
			Return Me._DEFAULT_MARKET
		End Get
		Set
			If ((Me._DEFAULT_MARKET = value)  _
						= false) Then
				If Me._TRADE_CLASSES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDEFAULT_MARKETChanging(value)
				Me.SendPropertyChanging
				Me._DEFAULT_MARKET = value
				Me.SendPropertyChanged("DEFAULT_MARKET")
				Me.OnDEFAULT_MARKETChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEFAULT_SHOW_NAMES", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=19)>  _
	Public Property DEFAULT_SHOW_NAMES() As Boolean
		Get
			Return Me._DEFAULT_SHOW_NAMES
		End Get
		Set
			If ((Me._DEFAULT_SHOW_NAMES = value)  _
						= false) Then
				Me.OnDEFAULT_SHOW_NAMESChanging(value)
				Me.SendPropertyChanging
				Me._DEFAULT_SHOW_NAMES = value
				Me.SendPropertyChanged("DEFAULT_SHOW_NAMES")
				Me.OnDEFAULT_SHOW_NAMESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GRID_MARKET_DEPTH", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=20)>  _
	Public Property GRID_MARKET_DEPTH() As Integer
		Get
			Return Me._GRID_MARKET_DEPTH
		End Get
		Set
			If ((Me._GRID_MARKET_DEPTH = value)  _
						= false) Then
				Me.OnGRID_MARKET_DEPTHChanging(value)
				Me.SendPropertyChanging
				Me._GRID_MARKET_DEPTH = value
				Me.SendPropertyChanged("GRID_MARKET_DEPTH")
				Me.OnGRID_MARKET_DEPTHChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BID_COLOR", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=21)>  _
	Public Property BID_COLOR() As Integer
		Get
			Return Me._BID_COLOR
		End Get
		Set
			If ((Me._BID_COLOR = value)  _
						= false) Then
				Me.OnBID_COLORChanging(value)
				Me.SendPropertyChanging
				Me._BID_COLOR = value
				Me.SendPropertyChanged("BID_COLOR")
				Me.OnBID_COLORChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OFFER_COLOR", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=22)>  _
	Public Property OFFER_COLOR() As Integer
		Get
			Return Me._OFFER_COLOR
		End Get
		Set
			If ((Me._OFFER_COLOR = value)  _
						= false) Then
				Me.OnOFFER_COLORChanging(value)
				Me.SendPropertyChanging
				Me._OFFER_COLOR = value
				Me.SendPropertyChanged("OFFER_COLOR")
				Me.OnOFFER_COLORChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FONT_TYPE", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=23)>  _
	Public Property FONT_TYPE() As Short
		Get
			Return Me._FONT_TYPE
		End Get
		Set
			If ((Me._FONT_TYPE = value)  _
						= false) Then
				Me.OnFONT_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._FONT_TYPE = value
				Me.SendPropertyChanged("FONT_TYPE")
				Me.OnFONT_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CHANGE_PSW", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=24)>  _
	Public Property CHANGE_PSW() As Boolean
		Get
			Return Me._CHANGE_PSW
		End Get
		Set
			If ((Me._CHANGE_PSW = value)  _
						= false) Then
				Me.OnCHANGE_PSWChanging(value)
				Me.SendPropertyChanging
				Me._CHANGE_PSW = value
				Me.SendPropertyChanged("CHANGE_PSW")
				Me.OnCHANGE_PSWChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AGREES_TO_STATEMENT", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=25)>  _
	Public Property AGREES_TO_STATEMENT() As Boolean
		Get
			Return Me._AGREES_TO_STATEMENT
		End Get
		Set
			If ((Me._AGREES_TO_STATEMENT = value)  _
						= false) Then
				Me.OnAGREES_TO_STATEMENTChanging(value)
				Me.SendPropertyChanging
				Me._AGREES_TO_STATEMENT = value
				Me.SendPropertyChanged("AGREES_TO_STATEMENT")
				Me.OnAGREES_TO_STATEMENTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_INDICATIVES_VISIBLE", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=26)>  _
	Public Property INDICATIVES_VISIBLE() As Boolean
		Get
			Return Me._INDICATIVES_VISIBLE
		End Get
		Set
			If ((Me._INDICATIVES_VISIBLE = value)  _
						= false) Then
				Me.OnINDICATIVES_VISIBLEChanging(value)
				Me.SendPropertyChanging
				Me._INDICATIVES_VISIBLE = value
				Me.SendPropertyChanged("INDICATIVES_VISIBLE")
				Me.OnINDICATIVES_VISIBLEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ONE_CLICK_HIT", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=27)>  _
	Public Property ONE_CLICK_HIT() As Boolean
		Get
			Return Me._ONE_CLICK_HIT
		End Get
		Set
			If ((Me._ONE_CLICK_HIT = value)  _
						= false) Then
				Me.OnONE_CLICK_HITChanging(value)
				Me.SendPropertyChanging
				Me._ONE_CLICK_HIT = value
				Me.SendPropertyChanged("ONE_CLICK_HIT")
				Me.OnONE_CLICK_HITChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADERS_DESK_TRADER_VOICE", Storage:="_DESK_TRADER_VOICE", ThisKey:="DESK_TRADER_ID", OtherKey:="DESK_TRADER_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=28, EmitDefaultValue:=false)>  _
	Public Property DESK_TRADER_VOICE() As EntitySet(Of DESK_TRADER_VOICE)
		Get
			If (Me.serializing  _
						AndAlso (Me._DESK_TRADER_VOICE.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._DESK_TRADER_VOICE
		End Get
		Set
			Me._DESK_TRADER_VOICE.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADERS_DESK_TRADERS_IM_SUBSCRIPTIONS", Storage:="_DESK_TRADERS_IM_SUBSCRIPTIONS", ThisKey:="DESK_TRADER_ID", OtherKey:="DESK_TRADER_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=29, EmitDefaultValue:=false)>  _
	Public Property DESK_TRADERS_IM_SUBSCRIPTIONS() As EntitySet(Of DESK_TRADERS_IM_SUBSCRIPTIONS)
		Get
			If (Me.serializing  _
						AndAlso (Me._DESK_TRADERS_IM_SUBSCRIPTIONS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._DESK_TRADERS_IM_SUBSCRIPTIONS
		End Get
		Set
			Me._DESK_TRADERS_IM_SUBSCRIPTIONS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADERS_LAYOUTS", Storage:="_LAYOUTS", ThisKey:="DESK_TRADER_ID", OtherKey:="DESK_TRADER_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=30, EmitDefaultValue:=false)>  _
	Public Property LAYOUTS() As EntitySet(Of LAYOUTS)
		Get
			If (Me.serializing  _
						AndAlso (Me._LAYOUTS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._LAYOUTS
		End Get
		Set
			Me._LAYOUTS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADERS_ORDERS_FFA", Storage:="_ORDERS_FFA", ThisKey:="DESK_TRADER_ID", OtherKey:="LOCK_DESK_TRADER_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=31, EmitDefaultValue:=false)>  _
	Public Property ORDERS_FFA() As EntitySet(Of ORDERS_FFA)
		Get
			If (Me.serializing  _
						AndAlso (Me._ORDERS_FFA.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ORDERS_FFA
		End Get
		Set
			Me._ORDERS_FFA.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADERS_ORDERS_FFA1", Storage:="_ORDERS_FFA1", ThisKey:="DESK_TRADER_ID", OtherKey:="DESK_TRADER_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=32, EmitDefaultValue:=false)>  _
	Public Property ORDERS_FFA1() As EntitySet(Of ORDERS_FFA)
		Get
			If (Me.serializing  _
						AndAlso (Me._ORDERS_FFA1.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ORDERS_FFA1
		End Get
		Set
			Me._ORDERS_FFA1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADERS_ORDERS_FFA2", Storage:="_ORDERS_FFA2", ThisKey:="DESK_TRADER_ID", OtherKey:="FOR_DESK_TRADER_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=33, EmitDefaultValue:=false)>  _
	Public Property ORDERS_FFA2() As EntitySet(Of ORDERS_FFA)
		Get
			If (Me.serializing  _
						AndAlso (Me._ORDERS_FFA2.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ORDERS_FFA2
		End Get
		Set
			Me._ORDERS_FFA2.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADERS_TRADES_FFA", Storage:="_TRADES_FFA", ThisKey:="DESK_TRADER_ID", OtherKey:="DESK_TRADER_ID1"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=34, EmitDefaultValue:=false)>  _
	Public Property TRADES_FFA() As EntitySet(Of TRADES_FFA)
		Get
			If (Me.serializing  _
						AndAlso (Me._TRADES_FFA.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._TRADES_FFA
		End Get
		Set
			Me._TRADES_FFA.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADERS_TRADES_FFA1", Storage:="_TRADES_FFA1", ThisKey:="DESK_TRADER_ID", OtherKey:="DESK_TRADER_ID2"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=35, EmitDefaultValue:=false)>  _
	Public Property TRADES_FFA1() As EntitySet(Of TRADES_FFA)
		Get
			If (Me.serializing  _
						AndAlso (Me._TRADES_FFA1.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._TRADES_FFA1
		End Get
		Set
			Me._TRADES_FFA1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESKS_DESK_TRADERS", Storage:="_ACCOUNT_DESKS", ThisKey:="ACCOUNT_DESK_ID", OtherKey:="ACCOUNT_DESK_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT_DESKS() As ACCOUNT_DESKS
		Get
			Return Me._ACCOUNT_DESKS.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT_DESKS = Me._ACCOUNT_DESKS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT_DESKS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT_DESKS.Entity = Nothing
					previousValue.DESK_TRADERS.Remove(Me)
				End If
				Me._ACCOUNT_DESKS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADERS.Add(Me)
					Me._ACCOUNT_DESK_ID = value.ACCOUNT_DESK_ID
				Else
					Me._ACCOUNT_DESK_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNT_DESKS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_DESK_TRADERS", Storage:="_ACCOUNTS", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNTS() As ACCOUNTS
		Get
			Return Me._ACCOUNTS.Entity
		End Get
		Set
			Dim previousValue As ACCOUNTS = Me._ACCOUNTS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNTS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNTS.Entity = Nothing
					previousValue.DESK_TRADERS.Remove(Me)
				End If
				Me._ACCOUNTS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADERS.Add(Me)
					Me._ACCOUNT_ID = value.ACCOUNT_ID
				Else
					Me._ACCOUNT_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNTS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONTACTS_DESK_TRADERS", Storage:="_CONTACTS", ThisKey:="CONTACT_ID", OtherKey:="CONTACT_ID", IsForeignKey:=true)>  _
	Public Property CONTACTS() As CONTACTS
		Get
			Return Me._CONTACTS.Entity
		End Get
		Set
			Dim previousValue As CONTACTS = Me._CONTACTS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CONTACTS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CONTACTS.Entity = Nothing
					previousValue.DESK_TRADERS.Remove(Me)
				End If
				Me._CONTACTS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADERS.Add(Me)
					Me._CONTACT_ID = value.CONTACT_ID
				Else
					Me._CONTACT_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CONTACTS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_AUTHORITIES_DESK_TRADERS", Storage:="_TRADE_AUTHORITIES", ThisKey:="TRADE_AUTHORITY", OtherKey:="TRADE_AUTHORITY", IsForeignKey:=true)>  _
	Public Property TRADE_AUTHORITIES() As TRADE_AUTHORITIES
		Get
			Return Me._TRADE_AUTHORITIES.Entity
		End Get
		Set
			Dim previousValue As TRADE_AUTHORITIES = Me._TRADE_AUTHORITIES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TRADE_AUTHORITIES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TRADE_AUTHORITIES.Entity = Nothing
					previousValue.DESK_TRADERS.Remove(Me)
				End If
				Me._TRADE_AUTHORITIES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADERS.Add(Me)
					Me._TRADE_AUTHORITY = value.TRADE_AUTHORITY
				Else
					Me._TRADE_AUTHORITY = CType(Nothing, Short)
				End If
				Me.SendPropertyChanged("TRADE_AUTHORITIES")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASSES_DESK_TRADERS", Storage:="_TRADE_CLASSES", ThisKey:="DEFAULT_MARKET", OtherKey:="TRADE_CLASS_SHORT", IsForeignKey:=true)>  _
	Public Property TRADE_CLASSES() As TRADE_CLASSES
		Get
			Return Me._TRADE_CLASSES.Entity
		End Get
		Set
			Dim previousValue As TRADE_CLASSES = Me._TRADE_CLASSES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TRADE_CLASSES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TRADE_CLASSES.Entity = Nothing
					previousValue.DESK_TRADERS.Remove(Me)
				End If
				Me._TRADE_CLASSES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADERS.Add(Me)
					Me._DEFAULT_MARKET = value.TRADE_CLASS_SHORT
				Else
					Me._DEFAULT_MARKET = CType(Nothing, Char)
				End If
				Me.SendPropertyChanged("TRADE_CLASSES")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DESK_TRADER_VOICE(ByVal entity As DESK_TRADER_VOICE)
		Me.SendPropertyChanging
		entity.DESK_TRADERS = Me
	End Sub
	
	Private Sub detach_DESK_TRADER_VOICE(ByVal entity As DESK_TRADER_VOICE)
		Me.SendPropertyChanging
		entity.DESK_TRADERS = Nothing
	End Sub
	
	Private Sub attach_DESK_TRADERS_IM_SUBSCRIPTIONS(ByVal entity As DESK_TRADERS_IM_SUBSCRIPTIONS)
		Me.SendPropertyChanging
		entity.DESK_TRADERS = Me
	End Sub
	
	Private Sub detach_DESK_TRADERS_IM_SUBSCRIPTIONS(ByVal entity As DESK_TRADERS_IM_SUBSCRIPTIONS)
		Me.SendPropertyChanging
		entity.DESK_TRADERS = Nothing
	End Sub
	
	Private Sub attach_LAYOUTS(ByVal entity As LAYOUTS)
		Me.SendPropertyChanging
		entity.DESK_TRADERS = Me
	End Sub
	
	Private Sub detach_LAYOUTS(ByVal entity As LAYOUTS)
		Me.SendPropertyChanging
		entity.DESK_TRADERS = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFA(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.DESK_TRADERS = Me
	End Sub
	
	Private Sub detach_ORDERS_FFA(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.DESK_TRADERS = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFA1(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.DESK_TRADERS1 = Me
	End Sub
	
	Private Sub detach_ORDERS_FFA1(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.DESK_TRADERS1 = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFA2(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.DESK_TRADERS2 = Me
	End Sub
	
	Private Sub detach_ORDERS_FFA2(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.DESK_TRADERS2 = Nothing
	End Sub
	
	Private Sub attach_TRADES_FFA(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.DESK_TRADERS = Me
	End Sub
	
	Private Sub detach_TRADES_FFA(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.DESK_TRADERS = Nothing
	End Sub
	
	Private Sub attach_TRADES_FFA1(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.DESK_TRADERS1 = Me
	End Sub
	
	Private Sub detach_TRADES_FFA1(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.DESK_TRADERS1 = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._DESK_TRADER_VOICE = New EntitySet(Of DESK_TRADER_VOICE)(AddressOf Me.attach_DESK_TRADER_VOICE, AddressOf Me.detach_DESK_TRADER_VOICE)
		Me._DESK_TRADERS_IM_SUBSCRIPTIONS = New EntitySet(Of DESK_TRADERS_IM_SUBSCRIPTIONS)(AddressOf Me.attach_DESK_TRADERS_IM_SUBSCRIPTIONS, AddressOf Me.detach_DESK_TRADERS_IM_SUBSCRIPTIONS)
		Me._LAYOUTS = New EntitySet(Of LAYOUTS)(AddressOf Me.attach_LAYOUTS, AddressOf Me.detach_LAYOUTS)
		Me._ORDERS_FFA = New EntitySet(Of ORDERS_FFA)(AddressOf Me.attach_ORDERS_FFA, AddressOf Me.detach_ORDERS_FFA)
		Me._ORDERS_FFA1 = New EntitySet(Of ORDERS_FFA)(AddressOf Me.attach_ORDERS_FFA1, AddressOf Me.detach_ORDERS_FFA1)
		Me._ORDERS_FFA2 = New EntitySet(Of ORDERS_FFA)(AddressOf Me.attach_ORDERS_FFA2, AddressOf Me.detach_ORDERS_FFA2)
		Me._TRADES_FFA = New EntitySet(Of TRADES_FFA)(AddressOf Me.attach_TRADES_FFA, AddressOf Me.detach_TRADES_FFA)
		Me._TRADES_FFA1 = New EntitySet(Of TRADES_FFA)(AddressOf Me.attach_TRADES_FFA1, AddressOf Me.detach_TRADES_FFA1)
		Me._ACCOUNT_DESKS = CType(Nothing, EntityRef(Of ACCOUNT_DESKS))
		Me._ACCOUNTS = CType(Nothing, EntityRef(Of ACCOUNTS))
		Me._CONTACTS = CType(Nothing, EntityRef(Of CONTACTS))
		Me._TRADE_AUTHORITIES = CType(Nothing, EntityRef(Of TRADE_AUTHORITIES))
		Me._TRADE_CLASSES = CType(Nothing, EntityRef(Of TRADE_CLASSES))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DESK_TRADERS_IM_SUBSCRIPTIONS"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class DESK_TRADERS_IM_SUBSCRIPTIONS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DESK_TRADER_ID As Integer
	
	Private _TRADE_CLASS_SHORT As Char
	
	Private _VESSEL_CLASS_ID As Integer
	
	Private _ROUTE_ID As Integer
	
	Private _IM_SUBSCRIBE As Boolean
	
	Private _IM_ID As Integer
	
	Private _VOICE_SUBSCRIBE As Boolean
	
	Private _VOICE_ID As String
	
	Private _DESK_TRADERS As EntityRef(Of DESK_TRADERS)
	
	Private _ROUTES As EntityRef(Of ROUTES)
	
	Private _TRADE_CLASSES As EntityRef(Of TRADE_CLASSES)
	
	Private _VESSEL_CLASS As EntityRef(Of VESSEL_CLASS)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDESK_TRADER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDESK_TRADER_IDChanged()
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanging(value As Char)
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanged()
    End Sub
    Partial Private Sub OnVESSEL_CLASS_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnVESSEL_CLASS_IDChanged()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnIM_SUBSCRIBEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIM_SUBSCRIBEChanged()
    End Sub
    Partial Private Sub OnIM_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIM_IDChanged()
    End Sub
    Partial Private Sub OnVOICE_SUBSCRIBEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnVOICE_SUBSCRIBEChanged()
    End Sub
    Partial Private Sub OnVOICE_IDChanging(value As String)
    End Sub
    Partial Private Sub OnVOICE_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_TRADER_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property DESK_TRADER_ID() As Integer
		Get
			Return Me._DESK_TRADER_ID
		End Get
		Set
			If ((Me._DESK_TRADER_ID = value)  _
						= false) Then
				If Me._DESK_TRADERS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDESK_TRADER_IDChanging(value)
				Me.SendPropertyChanging
				Me._DESK_TRADER_ID = value
				Me.SendPropertyChanged("DESK_TRADER_ID")
				Me.OnDESK_TRADER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_CLASS_SHORT", DbType:="Char(1) NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property TRADE_CLASS_SHORT() As Char
		Get
			Return Me._TRADE_CLASS_SHORT
		End Get
		Set
			If ((Me._TRADE_CLASS_SHORT = value)  _
						= false) Then
				If Me._TRADE_CLASSES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTRADE_CLASS_SHORTChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_CLASS_SHORT = value
				Me.SendPropertyChanged("TRADE_CLASS_SHORT")
				Me.OnTRADE_CLASS_SHORTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VESSEL_CLASS_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property VESSEL_CLASS_ID() As Integer
		Get
			Return Me._VESSEL_CLASS_ID
		End Get
		Set
			If ((Me._VESSEL_CLASS_ID = value)  _
						= false) Then
				If Me._VESSEL_CLASS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnVESSEL_CLASS_IDChanging(value)
				Me.SendPropertyChanging
				Me._VESSEL_CLASS_ID = value
				Me.SendPropertyChanged("VESSEL_CLASS_ID")
				Me.OnVESSEL_CLASS_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If Me._ROUTES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IM_SUBSCRIBE", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property IM_SUBSCRIBE() As Boolean
		Get
			Return Me._IM_SUBSCRIBE
		End Get
		Set
			If ((Me._IM_SUBSCRIBE = value)  _
						= false) Then
				Me.OnIM_SUBSCRIBEChanging(value)
				Me.SendPropertyChanging
				Me._IM_SUBSCRIBE = value
				Me.SendPropertyChanged("IM_SUBSCRIBE")
				Me.OnIM_SUBSCRIBEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IM_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property IM_ID() As Integer
		Get
			Return Me._IM_ID
		End Get
		Set
			If ((Me._IM_ID = value)  _
						= false) Then
				Me.OnIM_IDChanging(value)
				Me.SendPropertyChanging
				Me._IM_ID = value
				Me.SendPropertyChanged("IM_ID")
				Me.OnIM_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VOICE_SUBSCRIBE", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property VOICE_SUBSCRIBE() As Boolean
		Get
			Return Me._VOICE_SUBSCRIBE
		End Get
		Set
			If ((Me._VOICE_SUBSCRIBE = value)  _
						= false) Then
				Me.OnVOICE_SUBSCRIBEChanging(value)
				Me.SendPropertyChanging
				Me._VOICE_SUBSCRIBE = value
				Me.SendPropertyChanged("VOICE_SUBSCRIBE")
				Me.OnVOICE_SUBSCRIBEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VOICE_ID", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property VOICE_ID() As String
		Get
			Return Me._VOICE_ID
		End Get
		Set
			If (String.Equals(Me._VOICE_ID, value) = false) Then
				Me.OnVOICE_IDChanging(value)
				Me.SendPropertyChanging
				Me._VOICE_ID = value
				Me.SendPropertyChanged("VOICE_ID")
				Me.OnVOICE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADERS_DESK_TRADERS_IM_SUBSCRIPTIONS", Storage:="_DESK_TRADERS", ThisKey:="DESK_TRADER_ID", OtherKey:="DESK_TRADER_ID", IsForeignKey:=true)>  _
	Public Property DESK_TRADERS() As DESK_TRADERS
		Get
			Return Me._DESK_TRADERS.Entity
		End Get
		Set
			Dim previousValue As DESK_TRADERS = Me._DESK_TRADERS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DESK_TRADERS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DESK_TRADERS.Entity = Nothing
					previousValue.DESK_TRADERS_IM_SUBSCRIPTIONS.Remove(Me)
				End If
				Me._DESK_TRADERS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADERS_IM_SUBSCRIPTIONS.Add(Me)
					Me._DESK_TRADER_ID = value.DESK_TRADER_ID
				Else
					Me._DESK_TRADER_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DESK_TRADERS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_DESK_TRADERS_IM_SUBSCRIPTIONS", Storage:="_ROUTES", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTES() As ROUTES
		Get
			Return Me._ROUTES.Entity
		End Get
		Set
			Dim previousValue As ROUTES = Me._ROUTES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTES.Entity = Nothing
					previousValue.DESK_TRADERS_IM_SUBSCRIPTIONS.Remove(Me)
				End If
				Me._ROUTES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADERS_IM_SUBSCRIPTIONS.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTES")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASSES_DESK_TRADERS_IM_SUBSCRIPTIONS", Storage:="_TRADE_CLASSES", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="TRADE_CLASS_SHORT", IsForeignKey:=true)>  _
	Public Property TRADE_CLASSES() As TRADE_CLASSES
		Get
			Return Me._TRADE_CLASSES.Entity
		End Get
		Set
			Dim previousValue As TRADE_CLASSES = Me._TRADE_CLASSES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TRADE_CLASSES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TRADE_CLASSES.Entity = Nothing
					previousValue.DESK_TRADERS_IM_SUBSCRIPTIONS.Remove(Me)
				End If
				Me._TRADE_CLASSES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADERS_IM_SUBSCRIPTIONS.Add(Me)
					Me._TRADE_CLASS_SHORT = value.TRADE_CLASS_SHORT
				Else
					Me._TRADE_CLASS_SHORT = CType(Nothing, Char)
				End If
				Me.SendPropertyChanged("TRADE_CLASSES")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="VESSEL_CLASS_DESK_TRADERS_IM_SUBSCRIPTIONS", Storage:="_VESSEL_CLASS", ThisKey:="VESSEL_CLASS_ID", OtherKey:="VESSEL_CLASS_ID", IsForeignKey:=true)>  _
	Public Property VESSEL_CLASS() As VESSEL_CLASS
		Get
			Return Me._VESSEL_CLASS.Entity
		End Get
		Set
			Dim previousValue As VESSEL_CLASS = Me._VESSEL_CLASS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._VESSEL_CLASS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._VESSEL_CLASS.Entity = Nothing
					previousValue.DESK_TRADERS_IM_SUBSCRIPTIONS.Remove(Me)
				End If
				Me._VESSEL_CLASS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADERS_IM_SUBSCRIPTIONS.Add(Me)
					Me._VESSEL_CLASS_ID = value.VESSEL_CLASS_ID
				Else
					Me._VESSEL_CLASS_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("VESSEL_CLASS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._DESK_TRADERS = CType(Nothing, EntityRef(Of DESK_TRADERS))
		Me._ROUTES = CType(Nothing, EntityRef(Of ROUTES))
		Me._TRADE_CLASSES = CType(Nothing, EntityRef(Of TRADE_CLASSES))
		Me._VESSEL_CLASS = CType(Nothing, EntityRef(Of VESSEL_CLASS))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EXCHANGE_HOLIDAYS"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class EXCHANGE_HOLIDAYS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _HOLIDAY As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnHOLIDAYChanging(value As Date)
    End Sub
    Partial Private Sub OnHOLIDAYChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HOLIDAY", DbType:="DateTime NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property HOLIDAY() As Date
		Get
			Return Me._HOLIDAY
		End Get
		Set
			If ((Me._HOLIDAY = value)  _
						= false) Then
				Me.OnHOLIDAYChanging(value)
				Me.SendPropertyChanging
				Me._HOLIDAY = value
				Me.SendPropertyChanged("HOLIDAY")
				Me.OnHOLIDAYChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EXCHANGE_ROUTE_PERIODS"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class EXCHANGE_ROUTE_PERIODS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _EXCHANGE_ROUTE_PERIOD_ID As Integer
	
	Private _EXCHANGE_ROUTE_PERIOD_DESCR As String
	
	Private _FRONT_MONTHS As Integer
	
	Private _FRONT_QUARTERS As Integer
	
	Private _FRONT_HALF_YEARS As Integer
	
	Private _FRONT_YEARS As Integer
	
	Private _FRONT_MAX_MONTHS As Integer
	
	Private _MC_0_1 As Boolean
	
	Private _MC_1_2 As Boolean
	
	Private _MC_0_1_2 As Boolean
	
	Private _QC_0_1 As Boolean
	
	Private _EXCHANGE_ROUTES As EntitySet(Of EXCHANGE_ROUTES)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEXCHANGE_ROUTE_PERIOD_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEXCHANGE_ROUTE_PERIOD_IDChanged()
    End Sub
    Partial Private Sub OnEXCHANGE_ROUTE_PERIOD_DESCRChanging(value As String)
    End Sub
    Partial Private Sub OnEXCHANGE_ROUTE_PERIOD_DESCRChanged()
    End Sub
    Partial Private Sub OnFRONT_MONTHSChanging(value As Integer)
    End Sub
    Partial Private Sub OnFRONT_MONTHSChanged()
    End Sub
    Partial Private Sub OnFRONT_QUARTERSChanging(value As Integer)
    End Sub
    Partial Private Sub OnFRONT_QUARTERSChanged()
    End Sub
    Partial Private Sub OnFRONT_HALF_YEARSChanging(value As Integer)
    End Sub
    Partial Private Sub OnFRONT_HALF_YEARSChanged()
    End Sub
    Partial Private Sub OnFRONT_YEARSChanging(value As Integer)
    End Sub
    Partial Private Sub OnFRONT_YEARSChanged()
    End Sub
    Partial Private Sub OnFRONT_MAX_MONTHSChanging(value As Integer)
    End Sub
    Partial Private Sub OnFRONT_MAX_MONTHSChanged()
    End Sub
    Partial Private Sub OnMC_0_1Changing(value As Boolean)
    End Sub
    Partial Private Sub OnMC_0_1Changed()
    End Sub
    Partial Private Sub OnMC_1_2Changing(value As Boolean)
    End Sub
    Partial Private Sub OnMC_1_2Changed()
    End Sub
    Partial Private Sub OnMC_0_1_2Changing(value As Boolean)
    End Sub
    Partial Private Sub OnMC_0_1_2Changed()
    End Sub
    Partial Private Sub OnQC_0_1Changing(value As Boolean)
    End Sub
    Partial Private Sub OnQC_0_1Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_ROUTE_PERIOD_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property EXCHANGE_ROUTE_PERIOD_ID() As Integer
		Get
			Return Me._EXCHANGE_ROUTE_PERIOD_ID
		End Get
		Set
			If ((Me._EXCHANGE_ROUTE_PERIOD_ID = value)  _
						= false) Then
				Me.OnEXCHANGE_ROUTE_PERIOD_IDChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_ROUTE_PERIOD_ID = value
				Me.SendPropertyChanged("EXCHANGE_ROUTE_PERIOD_ID")
				Me.OnEXCHANGE_ROUTE_PERIOD_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_ROUTE_PERIOD_DESCR", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property EXCHANGE_ROUTE_PERIOD_DESCR() As String
		Get
			Return Me._EXCHANGE_ROUTE_PERIOD_DESCR
		End Get
		Set
			If (String.Equals(Me._EXCHANGE_ROUTE_PERIOD_DESCR, value) = false) Then
				Me.OnEXCHANGE_ROUTE_PERIOD_DESCRChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_ROUTE_PERIOD_DESCR = value
				Me.SendPropertyChanged("EXCHANGE_ROUTE_PERIOD_DESCR")
				Me.OnEXCHANGE_ROUTE_PERIOD_DESCRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FRONT_MONTHS", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property FRONT_MONTHS() As Integer
		Get
			Return Me._FRONT_MONTHS
		End Get
		Set
			If ((Me._FRONT_MONTHS = value)  _
						= false) Then
				Me.OnFRONT_MONTHSChanging(value)
				Me.SendPropertyChanging
				Me._FRONT_MONTHS = value
				Me.SendPropertyChanged("FRONT_MONTHS")
				Me.OnFRONT_MONTHSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FRONT_QUARTERS", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property FRONT_QUARTERS() As Integer
		Get
			Return Me._FRONT_QUARTERS
		End Get
		Set
			If ((Me._FRONT_QUARTERS = value)  _
						= false) Then
				Me.OnFRONT_QUARTERSChanging(value)
				Me.SendPropertyChanging
				Me._FRONT_QUARTERS = value
				Me.SendPropertyChanged("FRONT_QUARTERS")
				Me.OnFRONT_QUARTERSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FRONT_HALF_YEARS", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property FRONT_HALF_YEARS() As Integer
		Get
			Return Me._FRONT_HALF_YEARS
		End Get
		Set
			If ((Me._FRONT_HALF_YEARS = value)  _
						= false) Then
				Me.OnFRONT_HALF_YEARSChanging(value)
				Me.SendPropertyChanging
				Me._FRONT_HALF_YEARS = value
				Me.SendPropertyChanged("FRONT_HALF_YEARS")
				Me.OnFRONT_HALF_YEARSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FRONT_YEARS", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property FRONT_YEARS() As Integer
		Get
			Return Me._FRONT_YEARS
		End Get
		Set
			If ((Me._FRONT_YEARS = value)  _
						= false) Then
				Me.OnFRONT_YEARSChanging(value)
				Me.SendPropertyChanging
				Me._FRONT_YEARS = value
				Me.SendPropertyChanged("FRONT_YEARS")
				Me.OnFRONT_YEARSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FRONT_MAX_MONTHS", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property FRONT_MAX_MONTHS() As Integer
		Get
			Return Me._FRONT_MAX_MONTHS
		End Get
		Set
			If ((Me._FRONT_MAX_MONTHS = value)  _
						= false) Then
				Me.OnFRONT_MAX_MONTHSChanging(value)
				Me.SendPropertyChanging
				Me._FRONT_MAX_MONTHS = value
				Me.SendPropertyChanged("FRONT_MAX_MONTHS")
				Me.OnFRONT_MAX_MONTHSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MC_0_1", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property MC_0_1() As Boolean
		Get
			Return Me._MC_0_1
		End Get
		Set
			If ((Me._MC_0_1 = value)  _
						= false) Then
				Me.OnMC_0_1Changing(value)
				Me.SendPropertyChanging
				Me._MC_0_1 = value
				Me.SendPropertyChanged("MC_0_1")
				Me.OnMC_0_1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MC_1_2", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property MC_1_2() As Boolean
		Get
			Return Me._MC_1_2
		End Get
		Set
			If ((Me._MC_1_2 = value)  _
						= false) Then
				Me.OnMC_1_2Changing(value)
				Me.SendPropertyChanging
				Me._MC_1_2 = value
				Me.SendPropertyChanged("MC_1_2")
				Me.OnMC_1_2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MC_0_1_2", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10)>  _
	Public Property MC_0_1_2() As Boolean
		Get
			Return Me._MC_0_1_2
		End Get
		Set
			If ((Me._MC_0_1_2 = value)  _
						= false) Then
				Me.OnMC_0_1_2Changing(value)
				Me.SendPropertyChanging
				Me._MC_0_1_2 = value
				Me.SendPropertyChanged("MC_0_1_2")
				Me.OnMC_0_1_2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QC_0_1", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=11)>  _
	Public Property QC_0_1() As Boolean
		Get
			Return Me._QC_0_1
		End Get
		Set
			If ((Me._QC_0_1 = value)  _
						= false) Then
				Me.OnQC_0_1Changing(value)
				Me.SendPropertyChanging
				Me._QC_0_1 = value
				Me.SendPropertyChanged("QC_0_1")
				Me.OnQC_0_1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EXCHANGE_ROUTE_PERIODS_EXCHANGE_ROUTES", Storage:="_EXCHANGE_ROUTES", ThisKey:="EXCHANGE_ROUTE_PERIOD_ID", OtherKey:="EXCHANGE_ROUTE_PERIOD_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=12, EmitDefaultValue:=false)>  _
	Public Property EXCHANGE_ROUTES() As EntitySet(Of EXCHANGE_ROUTES)
		Get
			If (Me.serializing  _
						AndAlso (Me._EXCHANGE_ROUTES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._EXCHANGE_ROUTES
		End Get
		Set
			Me._EXCHANGE_ROUTES.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_EXCHANGE_ROUTES(ByVal entity As EXCHANGE_ROUTES)
		Me.SendPropertyChanging
		entity.EXCHANGE_ROUTE_PERIODS = Me
	End Sub
	
	Private Sub detach_EXCHANGE_ROUTES(ByVal entity As EXCHANGE_ROUTES)
		Me.SendPropertyChanging
		entity.EXCHANGE_ROUTE_PERIODS = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._EXCHANGE_ROUTES = New EntitySet(Of EXCHANGE_ROUTES)(AddressOf Me.attach_EXCHANGE_ROUTES, AddressOf Me.detach_EXCHANGE_ROUTES)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EXCHANGE_ROUTES"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class EXCHANGE_ROUTES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _EXCHANGE_ROUTES_ID As Integer
	
	Private _EXCHANGE_ID As Integer
	
	Private _VESSEL_CLASS_ID As Integer
	
	Private _ROUTE_ID As Integer
	
	Private _ACTIVE As Boolean
	
	Private _EXCHANGE_ABRV As String
	
	Private _TRADING_START As System.Nullable(Of System.TimeSpan)
	
	Private _TRADING_END As System.Nullable(Of System.TimeSpan)
	
	Private _TRADE_REGISTRATION_START As System.Nullable(Of System.TimeSpan)
	
	Private _TRADE_REGISTRATION_END As System.Nullable(Of System.TimeSpan)
	
	Private _TRADE_REGISTRATION_LAST As System.Nullable(Of System.TimeSpan)
	
	Private _OPTIONS_AVAILABLE As Boolean
	
	Private _EXCHANGE_ROUTE_PERIOD_ID As Integer
	
	Private _EXCHANGE_ROUTE_PERIODS As EntityRef(Of EXCHANGE_ROUTE_PERIODS)
	
	Private _EXCHANGES As EntityRef(Of EXCHANGES)
	
	Private _ROUTES As EntityRef(Of ROUTES)
	
	Private _VESSEL_CLASS As EntityRef(Of VESSEL_CLASS)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEXCHANGE_ROUTES_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEXCHANGE_ROUTES_IDChanged()
    End Sub
    Partial Private Sub OnEXCHANGE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEXCHANGE_IDChanged()
    End Sub
    Partial Private Sub OnVESSEL_CLASS_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnVESSEL_CLASS_IDChanged()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnACTIVEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnACTIVEChanged()
    End Sub
    Partial Private Sub OnEXCHANGE_ABRVChanging(value As String)
    End Sub
    Partial Private Sub OnEXCHANGE_ABRVChanged()
    End Sub
    Partial Private Sub OnTRADING_STARTChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub OnTRADING_STARTChanged()
    End Sub
    Partial Private Sub OnTRADING_ENDChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub OnTRADING_ENDChanged()
    End Sub
    Partial Private Sub OnTRADE_REGISTRATION_STARTChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub OnTRADE_REGISTRATION_STARTChanged()
    End Sub
    Partial Private Sub OnTRADE_REGISTRATION_ENDChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub OnTRADE_REGISTRATION_ENDChanged()
    End Sub
    Partial Private Sub OnTRADE_REGISTRATION_LASTChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub OnTRADE_REGISTRATION_LASTChanged()
    End Sub
    Partial Private Sub OnOPTIONS_AVAILABLEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnOPTIONS_AVAILABLEChanged()
    End Sub
    Partial Private Sub OnEXCHANGE_ROUTE_PERIOD_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEXCHANGE_ROUTE_PERIOD_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_ROUTES_ID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property EXCHANGE_ROUTES_ID() As Integer
		Get
			Return Me._EXCHANGE_ROUTES_ID
		End Get
		Set
			If ((Me._EXCHANGE_ROUTES_ID = value)  _
						= false) Then
				Me.OnEXCHANGE_ROUTES_IDChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_ROUTES_ID = value
				Me.SendPropertyChanged("EXCHANGE_ROUTES_ID")
				Me.OnEXCHANGE_ROUTES_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property EXCHANGE_ID() As Integer
		Get
			Return Me._EXCHANGE_ID
		End Get
		Set
			If ((Me._EXCHANGE_ID = value)  _
						= false) Then
				If Me._EXCHANGES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEXCHANGE_IDChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_ID = value
				Me.SendPropertyChanged("EXCHANGE_ID")
				Me.OnEXCHANGE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VESSEL_CLASS_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property VESSEL_CLASS_ID() As Integer
		Get
			Return Me._VESSEL_CLASS_ID
		End Get
		Set
			If ((Me._VESSEL_CLASS_ID = value)  _
						= false) Then
				If Me._VESSEL_CLASS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnVESSEL_CLASS_IDChanging(value)
				Me.SendPropertyChanging
				Me._VESSEL_CLASS_ID = value
				Me.SendPropertyChanged("VESSEL_CLASS_ID")
				Me.OnVESSEL_CLASS_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If Me._ROUTES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACTIVE", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property ACTIVE() As Boolean
		Get
			Return Me._ACTIVE
		End Get
		Set
			If ((Me._ACTIVE = value)  _
						= false) Then
				Me.OnACTIVEChanging(value)
				Me.SendPropertyChanging
				Me._ACTIVE = value
				Me.SendPropertyChanged("ACTIVE")
				Me.OnACTIVEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_ABRV", DbType:="VarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property EXCHANGE_ABRV() As String
		Get
			Return Me._EXCHANGE_ABRV
		End Get
		Set
			If (String.Equals(Me._EXCHANGE_ABRV, value) = false) Then
				Me.OnEXCHANGE_ABRVChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_ABRV = value
				Me.SendPropertyChanged("EXCHANGE_ABRV")
				Me.OnEXCHANGE_ABRVChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADING_START", DbType:="Time"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property TRADING_START() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._TRADING_START
		End Get
		Set
			If (Me._TRADING_START.Equals(value) = false) Then
				Me.OnTRADING_STARTChanging(value)
				Me.SendPropertyChanging
				Me._TRADING_START = value
				Me.SendPropertyChanged("TRADING_START")
				Me.OnTRADING_STARTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADING_END", DbType:="Time"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property TRADING_END() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._TRADING_END
		End Get
		Set
			If (Me._TRADING_END.Equals(value) = false) Then
				Me.OnTRADING_ENDChanging(value)
				Me.SendPropertyChanging
				Me._TRADING_END = value
				Me.SendPropertyChanged("TRADING_END")
				Me.OnTRADING_ENDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_REGISTRATION_START", DbType:="Time"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property TRADE_REGISTRATION_START() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._TRADE_REGISTRATION_START
		End Get
		Set
			If (Me._TRADE_REGISTRATION_START.Equals(value) = false) Then
				Me.OnTRADE_REGISTRATION_STARTChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_REGISTRATION_START = value
				Me.SendPropertyChanged("TRADE_REGISTRATION_START")
				Me.OnTRADE_REGISTRATION_STARTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_REGISTRATION_END", DbType:="Time"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10)>  _
	Public Property TRADE_REGISTRATION_END() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._TRADE_REGISTRATION_END
		End Get
		Set
			If (Me._TRADE_REGISTRATION_END.Equals(value) = false) Then
				Me.OnTRADE_REGISTRATION_ENDChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_REGISTRATION_END = value
				Me.SendPropertyChanged("TRADE_REGISTRATION_END")
				Me.OnTRADE_REGISTRATION_ENDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_REGISTRATION_LAST", DbType:="Time"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=11)>  _
	Public Property TRADE_REGISTRATION_LAST() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._TRADE_REGISTRATION_LAST
		End Get
		Set
			If (Me._TRADE_REGISTRATION_LAST.Equals(value) = false) Then
				Me.OnTRADE_REGISTRATION_LASTChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_REGISTRATION_LAST = value
				Me.SendPropertyChanged("TRADE_REGISTRATION_LAST")
				Me.OnTRADE_REGISTRATION_LASTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OPTIONS_AVAILABLE", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=12)>  _
	Public Property OPTIONS_AVAILABLE() As Boolean
		Get
			Return Me._OPTIONS_AVAILABLE
		End Get
		Set
			If ((Me._OPTIONS_AVAILABLE = value)  _
						= false) Then
				Me.OnOPTIONS_AVAILABLEChanging(value)
				Me.SendPropertyChanging
				Me._OPTIONS_AVAILABLE = value
				Me.SendPropertyChanged("OPTIONS_AVAILABLE")
				Me.OnOPTIONS_AVAILABLEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_ROUTE_PERIOD_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=13)>  _
	Public Property EXCHANGE_ROUTE_PERIOD_ID() As Integer
		Get
			Return Me._EXCHANGE_ROUTE_PERIOD_ID
		End Get
		Set
			If ((Me._EXCHANGE_ROUTE_PERIOD_ID = value)  _
						= false) Then
				If Me._EXCHANGE_ROUTE_PERIODS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEXCHANGE_ROUTE_PERIOD_IDChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_ROUTE_PERIOD_ID = value
				Me.SendPropertyChanged("EXCHANGE_ROUTE_PERIOD_ID")
				Me.OnEXCHANGE_ROUTE_PERIOD_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EXCHANGE_ROUTE_PERIODS_EXCHANGE_ROUTES", Storage:="_EXCHANGE_ROUTE_PERIODS", ThisKey:="EXCHANGE_ROUTE_PERIOD_ID", OtherKey:="EXCHANGE_ROUTE_PERIOD_ID", IsForeignKey:=true)>  _
	Public Property EXCHANGE_ROUTE_PERIODS() As EXCHANGE_ROUTE_PERIODS
		Get
			Return Me._EXCHANGE_ROUTE_PERIODS.Entity
		End Get
		Set
			Dim previousValue As EXCHANGE_ROUTE_PERIODS = Me._EXCHANGE_ROUTE_PERIODS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EXCHANGE_ROUTE_PERIODS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EXCHANGE_ROUTE_PERIODS.Entity = Nothing
					previousValue.EXCHANGE_ROUTES.Remove(Me)
				End If
				Me._EXCHANGE_ROUTE_PERIODS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EXCHANGE_ROUTES.Add(Me)
					Me._EXCHANGE_ROUTE_PERIOD_ID = value.EXCHANGE_ROUTE_PERIOD_ID
				Else
					Me._EXCHANGE_ROUTE_PERIOD_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("EXCHANGE_ROUTE_PERIODS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EXCHANGES_EXCHANGE_ROUTES", Storage:="_EXCHANGES", ThisKey:="EXCHANGE_ID", OtherKey:="EXCHANGE_ID", IsForeignKey:=true)>  _
	Public Property EXCHANGES() As EXCHANGES
		Get
			Return Me._EXCHANGES.Entity
		End Get
		Set
			Dim previousValue As EXCHANGES = Me._EXCHANGES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EXCHANGES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EXCHANGES.Entity = Nothing
					previousValue.EXCHANGE_ROUTES.Remove(Me)
				End If
				Me._EXCHANGES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EXCHANGE_ROUTES.Add(Me)
					Me._EXCHANGE_ID = value.EXCHANGE_ID
				Else
					Me._EXCHANGE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("EXCHANGES")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_EXCHANGE_ROUTES", Storage:="_ROUTES", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTES() As ROUTES
		Get
			Return Me._ROUTES.Entity
		End Get
		Set
			Dim previousValue As ROUTES = Me._ROUTES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTES.Entity = Nothing
					previousValue.EXCHANGE_ROUTES.Remove(Me)
				End If
				Me._ROUTES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EXCHANGE_ROUTES.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTES")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="VESSEL_CLASS_EXCHANGE_ROUTES", Storage:="_VESSEL_CLASS", ThisKey:="VESSEL_CLASS_ID", OtherKey:="VESSEL_CLASS_ID", IsForeignKey:=true)>  _
	Public Property VESSEL_CLASS() As VESSEL_CLASS
		Get
			Return Me._VESSEL_CLASS.Entity
		End Get
		Set
			Dim previousValue As VESSEL_CLASS = Me._VESSEL_CLASS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._VESSEL_CLASS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._VESSEL_CLASS.Entity = Nothing
					previousValue.EXCHANGE_ROUTES.Remove(Me)
				End If
				Me._VESSEL_CLASS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EXCHANGE_ROUTES.Add(Me)
					Me._VESSEL_CLASS_ID = value.VESSEL_CLASS_ID
				Else
					Me._VESSEL_CLASS_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("VESSEL_CLASS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._EXCHANGE_ROUTE_PERIODS = CType(Nothing, EntityRef(Of EXCHANGE_ROUTE_PERIODS))
		Me._EXCHANGES = CType(Nothing, EntityRef(Of EXCHANGES))
		Me._ROUTES = CType(Nothing, EntityRef(Of ROUTES))
		Me._VESSEL_CLASS = CType(Nothing, EntityRef(Of VESSEL_CLASS))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EXCHANGES"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class EXCHANGES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _EXCHANGE_ID As Integer
	
	Private _EXCHANGE_NAME_FULL As String
	
	Private _EXCHANGE_NAME_SHORT As String
	
	Private _EXCHANGE_OPEN_TIME As System.TimeSpan
	
	Private _EXCHANGE_CLOSING_TIME As System.TimeSpan
	
	Private _COUNTRY_ID As Integer
	
	Private _EXCHANGE_WEBSITE As String
	
	Private _EXCHANGE_GMT As Double
	
	Private _ACCOUNT_ID As System.Nullable(Of Integer)
	
	Private _HALF_DAYS As Boolean
	
	Private _DEFAULT_CLEARER_ID As Integer
	
	Private _FORCE_TO_OTC As Boolean
	
	Private _ISDA_ID As Integer
	
	Private _EXCHANGE_SHORTCUT As Char
	
	Private _DESK_EXCHANGES As EntitySet(Of DESK_EXCHANGES)
	
	Private _EXCHANGE_ROUTES As EntitySet(Of EXCHANGE_ROUTES)
	
	Private _ORDERS_FFA_EXCHANGES As EntitySet(Of ORDERS_FFA_EXCHANGES)
	
	Private _TRADE_CLASS_EXCHANGES As EntitySet(Of TRADE_CLASS_EXCHANGES)
	
	Private _TRADES_FFA As EntitySet(Of TRADES_FFA)
	
	Private _ACCOUNTS As EntityRef(Of ACCOUNTS)
	
	Private _ACCOUNTS1 As EntityRef(Of ACCOUNTS)
	
	Private _COUNTRIES As EntityRef(Of COUNTRIES)
	
	Private _ISDA_TYPES As EntityRef(Of ISDA_TYPES)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEXCHANGE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEXCHANGE_IDChanged()
    End Sub
    Partial Private Sub OnEXCHANGE_NAME_FULLChanging(value As String)
    End Sub
    Partial Private Sub OnEXCHANGE_NAME_FULLChanged()
    End Sub
    Partial Private Sub OnEXCHANGE_NAME_SHORTChanging(value As String)
    End Sub
    Partial Private Sub OnEXCHANGE_NAME_SHORTChanged()
    End Sub
    Partial Private Sub OnEXCHANGE_OPEN_TIMEChanging(value As System.TimeSpan)
    End Sub
    Partial Private Sub OnEXCHANGE_OPEN_TIMEChanged()
    End Sub
    Partial Private Sub OnEXCHANGE_CLOSING_TIMEChanging(value As System.TimeSpan)
    End Sub
    Partial Private Sub OnEXCHANGE_CLOSING_TIMEChanged()
    End Sub
    Partial Private Sub OnCOUNTRY_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCOUNTRY_IDChanged()
    End Sub
    Partial Private Sub OnEXCHANGE_WEBSITEChanging(value As String)
    End Sub
    Partial Private Sub OnEXCHANGE_WEBSITEChanged()
    End Sub
    Partial Private Sub OnEXCHANGE_GMTChanging(value As Double)
    End Sub
    Partial Private Sub OnEXCHANGE_GMTChanged()
    End Sub
    Partial Private Sub OnACCOUNT_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnACCOUNT_IDChanged()
    End Sub
    Partial Private Sub OnHALF_DAYSChanging(value As Boolean)
    End Sub
    Partial Private Sub OnHALF_DAYSChanged()
    End Sub
    Partial Private Sub OnDEFAULT_CLEARER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDEFAULT_CLEARER_IDChanged()
    End Sub
    Partial Private Sub OnFORCE_TO_OTCChanging(value As Boolean)
    End Sub
    Partial Private Sub OnFORCE_TO_OTCChanged()
    End Sub
    Partial Private Sub OnISDA_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnISDA_IDChanged()
    End Sub
    Partial Private Sub OnEXCHANGE_SHORTCUTChanging(value As Char)
    End Sub
    Partial Private Sub OnEXCHANGE_SHORTCUTChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property EXCHANGE_ID() As Integer
		Get
			Return Me._EXCHANGE_ID
		End Get
		Set
			If ((Me._EXCHANGE_ID = value)  _
						= false) Then
				Me.OnEXCHANGE_IDChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_ID = value
				Me.SendPropertyChanged("EXCHANGE_ID")
				Me.OnEXCHANGE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_NAME_FULL", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property EXCHANGE_NAME_FULL() As String
		Get
			Return Me._EXCHANGE_NAME_FULL
		End Get
		Set
			If (String.Equals(Me._EXCHANGE_NAME_FULL, value) = false) Then
				Me.OnEXCHANGE_NAME_FULLChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_NAME_FULL = value
				Me.SendPropertyChanged("EXCHANGE_NAME_FULL")
				Me.OnEXCHANGE_NAME_FULLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_NAME_SHORT", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property EXCHANGE_NAME_SHORT() As String
		Get
			Return Me._EXCHANGE_NAME_SHORT
		End Get
		Set
			If (String.Equals(Me._EXCHANGE_NAME_SHORT, value) = false) Then
				Me.OnEXCHANGE_NAME_SHORTChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_NAME_SHORT = value
				Me.SendPropertyChanged("EXCHANGE_NAME_SHORT")
				Me.OnEXCHANGE_NAME_SHORTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_OPEN_TIME", DbType:="Time NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property EXCHANGE_OPEN_TIME() As System.TimeSpan
		Get
			Return Me._EXCHANGE_OPEN_TIME
		End Get
		Set
			If ((Me._EXCHANGE_OPEN_TIME = value)  _
						= false) Then
				Me.OnEXCHANGE_OPEN_TIMEChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_OPEN_TIME = value
				Me.SendPropertyChanged("EXCHANGE_OPEN_TIME")
				Me.OnEXCHANGE_OPEN_TIMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_CLOSING_TIME", DbType:="Time NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property EXCHANGE_CLOSING_TIME() As System.TimeSpan
		Get
			Return Me._EXCHANGE_CLOSING_TIME
		End Get
		Set
			If ((Me._EXCHANGE_CLOSING_TIME = value)  _
						= false) Then
				Me.OnEXCHANGE_CLOSING_TIMEChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_CLOSING_TIME = value
				Me.SendPropertyChanged("EXCHANGE_CLOSING_TIME")
				Me.OnEXCHANGE_CLOSING_TIMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COUNTRY_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property COUNTRY_ID() As Integer
		Get
			Return Me._COUNTRY_ID
		End Get
		Set
			If ((Me._COUNTRY_ID = value)  _
						= false) Then
				If Me._COUNTRIES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCOUNTRY_IDChanging(value)
				Me.SendPropertyChanging
				Me._COUNTRY_ID = value
				Me.SendPropertyChanged("COUNTRY_ID")
				Me.OnCOUNTRY_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_WEBSITE", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property EXCHANGE_WEBSITE() As String
		Get
			Return Me._EXCHANGE_WEBSITE
		End Get
		Set
			If (String.Equals(Me._EXCHANGE_WEBSITE, value) = false) Then
				Me.OnEXCHANGE_WEBSITEChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_WEBSITE = value
				Me.SendPropertyChanged("EXCHANGE_WEBSITE")
				Me.OnEXCHANGE_WEBSITEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_GMT", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property EXCHANGE_GMT() As Double
		Get
			Return Me._EXCHANGE_GMT
		End Get
		Set
			If ((Me._EXCHANGE_GMT = value)  _
						= false) Then
				Me.OnEXCHANGE_GMTChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_GMT = value
				Me.SendPropertyChanged("EXCHANGE_GMT")
				Me.OnEXCHANGE_GMTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_ID", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property ACCOUNT_ID() As System.Nullable(Of Integer)
		Get
			Return Me._ACCOUNT_ID
		End Get
		Set
			If (Me._ACCOUNT_ID.Equals(value) = false) Then
				If Me._ACCOUNTS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACCOUNT_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_ID = value
				Me.SendPropertyChanged("ACCOUNT_ID")
				Me.OnACCOUNT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HALF_DAYS", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10)>  _
	Public Property HALF_DAYS() As Boolean
		Get
			Return Me._HALF_DAYS
		End Get
		Set
			If ((Me._HALF_DAYS = value)  _
						= false) Then
				Me.OnHALF_DAYSChanging(value)
				Me.SendPropertyChanging
				Me._HALF_DAYS = value
				Me.SendPropertyChanged("HALF_DAYS")
				Me.OnHALF_DAYSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEFAULT_CLEARER_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=11)>  _
	Public Property DEFAULT_CLEARER_ID() As Integer
		Get
			Return Me._DEFAULT_CLEARER_ID
		End Get
		Set
			If ((Me._DEFAULT_CLEARER_ID = value)  _
						= false) Then
				If Me._ACCOUNTS1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDEFAULT_CLEARER_IDChanging(value)
				Me.SendPropertyChanging
				Me._DEFAULT_CLEARER_ID = value
				Me.SendPropertyChanged("DEFAULT_CLEARER_ID")
				Me.OnDEFAULT_CLEARER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FORCE_TO_OTC", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=12)>  _
	Public Property FORCE_TO_OTC() As Boolean
		Get
			Return Me._FORCE_TO_OTC
		End Get
		Set
			If ((Me._FORCE_TO_OTC = value)  _
						= false) Then
				Me.OnFORCE_TO_OTCChanging(value)
				Me.SendPropertyChanging
				Me._FORCE_TO_OTC = value
				Me.SendPropertyChanged("FORCE_TO_OTC")
				Me.OnFORCE_TO_OTCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ISDA_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=13)>  _
	Public Property ISDA_ID() As Integer
		Get
			Return Me._ISDA_ID
		End Get
		Set
			If ((Me._ISDA_ID = value)  _
						= false) Then
				If Me._ISDA_TYPES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnISDA_IDChanging(value)
				Me.SendPropertyChanging
				Me._ISDA_ID = value
				Me.SendPropertyChanged("ISDA_ID")
				Me.OnISDA_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_SHORTCUT", DbType:="Char(1) NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=14)>  _
	Public Property EXCHANGE_SHORTCUT() As Char
		Get
			Return Me._EXCHANGE_SHORTCUT
		End Get
		Set
			If ((Me._EXCHANGE_SHORTCUT = value)  _
						= false) Then
				Me.OnEXCHANGE_SHORTCUTChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_SHORTCUT = value
				Me.SendPropertyChanged("EXCHANGE_SHORTCUT")
				Me.OnEXCHANGE_SHORTCUTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EXCHANGES_DESK_EXCHANGES", Storage:="_DESK_EXCHANGES", ThisKey:="EXCHANGE_ID", OtherKey:="EXCHANGE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=15, EmitDefaultValue:=false)>  _
	Public Property DESK_EXCHANGES() As EntitySet(Of DESK_EXCHANGES)
		Get
			If (Me.serializing  _
						AndAlso (Me._DESK_EXCHANGES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._DESK_EXCHANGES
		End Get
		Set
			Me._DESK_EXCHANGES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EXCHANGES_EXCHANGE_ROUTES", Storage:="_EXCHANGE_ROUTES", ThisKey:="EXCHANGE_ID", OtherKey:="EXCHANGE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=16, EmitDefaultValue:=false)>  _
	Public Property EXCHANGE_ROUTES() As EntitySet(Of EXCHANGE_ROUTES)
		Get
			If (Me.serializing  _
						AndAlso (Me._EXCHANGE_ROUTES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._EXCHANGE_ROUTES
		End Get
		Set
			Me._EXCHANGE_ROUTES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EXCHANGES_ORDERS_FFA_EXCHANGES", Storage:="_ORDERS_FFA_EXCHANGES", ThisKey:="EXCHANGE_ID", OtherKey:="EXCHANGE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=17, EmitDefaultValue:=false)>  _
	Public Property ORDERS_FFA_EXCHANGES() As EntitySet(Of ORDERS_FFA_EXCHANGES)
		Get
			If (Me.serializing  _
						AndAlso (Me._ORDERS_FFA_EXCHANGES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ORDERS_FFA_EXCHANGES
		End Get
		Set
			Me._ORDERS_FFA_EXCHANGES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EXCHANGES_TRADE_CLASS_EXCHANGES", Storage:="_TRADE_CLASS_EXCHANGES", ThisKey:="EXCHANGE_ID", OtherKey:="EXCHANGE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=18, EmitDefaultValue:=false)>  _
	Public Property TRADE_CLASS_EXCHANGES() As EntitySet(Of TRADE_CLASS_EXCHANGES)
		Get
			If (Me.serializing  _
						AndAlso (Me._TRADE_CLASS_EXCHANGES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._TRADE_CLASS_EXCHANGES
		End Get
		Set
			Me._TRADE_CLASS_EXCHANGES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EXCHANGES_TRADES_FFA", Storage:="_TRADES_FFA", ThisKey:="EXCHANGE_ID", OtherKey:="EXCHANGE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=19, EmitDefaultValue:=false)>  _
	Public Property TRADES_FFA() As EntitySet(Of TRADES_FFA)
		Get
			If (Me.serializing  _
						AndAlso (Me._TRADES_FFA.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._TRADES_FFA
		End Get
		Set
			Me._TRADES_FFA.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_EXCHANGES", Storage:="_ACCOUNTS", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNTS() As ACCOUNTS
		Get
			Return Me._ACCOUNTS.Entity
		End Get
		Set
			Dim previousValue As ACCOUNTS = Me._ACCOUNTS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNTS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNTS.Entity = Nothing
					previousValue.EXCHANGES.Remove(Me)
				End If
				Me._ACCOUNTS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EXCHANGES.Add(Me)
					Me._ACCOUNT_ID = value.ACCOUNT_ID
				Else
					Me._ACCOUNT_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ACCOUNTS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_EXCHANGES1", Storage:="_ACCOUNTS1", ThisKey:="DEFAULT_CLEARER_ID", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNTS1() As ACCOUNTS
		Get
			Return Me._ACCOUNTS1.Entity
		End Get
		Set
			Dim previousValue As ACCOUNTS = Me._ACCOUNTS1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNTS1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNTS1.Entity = Nothing
					previousValue.EXCHANGES1.Remove(Me)
				End If
				Me._ACCOUNTS1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EXCHANGES1.Add(Me)
					Me._DEFAULT_CLEARER_ID = value.ACCOUNT_ID
				Else
					Me._DEFAULT_CLEARER_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNTS1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="COUNTRIES_EXCHANGES", Storage:="_COUNTRIES", ThisKey:="COUNTRY_ID", OtherKey:="COUNTRY_ID", IsForeignKey:=true)>  _
	Public Property COUNTRIES() As COUNTRIES
		Get
			Return Me._COUNTRIES.Entity
		End Get
		Set
			Dim previousValue As COUNTRIES = Me._COUNTRIES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._COUNTRIES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._COUNTRIES.Entity = Nothing
					previousValue.EXCHANGES.Remove(Me)
				End If
				Me._COUNTRIES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EXCHANGES.Add(Me)
					Me._COUNTRY_ID = value.COUNTRY_ID
				Else
					Me._COUNTRY_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("COUNTRIES")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ISDA_TYPES_EXCHANGES", Storage:="_ISDA_TYPES", ThisKey:="ISDA_ID", OtherKey:="ISDA_ID", IsForeignKey:=true)>  _
	Public Property ISDA_TYPES() As ISDA_TYPES
		Get
			Return Me._ISDA_TYPES.Entity
		End Get
		Set
			Dim previousValue As ISDA_TYPES = Me._ISDA_TYPES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ISDA_TYPES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ISDA_TYPES.Entity = Nothing
					previousValue.EXCHANGES.Remove(Me)
				End If
				Me._ISDA_TYPES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EXCHANGES.Add(Me)
					Me._ISDA_ID = value.ISDA_ID
				Else
					Me._ISDA_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ISDA_TYPES")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DESK_EXCHANGES(ByVal entity As DESK_EXCHANGES)
		Me.SendPropertyChanging
		entity.EXCHANGES = Me
	End Sub
	
	Private Sub detach_DESK_EXCHANGES(ByVal entity As DESK_EXCHANGES)
		Me.SendPropertyChanging
		entity.EXCHANGES = Nothing
	End Sub
	
	Private Sub attach_EXCHANGE_ROUTES(ByVal entity As EXCHANGE_ROUTES)
		Me.SendPropertyChanging
		entity.EXCHANGES = Me
	End Sub
	
	Private Sub detach_EXCHANGE_ROUTES(ByVal entity As EXCHANGE_ROUTES)
		Me.SendPropertyChanging
		entity.EXCHANGES = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFA_EXCHANGES(ByVal entity As ORDERS_FFA_EXCHANGES)
		Me.SendPropertyChanging
		entity.EXCHANGES = Me
	End Sub
	
	Private Sub detach_ORDERS_FFA_EXCHANGES(ByVal entity As ORDERS_FFA_EXCHANGES)
		Me.SendPropertyChanging
		entity.EXCHANGES = Nothing
	End Sub
	
	Private Sub attach_TRADE_CLASS_EXCHANGES(ByVal entity As TRADE_CLASS_EXCHANGES)
		Me.SendPropertyChanging
		entity.EXCHANGES = Me
	End Sub
	
	Private Sub detach_TRADE_CLASS_EXCHANGES(ByVal entity As TRADE_CLASS_EXCHANGES)
		Me.SendPropertyChanging
		entity.EXCHANGES = Nothing
	End Sub
	
	Private Sub attach_TRADES_FFA(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.EXCHANGES = Me
	End Sub
	
	Private Sub detach_TRADES_FFA(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.EXCHANGES = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._DESK_EXCHANGES = New EntitySet(Of DESK_EXCHANGES)(AddressOf Me.attach_DESK_EXCHANGES, AddressOf Me.detach_DESK_EXCHANGES)
		Me._EXCHANGE_ROUTES = New EntitySet(Of EXCHANGE_ROUTES)(AddressOf Me.attach_EXCHANGE_ROUTES, AddressOf Me.detach_EXCHANGE_ROUTES)
		Me._ORDERS_FFA_EXCHANGES = New EntitySet(Of ORDERS_FFA_EXCHANGES)(AddressOf Me.attach_ORDERS_FFA_EXCHANGES, AddressOf Me.detach_ORDERS_FFA_EXCHANGES)
		Me._TRADE_CLASS_EXCHANGES = New EntitySet(Of TRADE_CLASS_EXCHANGES)(AddressOf Me.attach_TRADE_CLASS_EXCHANGES, AddressOf Me.detach_TRADE_CLASS_EXCHANGES)
		Me._TRADES_FFA = New EntitySet(Of TRADES_FFA)(AddressOf Me.attach_TRADES_FFA, AddressOf Me.detach_TRADES_FFA)
		Me._ACCOUNTS = CType(Nothing, EntityRef(Of ACCOUNTS))
		Me._ACCOUNTS1 = CType(Nothing, EntityRef(Of ACCOUNTS))
		Me._COUNTRIES = CType(Nothing, EntityRef(Of COUNTRIES))
		Me._ISDA_TYPES = CType(Nothing, EntityRef(Of ISDA_TYPES))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HOLIDAYS"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class HOLIDAYS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _HOLIDAY As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnHOLIDAYChanging(value As Date)
    End Sub
    Partial Private Sub OnHOLIDAYChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HOLIDAY", DbType:="DateTime NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property HOLIDAY() As Date
		Get
			Return Me._HOLIDAY
		End Get
		Set
			If ((Me._HOLIDAY = value)  _
						= false) Then
				Me.OnHOLIDAYChanging(value)
				Me.SendPropertyChanging
				Me._HOLIDAY = value
				Me.SendPropertyChanged("HOLIDAY")
				Me.OnHOLIDAYChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.INTEREST_RATES"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class INTEREST_RATES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CCY_ID As Integer
	
	Private _FIXING_DATE As Date
	
	Private _PERIOD As Integer
	
	Private _RATE As Double
	
	Private _CCY As EntityRef(Of CCY)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCCY_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCCY_IDChanged()
    End Sub
    Partial Private Sub OnFIXING_DATEChanging(value As Date)
    End Sub
    Partial Private Sub OnFIXING_DATEChanged()
    End Sub
    Partial Private Sub OnPERIODChanging(value As Integer)
    End Sub
    Partial Private Sub OnPERIODChanged()
    End Sub
    Partial Private Sub OnRATEChanging(value As Double)
    End Sub
    Partial Private Sub OnRATEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCY_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property CCY_ID() As Integer
		Get
			Return Me._CCY_ID
		End Get
		Set
			If ((Me._CCY_ID = value)  _
						= false) Then
				If Me._CCY.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCCY_IDChanging(value)
				Me.SendPropertyChanging
				Me._CCY_ID = value
				Me.SendPropertyChanged("CCY_ID")
				Me.OnCCY_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING_DATE", DbType:="Date NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property FIXING_DATE() As Date
		Get
			Return Me._FIXING_DATE
		End Get
		Set
			If ((Me._FIXING_DATE = value)  _
						= false) Then
				Me.OnFIXING_DATEChanging(value)
				Me.SendPropertyChanging
				Me._FIXING_DATE = value
				Me.SendPropertyChanged("FIXING_DATE")
				Me.OnFIXING_DATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PERIOD", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property PERIOD() As Integer
		Get
			Return Me._PERIOD
		End Get
		Set
			If ((Me._PERIOD = value)  _
						= false) Then
				Me.OnPERIODChanging(value)
				Me.SendPropertyChanging
				Me._PERIOD = value
				Me.SendPropertyChanged("PERIOD")
				Me.OnPERIODChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RATE", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property RATE() As Double
		Get
			Return Me._RATE
		End Get
		Set
			If ((Me._RATE = value)  _
						= false) Then
				Me.OnRATEChanging(value)
				Me.SendPropertyChanging
				Me._RATE = value
				Me.SendPropertyChanged("RATE")
				Me.OnRATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CCY_INTEREST_RATES", Storage:="_CCY", ThisKey:="CCY_ID", OtherKey:="CCY_ID", IsForeignKey:=true)>  _
	Public Property CCY() As CCY
		Get
			Return Me._CCY.Entity
		End Get
		Set
			Dim previousValue As CCY = Me._CCY.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CCY.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CCY.Entity = Nothing
					previousValue.INTEREST_RATES.Remove(Me)
				End If
				Me._CCY.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.INTEREST_RATES.Add(Me)
					Me._CCY_ID = value.CCY_ID
				Else
					Me._CCY_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CCY")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._CCY = CType(Nothing, EntityRef(Of CCY))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ISDA_TYPES"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class ISDA_TYPES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ISDA_ID As Integer
	
	Private _ISDA_DES As String
	
	Private _DESK_EXCHANGES_CLEARERS As EntitySet(Of DESK_EXCHANGES_CLEARERS)
	
	Private _EXCHANGES As EntitySet(Of EXCHANGES)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnISDA_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnISDA_IDChanged()
    End Sub
    Partial Private Sub OnISDA_DESChanging(value As String)
    End Sub
    Partial Private Sub OnISDA_DESChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ISDA_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ISDA_ID() As Integer
		Get
			Return Me._ISDA_ID
		End Get
		Set
			If ((Me._ISDA_ID = value)  _
						= false) Then
				Me.OnISDA_IDChanging(value)
				Me.SendPropertyChanging
				Me._ISDA_ID = value
				Me.SendPropertyChanged("ISDA_ID")
				Me.OnISDA_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ISDA_DES", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property ISDA_DES() As String
		Get
			Return Me._ISDA_DES
		End Get
		Set
			If (String.Equals(Me._ISDA_DES, value) = false) Then
				Me.OnISDA_DESChanging(value)
				Me.SendPropertyChanging
				Me._ISDA_DES = value
				Me.SendPropertyChanged("ISDA_DES")
				Me.OnISDA_DESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ISDA_TYPES_DESK_EXCHANGES_CLEARERS", Storage:="_DESK_EXCHANGES_CLEARERS", ThisKey:="ISDA_ID", OtherKey:="ISDA_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3, EmitDefaultValue:=false)>  _
	Public Property DESK_EXCHANGES_CLEARERS() As EntitySet(Of DESK_EXCHANGES_CLEARERS)
		Get
			If (Me.serializing  _
						AndAlso (Me._DESK_EXCHANGES_CLEARERS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._DESK_EXCHANGES_CLEARERS
		End Get
		Set
			Me._DESK_EXCHANGES_CLEARERS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ISDA_TYPES_EXCHANGES", Storage:="_EXCHANGES", ThisKey:="ISDA_ID", OtherKey:="ISDA_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4, EmitDefaultValue:=false)>  _
	Public Property EXCHANGES() As EntitySet(Of EXCHANGES)
		Get
			If (Me.serializing  _
						AndAlso (Me._EXCHANGES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._EXCHANGES
		End Get
		Set
			Me._EXCHANGES.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DESK_EXCHANGES_CLEARERS(ByVal entity As DESK_EXCHANGES_CLEARERS)
		Me.SendPropertyChanging
		entity.ISDA_TYPES = Me
	End Sub
	
	Private Sub detach_DESK_EXCHANGES_CLEARERS(ByVal entity As DESK_EXCHANGES_CLEARERS)
		Me.SendPropertyChanging
		entity.ISDA_TYPES = Nothing
	End Sub
	
	Private Sub attach_EXCHANGES(ByVal entity As EXCHANGES)
		Me.SendPropertyChanging
		entity.ISDA_TYPES = Me
	End Sub
	
	Private Sub detach_EXCHANGES(ByVal entity As EXCHANGES)
		Me.SendPropertyChanging
		entity.ISDA_TYPES = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._DESK_EXCHANGES_CLEARERS = New EntitySet(Of DESK_EXCHANGES_CLEARERS)(AddressOf Me.attach_DESK_EXCHANGES_CLEARERS, AddressOf Me.detach_DESK_EXCHANGES_CLEARERS)
		Me._EXCHANGES = New EntitySet(Of EXCHANGES)(AddressOf Me.attach_EXCHANGES, AddressOf Me.detach_EXCHANGES)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LAST_DAY_RULE"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class LAST_DAY_RULE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LAST_DAY_RULE_ID As Integer
	
	Private _LAST_DAY_RULE_DESCR As String
	
	Private _LAST_DAY_RULE_MONTHS As EntitySet(Of LAST_DAY_RULE_MONTHS)
	
	Private _ROUTES As EntitySet(Of ROUTES)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLAST_DAY_RULE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnLAST_DAY_RULE_IDChanged()
    End Sub
    Partial Private Sub OnLAST_DAY_RULE_DESCRChanging(value As String)
    End Sub
    Partial Private Sub OnLAST_DAY_RULE_DESCRChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LAST_DAY_RULE_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property LAST_DAY_RULE_ID() As Integer
		Get
			Return Me._LAST_DAY_RULE_ID
		End Get
		Set
			If ((Me._LAST_DAY_RULE_ID = value)  _
						= false) Then
				Me.OnLAST_DAY_RULE_IDChanging(value)
				Me.SendPropertyChanging
				Me._LAST_DAY_RULE_ID = value
				Me.SendPropertyChanged("LAST_DAY_RULE_ID")
				Me.OnLAST_DAY_RULE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LAST_DAY_RULE_DESCR", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property LAST_DAY_RULE_DESCR() As String
		Get
			Return Me._LAST_DAY_RULE_DESCR
		End Get
		Set
			If (String.Equals(Me._LAST_DAY_RULE_DESCR, value) = false) Then
				Me.OnLAST_DAY_RULE_DESCRChanging(value)
				Me.SendPropertyChanging
				Me._LAST_DAY_RULE_DESCR = value
				Me.SendPropertyChanged("LAST_DAY_RULE_DESCR")
				Me.OnLAST_DAY_RULE_DESCRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LAST_DAY_RULE_LAST_DAY_RULE_MONTHS", Storage:="_LAST_DAY_RULE_MONTHS", ThisKey:="LAST_DAY_RULE_ID", OtherKey:="LAST_DAY_RULE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3, EmitDefaultValue:=false)>  _
	Public Property LAST_DAY_RULE_MONTHS() As EntitySet(Of LAST_DAY_RULE_MONTHS)
		Get
			If (Me.serializing  _
						AndAlso (Me._LAST_DAY_RULE_MONTHS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._LAST_DAY_RULE_MONTHS
		End Get
		Set
			Me._LAST_DAY_RULE_MONTHS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LAST_DAY_RULE_ROUTES", Storage:="_ROUTES", ThisKey:="LAST_DAY_RULE_ID", OtherKey:="LAST_DAY_RULE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4, EmitDefaultValue:=false)>  _
	Public Property ROUTES() As EntitySet(Of ROUTES)
		Get
			If (Me.serializing  _
						AndAlso (Me._ROUTES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ROUTES
		End Get
		Set
			Me._ROUTES.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LAST_DAY_RULE_MONTHS(ByVal entity As LAST_DAY_RULE_MONTHS)
		Me.SendPropertyChanging
		entity.LAST_DAY_RULE = Me
	End Sub
	
	Private Sub detach_LAST_DAY_RULE_MONTHS(ByVal entity As LAST_DAY_RULE_MONTHS)
		Me.SendPropertyChanging
		entity.LAST_DAY_RULE = Nothing
	End Sub
	
	Private Sub attach_ROUTES(ByVal entity As ROUTES)
		Me.SendPropertyChanging
		entity.LAST_DAY_RULE = Me
	End Sub
	
	Private Sub detach_ROUTES(ByVal entity As ROUTES)
		Me.SendPropertyChanging
		entity.LAST_DAY_RULE = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._LAST_DAY_RULE_MONTHS = New EntitySet(Of LAST_DAY_RULE_MONTHS)(AddressOf Me.attach_LAST_DAY_RULE_MONTHS, AddressOf Me.detach_LAST_DAY_RULE_MONTHS)
		Me._ROUTES = New EntitySet(Of ROUTES)(AddressOf Me.attach_ROUTES, AddressOf Me.detach_ROUTES)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LAST_DAY_RULE_MONTHS"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class LAST_DAY_RULE_MONTHS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LAST_DAY_RULE_ID As Integer
	
	Private _MONTH As Short
	
	Private _SETTLEMENT_DAY As Short
	
	Private _LAST_DAY_RULE As EntityRef(Of LAST_DAY_RULE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLAST_DAY_RULE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnLAST_DAY_RULE_IDChanged()
    End Sub
    Partial Private Sub OnMONTHChanging(value As Short)
    End Sub
    Partial Private Sub OnMONTHChanged()
    End Sub
    Partial Private Sub OnSETTLEMENT_DAYChanging(value As Short)
    End Sub
    Partial Private Sub OnSETTLEMENT_DAYChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LAST_DAY_RULE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property LAST_DAY_RULE_ID() As Integer
		Get
			Return Me._LAST_DAY_RULE_ID
		End Get
		Set
			If ((Me._LAST_DAY_RULE_ID = value)  _
						= false) Then
				If Me._LAST_DAY_RULE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLAST_DAY_RULE_IDChanging(value)
				Me.SendPropertyChanging
				Me._LAST_DAY_RULE_ID = value
				Me.SendPropertyChanged("LAST_DAY_RULE_ID")
				Me.OnLAST_DAY_RULE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MONTH", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property MONTH() As Short
		Get
			Return Me._MONTH
		End Get
		Set
			If ((Me._MONTH = value)  _
						= false) Then
				Me.OnMONTHChanging(value)
				Me.SendPropertyChanging
				Me._MONTH = value
				Me.SendPropertyChanged("MONTH")
				Me.OnMONTHChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SETTLEMENT_DAY", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property SETTLEMENT_DAY() As Short
		Get
			Return Me._SETTLEMENT_DAY
		End Get
		Set
			If ((Me._SETTLEMENT_DAY = value)  _
						= false) Then
				Me.OnSETTLEMENT_DAYChanging(value)
				Me.SendPropertyChanging
				Me._SETTLEMENT_DAY = value
				Me.SendPropertyChanged("SETTLEMENT_DAY")
				Me.OnSETTLEMENT_DAYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LAST_DAY_RULE_LAST_DAY_RULE_MONTHS", Storage:="_LAST_DAY_RULE", ThisKey:="LAST_DAY_RULE_ID", OtherKey:="LAST_DAY_RULE_ID", IsForeignKey:=true)>  _
	Public Property LAST_DAY_RULE() As LAST_DAY_RULE
		Get
			Return Me._LAST_DAY_RULE.Entity
		End Get
		Set
			Dim previousValue As LAST_DAY_RULE = Me._LAST_DAY_RULE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._LAST_DAY_RULE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._LAST_DAY_RULE.Entity = Nothing
					previousValue.LAST_DAY_RULE_MONTHS.Remove(Me)
				End If
				Me._LAST_DAY_RULE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LAST_DAY_RULE_MONTHS.Add(Me)
					Me._LAST_DAY_RULE_ID = value.LAST_DAY_RULE_ID
				Else
					Me._LAST_DAY_RULE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("LAST_DAY_RULE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._LAST_DAY_RULE = CType(Nothing, EntityRef(Of LAST_DAY_RULE))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LAYOUTS"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class LAYOUTS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DESK_TRADER_ID As Integer
	
	Private _FILENAME As String
	
	Private _CONTENTS As System.Data.Linq.Binary
	
	Private _DESK_TRADERS As EntityRef(Of DESK_TRADERS)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDESK_TRADER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDESK_TRADER_IDChanged()
    End Sub
    Partial Private Sub OnFILENAMEChanging(value As String)
    End Sub
    Partial Private Sub OnFILENAMEChanged()
    End Sub
    Partial Private Sub OnCONTENTSChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnCONTENTSChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_TRADER_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property DESK_TRADER_ID() As Integer
		Get
			Return Me._DESK_TRADER_ID
		End Get
		Set
			If ((Me._DESK_TRADER_ID = value)  _
						= false) Then
				If Me._DESK_TRADERS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDESK_TRADER_IDChanging(value)
				Me.SendPropertyChanging
				Me._DESK_TRADER_ID = value
				Me.SendPropertyChanged("DESK_TRADER_ID")
				Me.OnDESK_TRADER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FILENAME", DbType:="VarChar(255) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property FILENAME() As String
		Get
			Return Me._FILENAME
		End Get
		Set
			If (String.Equals(Me._FILENAME, value) = false) Then
				Me.OnFILENAMEChanging(value)
				Me.SendPropertyChanging
				Me._FILENAME = value
				Me.SendPropertyChanged("FILENAME")
				Me.OnFILENAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONTENTS", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property CONTENTS() As System.Data.Linq.Binary
		Get
			Return Me._CONTENTS
		End Get
		Set
			If (Object.Equals(Me._CONTENTS, value) = false) Then
				Me.OnCONTENTSChanging(value)
				Me.SendPropertyChanging
				Me._CONTENTS = value
				Me.SendPropertyChanged("CONTENTS")
				Me.OnCONTENTSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADERS_LAYOUTS", Storage:="_DESK_TRADERS", ThisKey:="DESK_TRADER_ID", OtherKey:="DESK_TRADER_ID", IsForeignKey:=true)>  _
	Public Property DESK_TRADERS() As DESK_TRADERS
		Get
			Return Me._DESK_TRADERS.Entity
		End Get
		Set
			Dim previousValue As DESK_TRADERS = Me._DESK_TRADERS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DESK_TRADERS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DESK_TRADERS.Entity = Nothing
					previousValue.LAYOUTS.Remove(Me)
				End If
				Me._DESK_TRADERS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LAYOUTS.Add(Me)
					Me._DESK_TRADER_ID = value.DESK_TRADER_ID
				Else
					Me._DESK_TRADER_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DESK_TRADERS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._DESK_TRADERS = CType(Nothing, EntityRef(Of DESK_TRADERS))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ORDER_GOOD_TILL"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class ORDER_GOOD_TILL
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ORDER_GOOD_TILL_ID As Short
	
	Private _ORDER_GOOD_TILL_DESCR As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnORDER_GOOD_TILL_IDChanging(value As Short)
    End Sub
    Partial Private Sub OnORDER_GOOD_TILL_IDChanged()
    End Sub
    Partial Private Sub OnORDER_GOOD_TILL_DESCRChanging(value As String)
    End Sub
    Partial Private Sub OnORDER_GOOD_TILL_DESCRChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_GOOD_TILL_ID", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ORDER_GOOD_TILL_ID() As Short
		Get
			Return Me._ORDER_GOOD_TILL_ID
		End Get
		Set
			If ((Me._ORDER_GOOD_TILL_ID = value)  _
						= false) Then
				Me.OnORDER_GOOD_TILL_IDChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_GOOD_TILL_ID = value
				Me.SendPropertyChanged("ORDER_GOOD_TILL_ID")
				Me.OnORDER_GOOD_TILL_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_GOOD_TILL_DESCR", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property ORDER_GOOD_TILL_DESCR() As String
		Get
			Return Me._ORDER_GOOD_TILL_DESCR
		End Get
		Set
			If (String.Equals(Me._ORDER_GOOD_TILL_DESCR, value) = false) Then
				Me.OnORDER_GOOD_TILL_DESCRChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_GOOD_TILL_DESCR = value
				Me.SendPropertyChanged("ORDER_GOOD_TILL_DESCR")
				Me.OnORDER_GOOD_TILL_DESCRChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ORDER_STATUS"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class ORDER_STATUS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ORDER_STATUS_ID As Integer
	
	Private _ORDER_STATUS_DESCR As String
	
	Private _ORDER_STATUS_SHORT As Char
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnORDER_STATUS_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnORDER_STATUS_IDChanged()
    End Sub
    Partial Private Sub OnORDER_STATUS_DESCRChanging(value As String)
    End Sub
    Partial Private Sub OnORDER_STATUS_DESCRChanged()
    End Sub
    Partial Private Sub OnORDER_STATUS_SHORTChanging(value As Char)
    End Sub
    Partial Private Sub OnORDER_STATUS_SHORTChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_STATUS_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ORDER_STATUS_ID() As Integer
		Get
			Return Me._ORDER_STATUS_ID
		End Get
		Set
			If ((Me._ORDER_STATUS_ID = value)  _
						= false) Then
				Me.OnORDER_STATUS_IDChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_STATUS_ID = value
				Me.SendPropertyChanged("ORDER_STATUS_ID")
				Me.OnORDER_STATUS_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_STATUS_DESCR", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property ORDER_STATUS_DESCR() As String
		Get
			Return Me._ORDER_STATUS_DESCR
		End Get
		Set
			If (String.Equals(Me._ORDER_STATUS_DESCR, value) = false) Then
				Me.OnORDER_STATUS_DESCRChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_STATUS_DESCR = value
				Me.SendPropertyChanged("ORDER_STATUS_DESCR")
				Me.OnORDER_STATUS_DESCRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_STATUS_SHORT", DbType:="Char(1) NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property ORDER_STATUS_SHORT() As Char
		Get
			Return Me._ORDER_STATUS_SHORT
		End Get
		Set
			If ((Me._ORDER_STATUS_SHORT = value)  _
						= false) Then
				Me.OnORDER_STATUS_SHORTChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_STATUS_SHORT = value
				Me.SendPropertyChanged("ORDER_STATUS_SHORT")
				Me.OnORDER_STATUS_SHORTChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ORDERS_FFA"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class ORDERS_FFA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ORDER_ID As Integer
	
	Private _ORDER_TYPE As Short
	
	Private _ORDER_DATETIME As Date
	
	Private _DESK_TRADER_ID As Integer
	
	Private _FOR_DESK_TRADER_ID As Integer
	
	Private _ORDERED_BY_WHO As Char
	
	Private _PREVIOUS_ORDER_ID As Integer
	
	Private _LIVE_STATUS As Char
	
	Private _ORDER_QUALIFIER As Char
	
	Private _ORDER_BS As Char
	
	Private _ROUTE_ID As Integer
	
	Private _MM1 As Short
	
	Private _YY1 As Short
	
	Private _MM2 As Short
	
	Private _YY2 As Short
	
	Private _SHORTDES As String
	
	Private _PRICE_INDICATED As Double
	
	Private _PRICE_TYPE As Char
	
	Private _PRICE_TRY_BETTER As Boolean
	
	Private _ORDER_QUANTITY As Integer
	
	Private _DAY_QUALIFIER As Byte
	
	Private _FLEXIBLE_QUANTITY As Short
	
	Private _QUANTITY_STEP As Integer
	
	Private _ORDER_GOOD_TILL As Short
	
	Private _ORDER_TIME_LIMIT As Integer
	
	Private _SHOW_MY_NAME As Boolean
	
	Private _PNC_ORDER As Boolean
	
	Private _SINGLE_EXCHANGE_EXECUTION As Short
	
	Private _ORDER_TRADED_ON_EXCHANGE As System.Nullable(Of Integer)
	
	Private _CLEARER_ID As System.Nullable(Of Integer)
	
	Private _ORDER_EXCHANGES As String
	
	Private _THREAD As Integer
	
	Private _COUNTER_PARTY_ORDER_ID As System.Nullable(Of Integer)
	
	Private _LOCK_DESK_TRADER_ID As System.Nullable(Of Integer)
	
	Private _LOCK_ORDER_ID As System.Nullable(Of Integer)
	
	Private _COMMIT_ORDER_ID As System.Nullable(Of Integer)
	
	Private _INFORM_DESK_ID As System.Nullable(Of Integer)
	
	Private _NEGOTIATION_ORDER_ID As System.Nullable(Of Integer)
	
	Private _LOCKED_BY_ORDER_ID As System.Nullable(Of Integer)
	
	Private _SPREAD_LEG_TYPE As System.Nullable(Of Short)
	
	Private _SPREAD_ORDER_ID As System.Nullable(Of Integer)
	
	Private _CROSS_ORDER_ID1 As System.Nullable(Of Integer)
	
	Private _CROSS_ORDER_ID2 As System.Nullable(Of Integer)
	
	Private _ROUTE_ID2 As System.Nullable(Of Integer)
	
	Private _MM21 As System.Nullable(Of Short)
	
	Private _YY21 As System.Nullable(Of Short)
	
	Private _MM22 As System.Nullable(Of Short)
	
	Private _YY22 As System.Nullable(Of Short)
	
	Private _SHORTDES2 As String
	
	Private _PRICE_INDICATED2 As System.Nullable(Of Double)
	
	Private _PRICE_TYPE2 As System.Nullable(Of Char)
	
	Private _PRICE_TRY_BETTER2 As System.Nullable(Of Boolean)
	
	Private _ORDER_QUANTITY2 As System.Nullable(Of Integer)
	
	Private _DAY_QUALIFIER2 As System.Nullable(Of Byte)
	
	Private _FLEXIBLE_QUANTITY2 As System.Nullable(Of Short)
	
	Private _ORDER_EXCHANGES2 As String
	
	Private _STRIKE_PRICE As System.Nullable(Of Double)
	
	Private _ICEBERG As System.Nullable(Of Boolean)
	
	Private _BROKER_INVISIBLE As System.Nullable(Of Boolean)
	
	Private _ORDERS_FFA1 As EntitySet(Of ORDERS_FFA)
	
	Private _ORDERS_FFA3 As EntitySet(Of ORDERS_FFA)
	
	Private _ORDERS_FFA5 As EntitySet(Of ORDERS_FFA)
	
	Private _ORDERS_FFA7 As EntitySet(Of ORDERS_FFA)
	
	Private _ORDERS_FFA9 As EntitySet(Of ORDERS_FFA)
	
	Private _ORDERS_FFA11 As EntitySet(Of ORDERS_FFA)
	
	Private _ORDERS_FFA13 As EntitySet(Of ORDERS_FFA)
	
	Private _ORDERS_FFA15 As EntitySet(Of ORDERS_FFA)
	
	Private _ORDERS_FFA_EXCHANGES As EntitySet(Of ORDERS_FFA_EXCHANGES)
	
	Private _TRADES_FFA As EntitySet(Of TRADES_FFA)
	
	Private _TRADES_FFA1 As EntitySet(Of TRADES_FFA)
	
	Private _ACCOUNT_DESKS As EntityRef(Of ACCOUNT_DESKS)
	
	Private _ACCOUNTS As EntityRef(Of ACCOUNTS)
	
	Private _DESK_TRADERS As EntityRef(Of DESK_TRADERS)
	
	Private _DESK_TRADERS1 As EntityRef(Of DESK_TRADERS)
	
	Private _DESK_TRADERS2 As EntityRef(Of DESK_TRADERS)
	
	Private _ORDERS_FFA As EntityRef(Of ORDERS_FFA)
	
	Private _ORDERS_FFA2 As EntityRef(Of ORDERS_FFA)
	
	Private _ORDERS_FFA4 As EntityRef(Of ORDERS_FFA)
	
	Private _ORDERS_FFA6 As EntityRef(Of ORDERS_FFA)
	
	Private _ORDERS_FFA8 As EntityRef(Of ORDERS_FFA)
	
	Private _ORDERS_FFA10 As EntityRef(Of ORDERS_FFA)
	
	Private _ORDERS_FFA12 As EntityRef(Of ORDERS_FFA)
	
	Private _ORDERS_FFA14 As EntityRef(Of ORDERS_FFA)
	
	Private _ROUTES As EntityRef(Of ROUTES)
	
	Private _ROUTES1 As EntityRef(Of ROUTES)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnORDER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnORDER_IDChanged()
    End Sub
    Partial Private Sub OnORDER_TYPEChanging(value As Short)
    End Sub
    Partial Private Sub OnORDER_TYPEChanged()
    End Sub
    Partial Private Sub OnORDER_DATETIMEChanging(value As Date)
    End Sub
    Partial Private Sub OnORDER_DATETIMEChanged()
    End Sub
    Partial Private Sub OnDESK_TRADER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDESK_TRADER_IDChanged()
    End Sub
    Partial Private Sub OnFOR_DESK_TRADER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFOR_DESK_TRADER_IDChanged()
    End Sub
    Partial Private Sub OnORDERED_BY_WHOChanging(value As Char)
    End Sub
    Partial Private Sub OnORDERED_BY_WHOChanged()
    End Sub
    Partial Private Sub OnPREVIOUS_ORDER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPREVIOUS_ORDER_IDChanged()
    End Sub
    Partial Private Sub OnLIVE_STATUSChanging(value As Char)
    End Sub
    Partial Private Sub OnLIVE_STATUSChanged()
    End Sub
    Partial Private Sub OnORDER_QUALIFIERChanging(value As Char)
    End Sub
    Partial Private Sub OnORDER_QUALIFIERChanged()
    End Sub
    Partial Private Sub OnORDER_BSChanging(value As Char)
    End Sub
    Partial Private Sub OnORDER_BSChanged()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnMM1Changing(value As Short)
    End Sub
    Partial Private Sub OnMM1Changed()
    End Sub
    Partial Private Sub OnYY1Changing(value As Short)
    End Sub
    Partial Private Sub OnYY1Changed()
    End Sub
    Partial Private Sub OnMM2Changing(value As Short)
    End Sub
    Partial Private Sub OnMM2Changed()
    End Sub
    Partial Private Sub OnYY2Changing(value As Short)
    End Sub
    Partial Private Sub OnYY2Changed()
    End Sub
    Partial Private Sub OnSHORTDESChanging(value As String)
    End Sub
    Partial Private Sub OnSHORTDESChanged()
    End Sub
    Partial Private Sub OnPRICE_INDICATEDChanging(value As Double)
    End Sub
    Partial Private Sub OnPRICE_INDICATEDChanged()
    End Sub
    Partial Private Sub OnPRICE_TYPEChanging(value As Char)
    End Sub
    Partial Private Sub OnPRICE_TYPEChanged()
    End Sub
    Partial Private Sub OnPRICE_TRY_BETTERChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPRICE_TRY_BETTERChanged()
    End Sub
    Partial Private Sub OnORDER_QUANTITYChanging(value As Integer)
    End Sub
    Partial Private Sub OnORDER_QUANTITYChanged()
    End Sub
    Partial Private Sub OnDAY_QUALIFIERChanging(value As Byte)
    End Sub
    Partial Private Sub OnDAY_QUALIFIERChanged()
    End Sub
    Partial Private Sub OnFLEXIBLE_QUANTITYChanging(value As Short)
    End Sub
    Partial Private Sub OnFLEXIBLE_QUANTITYChanged()
    End Sub
    Partial Private Sub OnQUANTITY_STEPChanging(value As Integer)
    End Sub
    Partial Private Sub OnQUANTITY_STEPChanged()
    End Sub
    Partial Private Sub OnORDER_GOOD_TILLChanging(value As Short)
    End Sub
    Partial Private Sub OnORDER_GOOD_TILLChanged()
    End Sub
    Partial Private Sub OnORDER_TIME_LIMITChanging(value As Integer)
    End Sub
    Partial Private Sub OnORDER_TIME_LIMITChanged()
    End Sub
    Partial Private Sub OnSHOW_MY_NAMEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSHOW_MY_NAMEChanged()
    End Sub
    Partial Private Sub OnPNC_ORDERChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPNC_ORDERChanged()
    End Sub
    Partial Private Sub OnSINGLE_EXCHANGE_EXECUTIONChanging(value As Short)
    End Sub
    Partial Private Sub OnSINGLE_EXCHANGE_EXECUTIONChanged()
    End Sub
    Partial Private Sub OnORDER_TRADED_ON_EXCHANGEChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnORDER_TRADED_ON_EXCHANGEChanged()
    End Sub
    Partial Private Sub OnCLEARER_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCLEARER_IDChanged()
    End Sub
    Partial Private Sub OnORDER_EXCHANGESChanging(value As String)
    End Sub
    Partial Private Sub OnORDER_EXCHANGESChanged()
    End Sub
    Partial Private Sub OnTHREADChanging(value As Integer)
    End Sub
    Partial Private Sub OnTHREADChanged()
    End Sub
    Partial Private Sub OnCOUNTER_PARTY_ORDER_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCOUNTER_PARTY_ORDER_IDChanged()
    End Sub
    Partial Private Sub OnLOCK_DESK_TRADER_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLOCK_DESK_TRADER_IDChanged()
    End Sub
    Partial Private Sub OnLOCK_ORDER_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLOCK_ORDER_IDChanged()
    End Sub
    Partial Private Sub OnCOMMIT_ORDER_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCOMMIT_ORDER_IDChanged()
    End Sub
    Partial Private Sub OnINFORM_DESK_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnINFORM_DESK_IDChanged()
    End Sub
    Partial Private Sub OnNEGOTIATION_ORDER_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNEGOTIATION_ORDER_IDChanged()
    End Sub
    Partial Private Sub OnLOCKED_BY_ORDER_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLOCKED_BY_ORDER_IDChanged()
    End Sub
    Partial Private Sub OnSPREAD_LEG_TYPEChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnSPREAD_LEG_TYPEChanged()
    End Sub
    Partial Private Sub OnSPREAD_ORDER_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSPREAD_ORDER_IDChanged()
    End Sub
    Partial Private Sub OnCROSS_ORDER_ID1Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCROSS_ORDER_ID1Changed()
    End Sub
    Partial Private Sub OnCROSS_ORDER_ID2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCROSS_ORDER_ID2Changed()
    End Sub
    Partial Private Sub OnROUTE_ID2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnROUTE_ID2Changed()
    End Sub
    Partial Private Sub OnMM21Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMM21Changed()
    End Sub
    Partial Private Sub OnYY21Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnYY21Changed()
    End Sub
    Partial Private Sub OnMM22Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMM22Changed()
    End Sub
    Partial Private Sub OnYY22Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnYY22Changed()
    End Sub
    Partial Private Sub OnSHORTDES2Changing(value As String)
    End Sub
    Partial Private Sub OnSHORTDES2Changed()
    End Sub
    Partial Private Sub OnPRICE_INDICATED2Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPRICE_INDICATED2Changed()
    End Sub
    Partial Private Sub OnPRICE_TYPE2Changing(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnPRICE_TYPE2Changed()
    End Sub
    Partial Private Sub OnPRICE_TRY_BETTER2Changing(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPRICE_TRY_BETTER2Changed()
    End Sub
    Partial Private Sub OnORDER_QUANTITY2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnORDER_QUANTITY2Changed()
    End Sub
    Partial Private Sub OnDAY_QUALIFIER2Changing(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnDAY_QUALIFIER2Changed()
    End Sub
    Partial Private Sub OnFLEXIBLE_QUANTITY2Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnFLEXIBLE_QUANTITY2Changed()
    End Sub
    Partial Private Sub OnORDER_EXCHANGES2Changing(value As String)
    End Sub
    Partial Private Sub OnORDER_EXCHANGES2Changed()
    End Sub
    Partial Private Sub OnSTRIKE_PRICEChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnSTRIKE_PRICEChanged()
    End Sub
    Partial Private Sub OnICEBERGChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnICEBERGChanged()
    End Sub
    Partial Private Sub OnBROKER_INVISIBLEChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnBROKER_INVISIBLEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ORDER_ID() As Integer
		Get
			Return Me._ORDER_ID
		End Get
		Set
			If ((Me._ORDER_ID = value)  _
						= false) Then
				Me.OnORDER_IDChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_ID = value
				Me.SendPropertyChanged("ORDER_ID")
				Me.OnORDER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_TYPE", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property ORDER_TYPE() As Short
		Get
			Return Me._ORDER_TYPE
		End Get
		Set
			If ((Me._ORDER_TYPE = value)  _
						= false) Then
				Me.OnORDER_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_TYPE = value
				Me.SendPropertyChanged("ORDER_TYPE")
				Me.OnORDER_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_DATETIME", DbType:="DateTime2 NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property ORDER_DATETIME() As Date
		Get
			Return Me._ORDER_DATETIME
		End Get
		Set
			If ((Me._ORDER_DATETIME = value)  _
						= false) Then
				Me.OnORDER_DATETIMEChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_DATETIME = value
				Me.SendPropertyChanged("ORDER_DATETIME")
				Me.OnORDER_DATETIMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_TRADER_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property DESK_TRADER_ID() As Integer
		Get
			Return Me._DESK_TRADER_ID
		End Get
		Set
			If ((Me._DESK_TRADER_ID = value)  _
						= false) Then
				If Me._DESK_TRADERS1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDESK_TRADER_IDChanging(value)
				Me.SendPropertyChanging
				Me._DESK_TRADER_ID = value
				Me.SendPropertyChanged("DESK_TRADER_ID")
				Me.OnDESK_TRADER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FOR_DESK_TRADER_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property FOR_DESK_TRADER_ID() As Integer
		Get
			Return Me._FOR_DESK_TRADER_ID
		End Get
		Set
			If ((Me._FOR_DESK_TRADER_ID = value)  _
						= false) Then
				If Me._DESK_TRADERS2.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFOR_DESK_TRADER_IDChanging(value)
				Me.SendPropertyChanging
				Me._FOR_DESK_TRADER_ID = value
				Me.SendPropertyChanged("FOR_DESK_TRADER_ID")
				Me.OnFOR_DESK_TRADER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDERED_BY_WHO", DbType:="Char(1) NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property ORDERED_BY_WHO() As Char
		Get
			Return Me._ORDERED_BY_WHO
		End Get
		Set
			If ((Me._ORDERED_BY_WHO = value)  _
						= false) Then
				Me.OnORDERED_BY_WHOChanging(value)
				Me.SendPropertyChanging
				Me._ORDERED_BY_WHO = value
				Me.SendPropertyChanged("ORDERED_BY_WHO")
				Me.OnORDERED_BY_WHOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PREVIOUS_ORDER_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property PREVIOUS_ORDER_ID() As Integer
		Get
			Return Me._PREVIOUS_ORDER_ID
		End Get
		Set
			If ((Me._PREVIOUS_ORDER_ID = value)  _
						= false) Then
				Me.OnPREVIOUS_ORDER_IDChanging(value)
				Me.SendPropertyChanging
				Me._PREVIOUS_ORDER_ID = value
				Me.SendPropertyChanged("PREVIOUS_ORDER_ID")
				Me.OnPREVIOUS_ORDER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LIVE_STATUS", DbType:="Char(1) NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property LIVE_STATUS() As Char
		Get
			Return Me._LIVE_STATUS
		End Get
		Set
			If ((Me._LIVE_STATUS = value)  _
						= false) Then
				Me.OnLIVE_STATUSChanging(value)
				Me.SendPropertyChanging
				Me._LIVE_STATUS = value
				Me.SendPropertyChanged("LIVE_STATUS")
				Me.OnLIVE_STATUSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_QUALIFIER", DbType:="Char(1) NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property ORDER_QUALIFIER() As Char
		Get
			Return Me._ORDER_QUALIFIER
		End Get
		Set
			If ((Me._ORDER_QUALIFIER = value)  _
						= false) Then
				Me.OnORDER_QUALIFIERChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_QUALIFIER = value
				Me.SendPropertyChanged("ORDER_QUALIFIER")
				Me.OnORDER_QUALIFIERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_BS", DbType:="Char(1) NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10)>  _
	Public Property ORDER_BS() As Char
		Get
			Return Me._ORDER_BS
		End Get
		Set
			If ((Me._ORDER_BS = value)  _
						= false) Then
				Me.OnORDER_BSChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_BS = value
				Me.SendPropertyChanged("ORDER_BS")
				Me.OnORDER_BSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=11)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If Me._ROUTES1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM1", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=12)>  _
	Public Property MM1() As Short
		Get
			Return Me._MM1
		End Get
		Set
			If ((Me._MM1 = value)  _
						= false) Then
				Me.OnMM1Changing(value)
				Me.SendPropertyChanging
				Me._MM1 = value
				Me.SendPropertyChanged("MM1")
				Me.OnMM1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY1", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=13)>  _
	Public Property YY1() As Short
		Get
			Return Me._YY1
		End Get
		Set
			If ((Me._YY1 = value)  _
						= false) Then
				Me.OnYY1Changing(value)
				Me.SendPropertyChanging
				Me._YY1 = value
				Me.SendPropertyChanged("YY1")
				Me.OnYY1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM2", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=14)>  _
	Public Property MM2() As Short
		Get
			Return Me._MM2
		End Get
		Set
			If ((Me._MM2 = value)  _
						= false) Then
				Me.OnMM2Changing(value)
				Me.SendPropertyChanging
				Me._MM2 = value
				Me.SendPropertyChanged("MM2")
				Me.OnMM2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY2", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=15)>  _
	Public Property YY2() As Short
		Get
			Return Me._YY2
		End Get
		Set
			If ((Me._YY2 = value)  _
						= false) Then
				Me.OnYY2Changing(value)
				Me.SendPropertyChanging
				Me._YY2 = value
				Me.SendPropertyChanged("YY2")
				Me.OnYY2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SHORTDES", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=16)>  _
	Public Property SHORTDES() As String
		Get
			Return Me._SHORTDES
		End Get
		Set
			If (String.Equals(Me._SHORTDES, value) = false) Then
				Me.OnSHORTDESChanging(value)
				Me.SendPropertyChanging
				Me._SHORTDES = value
				Me.SendPropertyChanged("SHORTDES")
				Me.OnSHORTDESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE_INDICATED", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=17)>  _
	Public Property PRICE_INDICATED() As Double
		Get
			Return Me._PRICE_INDICATED
		End Get
		Set
			If ((Me._PRICE_INDICATED = value)  _
						= false) Then
				Me.OnPRICE_INDICATEDChanging(value)
				Me.SendPropertyChanging
				Me._PRICE_INDICATED = value
				Me.SendPropertyChanged("PRICE_INDICATED")
				Me.OnPRICE_INDICATEDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE_TYPE", DbType:="Char(1) NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=18)>  _
	Public Property PRICE_TYPE() As Char
		Get
			Return Me._PRICE_TYPE
		End Get
		Set
			If ((Me._PRICE_TYPE = value)  _
						= false) Then
				Me.OnPRICE_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._PRICE_TYPE = value
				Me.SendPropertyChanged("PRICE_TYPE")
				Me.OnPRICE_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE_TRY_BETTER", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=19)>  _
	Public Property PRICE_TRY_BETTER() As Boolean
		Get
			Return Me._PRICE_TRY_BETTER
		End Get
		Set
			If ((Me._PRICE_TRY_BETTER = value)  _
						= false) Then
				Me.OnPRICE_TRY_BETTERChanging(value)
				Me.SendPropertyChanging
				Me._PRICE_TRY_BETTER = value
				Me.SendPropertyChanged("PRICE_TRY_BETTER")
				Me.OnPRICE_TRY_BETTERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_QUANTITY", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=20)>  _
	Public Property ORDER_QUANTITY() As Integer
		Get
			Return Me._ORDER_QUANTITY
		End Get
		Set
			If ((Me._ORDER_QUANTITY = value)  _
						= false) Then
				Me.OnORDER_QUANTITYChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_QUANTITY = value
				Me.SendPropertyChanged("ORDER_QUANTITY")
				Me.OnORDER_QUANTITYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DAY_QUALIFIER", DbType:="TinyInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=21)>  _
	Public Property DAY_QUALIFIER() As Byte
		Get
			Return Me._DAY_QUALIFIER
		End Get
		Set
			If ((Me._DAY_QUALIFIER = value)  _
						= false) Then
				Me.OnDAY_QUALIFIERChanging(value)
				Me.SendPropertyChanging
				Me._DAY_QUALIFIER = value
				Me.SendPropertyChanged("DAY_QUALIFIER")
				Me.OnDAY_QUALIFIERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FLEXIBLE_QUANTITY", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=22)>  _
	Public Property FLEXIBLE_QUANTITY() As Short
		Get
			Return Me._FLEXIBLE_QUANTITY
		End Get
		Set
			If ((Me._FLEXIBLE_QUANTITY = value)  _
						= false) Then
				Me.OnFLEXIBLE_QUANTITYChanging(value)
				Me.SendPropertyChanging
				Me._FLEXIBLE_QUANTITY = value
				Me.SendPropertyChanged("FLEXIBLE_QUANTITY")
				Me.OnFLEXIBLE_QUANTITYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUANTITY_STEP", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=23)>  _
	Public Property QUANTITY_STEP() As Integer
		Get
			Return Me._QUANTITY_STEP
		End Get
		Set
			If ((Me._QUANTITY_STEP = value)  _
						= false) Then
				Me.OnQUANTITY_STEPChanging(value)
				Me.SendPropertyChanging
				Me._QUANTITY_STEP = value
				Me.SendPropertyChanged("QUANTITY_STEP")
				Me.OnQUANTITY_STEPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_GOOD_TILL", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=24)>  _
	Public Property ORDER_GOOD_TILL() As Short
		Get
			Return Me._ORDER_GOOD_TILL
		End Get
		Set
			If ((Me._ORDER_GOOD_TILL = value)  _
						= false) Then
				Me.OnORDER_GOOD_TILLChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_GOOD_TILL = value
				Me.SendPropertyChanged("ORDER_GOOD_TILL")
				Me.OnORDER_GOOD_TILLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_TIME_LIMIT", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=25)>  _
	Public Property ORDER_TIME_LIMIT() As Integer
		Get
			Return Me._ORDER_TIME_LIMIT
		End Get
		Set
			If ((Me._ORDER_TIME_LIMIT = value)  _
						= false) Then
				Me.OnORDER_TIME_LIMITChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_TIME_LIMIT = value
				Me.SendPropertyChanged("ORDER_TIME_LIMIT")
				Me.OnORDER_TIME_LIMITChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SHOW_MY_NAME", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=26)>  _
	Public Property SHOW_MY_NAME() As Boolean
		Get
			Return Me._SHOW_MY_NAME
		End Get
		Set
			If ((Me._SHOW_MY_NAME = value)  _
						= false) Then
				Me.OnSHOW_MY_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._SHOW_MY_NAME = value
				Me.SendPropertyChanged("SHOW_MY_NAME")
				Me.OnSHOW_MY_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PNC_ORDER", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=27)>  _
	Public Property PNC_ORDER() As Boolean
		Get
			Return Me._PNC_ORDER
		End Get
		Set
			If ((Me._PNC_ORDER = value)  _
						= false) Then
				Me.OnPNC_ORDERChanging(value)
				Me.SendPropertyChanging
				Me._PNC_ORDER = value
				Me.SendPropertyChanged("PNC_ORDER")
				Me.OnPNC_ORDERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SINGLE_EXCHANGE_EXECUTION", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=28)>  _
	Public Property SINGLE_EXCHANGE_EXECUTION() As Short
		Get
			Return Me._SINGLE_EXCHANGE_EXECUTION
		End Get
		Set
			If ((Me._SINGLE_EXCHANGE_EXECUTION = value)  _
						= false) Then
				Me.OnSINGLE_EXCHANGE_EXECUTIONChanging(value)
				Me.SendPropertyChanging
				Me._SINGLE_EXCHANGE_EXECUTION = value
				Me.SendPropertyChanged("SINGLE_EXCHANGE_EXECUTION")
				Me.OnSINGLE_EXCHANGE_EXECUTIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_TRADED_ON_EXCHANGE", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=29)>  _
	Public Property ORDER_TRADED_ON_EXCHANGE() As System.Nullable(Of Integer)
		Get
			Return Me._ORDER_TRADED_ON_EXCHANGE
		End Get
		Set
			If (Me._ORDER_TRADED_ON_EXCHANGE.Equals(value) = false) Then
				Me.OnORDER_TRADED_ON_EXCHANGEChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_TRADED_ON_EXCHANGE = value
				Me.SendPropertyChanged("ORDER_TRADED_ON_EXCHANGE")
				Me.OnORDER_TRADED_ON_EXCHANGEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLEARER_ID", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=30)>  _
	Public Property CLEARER_ID() As System.Nullable(Of Integer)
		Get
			Return Me._CLEARER_ID
		End Get
		Set
			If (Me._CLEARER_ID.Equals(value) = false) Then
				If Me._ACCOUNTS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCLEARER_IDChanging(value)
				Me.SendPropertyChanging
				Me._CLEARER_ID = value
				Me.SendPropertyChanged("CLEARER_ID")
				Me.OnCLEARER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_EXCHANGES", DbType:="VarChar(100)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=31)>  _
	Public Property ORDER_EXCHANGES() As String
		Get
			Return Me._ORDER_EXCHANGES
		End Get
		Set
			If (String.Equals(Me._ORDER_EXCHANGES, value) = false) Then
				Me.OnORDER_EXCHANGESChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_EXCHANGES = value
				Me.SendPropertyChanged("ORDER_EXCHANGES")
				Me.OnORDER_EXCHANGESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_THREAD", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=32)>  _
	Public Property THREAD() As Integer
		Get
			Return Me._THREAD
		End Get
		Set
			If ((Me._THREAD = value)  _
						= false) Then
				Me.OnTHREADChanging(value)
				Me.SendPropertyChanging
				Me._THREAD = value
				Me.SendPropertyChanged("THREAD")
				Me.OnTHREADChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COUNTER_PARTY_ORDER_ID", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=33)>  _
	Public Property COUNTER_PARTY_ORDER_ID() As System.Nullable(Of Integer)
		Get
			Return Me._COUNTER_PARTY_ORDER_ID
		End Get
		Set
			If (Me._COUNTER_PARTY_ORDER_ID.Equals(value) = false) Then
				If Me._ORDERS_FFA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCOUNTER_PARTY_ORDER_IDChanging(value)
				Me.SendPropertyChanging
				Me._COUNTER_PARTY_ORDER_ID = value
				Me.SendPropertyChanged("COUNTER_PARTY_ORDER_ID")
				Me.OnCOUNTER_PARTY_ORDER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOCK_DESK_TRADER_ID", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=34)>  _
	Public Property LOCK_DESK_TRADER_ID() As System.Nullable(Of Integer)
		Get
			Return Me._LOCK_DESK_TRADER_ID
		End Get
		Set
			If (Me._LOCK_DESK_TRADER_ID.Equals(value) = false) Then
				If Me._DESK_TRADERS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLOCK_DESK_TRADER_IDChanging(value)
				Me.SendPropertyChanging
				Me._LOCK_DESK_TRADER_ID = value
				Me.SendPropertyChanged("LOCK_DESK_TRADER_ID")
				Me.OnLOCK_DESK_TRADER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOCK_ORDER_ID", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=35)>  _
	Public Property LOCK_ORDER_ID() As System.Nullable(Of Integer)
		Get
			Return Me._LOCK_ORDER_ID
		End Get
		Set
			If (Me._LOCK_ORDER_ID.Equals(value) = false) Then
				If Me._ORDERS_FFA6.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLOCK_ORDER_IDChanging(value)
				Me.SendPropertyChanging
				Me._LOCK_ORDER_ID = value
				Me.SendPropertyChanged("LOCK_ORDER_ID")
				Me.OnLOCK_ORDER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COMMIT_ORDER_ID", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=36)>  _
	Public Property COMMIT_ORDER_ID() As System.Nullable(Of Integer)
		Get
			Return Me._COMMIT_ORDER_ID
		End Get
		Set
			If (Me._COMMIT_ORDER_ID.Equals(value) = false) Then
				If Me._ORDERS_FFA8.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCOMMIT_ORDER_IDChanging(value)
				Me.SendPropertyChanging
				Me._COMMIT_ORDER_ID = value
				Me.SendPropertyChanged("COMMIT_ORDER_ID")
				Me.OnCOMMIT_ORDER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_INFORM_DESK_ID", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=37)>  _
	Public Property INFORM_DESK_ID() As System.Nullable(Of Integer)
		Get
			Return Me._INFORM_DESK_ID
		End Get
		Set
			If (Me._INFORM_DESK_ID.Equals(value) = false) Then
				If Me._ACCOUNT_DESKS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnINFORM_DESK_IDChanging(value)
				Me.SendPropertyChanging
				Me._INFORM_DESK_ID = value
				Me.SendPropertyChanged("INFORM_DESK_ID")
				Me.OnINFORM_DESK_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NEGOTIATION_ORDER_ID", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=38)>  _
	Public Property NEGOTIATION_ORDER_ID() As System.Nullable(Of Integer)
		Get
			Return Me._NEGOTIATION_ORDER_ID
		End Get
		Set
			If (Me._NEGOTIATION_ORDER_ID.Equals(value) = false) Then
				If Me._ORDERS_FFA10.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnNEGOTIATION_ORDER_IDChanging(value)
				Me.SendPropertyChanging
				Me._NEGOTIATION_ORDER_ID = value
				Me.SendPropertyChanged("NEGOTIATION_ORDER_ID")
				Me.OnNEGOTIATION_ORDER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOCKED_BY_ORDER_ID", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=39)>  _
	Public Property LOCKED_BY_ORDER_ID() As System.Nullable(Of Integer)
		Get
			Return Me._LOCKED_BY_ORDER_ID
		End Get
		Set
			If (Me._LOCKED_BY_ORDER_ID.Equals(value) = false) Then
				If Me._ORDERS_FFA2.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLOCKED_BY_ORDER_IDChanging(value)
				Me.SendPropertyChanging
				Me._LOCKED_BY_ORDER_ID = value
				Me.SendPropertyChanged("LOCKED_BY_ORDER_ID")
				Me.OnLOCKED_BY_ORDER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SPREAD_LEG_TYPE", DbType:="SmallInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=40)>  _
	Public Property SPREAD_LEG_TYPE() As System.Nullable(Of Short)
		Get
			Return Me._SPREAD_LEG_TYPE
		End Get
		Set
			If (Me._SPREAD_LEG_TYPE.Equals(value) = false) Then
				Me.OnSPREAD_LEG_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._SPREAD_LEG_TYPE = value
				Me.SendPropertyChanged("SPREAD_LEG_TYPE")
				Me.OnSPREAD_LEG_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SPREAD_ORDER_ID", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=41)>  _
	Public Property SPREAD_ORDER_ID() As System.Nullable(Of Integer)
		Get
			Return Me._SPREAD_ORDER_ID
		End Get
		Set
			If (Me._SPREAD_ORDER_ID.Equals(value) = false) Then
				If Me._ORDERS_FFA4.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSPREAD_ORDER_IDChanging(value)
				Me.SendPropertyChanging
				Me._SPREAD_ORDER_ID = value
				Me.SendPropertyChanged("SPREAD_ORDER_ID")
				Me.OnSPREAD_ORDER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CROSS_ORDER_ID1", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=42)>  _
	Public Property CROSS_ORDER_ID1() As System.Nullable(Of Integer)
		Get
			Return Me._CROSS_ORDER_ID1
		End Get
		Set
			If (Me._CROSS_ORDER_ID1.Equals(value) = false) Then
				If Me._ORDERS_FFA12.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCROSS_ORDER_ID1Changing(value)
				Me.SendPropertyChanging
				Me._CROSS_ORDER_ID1 = value
				Me.SendPropertyChanged("CROSS_ORDER_ID1")
				Me.OnCROSS_ORDER_ID1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CROSS_ORDER_ID2", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=43)>  _
	Public Property CROSS_ORDER_ID2() As System.Nullable(Of Integer)
		Get
			Return Me._CROSS_ORDER_ID2
		End Get
		Set
			If (Me._CROSS_ORDER_ID2.Equals(value) = false) Then
				If Me._ORDERS_FFA14.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCROSS_ORDER_ID2Changing(value)
				Me.SendPropertyChanging
				Me._CROSS_ORDER_ID2 = value
				Me.SendPropertyChanged("CROSS_ORDER_ID2")
				Me.OnCROSS_ORDER_ID2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID2", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=44)>  _
	Public Property ROUTE_ID2() As System.Nullable(Of Integer)
		Get
			Return Me._ROUTE_ID2
		End Get
		Set
			If (Me._ROUTE_ID2.Equals(value) = false) Then
				If Me._ROUTES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_ID2Changing(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID2 = value
				Me.SendPropertyChanged("ROUTE_ID2")
				Me.OnROUTE_ID2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM21", DbType:="SmallInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=45)>  _
	Public Property MM21() As System.Nullable(Of Short)
		Get
			Return Me._MM21
		End Get
		Set
			If (Me._MM21.Equals(value) = false) Then
				Me.OnMM21Changing(value)
				Me.SendPropertyChanging
				Me._MM21 = value
				Me.SendPropertyChanged("MM21")
				Me.OnMM21Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY21", DbType:="SmallInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=46)>  _
	Public Property YY21() As System.Nullable(Of Short)
		Get
			Return Me._YY21
		End Get
		Set
			If (Me._YY21.Equals(value) = false) Then
				Me.OnYY21Changing(value)
				Me.SendPropertyChanging
				Me._YY21 = value
				Me.SendPropertyChanged("YY21")
				Me.OnYY21Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM22", DbType:="SmallInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=47)>  _
	Public Property MM22() As System.Nullable(Of Short)
		Get
			Return Me._MM22
		End Get
		Set
			If (Me._MM22.Equals(value) = false) Then
				Me.OnMM22Changing(value)
				Me.SendPropertyChanging
				Me._MM22 = value
				Me.SendPropertyChanged("MM22")
				Me.OnMM22Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY22", DbType:="SmallInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=48)>  _
	Public Property YY22() As System.Nullable(Of Short)
		Get
			Return Me._YY22
		End Get
		Set
			If (Me._YY22.Equals(value) = false) Then
				Me.OnYY22Changing(value)
				Me.SendPropertyChanging
				Me._YY22 = value
				Me.SendPropertyChanged("YY22")
				Me.OnYY22Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SHORTDES2", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=49)>  _
	Public Property SHORTDES2() As String
		Get
			Return Me._SHORTDES2
		End Get
		Set
			If (String.Equals(Me._SHORTDES2, value) = false) Then
				Me.OnSHORTDES2Changing(value)
				Me.SendPropertyChanging
				Me._SHORTDES2 = value
				Me.SendPropertyChanged("SHORTDES2")
				Me.OnSHORTDES2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE_INDICATED2", DbType:="Float"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=50)>  _
	Public Property PRICE_INDICATED2() As System.Nullable(Of Double)
		Get
			Return Me._PRICE_INDICATED2
		End Get
		Set
			If (Me._PRICE_INDICATED2.Equals(value) = false) Then
				Me.OnPRICE_INDICATED2Changing(value)
				Me.SendPropertyChanging
				Me._PRICE_INDICATED2 = value
				Me.SendPropertyChanged("PRICE_INDICATED2")
				Me.OnPRICE_INDICATED2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE_TYPE2", DbType:="Char(1)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=51)>  _
	Public Property PRICE_TYPE2() As System.Nullable(Of Char)
		Get
			Return Me._PRICE_TYPE2
		End Get
		Set
			If (Me._PRICE_TYPE2.Equals(value) = false) Then
				Me.OnPRICE_TYPE2Changing(value)
				Me.SendPropertyChanging
				Me._PRICE_TYPE2 = value
				Me.SendPropertyChanged("PRICE_TYPE2")
				Me.OnPRICE_TYPE2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE_TRY_BETTER2", DbType:="Bit"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=52)>  _
	Public Property PRICE_TRY_BETTER2() As System.Nullable(Of Boolean)
		Get
			Return Me._PRICE_TRY_BETTER2
		End Get
		Set
			If (Me._PRICE_TRY_BETTER2.Equals(value) = false) Then
				Me.OnPRICE_TRY_BETTER2Changing(value)
				Me.SendPropertyChanging
				Me._PRICE_TRY_BETTER2 = value
				Me.SendPropertyChanged("PRICE_TRY_BETTER2")
				Me.OnPRICE_TRY_BETTER2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_QUANTITY2", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=53)>  _
	Public Property ORDER_QUANTITY2() As System.Nullable(Of Integer)
		Get
			Return Me._ORDER_QUANTITY2
		End Get
		Set
			If (Me._ORDER_QUANTITY2.Equals(value) = false) Then
				Me.OnORDER_QUANTITY2Changing(value)
				Me.SendPropertyChanging
				Me._ORDER_QUANTITY2 = value
				Me.SendPropertyChanged("ORDER_QUANTITY2")
				Me.OnORDER_QUANTITY2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DAY_QUALIFIER2", DbType:="TinyInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=54)>  _
	Public Property DAY_QUALIFIER2() As System.Nullable(Of Byte)
		Get
			Return Me._DAY_QUALIFIER2
		End Get
		Set
			If (Me._DAY_QUALIFIER2.Equals(value) = false) Then
				Me.OnDAY_QUALIFIER2Changing(value)
				Me.SendPropertyChanging
				Me._DAY_QUALIFIER2 = value
				Me.SendPropertyChanged("DAY_QUALIFIER2")
				Me.OnDAY_QUALIFIER2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FLEXIBLE_QUANTITY2", DbType:="SmallInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=55)>  _
	Public Property FLEXIBLE_QUANTITY2() As System.Nullable(Of Short)
		Get
			Return Me._FLEXIBLE_QUANTITY2
		End Get
		Set
			If (Me._FLEXIBLE_QUANTITY2.Equals(value) = false) Then
				Me.OnFLEXIBLE_QUANTITY2Changing(value)
				Me.SendPropertyChanging
				Me._FLEXIBLE_QUANTITY2 = value
				Me.SendPropertyChanged("FLEXIBLE_QUANTITY2")
				Me.OnFLEXIBLE_QUANTITY2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_EXCHANGES2", DbType:="VarChar(100)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=56)>  _
	Public Property ORDER_EXCHANGES2() As String
		Get
			Return Me._ORDER_EXCHANGES2
		End Get
		Set
			If (String.Equals(Me._ORDER_EXCHANGES2, value) = false) Then
				Me.OnORDER_EXCHANGES2Changing(value)
				Me.SendPropertyChanging
				Me._ORDER_EXCHANGES2 = value
				Me.SendPropertyChanged("ORDER_EXCHANGES2")
				Me.OnORDER_EXCHANGES2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_STRIKE_PRICE", DbType:="Float"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=57)>  _
	Public Property STRIKE_PRICE() As System.Nullable(Of Double)
		Get
			Return Me._STRIKE_PRICE
		End Get
		Set
			If (Me._STRIKE_PRICE.Equals(value) = false) Then
				Me.OnSTRIKE_PRICEChanging(value)
				Me.SendPropertyChanging
				Me._STRIKE_PRICE = value
				Me.SendPropertyChanged("STRIKE_PRICE")
				Me.OnSTRIKE_PRICEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ICEBERG", DbType:="Bit"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=58)>  _
	Public Property ICEBERG() As System.Nullable(Of Boolean)
		Get
			Return Me._ICEBERG
		End Get
		Set
			If (Me._ICEBERG.Equals(value) = false) Then
				Me.OnICEBERGChanging(value)
				Me.SendPropertyChanging
				Me._ICEBERG = value
				Me.SendPropertyChanged("ICEBERG")
				Me.OnICEBERGChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BROKER_INVISIBLE", DbType:="Bit"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=59)>  _
	Public Property BROKER_INVISIBLE() As System.Nullable(Of Boolean)
		Get
			Return Me._BROKER_INVISIBLE
		End Get
		Set
			If (Me._BROKER_INVISIBLE.Equals(value) = false) Then
				Me.OnBROKER_INVISIBLEChanging(value)
				Me.SendPropertyChanging
				Me._BROKER_INVISIBLE = value
				Me.SendPropertyChanged("BROKER_INVISIBLE")
				Me.OnBROKER_INVISIBLEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA", Storage:="_ORDERS_FFA1", ThisKey:="ORDER_ID", OtherKey:="COUNTER_PARTY_ORDER_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=60, EmitDefaultValue:=false)>  _
	Public Property ORDERS_FFA1() As EntitySet(Of ORDERS_FFA)
		Get
			If (Me.serializing  _
						AndAlso (Me._ORDERS_FFA1.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ORDERS_FFA1
		End Get
		Set
			Me._ORDERS_FFA1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA1", Storage:="_ORDERS_FFA3", ThisKey:="ORDER_ID", OtherKey:="LOCKED_BY_ORDER_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=61, EmitDefaultValue:=false)>  _
	Public Property ORDERS_FFA3() As EntitySet(Of ORDERS_FFA)
		Get
			If (Me.serializing  _
						AndAlso (Me._ORDERS_FFA3.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ORDERS_FFA3
		End Get
		Set
			Me._ORDERS_FFA3.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA2", Storage:="_ORDERS_FFA5", ThisKey:="ORDER_ID", OtherKey:="SPREAD_ORDER_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=62, EmitDefaultValue:=false)>  _
	Public Property ORDERS_FFA5() As EntitySet(Of ORDERS_FFA)
		Get
			If (Me.serializing  _
						AndAlso (Me._ORDERS_FFA5.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ORDERS_FFA5
		End Get
		Set
			Me._ORDERS_FFA5.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA3", Storage:="_ORDERS_FFA7", ThisKey:="ORDER_ID", OtherKey:="LOCK_ORDER_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=63, EmitDefaultValue:=false)>  _
	Public Property ORDERS_FFA7() As EntitySet(Of ORDERS_FFA)
		Get
			If (Me.serializing  _
						AndAlso (Me._ORDERS_FFA7.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ORDERS_FFA7
		End Get
		Set
			Me._ORDERS_FFA7.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA4", Storage:="_ORDERS_FFA9", ThisKey:="ORDER_ID", OtherKey:="COMMIT_ORDER_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=64, EmitDefaultValue:=false)>  _
	Public Property ORDERS_FFA9() As EntitySet(Of ORDERS_FFA)
		Get
			If (Me.serializing  _
						AndAlso (Me._ORDERS_FFA9.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ORDERS_FFA9
		End Get
		Set
			Me._ORDERS_FFA9.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA5", Storage:="_ORDERS_FFA11", ThisKey:="ORDER_ID", OtherKey:="NEGOTIATION_ORDER_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=65, EmitDefaultValue:=false)>  _
	Public Property ORDERS_FFA11() As EntitySet(Of ORDERS_FFA)
		Get
			If (Me.serializing  _
						AndAlso (Me._ORDERS_FFA11.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ORDERS_FFA11
		End Get
		Set
			Me._ORDERS_FFA11.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA6", Storage:="_ORDERS_FFA13", ThisKey:="ORDER_ID", OtherKey:="CROSS_ORDER_ID1"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=66, EmitDefaultValue:=false)>  _
	Public Property ORDERS_FFA13() As EntitySet(Of ORDERS_FFA)
		Get
			If (Me.serializing  _
						AndAlso (Me._ORDERS_FFA13.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ORDERS_FFA13
		End Get
		Set
			Me._ORDERS_FFA13.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA7", Storage:="_ORDERS_FFA15", ThisKey:="ORDER_ID", OtherKey:="CROSS_ORDER_ID2"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=67, EmitDefaultValue:=false)>  _
	Public Property ORDERS_FFA15() As EntitySet(Of ORDERS_FFA)
		Get
			If (Me.serializing  _
						AndAlso (Me._ORDERS_FFA15.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ORDERS_FFA15
		End Get
		Set
			Me._ORDERS_FFA15.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA_EXCHANGES", Storage:="_ORDERS_FFA_EXCHANGES", ThisKey:="ORDER_ID", OtherKey:="ORDER_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=68, EmitDefaultValue:=false)>  _
	Public Property ORDERS_FFA_EXCHANGES() As EntitySet(Of ORDERS_FFA_EXCHANGES)
		Get
			If (Me.serializing  _
						AndAlso (Me._ORDERS_FFA_EXCHANGES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ORDERS_FFA_EXCHANGES
		End Get
		Set
			Me._ORDERS_FFA_EXCHANGES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_TRADES_FFA", Storage:="_TRADES_FFA", ThisKey:="ORDER_ID", OtherKey:="ORDER_ID1"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=69, EmitDefaultValue:=false)>  _
	Public Property TRADES_FFA() As EntitySet(Of TRADES_FFA)
		Get
			If (Me.serializing  _
						AndAlso (Me._TRADES_FFA.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._TRADES_FFA
		End Get
		Set
			Me._TRADES_FFA.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_TRADES_FFA1", Storage:="_TRADES_FFA1", ThisKey:="ORDER_ID", OtherKey:="ORDER_ID2"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=70, EmitDefaultValue:=false)>  _
	Public Property TRADES_FFA1() As EntitySet(Of TRADES_FFA)
		Get
			If (Me.serializing  _
						AndAlso (Me._TRADES_FFA1.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._TRADES_FFA1
		End Get
		Set
			Me._TRADES_FFA1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESKS_ORDERS_FFA", Storage:="_ACCOUNT_DESKS", ThisKey:="INFORM_DESK_ID", OtherKey:="ACCOUNT_DESK_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT_DESKS() As ACCOUNT_DESKS
		Get
			Return Me._ACCOUNT_DESKS.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT_DESKS = Me._ACCOUNT_DESKS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT_DESKS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT_DESKS.Entity = Nothing
					previousValue.ORDERS_FFA.Remove(Me)
				End If
				Me._ACCOUNT_DESKS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA.Add(Me)
					Me._INFORM_DESK_ID = value.ACCOUNT_DESK_ID
				Else
					Me._INFORM_DESK_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ACCOUNT_DESKS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_ORDERS_FFA", Storage:="_ACCOUNTS", ThisKey:="CLEARER_ID", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNTS() As ACCOUNTS
		Get
			Return Me._ACCOUNTS.Entity
		End Get
		Set
			Dim previousValue As ACCOUNTS = Me._ACCOUNTS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNTS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNTS.Entity = Nothing
					previousValue.ORDERS_FFA.Remove(Me)
				End If
				Me._ACCOUNTS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA.Add(Me)
					Me._CLEARER_ID = value.ACCOUNT_ID
				Else
					Me._CLEARER_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ACCOUNTS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADERS_ORDERS_FFA", Storage:="_DESK_TRADERS", ThisKey:="LOCK_DESK_TRADER_ID", OtherKey:="DESK_TRADER_ID", IsForeignKey:=true)>  _
	Public Property DESK_TRADERS() As DESK_TRADERS
		Get
			Return Me._DESK_TRADERS.Entity
		End Get
		Set
			Dim previousValue As DESK_TRADERS = Me._DESK_TRADERS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DESK_TRADERS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DESK_TRADERS.Entity = Nothing
					previousValue.ORDERS_FFA.Remove(Me)
				End If
				Me._DESK_TRADERS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA.Add(Me)
					Me._LOCK_DESK_TRADER_ID = value.DESK_TRADER_ID
				Else
					Me._LOCK_DESK_TRADER_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("DESK_TRADERS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADERS_ORDERS_FFA1", Storage:="_DESK_TRADERS1", ThisKey:="DESK_TRADER_ID", OtherKey:="DESK_TRADER_ID", IsForeignKey:=true)>  _
	Public Property DESK_TRADERS1() As DESK_TRADERS
		Get
			Return Me._DESK_TRADERS1.Entity
		End Get
		Set
			Dim previousValue As DESK_TRADERS = Me._DESK_TRADERS1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DESK_TRADERS1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DESK_TRADERS1.Entity = Nothing
					previousValue.ORDERS_FFA1.Remove(Me)
				End If
				Me._DESK_TRADERS1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA1.Add(Me)
					Me._DESK_TRADER_ID = value.DESK_TRADER_ID
				Else
					Me._DESK_TRADER_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DESK_TRADERS1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADERS_ORDERS_FFA2", Storage:="_DESK_TRADERS2", ThisKey:="FOR_DESK_TRADER_ID", OtherKey:="DESK_TRADER_ID", IsForeignKey:=true)>  _
	Public Property DESK_TRADERS2() As DESK_TRADERS
		Get
			Return Me._DESK_TRADERS2.Entity
		End Get
		Set
			Dim previousValue As DESK_TRADERS = Me._DESK_TRADERS2.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DESK_TRADERS2.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DESK_TRADERS2.Entity = Nothing
					previousValue.ORDERS_FFA2.Remove(Me)
				End If
				Me._DESK_TRADERS2.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA2.Add(Me)
					Me._FOR_DESK_TRADER_ID = value.DESK_TRADER_ID
				Else
					Me._FOR_DESK_TRADER_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DESK_TRADERS2")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA", Storage:="_ORDERS_FFA", ThisKey:="COUNTER_PARTY_ORDER_ID", OtherKey:="ORDER_ID", IsForeignKey:=true)>  _
	Public Property ORDERS_FFA() As ORDERS_FFA
		Get
			Return Me._ORDERS_FFA.Entity
		End Get
		Set
			Dim previousValue As ORDERS_FFA = Me._ORDERS_FFA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ORDERS_FFA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ORDERS_FFA.Entity = Nothing
					previousValue.ORDERS_FFA1.Remove(Me)
				End If
				Me._ORDERS_FFA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA1.Add(Me)
					Me._COUNTER_PARTY_ORDER_ID = value.ORDER_ID
				Else
					Me._COUNTER_PARTY_ORDER_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ORDERS_FFA")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA1", Storage:="_ORDERS_FFA2", ThisKey:="LOCKED_BY_ORDER_ID", OtherKey:="ORDER_ID", IsForeignKey:=true)>  _
	Public Property ORDERS_FFA2() As ORDERS_FFA
		Get
			Return Me._ORDERS_FFA2.Entity
		End Get
		Set
			Dim previousValue As ORDERS_FFA = Me._ORDERS_FFA2.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ORDERS_FFA2.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ORDERS_FFA2.Entity = Nothing
					previousValue.ORDERS_FFA3.Remove(Me)
				End If
				Me._ORDERS_FFA2.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA3.Add(Me)
					Me._LOCKED_BY_ORDER_ID = value.ORDER_ID
				Else
					Me._LOCKED_BY_ORDER_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ORDERS_FFA2")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA2", Storage:="_ORDERS_FFA4", ThisKey:="SPREAD_ORDER_ID", OtherKey:="ORDER_ID", IsForeignKey:=true)>  _
	Public Property ORDERS_FFA4() As ORDERS_FFA
		Get
			Return Me._ORDERS_FFA4.Entity
		End Get
		Set
			Dim previousValue As ORDERS_FFA = Me._ORDERS_FFA4.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ORDERS_FFA4.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ORDERS_FFA4.Entity = Nothing
					previousValue.ORDERS_FFA5.Remove(Me)
				End If
				Me._ORDERS_FFA4.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA5.Add(Me)
					Me._SPREAD_ORDER_ID = value.ORDER_ID
				Else
					Me._SPREAD_ORDER_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ORDERS_FFA4")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA3", Storage:="_ORDERS_FFA6", ThisKey:="LOCK_ORDER_ID", OtherKey:="ORDER_ID", IsForeignKey:=true)>  _
	Public Property ORDERS_FFA6() As ORDERS_FFA
		Get
			Return Me._ORDERS_FFA6.Entity
		End Get
		Set
			Dim previousValue As ORDERS_FFA = Me._ORDERS_FFA6.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ORDERS_FFA6.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ORDERS_FFA6.Entity = Nothing
					previousValue.ORDERS_FFA7.Remove(Me)
				End If
				Me._ORDERS_FFA6.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA7.Add(Me)
					Me._LOCK_ORDER_ID = value.ORDER_ID
				Else
					Me._LOCK_ORDER_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ORDERS_FFA6")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA4", Storage:="_ORDERS_FFA8", ThisKey:="COMMIT_ORDER_ID", OtherKey:="ORDER_ID", IsForeignKey:=true)>  _
	Public Property ORDERS_FFA8() As ORDERS_FFA
		Get
			Return Me._ORDERS_FFA8.Entity
		End Get
		Set
			Dim previousValue As ORDERS_FFA = Me._ORDERS_FFA8.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ORDERS_FFA8.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ORDERS_FFA8.Entity = Nothing
					previousValue.ORDERS_FFA9.Remove(Me)
				End If
				Me._ORDERS_FFA8.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA9.Add(Me)
					Me._COMMIT_ORDER_ID = value.ORDER_ID
				Else
					Me._COMMIT_ORDER_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ORDERS_FFA8")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA5", Storage:="_ORDERS_FFA10", ThisKey:="NEGOTIATION_ORDER_ID", OtherKey:="ORDER_ID", IsForeignKey:=true)>  _
	Public Property ORDERS_FFA10() As ORDERS_FFA
		Get
			Return Me._ORDERS_FFA10.Entity
		End Get
		Set
			Dim previousValue As ORDERS_FFA = Me._ORDERS_FFA10.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ORDERS_FFA10.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ORDERS_FFA10.Entity = Nothing
					previousValue.ORDERS_FFA11.Remove(Me)
				End If
				Me._ORDERS_FFA10.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA11.Add(Me)
					Me._NEGOTIATION_ORDER_ID = value.ORDER_ID
				Else
					Me._NEGOTIATION_ORDER_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ORDERS_FFA10")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA6", Storage:="_ORDERS_FFA12", ThisKey:="CROSS_ORDER_ID1", OtherKey:="ORDER_ID", IsForeignKey:=true)>  _
	Public Property ORDERS_FFA12() As ORDERS_FFA
		Get
			Return Me._ORDERS_FFA12.Entity
		End Get
		Set
			Dim previousValue As ORDERS_FFA = Me._ORDERS_FFA12.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ORDERS_FFA12.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ORDERS_FFA12.Entity = Nothing
					previousValue.ORDERS_FFA13.Remove(Me)
				End If
				Me._ORDERS_FFA12.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA13.Add(Me)
					Me._CROSS_ORDER_ID1 = value.ORDER_ID
				Else
					Me._CROSS_ORDER_ID1 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ORDERS_FFA12")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA7", Storage:="_ORDERS_FFA14", ThisKey:="CROSS_ORDER_ID2", OtherKey:="ORDER_ID", IsForeignKey:=true)>  _
	Public Property ORDERS_FFA14() As ORDERS_FFA
		Get
			Return Me._ORDERS_FFA14.Entity
		End Get
		Set
			Dim previousValue As ORDERS_FFA = Me._ORDERS_FFA14.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ORDERS_FFA14.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ORDERS_FFA14.Entity = Nothing
					previousValue.ORDERS_FFA15.Remove(Me)
				End If
				Me._ORDERS_FFA14.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA15.Add(Me)
					Me._CROSS_ORDER_ID2 = value.ORDER_ID
				Else
					Me._CROSS_ORDER_ID2 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ORDERS_FFA14")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_ORDERS_FFA", Storage:="_ROUTES", ThisKey:="ROUTE_ID2", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTES() As ROUTES
		Get
			Return Me._ROUTES.Entity
		End Get
		Set
			Dim previousValue As ROUTES = Me._ROUTES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTES.Entity = Nothing
					previousValue.ORDERS_FFA.Remove(Me)
				End If
				Me._ROUTES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA.Add(Me)
					Me._ROUTE_ID2 = value.ROUTE_ID
				Else
					Me._ROUTE_ID2 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ROUTES")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_ORDERS_FFA1", Storage:="_ROUTES1", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTES1() As ROUTES
		Get
			Return Me._ROUTES1.Entity
		End Get
		Set
			Dim previousValue As ROUTES = Me._ROUTES1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTES1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTES1.Entity = Nothing
					previousValue.ORDERS_FFA1.Remove(Me)
				End If
				Me._ROUTES1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA1.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTES1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ORDERS_FFA1(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA = Me
	End Sub
	
	Private Sub detach_ORDERS_FFA1(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFA3(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA2 = Me
	End Sub
	
	Private Sub detach_ORDERS_FFA3(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA2 = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFA5(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA4 = Me
	End Sub
	
	Private Sub detach_ORDERS_FFA5(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA4 = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFA7(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA6 = Me
	End Sub
	
	Private Sub detach_ORDERS_FFA7(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA6 = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFA9(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA8 = Me
	End Sub
	
	Private Sub detach_ORDERS_FFA9(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA8 = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFA11(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA10 = Me
	End Sub
	
	Private Sub detach_ORDERS_FFA11(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA10 = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFA13(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA12 = Me
	End Sub
	
	Private Sub detach_ORDERS_FFA13(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA12 = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFA15(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA14 = Me
	End Sub
	
	Private Sub detach_ORDERS_FFA15(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA14 = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFA_EXCHANGES(ByVal entity As ORDERS_FFA_EXCHANGES)
		Me.SendPropertyChanging
		entity.ORDERS_FFA = Me
	End Sub
	
	Private Sub detach_ORDERS_FFA_EXCHANGES(ByVal entity As ORDERS_FFA_EXCHANGES)
		Me.SendPropertyChanging
		entity.ORDERS_FFA = Nothing
	End Sub
	
	Private Sub attach_TRADES_FFA(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA = Me
	End Sub
	
	Private Sub detach_TRADES_FFA(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA = Nothing
	End Sub
	
	Private Sub attach_TRADES_FFA1(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA1 = Me
	End Sub
	
	Private Sub detach_TRADES_FFA1(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA1 = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._ORDERS_FFA1 = New EntitySet(Of ORDERS_FFA)(AddressOf Me.attach_ORDERS_FFA1, AddressOf Me.detach_ORDERS_FFA1)
		Me._ORDERS_FFA3 = New EntitySet(Of ORDERS_FFA)(AddressOf Me.attach_ORDERS_FFA3, AddressOf Me.detach_ORDERS_FFA3)
		Me._ORDERS_FFA5 = New EntitySet(Of ORDERS_FFA)(AddressOf Me.attach_ORDERS_FFA5, AddressOf Me.detach_ORDERS_FFA5)
		Me._ORDERS_FFA7 = New EntitySet(Of ORDERS_FFA)(AddressOf Me.attach_ORDERS_FFA7, AddressOf Me.detach_ORDERS_FFA7)
		Me._ORDERS_FFA9 = New EntitySet(Of ORDERS_FFA)(AddressOf Me.attach_ORDERS_FFA9, AddressOf Me.detach_ORDERS_FFA9)
		Me._ORDERS_FFA11 = New EntitySet(Of ORDERS_FFA)(AddressOf Me.attach_ORDERS_FFA11, AddressOf Me.detach_ORDERS_FFA11)
		Me._ORDERS_FFA13 = New EntitySet(Of ORDERS_FFA)(AddressOf Me.attach_ORDERS_FFA13, AddressOf Me.detach_ORDERS_FFA13)
		Me._ORDERS_FFA15 = New EntitySet(Of ORDERS_FFA)(AddressOf Me.attach_ORDERS_FFA15, AddressOf Me.detach_ORDERS_FFA15)
		Me._ORDERS_FFA_EXCHANGES = New EntitySet(Of ORDERS_FFA_EXCHANGES)(AddressOf Me.attach_ORDERS_FFA_EXCHANGES, AddressOf Me.detach_ORDERS_FFA_EXCHANGES)
		Me._TRADES_FFA = New EntitySet(Of TRADES_FFA)(AddressOf Me.attach_TRADES_FFA, AddressOf Me.detach_TRADES_FFA)
		Me._TRADES_FFA1 = New EntitySet(Of TRADES_FFA)(AddressOf Me.attach_TRADES_FFA1, AddressOf Me.detach_TRADES_FFA1)
		Me._ACCOUNT_DESKS = CType(Nothing, EntityRef(Of ACCOUNT_DESKS))
		Me._ACCOUNTS = CType(Nothing, EntityRef(Of ACCOUNTS))
		Me._DESK_TRADERS = CType(Nothing, EntityRef(Of DESK_TRADERS))
		Me._DESK_TRADERS1 = CType(Nothing, EntityRef(Of DESK_TRADERS))
		Me._DESK_TRADERS2 = CType(Nothing, EntityRef(Of DESK_TRADERS))
		Me._ORDERS_FFA = CType(Nothing, EntityRef(Of ORDERS_FFA))
		Me._ORDERS_FFA2 = CType(Nothing, EntityRef(Of ORDERS_FFA))
		Me._ORDERS_FFA4 = CType(Nothing, EntityRef(Of ORDERS_FFA))
		Me._ORDERS_FFA6 = CType(Nothing, EntityRef(Of ORDERS_FFA))
		Me._ORDERS_FFA8 = CType(Nothing, EntityRef(Of ORDERS_FFA))
		Me._ORDERS_FFA10 = CType(Nothing, EntityRef(Of ORDERS_FFA))
		Me._ORDERS_FFA12 = CType(Nothing, EntityRef(Of ORDERS_FFA))
		Me._ORDERS_FFA14 = CType(Nothing, EntityRef(Of ORDERS_FFA))
		Me._ROUTES = CType(Nothing, EntityRef(Of ROUTES))
		Me._ROUTES1 = CType(Nothing, EntityRef(Of ROUTES))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ORDERS_FFA_EXCHANGES"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class ORDERS_FFA_EXCHANGES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ORDER_ID As Integer
	
	Private _EXCHANGE_ID As Integer
	
	Private _ACCOUNT_ID As Integer
	
	Private _ACCOUNTS As EntityRef(Of ACCOUNTS)
	
	Private _EXCHANGES As EntityRef(Of EXCHANGES)
	
	Private _ORDERS_FFA As EntityRef(Of ORDERS_FFA)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnORDER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnORDER_IDChanged()
    End Sub
    Partial Private Sub OnEXCHANGE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEXCHANGE_IDChanged()
    End Sub
    Partial Private Sub OnACCOUNT_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ORDER_ID() As Integer
		Get
			Return Me._ORDER_ID
		End Get
		Set
			If ((Me._ORDER_ID = value)  _
						= false) Then
				If Me._ORDERS_FFA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnORDER_IDChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_ID = value
				Me.SendPropertyChanged("ORDER_ID")
				Me.OnORDER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property EXCHANGE_ID() As Integer
		Get
			Return Me._EXCHANGE_ID
		End Get
		Set
			If ((Me._EXCHANGE_ID = value)  _
						= false) Then
				If Me._EXCHANGES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEXCHANGE_IDChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_ID = value
				Me.SendPropertyChanged("EXCHANGE_ID")
				Me.OnEXCHANGE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property ACCOUNT_ID() As Integer
		Get
			Return Me._ACCOUNT_ID
		End Get
		Set
			If ((Me._ACCOUNT_ID = value)  _
						= false) Then
				If Me._ACCOUNTS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACCOUNT_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_ID = value
				Me.SendPropertyChanged("ACCOUNT_ID")
				Me.OnACCOUNT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_ORDERS_FFA_EXCHANGES", Storage:="_ACCOUNTS", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNTS() As ACCOUNTS
		Get
			Return Me._ACCOUNTS.Entity
		End Get
		Set
			Dim previousValue As ACCOUNTS = Me._ACCOUNTS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNTS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNTS.Entity = Nothing
					previousValue.ORDERS_FFA_EXCHANGES.Remove(Me)
				End If
				Me._ACCOUNTS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA_EXCHANGES.Add(Me)
					Me._ACCOUNT_ID = value.ACCOUNT_ID
				Else
					Me._ACCOUNT_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNTS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EXCHANGES_ORDERS_FFA_EXCHANGES", Storage:="_EXCHANGES", ThisKey:="EXCHANGE_ID", OtherKey:="EXCHANGE_ID", IsForeignKey:=true)>  _
	Public Property EXCHANGES() As EXCHANGES
		Get
			Return Me._EXCHANGES.Entity
		End Get
		Set
			Dim previousValue As EXCHANGES = Me._EXCHANGES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EXCHANGES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EXCHANGES.Entity = Nothing
					previousValue.ORDERS_FFA_EXCHANGES.Remove(Me)
				End If
				Me._EXCHANGES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA_EXCHANGES.Add(Me)
					Me._EXCHANGE_ID = value.EXCHANGE_ID
				Else
					Me._EXCHANGE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("EXCHANGES")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA_EXCHANGES", Storage:="_ORDERS_FFA", ThisKey:="ORDER_ID", OtherKey:="ORDER_ID", IsForeignKey:=true)>  _
	Public Property ORDERS_FFA() As ORDERS_FFA
		Get
			Return Me._ORDERS_FFA.Entity
		End Get
		Set
			Dim previousValue As ORDERS_FFA = Me._ORDERS_FFA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ORDERS_FFA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ORDERS_FFA.Entity = Nothing
					previousValue.ORDERS_FFA_EXCHANGES.Remove(Me)
				End If
				Me._ORDERS_FFA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA_EXCHANGES.Add(Me)
					Me._ORDER_ID = value.ORDER_ID
				Else
					Me._ORDER_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ORDERS_FFA")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._ACCOUNTS = CType(Nothing, EntityRef(Of ACCOUNTS))
		Me._EXCHANGES = CType(Nothing, EntityRef(Of EXCHANGES))
		Me._ORDERS_FFA = CType(Nothing, EntityRef(Of ORDERS_FFA))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PERIOD_LIMIT_DESCRS"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class PERIOD_LIMIT_DESCRS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PERIOD_LIMIT As Integer
	
	Private _PERIOD_LIMIT_DESCR As String
	
	Private _COUNTERPARTY_LIMITS As EntitySet(Of COUNTERPARTY_LIMITS)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPERIOD_LIMITChanging(value As Integer)
    End Sub
    Partial Private Sub OnPERIOD_LIMITChanged()
    End Sub
    Partial Private Sub OnPERIOD_LIMIT_DESCRChanging(value As String)
    End Sub
    Partial Private Sub OnPERIOD_LIMIT_DESCRChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PERIOD_LIMIT", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property PERIOD_LIMIT() As Integer
		Get
			Return Me._PERIOD_LIMIT
		End Get
		Set
			If ((Me._PERIOD_LIMIT = value)  _
						= false) Then
				Me.OnPERIOD_LIMITChanging(value)
				Me.SendPropertyChanging
				Me._PERIOD_LIMIT = value
				Me.SendPropertyChanged("PERIOD_LIMIT")
				Me.OnPERIOD_LIMITChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PERIOD_LIMIT_DESCR", DbType:="VarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property PERIOD_LIMIT_DESCR() As String
		Get
			Return Me._PERIOD_LIMIT_DESCR
		End Get
		Set
			If (String.Equals(Me._PERIOD_LIMIT_DESCR, value) = false) Then
				Me.OnPERIOD_LIMIT_DESCRChanging(value)
				Me.SendPropertyChanging
				Me._PERIOD_LIMIT_DESCR = value
				Me.SendPropertyChanged("PERIOD_LIMIT_DESCR")
				Me.OnPERIOD_LIMIT_DESCRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PERIOD_LIMIT_DESCRS_COUNTERPARTY_LIMITS", Storage:="_COUNTERPARTY_LIMITS", ThisKey:="PERIOD_LIMIT", OtherKey:="PERIOD_LIMIT"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3, EmitDefaultValue:=false)>  _
	Public Property COUNTERPARTY_LIMITS() As EntitySet(Of COUNTERPARTY_LIMITS)
		Get
			If (Me.serializing  _
						AndAlso (Me._COUNTERPARTY_LIMITS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._COUNTERPARTY_LIMITS
		End Get
		Set
			Me._COUNTERPARTY_LIMITS.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_COUNTERPARTY_LIMITS(ByVal entity As COUNTERPARTY_LIMITS)
		Me.SendPropertyChanging
		entity.PERIOD_LIMIT_DESCRS = Me
	End Sub
	
	Private Sub detach_COUNTERPARTY_LIMITS(ByVal entity As COUNTERPARTY_LIMITS)
		Me.SendPropertyChanging
		entity.PERIOD_LIMIT_DESCRS = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._COUNTERPARTY_LIMITS = New EntitySet(Of COUNTERPARTY_LIMITS)(AddressOf Me.attach_COUNTERPARTY_LIMITS, AddressOf Me.detach_COUNTERPARTY_LIMITS)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.QUANTITY_QUALIFIERS"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class QUANTITY_QUALIFIERS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _QUANTITY_QUALIFIER_ID As Short
	
	Private _QUANTITY_QUALIFIER_DESCR As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnQUANTITY_QUALIFIER_IDChanging(value As Short)
    End Sub
    Partial Private Sub OnQUANTITY_QUALIFIER_IDChanged()
    End Sub
    Partial Private Sub OnQUANTITY_QUALIFIER_DESCRChanging(value As String)
    End Sub
    Partial Private Sub OnQUANTITY_QUALIFIER_DESCRChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUANTITY_QUALIFIER_ID", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property QUANTITY_QUALIFIER_ID() As Short
		Get
			Return Me._QUANTITY_QUALIFIER_ID
		End Get
		Set
			If ((Me._QUANTITY_QUALIFIER_ID = value)  _
						= false) Then
				Me.OnQUANTITY_QUALIFIER_IDChanging(value)
				Me.SendPropertyChanging
				Me._QUANTITY_QUALIFIER_ID = value
				Me.SendPropertyChanged("QUANTITY_QUALIFIER_ID")
				Me.OnQUANTITY_QUALIFIER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUANTITY_QUALIFIER_DESCR", DbType:="VarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property QUANTITY_QUALIFIER_DESCR() As String
		Get
			Return Me._QUANTITY_QUALIFIER_DESCR
		End Get
		Set
			If (String.Equals(Me._QUANTITY_QUALIFIER_DESCR, value) = false) Then
				Me.OnQUANTITY_QUALIFIER_DESCRChanging(value)
				Me.SendPropertyChanging
				Me._QUANTITY_QUALIFIER_DESCR = value
				Me.SendPropertyChanged("QUANTITY_QUALIFIER_DESCR")
				Me.OnQUANTITY_QUALIFIER_DESCRChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.QUANTITY_TYPES"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class QUANTITY_TYPES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _QUANTITY_TYPE_ID As Short
	
	Private _QUANTITY_TYPE_DES As String
	
	Private _ROUTES As EntitySet(Of ROUTES)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnQUANTITY_TYPE_IDChanging(value As Short)
    End Sub
    Partial Private Sub OnQUANTITY_TYPE_IDChanged()
    End Sub
    Partial Private Sub OnQUANTITY_TYPE_DESChanging(value As String)
    End Sub
    Partial Private Sub OnQUANTITY_TYPE_DESChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUANTITY_TYPE_ID", AutoSync:=AutoSync.OnInsert, DbType:="SmallInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property QUANTITY_TYPE_ID() As Short
		Get
			Return Me._QUANTITY_TYPE_ID
		End Get
		Set
			If ((Me._QUANTITY_TYPE_ID = value)  _
						= false) Then
				Me.OnQUANTITY_TYPE_IDChanging(value)
				Me.SendPropertyChanging
				Me._QUANTITY_TYPE_ID = value
				Me.SendPropertyChanged("QUANTITY_TYPE_ID")
				Me.OnQUANTITY_TYPE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUANTITY_TYPE_DES", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property QUANTITY_TYPE_DES() As String
		Get
			Return Me._QUANTITY_TYPE_DES
		End Get
		Set
			If (String.Equals(Me._QUANTITY_TYPE_DES, value) = false) Then
				Me.OnQUANTITY_TYPE_DESChanging(value)
				Me.SendPropertyChanging
				Me._QUANTITY_TYPE_DES = value
				Me.SendPropertyChanged("QUANTITY_TYPE_DES")
				Me.OnQUANTITY_TYPE_DESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="QUANTITY_TYPES_ROUTES", Storage:="_ROUTES", ThisKey:="QUANTITY_TYPE_ID", OtherKey:="QUANTITY_TYPE"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3, EmitDefaultValue:=false)>  _
	Public Property ROUTES() As EntitySet(Of ROUTES)
		Get
			If (Me.serializing  _
						AndAlso (Me._ROUTES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ROUTES
		End Get
		Set
			Me._ROUTES.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ROUTES(ByVal entity As ROUTES)
		Me.SendPropertyChanging
		entity.QUANTITY_TYPES = Me
	End Sub
	
	Private Sub detach_ROUTES(ByVal entity As ROUTES)
		Me.SendPropertyChanging
		entity.QUANTITY_TYPES = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._ROUTES = New EntitySet(Of ROUTES)(AddressOf Me.attach_ROUTES, AddressOf Me.detach_ROUTES)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.QUOTE_TYPES"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class QUOTE_TYPES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _QUOTE_TYPE_ID As Short
	
	Private _QUOTE_TYPE_DES As String
	
	Private _ROUTES As EntitySet(Of ROUTES)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnQUOTE_TYPE_IDChanging(value As Short)
    End Sub
    Partial Private Sub OnQUOTE_TYPE_IDChanged()
    End Sub
    Partial Private Sub OnQUOTE_TYPE_DESChanging(value As String)
    End Sub
    Partial Private Sub OnQUOTE_TYPE_DESChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUOTE_TYPE_ID", AutoSync:=AutoSync.OnInsert, DbType:="SmallInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property QUOTE_TYPE_ID() As Short
		Get
			Return Me._QUOTE_TYPE_ID
		End Get
		Set
			If ((Me._QUOTE_TYPE_ID = value)  _
						= false) Then
				Me.OnQUOTE_TYPE_IDChanging(value)
				Me.SendPropertyChanging
				Me._QUOTE_TYPE_ID = value
				Me.SendPropertyChanged("QUOTE_TYPE_ID")
				Me.OnQUOTE_TYPE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUOTE_TYPE_DES", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property QUOTE_TYPE_DES() As String
		Get
			Return Me._QUOTE_TYPE_DES
		End Get
		Set
			If (String.Equals(Me._QUOTE_TYPE_DES, value) = false) Then
				Me.OnQUOTE_TYPE_DESChanging(value)
				Me.SendPropertyChanging
				Me._QUOTE_TYPE_DES = value
				Me.SendPropertyChanged("QUOTE_TYPE_DES")
				Me.OnQUOTE_TYPE_DESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="QUOTE_TYPES_ROUTES", Storage:="_ROUTES", ThisKey:="QUOTE_TYPE_ID", OtherKey:="QUOTE_TYPE"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3, EmitDefaultValue:=false)>  _
	Public Property ROUTES() As EntitySet(Of ROUTES)
		Get
			If (Me.serializing  _
						AndAlso (Me._ROUTES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ROUTES
		End Get
		Set
			Me._ROUTES.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ROUTES(ByVal entity As ROUTES)
		Me.SendPropertyChanging
		entity.QUOTE_TYPES = Me
	End Sub
	
	Private Sub detach_ROUTES(ByVal entity As ROUTES)
		Me.SendPropertyChanging
		entity.QUOTE_TYPES = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._ROUTES = New EntitySet(Of ROUTES)(AddressOf Me.attach_ROUTES, AddressOf Me.detach_ROUTES)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ROUTES"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class ROUTES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ROUTE_ID As Integer
	
	Private _VESSEL_CLASS_ID As Integer
	
	Private _QUOTE_TYPE As Short
	
	Private _QUANTITY_TYPE As Short
	
	Private _CCY_ID As System.Nullable(Of Integer)
	
	Private _ROUTE_SHORT As String
	
	Private _ROUTE_DESCR As String
	
	Private _BALTIC_ABRV As String
	
	Private _BALTIC_ABRV_FFA As String
	
	Private _SETTLEMENT_TYPE As Short
	
	Private _LOT_SIZE As Integer
	
	Private _SETTLEMENT_TICK As Double
	
	Private _PRICING_TICK As Double
	
	Private _FULL_LOT_SIZE As Integer
	
	Private _FFA_TRADED As Boolean
	
	Private _LAST_DAY_RULE_ID As Integer
	
	Private _DEFAULT_QUANTITY As Double
	
	Private _SETTL_ROUTE_ID As Integer
	
	Private _OPTIONS_TRADED As Boolean
	
	Private _WET_FLAT_RATES As EntitySet(Of WET_FLAT_RATES)
	
	Private _BALTIC_FORWARD_RATES As EntitySet(Of BALTIC_FORWARD_RATES)
	
	Private _BALTIC_FTP As EntitySet(Of BALTIC_FTP)
	
	Private _BALTIC_FTP_SETTLEMENT As EntitySet(Of BALTIC_FTP_SETTLEMENT)
	
	Private _BALTIC_MONTHLY_SETTLEMENTS As EntitySet(Of BALTIC_MONTHLY_SETTLEMENTS)
	
	Private _BALTIC_OPTION_VOLATILITIES As EntitySet(Of BALTIC_OPTION_VOLATILITIES)
	
	Private _BALTIC_SPOT_RATES As EntitySet(Of BALTIC_SPOT_RATES)
	
	Private _CONTRACT_SERIES As EntitySet(Of CONTRACT_SERIES)
	
	Private _DESK_TRADER_VOICE As EntitySet(Of DESK_TRADER_VOICE)
	
	Private _DESK_TRADERS_IM_SUBSCRIPTIONS As EntitySet(Of DESK_TRADERS_IM_SUBSCRIPTIONS)
	
	Private _EXCHANGE_ROUTES As EntitySet(Of EXCHANGE_ROUTES)
	
	Private _ORDERS_FFA As EntitySet(Of ORDERS_FFA)
	
	Private _ORDERS_FFA1 As EntitySet(Of ORDERS_FFA)
	
	Private _TRADE_CLASS_RATIO_SPREADS As EntitySet(Of TRADE_CLASS_RATIO_SPREADS)
	
	Private _TRADE_CLASS_RATIO_SPREADS1 As EntitySet(Of TRADE_CLASS_RATIO_SPREADS)
	
	Private _TRADES_FFA As EntitySet(Of TRADES_FFA)
	
	Private _TRADES_FFA1 As EntitySet(Of TRADES_FFA)
	
	Private _VESSEL_CLASS1 As EntitySet(Of VESSEL_CLASS)
	
	Private _VESSEL_CLASS_SPREAD_MARGINS As EntitySet(Of VESSEL_CLASS_SPREAD_MARGINS)
	
	Private _CCY As EntityRef(Of CCY)
	
	Private _LAST_DAY_RULE As EntityRef(Of LAST_DAY_RULE)
	
	Private _QUANTITY_TYPES As EntityRef(Of QUANTITY_TYPES)
	
	Private _QUOTE_TYPES As EntityRef(Of QUOTE_TYPES)
	
	Private _VESSEL_CLASS As EntityRef(Of VESSEL_CLASS)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnVESSEL_CLASS_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnVESSEL_CLASS_IDChanged()
    End Sub
    Partial Private Sub OnQUOTE_TYPEChanging(value As Short)
    End Sub
    Partial Private Sub OnQUOTE_TYPEChanged()
    End Sub
    Partial Private Sub OnQUANTITY_TYPEChanging(value As Short)
    End Sub
    Partial Private Sub OnQUANTITY_TYPEChanged()
    End Sub
    Partial Private Sub OnCCY_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCCY_IDChanged()
    End Sub
    Partial Private Sub OnROUTE_SHORTChanging(value As String)
    End Sub
    Partial Private Sub OnROUTE_SHORTChanged()
    End Sub
    Partial Private Sub OnROUTE_DESCRChanging(value As String)
    End Sub
    Partial Private Sub OnROUTE_DESCRChanged()
    End Sub
    Partial Private Sub OnBALTIC_ABRVChanging(value As String)
    End Sub
    Partial Private Sub OnBALTIC_ABRVChanged()
    End Sub
    Partial Private Sub OnBALTIC_ABRV_FFAChanging(value As String)
    End Sub
    Partial Private Sub OnBALTIC_ABRV_FFAChanged()
    End Sub
    Partial Private Sub OnSETTLEMENT_TYPEChanging(value As Short)
    End Sub
    Partial Private Sub OnSETTLEMENT_TYPEChanged()
    End Sub
    Partial Private Sub OnLOT_SIZEChanging(value As Integer)
    End Sub
    Partial Private Sub OnLOT_SIZEChanged()
    End Sub
    Partial Private Sub OnSETTLEMENT_TICKChanging(value As Double)
    End Sub
    Partial Private Sub OnSETTLEMENT_TICKChanged()
    End Sub
    Partial Private Sub OnPRICING_TICKChanging(value As Double)
    End Sub
    Partial Private Sub OnPRICING_TICKChanged()
    End Sub
    Partial Private Sub OnFULL_LOT_SIZEChanging(value As Integer)
    End Sub
    Partial Private Sub OnFULL_LOT_SIZEChanged()
    End Sub
    Partial Private Sub OnFFA_TRADEDChanging(value As Boolean)
    End Sub
    Partial Private Sub OnFFA_TRADEDChanged()
    End Sub
    Partial Private Sub OnLAST_DAY_RULE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnLAST_DAY_RULE_IDChanged()
    End Sub
    Partial Private Sub OnDEFAULT_QUANTITYChanging(value As Double)
    End Sub
    Partial Private Sub OnDEFAULT_QUANTITYChanged()
    End Sub
    Partial Private Sub OnSETTL_ROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSETTL_ROUTE_IDChanged()
    End Sub
    Partial Private Sub OnOPTIONS_TRADEDChanging(value As Boolean)
    End Sub
    Partial Private Sub OnOPTIONS_TRADEDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VESSEL_CLASS_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property VESSEL_CLASS_ID() As Integer
		Get
			Return Me._VESSEL_CLASS_ID
		End Get
		Set
			If ((Me._VESSEL_CLASS_ID = value)  _
						= false) Then
				If Me._VESSEL_CLASS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnVESSEL_CLASS_IDChanging(value)
				Me.SendPropertyChanging
				Me._VESSEL_CLASS_ID = value
				Me.SendPropertyChanged("VESSEL_CLASS_ID")
				Me.OnVESSEL_CLASS_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUOTE_TYPE", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property QUOTE_TYPE() As Short
		Get
			Return Me._QUOTE_TYPE
		End Get
		Set
			If ((Me._QUOTE_TYPE = value)  _
						= false) Then
				If Me._QUOTE_TYPES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnQUOTE_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._QUOTE_TYPE = value
				Me.SendPropertyChanged("QUOTE_TYPE")
				Me.OnQUOTE_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUANTITY_TYPE", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property QUANTITY_TYPE() As Short
		Get
			Return Me._QUANTITY_TYPE
		End Get
		Set
			If ((Me._QUANTITY_TYPE = value)  _
						= false) Then
				If Me._QUANTITY_TYPES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnQUANTITY_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._QUANTITY_TYPE = value
				Me.SendPropertyChanged("QUANTITY_TYPE")
				Me.OnQUANTITY_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCY_ID", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property CCY_ID() As System.Nullable(Of Integer)
		Get
			Return Me._CCY_ID
		End Get
		Set
			If (Me._CCY_ID.Equals(value) = false) Then
				If Me._CCY.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCCY_IDChanging(value)
				Me.SendPropertyChanging
				Me._CCY_ID = value
				Me.SendPropertyChanged("CCY_ID")
				Me.OnCCY_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_SHORT", DbType:="NVarChar(20)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property ROUTE_SHORT() As String
		Get
			Return Me._ROUTE_SHORT
		End Get
		Set
			If (String.Equals(Me._ROUTE_SHORT, value) = false) Then
				Me.OnROUTE_SHORTChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_SHORT = value
				Me.SendPropertyChanged("ROUTE_SHORT")
				Me.OnROUTE_SHORTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_DESCR", DbType:="NVarChar(255)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property ROUTE_DESCR() As String
		Get
			Return Me._ROUTE_DESCR
		End Get
		Set
			If (String.Equals(Me._ROUTE_DESCR, value) = false) Then
				Me.OnROUTE_DESCRChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_DESCR = value
				Me.SendPropertyChanged("ROUTE_DESCR")
				Me.OnROUTE_DESCRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BALTIC_ABRV", DbType:="NVarChar(20)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property BALTIC_ABRV() As String
		Get
			Return Me._BALTIC_ABRV
		End Get
		Set
			If (String.Equals(Me._BALTIC_ABRV, value) = false) Then
				Me.OnBALTIC_ABRVChanging(value)
				Me.SendPropertyChanging
				Me._BALTIC_ABRV = value
				Me.SendPropertyChanged("BALTIC_ABRV")
				Me.OnBALTIC_ABRVChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BALTIC_ABRV_FFA", DbType:="NVarChar(20)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property BALTIC_ABRV_FFA() As String
		Get
			Return Me._BALTIC_ABRV_FFA
		End Get
		Set
			If (String.Equals(Me._BALTIC_ABRV_FFA, value) = false) Then
				Me.OnBALTIC_ABRV_FFAChanging(value)
				Me.SendPropertyChanging
				Me._BALTIC_ABRV_FFA = value
				Me.SendPropertyChanged("BALTIC_ABRV_FFA")
				Me.OnBALTIC_ABRV_FFAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SETTLEMENT_TYPE", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10)>  _
	Public Property SETTLEMENT_TYPE() As Short
		Get
			Return Me._SETTLEMENT_TYPE
		End Get
		Set
			If ((Me._SETTLEMENT_TYPE = value)  _
						= false) Then
				Me.OnSETTLEMENT_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._SETTLEMENT_TYPE = value
				Me.SendPropertyChanged("SETTLEMENT_TYPE")
				Me.OnSETTLEMENT_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOT_SIZE", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=11)>  _
	Public Property LOT_SIZE() As Integer
		Get
			Return Me._LOT_SIZE
		End Get
		Set
			If ((Me._LOT_SIZE = value)  _
						= false) Then
				Me.OnLOT_SIZEChanging(value)
				Me.SendPropertyChanging
				Me._LOT_SIZE = value
				Me.SendPropertyChanged("LOT_SIZE")
				Me.OnLOT_SIZEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SETTLEMENT_TICK", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=12)>  _
	Public Property SETTLEMENT_TICK() As Double
		Get
			Return Me._SETTLEMENT_TICK
		End Get
		Set
			If ((Me._SETTLEMENT_TICK = value)  _
						= false) Then
				Me.OnSETTLEMENT_TICKChanging(value)
				Me.SendPropertyChanging
				Me._SETTLEMENT_TICK = value
				Me.SendPropertyChanged("SETTLEMENT_TICK")
				Me.OnSETTLEMENT_TICKChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICING_TICK", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=13)>  _
	Public Property PRICING_TICK() As Double
		Get
			Return Me._PRICING_TICK
		End Get
		Set
			If ((Me._PRICING_TICK = value)  _
						= false) Then
				Me.OnPRICING_TICKChanging(value)
				Me.SendPropertyChanging
				Me._PRICING_TICK = value
				Me.SendPropertyChanged("PRICING_TICK")
				Me.OnPRICING_TICKChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FULL_LOT_SIZE", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=14)>  _
	Public Property FULL_LOT_SIZE() As Integer
		Get
			Return Me._FULL_LOT_SIZE
		End Get
		Set
			If ((Me._FULL_LOT_SIZE = value)  _
						= false) Then
				Me.OnFULL_LOT_SIZEChanging(value)
				Me.SendPropertyChanging
				Me._FULL_LOT_SIZE = value
				Me.SendPropertyChanged("FULL_LOT_SIZE")
				Me.OnFULL_LOT_SIZEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FFA_TRADED", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=15)>  _
	Public Property FFA_TRADED() As Boolean
		Get
			Return Me._FFA_TRADED
		End Get
		Set
			If ((Me._FFA_TRADED = value)  _
						= false) Then
				Me.OnFFA_TRADEDChanging(value)
				Me.SendPropertyChanging
				Me._FFA_TRADED = value
				Me.SendPropertyChanged("FFA_TRADED")
				Me.OnFFA_TRADEDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LAST_DAY_RULE_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=16)>  _
	Public Property LAST_DAY_RULE_ID() As Integer
		Get
			Return Me._LAST_DAY_RULE_ID
		End Get
		Set
			If ((Me._LAST_DAY_RULE_ID = value)  _
						= false) Then
				If Me._LAST_DAY_RULE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLAST_DAY_RULE_IDChanging(value)
				Me.SendPropertyChanging
				Me._LAST_DAY_RULE_ID = value
				Me.SendPropertyChanged("LAST_DAY_RULE_ID")
				Me.OnLAST_DAY_RULE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEFAULT_QUANTITY", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=17)>  _
	Public Property DEFAULT_QUANTITY() As Double
		Get
			Return Me._DEFAULT_QUANTITY
		End Get
		Set
			If ((Me._DEFAULT_QUANTITY = value)  _
						= false) Then
				Me.OnDEFAULT_QUANTITYChanging(value)
				Me.SendPropertyChanging
				Me._DEFAULT_QUANTITY = value
				Me.SendPropertyChanged("DEFAULT_QUANTITY")
				Me.OnDEFAULT_QUANTITYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SETTL_ROUTE_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=18)>  _
	Public Property SETTL_ROUTE_ID() As Integer
		Get
			Return Me._SETTL_ROUTE_ID
		End Get
		Set
			If ((Me._SETTL_ROUTE_ID = value)  _
						= false) Then
				Me.OnSETTL_ROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._SETTL_ROUTE_ID = value
				Me.SendPropertyChanged("SETTL_ROUTE_ID")
				Me.OnSETTL_ROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OPTIONS_TRADED", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=19)>  _
	Public Property OPTIONS_TRADED() As Boolean
		Get
			Return Me._OPTIONS_TRADED
		End Get
		Set
			If ((Me._OPTIONS_TRADED = value)  _
						= false) Then
				Me.OnOPTIONS_TRADEDChanging(value)
				Me.SendPropertyChanging
				Me._OPTIONS_TRADED = value
				Me.SendPropertyChanged("OPTIONS_TRADED")
				Me.OnOPTIONS_TRADEDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_WET_FLAT_RATES", Storage:="_WET_FLAT_RATES", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=20, EmitDefaultValue:=false)>  _
	Public Property WET_FLAT_RATES() As EntitySet(Of WET_FLAT_RATES)
		Get
			If (Me.serializing  _
						AndAlso (Me._WET_FLAT_RATES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._WET_FLAT_RATES
		End Get
		Set
			Me._WET_FLAT_RATES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_BALTIC_FORWARD_RATES", Storage:="_BALTIC_FORWARD_RATES", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=21, EmitDefaultValue:=false)>  _
	Public Property BALTIC_FORWARD_RATES() As EntitySet(Of BALTIC_FORWARD_RATES)
		Get
			If (Me.serializing  _
						AndAlso (Me._BALTIC_FORWARD_RATES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._BALTIC_FORWARD_RATES
		End Get
		Set
			Me._BALTIC_FORWARD_RATES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_BALTIC_FTP", Storage:="_BALTIC_FTP", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=22, EmitDefaultValue:=false)>  _
	Public Property BALTIC_FTP() As EntitySet(Of BALTIC_FTP)
		Get
			If (Me.serializing  _
						AndAlso (Me._BALTIC_FTP.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._BALTIC_FTP
		End Get
		Set
			Me._BALTIC_FTP.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_BALTIC_FTP_SETTLEMENT", Storage:="_BALTIC_FTP_SETTLEMENT", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=23, EmitDefaultValue:=false)>  _
	Public Property BALTIC_FTP_SETTLEMENT() As EntitySet(Of BALTIC_FTP_SETTLEMENT)
		Get
			If (Me.serializing  _
						AndAlso (Me._BALTIC_FTP_SETTLEMENT.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._BALTIC_FTP_SETTLEMENT
		End Get
		Set
			Me._BALTIC_FTP_SETTLEMENT.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_BALTIC_MONTHLY_SETTLEMENTS", Storage:="_BALTIC_MONTHLY_SETTLEMENTS", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=24, EmitDefaultValue:=false)>  _
	Public Property BALTIC_MONTHLY_SETTLEMENTS() As EntitySet(Of BALTIC_MONTHLY_SETTLEMENTS)
		Get
			If (Me.serializing  _
						AndAlso (Me._BALTIC_MONTHLY_SETTLEMENTS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._BALTIC_MONTHLY_SETTLEMENTS
		End Get
		Set
			Me._BALTIC_MONTHLY_SETTLEMENTS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_BALTIC_OPTION_VOLATILITIES", Storage:="_BALTIC_OPTION_VOLATILITIES", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=25, EmitDefaultValue:=false)>  _
	Public Property BALTIC_OPTION_VOLATILITIES() As EntitySet(Of BALTIC_OPTION_VOLATILITIES)
		Get
			If (Me.serializing  _
						AndAlso (Me._BALTIC_OPTION_VOLATILITIES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._BALTIC_OPTION_VOLATILITIES
		End Get
		Set
			Me._BALTIC_OPTION_VOLATILITIES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_BALTIC_SPOT_RATES", Storage:="_BALTIC_SPOT_RATES", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=26, EmitDefaultValue:=false)>  _
	Public Property BALTIC_SPOT_RATES() As EntitySet(Of BALTIC_SPOT_RATES)
		Get
			If (Me.serializing  _
						AndAlso (Me._BALTIC_SPOT_RATES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._BALTIC_SPOT_RATES
		End Get
		Set
			Me._BALTIC_SPOT_RATES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_CONTRACT_SERIES", Storage:="_CONTRACT_SERIES", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=27, EmitDefaultValue:=false)>  _
	Public Property CONTRACT_SERIES() As EntitySet(Of CONTRACT_SERIES)
		Get
			If (Me.serializing  _
						AndAlso (Me._CONTRACT_SERIES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._CONTRACT_SERIES
		End Get
		Set
			Me._CONTRACT_SERIES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_DESK_TRADER_VOICE", Storage:="_DESK_TRADER_VOICE", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=28, EmitDefaultValue:=false)>  _
	Public Property DESK_TRADER_VOICE() As EntitySet(Of DESK_TRADER_VOICE)
		Get
			If (Me.serializing  _
						AndAlso (Me._DESK_TRADER_VOICE.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._DESK_TRADER_VOICE
		End Get
		Set
			Me._DESK_TRADER_VOICE.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_DESK_TRADERS_IM_SUBSCRIPTIONS", Storage:="_DESK_TRADERS_IM_SUBSCRIPTIONS", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=29, EmitDefaultValue:=false)>  _
	Public Property DESK_TRADERS_IM_SUBSCRIPTIONS() As EntitySet(Of DESK_TRADERS_IM_SUBSCRIPTIONS)
		Get
			If (Me.serializing  _
						AndAlso (Me._DESK_TRADERS_IM_SUBSCRIPTIONS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._DESK_TRADERS_IM_SUBSCRIPTIONS
		End Get
		Set
			Me._DESK_TRADERS_IM_SUBSCRIPTIONS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_EXCHANGE_ROUTES", Storage:="_EXCHANGE_ROUTES", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=30, EmitDefaultValue:=false)>  _
	Public Property EXCHANGE_ROUTES() As EntitySet(Of EXCHANGE_ROUTES)
		Get
			If (Me.serializing  _
						AndAlso (Me._EXCHANGE_ROUTES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._EXCHANGE_ROUTES
		End Get
		Set
			Me._EXCHANGE_ROUTES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_ORDERS_FFA", Storage:="_ORDERS_FFA", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID2"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=31, EmitDefaultValue:=false)>  _
	Public Property ORDERS_FFA() As EntitySet(Of ORDERS_FFA)
		Get
			If (Me.serializing  _
						AndAlso (Me._ORDERS_FFA.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ORDERS_FFA
		End Get
		Set
			Me._ORDERS_FFA.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_ORDERS_FFA1", Storage:="_ORDERS_FFA1", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=32, EmitDefaultValue:=false)>  _
	Public Property ORDERS_FFA1() As EntitySet(Of ORDERS_FFA)
		Get
			If (Me.serializing  _
						AndAlso (Me._ORDERS_FFA1.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ORDERS_FFA1
		End Get
		Set
			Me._ORDERS_FFA1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_TRADE_CLASS_RATIO_SPREADS", Storage:="_TRADE_CLASS_RATIO_SPREADS", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID1"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=33, EmitDefaultValue:=false)>  _
	Public Property TRADE_CLASS_RATIO_SPREADS() As EntitySet(Of TRADE_CLASS_RATIO_SPREADS)
		Get
			If (Me.serializing  _
						AndAlso (Me._TRADE_CLASS_RATIO_SPREADS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._TRADE_CLASS_RATIO_SPREADS
		End Get
		Set
			Me._TRADE_CLASS_RATIO_SPREADS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_TRADE_CLASS_RATIO_SPREADS1", Storage:="_TRADE_CLASS_RATIO_SPREADS1", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID2"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=34, EmitDefaultValue:=false)>  _
	Public Property TRADE_CLASS_RATIO_SPREADS1() As EntitySet(Of TRADE_CLASS_RATIO_SPREADS)
		Get
			If (Me.serializing  _
						AndAlso (Me._TRADE_CLASS_RATIO_SPREADS1.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._TRADE_CLASS_RATIO_SPREADS1
		End Get
		Set
			Me._TRADE_CLASS_RATIO_SPREADS1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_TRADES_FFA", Storage:="_TRADES_FFA", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=35, EmitDefaultValue:=false)>  _
	Public Property TRADES_FFA() As EntitySet(Of TRADES_FFA)
		Get
			If (Me.serializing  _
						AndAlso (Me._TRADES_FFA.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._TRADES_FFA
		End Get
		Set
			Me._TRADES_FFA.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_TRADES_FFA1", Storage:="_TRADES_FFA1", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID2"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=36, EmitDefaultValue:=false)>  _
	Public Property TRADES_FFA1() As EntitySet(Of TRADES_FFA)
		Get
			If (Me.serializing  _
						AndAlso (Me._TRADES_FFA1.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._TRADES_FFA1
		End Get
		Set
			Me._TRADES_FFA1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_VESSEL_CLASS", Storage:="_VESSEL_CLASS1", ThisKey:="ROUTE_ID", OtherKey:="DEFAULT_ROUTE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=37, EmitDefaultValue:=false)>  _
	Public Property VESSEL_CLASS1() As EntitySet(Of VESSEL_CLASS)
		Get
			If (Me.serializing  _
						AndAlso (Me._VESSEL_CLASS1.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._VESSEL_CLASS1
		End Get
		Set
			Me._VESSEL_CLASS1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_VESSEL_CLASS_SPREAD_MARGINS", Storage:="_VESSEL_CLASS_SPREAD_MARGINS", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=38, EmitDefaultValue:=false)>  _
	Public Property VESSEL_CLASS_SPREAD_MARGINS() As EntitySet(Of VESSEL_CLASS_SPREAD_MARGINS)
		Get
			If (Me.serializing  _
						AndAlso (Me._VESSEL_CLASS_SPREAD_MARGINS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._VESSEL_CLASS_SPREAD_MARGINS
		End Get
		Set
			Me._VESSEL_CLASS_SPREAD_MARGINS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CCY_ROUTES", Storage:="_CCY", ThisKey:="CCY_ID", OtherKey:="CCY_ID", IsForeignKey:=true)>  _
	Public Property CCY() As CCY
		Get
			Return Me._CCY.Entity
		End Get
		Set
			Dim previousValue As CCY = Me._CCY.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CCY.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CCY.Entity = Nothing
					previousValue.ROUTES.Remove(Me)
				End If
				Me._CCY.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ROUTES.Add(Me)
					Me._CCY_ID = value.CCY_ID
				Else
					Me._CCY_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("CCY")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LAST_DAY_RULE_ROUTES", Storage:="_LAST_DAY_RULE", ThisKey:="LAST_DAY_RULE_ID", OtherKey:="LAST_DAY_RULE_ID", IsForeignKey:=true)>  _
	Public Property LAST_DAY_RULE() As LAST_DAY_RULE
		Get
			Return Me._LAST_DAY_RULE.Entity
		End Get
		Set
			Dim previousValue As LAST_DAY_RULE = Me._LAST_DAY_RULE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._LAST_DAY_RULE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._LAST_DAY_RULE.Entity = Nothing
					previousValue.ROUTES.Remove(Me)
				End If
				Me._LAST_DAY_RULE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ROUTES.Add(Me)
					Me._LAST_DAY_RULE_ID = value.LAST_DAY_RULE_ID
				Else
					Me._LAST_DAY_RULE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("LAST_DAY_RULE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="QUANTITY_TYPES_ROUTES", Storage:="_QUANTITY_TYPES", ThisKey:="QUANTITY_TYPE", OtherKey:="QUANTITY_TYPE_ID", IsForeignKey:=true)>  _
	Public Property QUANTITY_TYPES() As QUANTITY_TYPES
		Get
			Return Me._QUANTITY_TYPES.Entity
		End Get
		Set
			Dim previousValue As QUANTITY_TYPES = Me._QUANTITY_TYPES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._QUANTITY_TYPES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._QUANTITY_TYPES.Entity = Nothing
					previousValue.ROUTES.Remove(Me)
				End If
				Me._QUANTITY_TYPES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ROUTES.Add(Me)
					Me._QUANTITY_TYPE = value.QUANTITY_TYPE_ID
				Else
					Me._QUANTITY_TYPE = CType(Nothing, Short)
				End If
				Me.SendPropertyChanged("QUANTITY_TYPES")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="QUOTE_TYPES_ROUTES", Storage:="_QUOTE_TYPES", ThisKey:="QUOTE_TYPE", OtherKey:="QUOTE_TYPE_ID", IsForeignKey:=true)>  _
	Public Property QUOTE_TYPES() As QUOTE_TYPES
		Get
			Return Me._QUOTE_TYPES.Entity
		End Get
		Set
			Dim previousValue As QUOTE_TYPES = Me._QUOTE_TYPES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._QUOTE_TYPES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._QUOTE_TYPES.Entity = Nothing
					previousValue.ROUTES.Remove(Me)
				End If
				Me._QUOTE_TYPES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ROUTES.Add(Me)
					Me._QUOTE_TYPE = value.QUOTE_TYPE_ID
				Else
					Me._QUOTE_TYPE = CType(Nothing, Short)
				End If
				Me.SendPropertyChanged("QUOTE_TYPES")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="VESSEL_CLASS_ROUTES", Storage:="_VESSEL_CLASS", ThisKey:="VESSEL_CLASS_ID", OtherKey:="VESSEL_CLASS_ID", IsForeignKey:=true)>  _
	Public Property VESSEL_CLASS() As VESSEL_CLASS
		Get
			Return Me._VESSEL_CLASS.Entity
		End Get
		Set
			Dim previousValue As VESSEL_CLASS = Me._VESSEL_CLASS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._VESSEL_CLASS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._VESSEL_CLASS.Entity = Nothing
					previousValue.ROUTES.Remove(Me)
				End If
				Me._VESSEL_CLASS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ROUTES.Add(Me)
					Me._VESSEL_CLASS_ID = value.VESSEL_CLASS_ID
				Else
					Me._VESSEL_CLASS_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("VESSEL_CLASS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_WET_FLAT_RATES(ByVal entity As WET_FLAT_RATES)
		Me.SendPropertyChanging
		entity.ROUTES = Me
	End Sub
	
	Private Sub detach_WET_FLAT_RATES(ByVal entity As WET_FLAT_RATES)
		Me.SendPropertyChanging
		entity.ROUTES = Nothing
	End Sub
	
	Private Sub attach_BALTIC_FORWARD_RATES(ByVal entity As BALTIC_FORWARD_RATES)
		Me.SendPropertyChanging
		entity.ROUTES = Me
	End Sub
	
	Private Sub detach_BALTIC_FORWARD_RATES(ByVal entity As BALTIC_FORWARD_RATES)
		Me.SendPropertyChanging
		entity.ROUTES = Nothing
	End Sub
	
	Private Sub attach_BALTIC_FTP(ByVal entity As BALTIC_FTP)
		Me.SendPropertyChanging
		entity.ROUTES = Me
	End Sub
	
	Private Sub detach_BALTIC_FTP(ByVal entity As BALTIC_FTP)
		Me.SendPropertyChanging
		entity.ROUTES = Nothing
	End Sub
	
	Private Sub attach_BALTIC_FTP_SETTLEMENT(ByVal entity As BALTIC_FTP_SETTLEMENT)
		Me.SendPropertyChanging
		entity.ROUTES = Me
	End Sub
	
	Private Sub detach_BALTIC_FTP_SETTLEMENT(ByVal entity As BALTIC_FTP_SETTLEMENT)
		Me.SendPropertyChanging
		entity.ROUTES = Nothing
	End Sub
	
	Private Sub attach_BALTIC_MONTHLY_SETTLEMENTS(ByVal entity As BALTIC_MONTHLY_SETTLEMENTS)
		Me.SendPropertyChanging
		entity.ROUTES = Me
	End Sub
	
	Private Sub detach_BALTIC_MONTHLY_SETTLEMENTS(ByVal entity As BALTIC_MONTHLY_SETTLEMENTS)
		Me.SendPropertyChanging
		entity.ROUTES = Nothing
	End Sub
	
	Private Sub attach_BALTIC_OPTION_VOLATILITIES(ByVal entity As BALTIC_OPTION_VOLATILITIES)
		Me.SendPropertyChanging
		entity.ROUTES = Me
	End Sub
	
	Private Sub detach_BALTIC_OPTION_VOLATILITIES(ByVal entity As BALTIC_OPTION_VOLATILITIES)
		Me.SendPropertyChanging
		entity.ROUTES = Nothing
	End Sub
	
	Private Sub attach_BALTIC_SPOT_RATES(ByVal entity As BALTIC_SPOT_RATES)
		Me.SendPropertyChanging
		entity.ROUTES = Me
	End Sub
	
	Private Sub detach_BALTIC_SPOT_RATES(ByVal entity As BALTIC_SPOT_RATES)
		Me.SendPropertyChanging
		entity.ROUTES = Nothing
	End Sub
	
	Private Sub attach_CONTRACT_SERIES(ByVal entity As CONTRACT_SERIES)
		Me.SendPropertyChanging
		entity.ROUTES = Me
	End Sub
	
	Private Sub detach_CONTRACT_SERIES(ByVal entity As CONTRACT_SERIES)
		Me.SendPropertyChanging
		entity.ROUTES = Nothing
	End Sub
	
	Private Sub attach_DESK_TRADER_VOICE(ByVal entity As DESK_TRADER_VOICE)
		Me.SendPropertyChanging
		entity.ROUTES = Me
	End Sub
	
	Private Sub detach_DESK_TRADER_VOICE(ByVal entity As DESK_TRADER_VOICE)
		Me.SendPropertyChanging
		entity.ROUTES = Nothing
	End Sub
	
	Private Sub attach_DESK_TRADERS_IM_SUBSCRIPTIONS(ByVal entity As DESK_TRADERS_IM_SUBSCRIPTIONS)
		Me.SendPropertyChanging
		entity.ROUTES = Me
	End Sub
	
	Private Sub detach_DESK_TRADERS_IM_SUBSCRIPTIONS(ByVal entity As DESK_TRADERS_IM_SUBSCRIPTIONS)
		Me.SendPropertyChanging
		entity.ROUTES = Nothing
	End Sub
	
	Private Sub attach_EXCHANGE_ROUTES(ByVal entity As EXCHANGE_ROUTES)
		Me.SendPropertyChanging
		entity.ROUTES = Me
	End Sub
	
	Private Sub detach_EXCHANGE_ROUTES(ByVal entity As EXCHANGE_ROUTES)
		Me.SendPropertyChanging
		entity.ROUTES = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFA(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ROUTES = Me
	End Sub
	
	Private Sub detach_ORDERS_FFA(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ROUTES = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFA1(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ROUTES1 = Me
	End Sub
	
	Private Sub detach_ORDERS_FFA1(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ROUTES1 = Nothing
	End Sub
	
	Private Sub attach_TRADE_CLASS_RATIO_SPREADS(ByVal entity As TRADE_CLASS_RATIO_SPREADS)
		Me.SendPropertyChanging
		entity.ROUTES = Me
	End Sub
	
	Private Sub detach_TRADE_CLASS_RATIO_SPREADS(ByVal entity As TRADE_CLASS_RATIO_SPREADS)
		Me.SendPropertyChanging
		entity.ROUTES = Nothing
	End Sub
	
	Private Sub attach_TRADE_CLASS_RATIO_SPREADS1(ByVal entity As TRADE_CLASS_RATIO_SPREADS)
		Me.SendPropertyChanging
		entity.ROUTES1 = Me
	End Sub
	
	Private Sub detach_TRADE_CLASS_RATIO_SPREADS1(ByVal entity As TRADE_CLASS_RATIO_SPREADS)
		Me.SendPropertyChanging
		entity.ROUTES1 = Nothing
	End Sub
	
	Private Sub attach_TRADES_FFA(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ROUTES = Me
	End Sub
	
	Private Sub detach_TRADES_FFA(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ROUTES = Nothing
	End Sub
	
	Private Sub attach_TRADES_FFA1(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ROUTES1 = Me
	End Sub
	
	Private Sub detach_TRADES_FFA1(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ROUTES1 = Nothing
	End Sub
	
	Private Sub attach_VESSEL_CLASS1(ByVal entity As VESSEL_CLASS)
		Me.SendPropertyChanging
		entity.ROUTES1 = Me
	End Sub
	
	Private Sub detach_VESSEL_CLASS1(ByVal entity As VESSEL_CLASS)
		Me.SendPropertyChanging
		entity.ROUTES1 = Nothing
	End Sub
	
	Private Sub attach_VESSEL_CLASS_SPREAD_MARGINS(ByVal entity As VESSEL_CLASS_SPREAD_MARGINS)
		Me.SendPropertyChanging
		entity.ROUTES = Me
	End Sub
	
	Private Sub detach_VESSEL_CLASS_SPREAD_MARGINS(ByVal entity As VESSEL_CLASS_SPREAD_MARGINS)
		Me.SendPropertyChanging
		entity.ROUTES = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._WET_FLAT_RATES = New EntitySet(Of WET_FLAT_RATES)(AddressOf Me.attach_WET_FLAT_RATES, AddressOf Me.detach_WET_FLAT_RATES)
		Me._BALTIC_FORWARD_RATES = New EntitySet(Of BALTIC_FORWARD_RATES)(AddressOf Me.attach_BALTIC_FORWARD_RATES, AddressOf Me.detach_BALTIC_FORWARD_RATES)
		Me._BALTIC_FTP = New EntitySet(Of BALTIC_FTP)(AddressOf Me.attach_BALTIC_FTP, AddressOf Me.detach_BALTIC_FTP)
		Me._BALTIC_FTP_SETTLEMENT = New EntitySet(Of BALTIC_FTP_SETTLEMENT)(AddressOf Me.attach_BALTIC_FTP_SETTLEMENT, AddressOf Me.detach_BALTIC_FTP_SETTLEMENT)
		Me._BALTIC_MONTHLY_SETTLEMENTS = New EntitySet(Of BALTIC_MONTHLY_SETTLEMENTS)(AddressOf Me.attach_BALTIC_MONTHLY_SETTLEMENTS, AddressOf Me.detach_BALTIC_MONTHLY_SETTLEMENTS)
		Me._BALTIC_OPTION_VOLATILITIES = New EntitySet(Of BALTIC_OPTION_VOLATILITIES)(AddressOf Me.attach_BALTIC_OPTION_VOLATILITIES, AddressOf Me.detach_BALTIC_OPTION_VOLATILITIES)
		Me._BALTIC_SPOT_RATES = New EntitySet(Of BALTIC_SPOT_RATES)(AddressOf Me.attach_BALTIC_SPOT_RATES, AddressOf Me.detach_BALTIC_SPOT_RATES)
		Me._CONTRACT_SERIES = New EntitySet(Of CONTRACT_SERIES)(AddressOf Me.attach_CONTRACT_SERIES, AddressOf Me.detach_CONTRACT_SERIES)
		Me._DESK_TRADER_VOICE = New EntitySet(Of DESK_TRADER_VOICE)(AddressOf Me.attach_DESK_TRADER_VOICE, AddressOf Me.detach_DESK_TRADER_VOICE)
		Me._DESK_TRADERS_IM_SUBSCRIPTIONS = New EntitySet(Of DESK_TRADERS_IM_SUBSCRIPTIONS)(AddressOf Me.attach_DESK_TRADERS_IM_SUBSCRIPTIONS, AddressOf Me.detach_DESK_TRADERS_IM_SUBSCRIPTIONS)
		Me._EXCHANGE_ROUTES = New EntitySet(Of EXCHANGE_ROUTES)(AddressOf Me.attach_EXCHANGE_ROUTES, AddressOf Me.detach_EXCHANGE_ROUTES)
		Me._ORDERS_FFA = New EntitySet(Of ORDERS_FFA)(AddressOf Me.attach_ORDERS_FFA, AddressOf Me.detach_ORDERS_FFA)
		Me._ORDERS_FFA1 = New EntitySet(Of ORDERS_FFA)(AddressOf Me.attach_ORDERS_FFA1, AddressOf Me.detach_ORDERS_FFA1)
		Me._TRADE_CLASS_RATIO_SPREADS = New EntitySet(Of TRADE_CLASS_RATIO_SPREADS)(AddressOf Me.attach_TRADE_CLASS_RATIO_SPREADS, AddressOf Me.detach_TRADE_CLASS_RATIO_SPREADS)
		Me._TRADE_CLASS_RATIO_SPREADS1 = New EntitySet(Of TRADE_CLASS_RATIO_SPREADS)(AddressOf Me.attach_TRADE_CLASS_RATIO_SPREADS1, AddressOf Me.detach_TRADE_CLASS_RATIO_SPREADS1)
		Me._TRADES_FFA = New EntitySet(Of TRADES_FFA)(AddressOf Me.attach_TRADES_FFA, AddressOf Me.detach_TRADES_FFA)
		Me._TRADES_FFA1 = New EntitySet(Of TRADES_FFA)(AddressOf Me.attach_TRADES_FFA1, AddressOf Me.detach_TRADES_FFA1)
		Me._VESSEL_CLASS1 = New EntitySet(Of VESSEL_CLASS)(AddressOf Me.attach_VESSEL_CLASS1, AddressOf Me.detach_VESSEL_CLASS1)
		Me._VESSEL_CLASS_SPREAD_MARGINS = New EntitySet(Of VESSEL_CLASS_SPREAD_MARGINS)(AddressOf Me.attach_VESSEL_CLASS_SPREAD_MARGINS, AddressOf Me.detach_VESSEL_CLASS_SPREAD_MARGINS)
		Me._CCY = CType(Nothing, EntityRef(Of CCY))
		Me._LAST_DAY_RULE = CType(Nothing, EntityRef(Of LAST_DAY_RULE))
		Me._QUANTITY_TYPES = CType(Nothing, EntityRef(Of QUANTITY_TYPES))
		Me._QUOTE_TYPES = CType(Nothing, EntityRef(Of QUOTE_TYPES))
		Me._VESSEL_CLASS = CType(Nothing, EntityRef(Of VESSEL_CLASS))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SERVER_INFO"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class SERVER_INFO
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SERVER_ID As Integer
	
	Private _SERVER_ACTIVE As Boolean
	
	Private _LAST_CONNECTION_TIME As System.Nullable(Of Date)
	
	Private _SERVICE_ON As Boolean
	
	Private _SERVICE_OF_CONNECTED As Boolean
	
	Private _SERVICE_START_HOUR As Integer
	
	Private _SERVICE_END_HOUR As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSERVER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSERVER_IDChanged()
    End Sub
    Partial Private Sub OnSERVER_ACTIVEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSERVER_ACTIVEChanged()
    End Sub
    Partial Private Sub OnLAST_CONNECTION_TIMEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLAST_CONNECTION_TIMEChanged()
    End Sub
    Partial Private Sub OnSERVICE_ONChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSERVICE_ONChanged()
    End Sub
    Partial Private Sub OnSERVICE_OF_CONNECTEDChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSERVICE_OF_CONNECTEDChanged()
    End Sub
    Partial Private Sub OnSERVICE_START_HOURChanging(value As Integer)
    End Sub
    Partial Private Sub OnSERVICE_START_HOURChanged()
    End Sub
    Partial Private Sub OnSERVICE_END_HOURChanging(value As Integer)
    End Sub
    Partial Private Sub OnSERVICE_END_HOURChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SERVER_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property SERVER_ID() As Integer
		Get
			Return Me._SERVER_ID
		End Get
		Set
			If ((Me._SERVER_ID = value)  _
						= false) Then
				Me.OnSERVER_IDChanging(value)
				Me.SendPropertyChanging
				Me._SERVER_ID = value
				Me.SendPropertyChanged("SERVER_ID")
				Me.OnSERVER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SERVER_ACTIVE", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property SERVER_ACTIVE() As Boolean
		Get
			Return Me._SERVER_ACTIVE
		End Get
		Set
			If ((Me._SERVER_ACTIVE = value)  _
						= false) Then
				Me.OnSERVER_ACTIVEChanging(value)
				Me.SendPropertyChanging
				Me._SERVER_ACTIVE = value
				Me.SendPropertyChanged("SERVER_ACTIVE")
				Me.OnSERVER_ACTIVEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LAST_CONNECTION_TIME", DbType:="DateTime2"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property LAST_CONNECTION_TIME() As System.Nullable(Of Date)
		Get
			Return Me._LAST_CONNECTION_TIME
		End Get
		Set
			If (Me._LAST_CONNECTION_TIME.Equals(value) = false) Then
				Me.OnLAST_CONNECTION_TIMEChanging(value)
				Me.SendPropertyChanging
				Me._LAST_CONNECTION_TIME = value
				Me.SendPropertyChanged("LAST_CONNECTION_TIME")
				Me.OnLAST_CONNECTION_TIMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SERVICE_ON", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property SERVICE_ON() As Boolean
		Get
			Return Me._SERVICE_ON
		End Get
		Set
			If ((Me._SERVICE_ON = value)  _
						= false) Then
				Me.OnSERVICE_ONChanging(value)
				Me.SendPropertyChanging
				Me._SERVICE_ON = value
				Me.SendPropertyChanged("SERVICE_ON")
				Me.OnSERVICE_ONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SERVICE_OF_CONNECTED", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property SERVICE_OF_CONNECTED() As Boolean
		Get
			Return Me._SERVICE_OF_CONNECTED
		End Get
		Set
			If ((Me._SERVICE_OF_CONNECTED = value)  _
						= false) Then
				Me.OnSERVICE_OF_CONNECTEDChanging(value)
				Me.SendPropertyChanging
				Me._SERVICE_OF_CONNECTED = value
				Me.SendPropertyChanged("SERVICE_OF_CONNECTED")
				Me.OnSERVICE_OF_CONNECTEDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SERVICE_START_HOUR", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property SERVICE_START_HOUR() As Integer
		Get
			Return Me._SERVICE_START_HOUR
		End Get
		Set
			If ((Me._SERVICE_START_HOUR = value)  _
						= false) Then
				Me.OnSERVICE_START_HOURChanging(value)
				Me.SendPropertyChanging
				Me._SERVICE_START_HOUR = value
				Me.SendPropertyChanged("SERVICE_START_HOUR")
				Me.OnSERVICE_START_HOURChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SERVICE_END_HOUR", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property SERVICE_END_HOUR() As Integer
		Get
			Return Me._SERVICE_END_HOUR
		End Get
		Set
			If ((Me._SERVICE_END_HOUR = value)  _
						= false) Then
				Me.OnSERVICE_END_HOURChanging(value)
				Me.SendPropertyChanging
				Me._SERVICE_END_HOUR = value
				Me.SendPropertyChanged("SERVICE_END_HOUR")
				Me.OnSERVICE_END_HOURChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SHOW_NAME_TYPES"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class SHOW_NAME_TYPES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SHOW_NAME_ID As Short
	
	Private _SHOW_NAME As String
	
	Private _ACCOUNT_DESKS As EntitySet(Of ACCOUNT_DESKS)
	
	Private _ACCOUNT_DESKS1 As EntitySet(Of ACCOUNT_DESKS)
	
	Private _COUNTERPARTY_LIMITS As EntitySet(Of COUNTERPARTY_LIMITS)
	
	Private _COUNTERPARTY_LIMITS1 As EntitySet(Of COUNTERPARTY_LIMITS)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSHOW_NAME_IDChanging(value As Short)
    End Sub
    Partial Private Sub OnSHOW_NAME_IDChanged()
    End Sub
    Partial Private Sub OnSHOW_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnSHOW_NAMEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SHOW_NAME_ID", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property SHOW_NAME_ID() As Short
		Get
			Return Me._SHOW_NAME_ID
		End Get
		Set
			If ((Me._SHOW_NAME_ID = value)  _
						= false) Then
				Me.OnSHOW_NAME_IDChanging(value)
				Me.SendPropertyChanging
				Me._SHOW_NAME_ID = value
				Me.SendPropertyChanged("SHOW_NAME_ID")
				Me.OnSHOW_NAME_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SHOW_NAME", DbType:="VarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property SHOW_NAME() As String
		Get
			Return Me._SHOW_NAME
		End Get
		Set
			If (String.Equals(Me._SHOW_NAME, value) = false) Then
				Me.OnSHOW_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._SHOW_NAME = value
				Me.SendPropertyChanged("SHOW_NAME")
				Me.OnSHOW_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SHOW_NAME_TYPES_ACCOUNT_DESKS", Storage:="_ACCOUNT_DESKS", ThisKey:="SHOW_NAME_ID", OtherKey:="CLEARED_SHOW_NAME"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3, EmitDefaultValue:=false)>  _
	Public Property ACCOUNT_DESKS() As EntitySet(Of ACCOUNT_DESKS)
		Get
			If (Me.serializing  _
						AndAlso (Me._ACCOUNT_DESKS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ACCOUNT_DESKS
		End Get
		Set
			Me._ACCOUNT_DESKS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SHOW_NAME_TYPES_ACCOUNT_DESKS1", Storage:="_ACCOUNT_DESKS1", ThisKey:="SHOW_NAME_ID", OtherKey:="OTC_SHOW_NAME"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4, EmitDefaultValue:=false)>  _
	Public Property ACCOUNT_DESKS1() As EntitySet(Of ACCOUNT_DESKS)
		Get
			If (Me.serializing  _
						AndAlso (Me._ACCOUNT_DESKS1.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ACCOUNT_DESKS1
		End Get
		Set
			Me._ACCOUNT_DESKS1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SHOW_NAME_TYPES_COUNTERPARTY_LIMITS", Storage:="_COUNTERPARTY_LIMITS", ThisKey:="SHOW_NAME_ID", OtherKey:="CLEARED_SHOW_NAME"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5, EmitDefaultValue:=false)>  _
	Public Property COUNTERPARTY_LIMITS() As EntitySet(Of COUNTERPARTY_LIMITS)
		Get
			If (Me.serializing  _
						AndAlso (Me._COUNTERPARTY_LIMITS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._COUNTERPARTY_LIMITS
		End Get
		Set
			Me._COUNTERPARTY_LIMITS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SHOW_NAME_TYPES_COUNTERPARTY_LIMITS1", Storage:="_COUNTERPARTY_LIMITS1", ThisKey:="SHOW_NAME_ID", OtherKey:="OTC_SHOW_NAME"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6, EmitDefaultValue:=false)>  _
	Public Property COUNTERPARTY_LIMITS1() As EntitySet(Of COUNTERPARTY_LIMITS)
		Get
			If (Me.serializing  _
						AndAlso (Me._COUNTERPARTY_LIMITS1.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._COUNTERPARTY_LIMITS1
		End Get
		Set
			Me._COUNTERPARTY_LIMITS1.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ACCOUNT_DESKS(ByVal entity As ACCOUNT_DESKS)
		Me.SendPropertyChanging
		entity.SHOW_NAME_TYPES = Me
	End Sub
	
	Private Sub detach_ACCOUNT_DESKS(ByVal entity As ACCOUNT_DESKS)
		Me.SendPropertyChanging
		entity.SHOW_NAME_TYPES = Nothing
	End Sub
	
	Private Sub attach_ACCOUNT_DESKS1(ByVal entity As ACCOUNT_DESKS)
		Me.SendPropertyChanging
		entity.SHOW_NAME_TYPES1 = Me
	End Sub
	
	Private Sub detach_ACCOUNT_DESKS1(ByVal entity As ACCOUNT_DESKS)
		Me.SendPropertyChanging
		entity.SHOW_NAME_TYPES1 = Nothing
	End Sub
	
	Private Sub attach_COUNTERPARTY_LIMITS(ByVal entity As COUNTERPARTY_LIMITS)
		Me.SendPropertyChanging
		entity.SHOW_NAME_TYPES = Me
	End Sub
	
	Private Sub detach_COUNTERPARTY_LIMITS(ByVal entity As COUNTERPARTY_LIMITS)
		Me.SendPropertyChanging
		entity.SHOW_NAME_TYPES = Nothing
	End Sub
	
	Private Sub attach_COUNTERPARTY_LIMITS1(ByVal entity As COUNTERPARTY_LIMITS)
		Me.SendPropertyChanging
		entity.SHOW_NAME_TYPES1 = Me
	End Sub
	
	Private Sub detach_COUNTERPARTY_LIMITS1(ByVal entity As COUNTERPARTY_LIMITS)
		Me.SendPropertyChanging
		entity.SHOW_NAME_TYPES1 = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._ACCOUNT_DESKS = New EntitySet(Of ACCOUNT_DESKS)(AddressOf Me.attach_ACCOUNT_DESKS, AddressOf Me.detach_ACCOUNT_DESKS)
		Me._ACCOUNT_DESKS1 = New EntitySet(Of ACCOUNT_DESKS)(AddressOf Me.attach_ACCOUNT_DESKS1, AddressOf Me.detach_ACCOUNT_DESKS1)
		Me._COUNTERPARTY_LIMITS = New EntitySet(Of COUNTERPARTY_LIMITS)(AddressOf Me.attach_COUNTERPARTY_LIMITS, AddressOf Me.detach_COUNTERPARTY_LIMITS)
		Me._COUNTERPARTY_LIMITS1 = New EntitySet(Of COUNTERPARTY_LIMITS)(AddressOf Me.attach_COUNTERPARTY_LIMITS1, AddressOf Me.detach_COUNTERPARTY_LIMITS1)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TRADE_AUTHORITIES"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class TRADE_AUTHORITIES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TRADE_AUTHORITY As Short
	
	Private _TRADE_AUTHORITY_DESCR As String
	
	Private _DESK_TRADERS As EntitySet(Of DESK_TRADERS)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTRADE_AUTHORITYChanging(value As Short)
    End Sub
    Partial Private Sub OnTRADE_AUTHORITYChanged()
    End Sub
    Partial Private Sub OnTRADE_AUTHORITY_DESCRChanging(value As String)
    End Sub
    Partial Private Sub OnTRADE_AUTHORITY_DESCRChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_AUTHORITY", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property TRADE_AUTHORITY() As Short
		Get
			Return Me._TRADE_AUTHORITY
		End Get
		Set
			If ((Me._TRADE_AUTHORITY = value)  _
						= false) Then
				Me.OnTRADE_AUTHORITYChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_AUTHORITY = value
				Me.SendPropertyChanged("TRADE_AUTHORITY")
				Me.OnTRADE_AUTHORITYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_AUTHORITY_DESCR", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property TRADE_AUTHORITY_DESCR() As String
		Get
			Return Me._TRADE_AUTHORITY_DESCR
		End Get
		Set
			If (String.Equals(Me._TRADE_AUTHORITY_DESCR, value) = false) Then
				Me.OnTRADE_AUTHORITY_DESCRChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_AUTHORITY_DESCR = value
				Me.SendPropertyChanged("TRADE_AUTHORITY_DESCR")
				Me.OnTRADE_AUTHORITY_DESCRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_AUTHORITIES_DESK_TRADERS", Storage:="_DESK_TRADERS", ThisKey:="TRADE_AUTHORITY", OtherKey:="TRADE_AUTHORITY"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3, EmitDefaultValue:=false)>  _
	Public Property DESK_TRADERS() As EntitySet(Of DESK_TRADERS)
		Get
			If (Me.serializing  _
						AndAlso (Me._DESK_TRADERS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._DESK_TRADERS
		End Get
		Set
			Me._DESK_TRADERS.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DESK_TRADERS(ByVal entity As DESK_TRADERS)
		Me.SendPropertyChanging
		entity.TRADE_AUTHORITIES = Me
	End Sub
	
	Private Sub detach_DESK_TRADERS(ByVal entity As DESK_TRADERS)
		Me.SendPropertyChanging
		entity.TRADE_AUTHORITIES = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._DESK_TRADERS = New EntitySet(Of DESK_TRADERS)(AddressOf Me.attach_DESK_TRADERS, AddressOf Me.detach_DESK_TRADERS)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TRADE_CLASS_EXCHANGES"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class TRADE_CLASS_EXCHANGES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TRADE_CLASS_SHORT As Char
	
	Private _EXCHANGE_ID As Integer
	
	Private _RANKING_ORDER As System.Nullable(Of Integer)
	
	Private _EXCHANGES As EntityRef(Of EXCHANGES)
	
	Private _TRADE_CLASSES As EntityRef(Of TRADE_CLASSES)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanging(value As Char)
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanged()
    End Sub
    Partial Private Sub OnEXCHANGE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEXCHANGE_IDChanged()
    End Sub
    Partial Private Sub OnRANKING_ORDERChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRANKING_ORDERChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_CLASS_SHORT", DbType:="Char(1) NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property TRADE_CLASS_SHORT() As Char
		Get
			Return Me._TRADE_CLASS_SHORT
		End Get
		Set
			If ((Me._TRADE_CLASS_SHORT = value)  _
						= false) Then
				If Me._TRADE_CLASSES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTRADE_CLASS_SHORTChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_CLASS_SHORT = value
				Me.SendPropertyChanged("TRADE_CLASS_SHORT")
				Me.OnTRADE_CLASS_SHORTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property EXCHANGE_ID() As Integer
		Get
			Return Me._EXCHANGE_ID
		End Get
		Set
			If ((Me._EXCHANGE_ID = value)  _
						= false) Then
				If Me._EXCHANGES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEXCHANGE_IDChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_ID = value
				Me.SendPropertyChanged("EXCHANGE_ID")
				Me.OnEXCHANGE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RANKING_ORDER", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property RANKING_ORDER() As System.Nullable(Of Integer)
		Get
			Return Me._RANKING_ORDER
		End Get
		Set
			If (Me._RANKING_ORDER.Equals(value) = false) Then
				Me.OnRANKING_ORDERChanging(value)
				Me.SendPropertyChanging
				Me._RANKING_ORDER = value
				Me.SendPropertyChanged("RANKING_ORDER")
				Me.OnRANKING_ORDERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EXCHANGES_TRADE_CLASS_EXCHANGES", Storage:="_EXCHANGES", ThisKey:="EXCHANGE_ID", OtherKey:="EXCHANGE_ID", IsForeignKey:=true)>  _
	Public Property EXCHANGES() As EXCHANGES
		Get
			Return Me._EXCHANGES.Entity
		End Get
		Set
			Dim previousValue As EXCHANGES = Me._EXCHANGES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EXCHANGES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EXCHANGES.Entity = Nothing
					previousValue.TRADE_CLASS_EXCHANGES.Remove(Me)
				End If
				Me._EXCHANGES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADE_CLASS_EXCHANGES.Add(Me)
					Me._EXCHANGE_ID = value.EXCHANGE_ID
				Else
					Me._EXCHANGE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("EXCHANGES")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASSES_TRADE_CLASS_EXCHANGES", Storage:="_TRADE_CLASSES", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="TRADE_CLASS_SHORT", IsForeignKey:=true)>  _
	Public Property TRADE_CLASSES() As TRADE_CLASSES
		Get
			Return Me._TRADE_CLASSES.Entity
		End Get
		Set
			Dim previousValue As TRADE_CLASSES = Me._TRADE_CLASSES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TRADE_CLASSES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TRADE_CLASSES.Entity = Nothing
					previousValue.TRADE_CLASS_EXCHANGES.Remove(Me)
				End If
				Me._TRADE_CLASSES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADE_CLASS_EXCHANGES.Add(Me)
					Me._TRADE_CLASS_SHORT = value.TRADE_CLASS_SHORT
				Else
					Me._TRADE_CLASS_SHORT = CType(Nothing, Char)
				End If
				Me.SendPropertyChanged("TRADE_CLASSES")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._EXCHANGES = CType(Nothing, EntityRef(Of EXCHANGES))
		Me._TRADE_CLASSES = CType(Nothing, EntityRef(Of TRADE_CLASSES))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TRADE_CLASS_RATIO_SPREADS"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class TRADE_CLASS_RATIO_SPREADS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TRADE_CLASS_SHORT As Char
	
	Private _ROUTE_ID1 As Integer
	
	Private _ROUTE_ID2 As Integer
	
	Private _PRICING_TICK As Double
	
	Private _PRECISION_TICK As Double
	
	Private _DEFAULT_MULTIPLIER As Integer
	
	Private _ROUTES As EntityRef(Of ROUTES)
	
	Private _ROUTES1 As EntityRef(Of ROUTES)
	
	Private _TRADE_CLASSES As EntityRef(Of TRADE_CLASSES)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanging(value As Char)
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanged()
    End Sub
    Partial Private Sub OnROUTE_ID1Changing(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_ID1Changed()
    End Sub
    Partial Private Sub OnROUTE_ID2Changing(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_ID2Changed()
    End Sub
    Partial Private Sub OnPRICING_TICKChanging(value As Double)
    End Sub
    Partial Private Sub OnPRICING_TICKChanged()
    End Sub
    Partial Private Sub OnPRECISION_TICKChanging(value As Double)
    End Sub
    Partial Private Sub OnPRECISION_TICKChanged()
    End Sub
    Partial Private Sub OnDEFAULT_MULTIPLIERChanging(value As Integer)
    End Sub
    Partial Private Sub OnDEFAULT_MULTIPLIERChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_CLASS_SHORT", DbType:="Char(1) NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property TRADE_CLASS_SHORT() As Char
		Get
			Return Me._TRADE_CLASS_SHORT
		End Get
		Set
			If ((Me._TRADE_CLASS_SHORT = value)  _
						= false) Then
				If Me._TRADE_CLASSES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTRADE_CLASS_SHORTChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_CLASS_SHORT = value
				Me.SendPropertyChanged("TRADE_CLASS_SHORT")
				Me.OnTRADE_CLASS_SHORTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID1", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property ROUTE_ID1() As Integer
		Get
			Return Me._ROUTE_ID1
		End Get
		Set
			If ((Me._ROUTE_ID1 = value)  _
						= false) Then
				If Me._ROUTES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_ID1Changing(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID1 = value
				Me.SendPropertyChanged("ROUTE_ID1")
				Me.OnROUTE_ID1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID2", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property ROUTE_ID2() As Integer
		Get
			Return Me._ROUTE_ID2
		End Get
		Set
			If ((Me._ROUTE_ID2 = value)  _
						= false) Then
				If Me._ROUTES1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_ID2Changing(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID2 = value
				Me.SendPropertyChanged("ROUTE_ID2")
				Me.OnROUTE_ID2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICING_TICK", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property PRICING_TICK() As Double
		Get
			Return Me._PRICING_TICK
		End Get
		Set
			If ((Me._PRICING_TICK = value)  _
						= false) Then
				Me.OnPRICING_TICKChanging(value)
				Me.SendPropertyChanging
				Me._PRICING_TICK = value
				Me.SendPropertyChanged("PRICING_TICK")
				Me.OnPRICING_TICKChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRECISION_TICK", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property PRECISION_TICK() As Double
		Get
			Return Me._PRECISION_TICK
		End Get
		Set
			If ((Me._PRECISION_TICK = value)  _
						= false) Then
				Me.OnPRECISION_TICKChanging(value)
				Me.SendPropertyChanging
				Me._PRECISION_TICK = value
				Me.SendPropertyChanged("PRECISION_TICK")
				Me.OnPRECISION_TICKChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEFAULT_MULTIPLIER", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property DEFAULT_MULTIPLIER() As Integer
		Get
			Return Me._DEFAULT_MULTIPLIER
		End Get
		Set
			If ((Me._DEFAULT_MULTIPLIER = value)  _
						= false) Then
				Me.OnDEFAULT_MULTIPLIERChanging(value)
				Me.SendPropertyChanging
				Me._DEFAULT_MULTIPLIER = value
				Me.SendPropertyChanged("DEFAULT_MULTIPLIER")
				Me.OnDEFAULT_MULTIPLIERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_TRADE_CLASS_RATIO_SPREADS", Storage:="_ROUTES", ThisKey:="ROUTE_ID1", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTES() As ROUTES
		Get
			Return Me._ROUTES.Entity
		End Get
		Set
			Dim previousValue As ROUTES = Me._ROUTES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTES.Entity = Nothing
					previousValue.TRADE_CLASS_RATIO_SPREADS.Remove(Me)
				End If
				Me._ROUTES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADE_CLASS_RATIO_SPREADS.Add(Me)
					Me._ROUTE_ID1 = value.ROUTE_ID
				Else
					Me._ROUTE_ID1 = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTES")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_TRADE_CLASS_RATIO_SPREADS1", Storage:="_ROUTES1", ThisKey:="ROUTE_ID2", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTES1() As ROUTES
		Get
			Return Me._ROUTES1.Entity
		End Get
		Set
			Dim previousValue As ROUTES = Me._ROUTES1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTES1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTES1.Entity = Nothing
					previousValue.TRADE_CLASS_RATIO_SPREADS1.Remove(Me)
				End If
				Me._ROUTES1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADE_CLASS_RATIO_SPREADS1.Add(Me)
					Me._ROUTE_ID2 = value.ROUTE_ID
				Else
					Me._ROUTE_ID2 = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTES1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASSES_TRADE_CLASS_RATIO_SPREADS", Storage:="_TRADE_CLASSES", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="TRADE_CLASS_SHORT", IsForeignKey:=true)>  _
	Public Property TRADE_CLASSES() As TRADE_CLASSES
		Get
			Return Me._TRADE_CLASSES.Entity
		End Get
		Set
			Dim previousValue As TRADE_CLASSES = Me._TRADE_CLASSES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TRADE_CLASSES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TRADE_CLASSES.Entity = Nothing
					previousValue.TRADE_CLASS_RATIO_SPREADS.Remove(Me)
				End If
				Me._TRADE_CLASSES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADE_CLASS_RATIO_SPREADS.Add(Me)
					Me._TRADE_CLASS_SHORT = value.TRADE_CLASS_SHORT
				Else
					Me._TRADE_CLASS_SHORT = CType(Nothing, Char)
				End If
				Me.SendPropertyChanged("TRADE_CLASSES")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._ROUTES = CType(Nothing, EntityRef(Of ROUTES))
		Me._ROUTES1 = CType(Nothing, EntityRef(Of ROUTES))
		Me._TRADE_CLASSES = CType(Nothing, EntityRef(Of TRADE_CLASSES))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TRADE_CLASSES"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class TRADE_CLASSES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TRADE_CLASS_SHORT As Char
	
	Private _TRADE_CLASS As String
	
	Private _TRADE_CLASS_DES As String
	
	Private _BROKER_DESK_TRADE_CLASSES As EntitySet(Of BROKER_DESK_TRADE_CLASSES)
	
	Private _DESK_TRADE_CLASSES As EntitySet(Of DESK_TRADE_CLASSES)
	
	Private _DESK_TRADER_VOICE As EntitySet(Of DESK_TRADER_VOICE)
	
	Private _DESK_TRADERS As EntitySet(Of DESK_TRADERS)
	
	Private _DESK_TRADERS_IM_SUBSCRIPTIONS As EntitySet(Of DESK_TRADERS_IM_SUBSCRIPTIONS)
	
	Private _TRADE_CLASS_EXCHANGES As EntitySet(Of TRADE_CLASS_EXCHANGES)
	
	Private _TRADE_CLASS_RATIO_SPREADS As EntitySet(Of TRADE_CLASS_RATIO_SPREADS)
	
	Private _VESSEL_CLASS As EntitySet(Of VESSEL_CLASS)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanging(value As Char)
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanged()
    End Sub
    Partial Private Sub OnTRADE_CLASSChanging(value As String)
    End Sub
    Partial Private Sub OnTRADE_CLASSChanged()
    End Sub
    Partial Private Sub OnTRADE_CLASS_DESChanging(value As String)
    End Sub
    Partial Private Sub OnTRADE_CLASS_DESChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_CLASS_SHORT", DbType:="Char(1) NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property TRADE_CLASS_SHORT() As Char
		Get
			Return Me._TRADE_CLASS_SHORT
		End Get
		Set
			If ((Me._TRADE_CLASS_SHORT = value)  _
						= false) Then
				Me.OnTRADE_CLASS_SHORTChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_CLASS_SHORT = value
				Me.SendPropertyChanged("TRADE_CLASS_SHORT")
				Me.OnTRADE_CLASS_SHORTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_CLASS", DbType:="VarChar(10) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property TRADE_CLASS() As String
		Get
			Return Me._TRADE_CLASS
		End Get
		Set
			If (String.Equals(Me._TRADE_CLASS, value) = false) Then
				Me.OnTRADE_CLASSChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_CLASS = value
				Me.SendPropertyChanged("TRADE_CLASS")
				Me.OnTRADE_CLASSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_CLASS_DES", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property TRADE_CLASS_DES() As String
		Get
			Return Me._TRADE_CLASS_DES
		End Get
		Set
			If (String.Equals(Me._TRADE_CLASS_DES, value) = false) Then
				Me.OnTRADE_CLASS_DESChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_CLASS_DES = value
				Me.SendPropertyChanged("TRADE_CLASS_DES")
				Me.OnTRADE_CLASS_DESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASSES_BROKER_DESK_TRADE_CLASSES", Storage:="_BROKER_DESK_TRADE_CLASSES", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="TRADE_CLASS_SHORT"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4, EmitDefaultValue:=false)>  _
	Public Property BROKER_DESK_TRADE_CLASSES() As EntitySet(Of BROKER_DESK_TRADE_CLASSES)
		Get
			If (Me.serializing  _
						AndAlso (Me._BROKER_DESK_TRADE_CLASSES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._BROKER_DESK_TRADE_CLASSES
		End Get
		Set
			Me._BROKER_DESK_TRADE_CLASSES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASSES_DESK_TRADE_CLASSES", Storage:="_DESK_TRADE_CLASSES", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="TRADE_CLASS_SHORT"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5, EmitDefaultValue:=false)>  _
	Public Property DESK_TRADE_CLASSES() As EntitySet(Of DESK_TRADE_CLASSES)
		Get
			If (Me.serializing  _
						AndAlso (Me._DESK_TRADE_CLASSES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._DESK_TRADE_CLASSES
		End Get
		Set
			Me._DESK_TRADE_CLASSES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASSES_DESK_TRADER_VOICE", Storage:="_DESK_TRADER_VOICE", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="TRADE_CLASS_SHORT"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6, EmitDefaultValue:=false)>  _
	Public Property DESK_TRADER_VOICE() As EntitySet(Of DESK_TRADER_VOICE)
		Get
			If (Me.serializing  _
						AndAlso (Me._DESK_TRADER_VOICE.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._DESK_TRADER_VOICE
		End Get
		Set
			Me._DESK_TRADER_VOICE.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASSES_DESK_TRADERS", Storage:="_DESK_TRADERS", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="DEFAULT_MARKET"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7, EmitDefaultValue:=false)>  _
	Public Property DESK_TRADERS() As EntitySet(Of DESK_TRADERS)
		Get
			If (Me.serializing  _
						AndAlso (Me._DESK_TRADERS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._DESK_TRADERS
		End Get
		Set
			Me._DESK_TRADERS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASSES_DESK_TRADERS_IM_SUBSCRIPTIONS", Storage:="_DESK_TRADERS_IM_SUBSCRIPTIONS", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="TRADE_CLASS_SHORT"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8, EmitDefaultValue:=false)>  _
	Public Property DESK_TRADERS_IM_SUBSCRIPTIONS() As EntitySet(Of DESK_TRADERS_IM_SUBSCRIPTIONS)
		Get
			If (Me.serializing  _
						AndAlso (Me._DESK_TRADERS_IM_SUBSCRIPTIONS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._DESK_TRADERS_IM_SUBSCRIPTIONS
		End Get
		Set
			Me._DESK_TRADERS_IM_SUBSCRIPTIONS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASSES_TRADE_CLASS_EXCHANGES", Storage:="_TRADE_CLASS_EXCHANGES", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="TRADE_CLASS_SHORT"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9, EmitDefaultValue:=false)>  _
	Public Property TRADE_CLASS_EXCHANGES() As EntitySet(Of TRADE_CLASS_EXCHANGES)
		Get
			If (Me.serializing  _
						AndAlso (Me._TRADE_CLASS_EXCHANGES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._TRADE_CLASS_EXCHANGES
		End Get
		Set
			Me._TRADE_CLASS_EXCHANGES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASSES_TRADE_CLASS_RATIO_SPREADS", Storage:="_TRADE_CLASS_RATIO_SPREADS", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="TRADE_CLASS_SHORT"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10, EmitDefaultValue:=false)>  _
	Public Property TRADE_CLASS_RATIO_SPREADS() As EntitySet(Of TRADE_CLASS_RATIO_SPREADS)
		Get
			If (Me.serializing  _
						AndAlso (Me._TRADE_CLASS_RATIO_SPREADS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._TRADE_CLASS_RATIO_SPREADS
		End Get
		Set
			Me._TRADE_CLASS_RATIO_SPREADS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASSES_VESSEL_CLASS", Storage:="_VESSEL_CLASS", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="DRYWET"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=11, EmitDefaultValue:=false)>  _
	Public Property VESSEL_CLASS() As EntitySet(Of VESSEL_CLASS)
		Get
			If (Me.serializing  _
						AndAlso (Me._VESSEL_CLASS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._VESSEL_CLASS
		End Get
		Set
			Me._VESSEL_CLASS.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BROKER_DESK_TRADE_CLASSES(ByVal entity As BROKER_DESK_TRADE_CLASSES)
		Me.SendPropertyChanging
		entity.TRADE_CLASSES = Me
	End Sub
	
	Private Sub detach_BROKER_DESK_TRADE_CLASSES(ByVal entity As BROKER_DESK_TRADE_CLASSES)
		Me.SendPropertyChanging
		entity.TRADE_CLASSES = Nothing
	End Sub
	
	Private Sub attach_DESK_TRADE_CLASSES(ByVal entity As DESK_TRADE_CLASSES)
		Me.SendPropertyChanging
		entity.TRADE_CLASSES = Me
	End Sub
	
	Private Sub detach_DESK_TRADE_CLASSES(ByVal entity As DESK_TRADE_CLASSES)
		Me.SendPropertyChanging
		entity.TRADE_CLASSES = Nothing
	End Sub
	
	Private Sub attach_DESK_TRADER_VOICE(ByVal entity As DESK_TRADER_VOICE)
		Me.SendPropertyChanging
		entity.TRADE_CLASSES = Me
	End Sub
	
	Private Sub detach_DESK_TRADER_VOICE(ByVal entity As DESK_TRADER_VOICE)
		Me.SendPropertyChanging
		entity.TRADE_CLASSES = Nothing
	End Sub
	
	Private Sub attach_DESK_TRADERS(ByVal entity As DESK_TRADERS)
		Me.SendPropertyChanging
		entity.TRADE_CLASSES = Me
	End Sub
	
	Private Sub detach_DESK_TRADERS(ByVal entity As DESK_TRADERS)
		Me.SendPropertyChanging
		entity.TRADE_CLASSES = Nothing
	End Sub
	
	Private Sub attach_DESK_TRADERS_IM_SUBSCRIPTIONS(ByVal entity As DESK_TRADERS_IM_SUBSCRIPTIONS)
		Me.SendPropertyChanging
		entity.TRADE_CLASSES = Me
	End Sub
	
	Private Sub detach_DESK_TRADERS_IM_SUBSCRIPTIONS(ByVal entity As DESK_TRADERS_IM_SUBSCRIPTIONS)
		Me.SendPropertyChanging
		entity.TRADE_CLASSES = Nothing
	End Sub
	
	Private Sub attach_TRADE_CLASS_EXCHANGES(ByVal entity As TRADE_CLASS_EXCHANGES)
		Me.SendPropertyChanging
		entity.TRADE_CLASSES = Me
	End Sub
	
	Private Sub detach_TRADE_CLASS_EXCHANGES(ByVal entity As TRADE_CLASS_EXCHANGES)
		Me.SendPropertyChanging
		entity.TRADE_CLASSES = Nothing
	End Sub
	
	Private Sub attach_TRADE_CLASS_RATIO_SPREADS(ByVal entity As TRADE_CLASS_RATIO_SPREADS)
		Me.SendPropertyChanging
		entity.TRADE_CLASSES = Me
	End Sub
	
	Private Sub detach_TRADE_CLASS_RATIO_SPREADS(ByVal entity As TRADE_CLASS_RATIO_SPREADS)
		Me.SendPropertyChanging
		entity.TRADE_CLASSES = Nothing
	End Sub
	
	Private Sub attach_VESSEL_CLASS(ByVal entity As VESSEL_CLASS)
		Me.SendPropertyChanging
		entity.TRADE_CLASSES = Me
	End Sub
	
	Private Sub detach_VESSEL_CLASS(ByVal entity As VESSEL_CLASS)
		Me.SendPropertyChanging
		entity.TRADE_CLASSES = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._BROKER_DESK_TRADE_CLASSES = New EntitySet(Of BROKER_DESK_TRADE_CLASSES)(AddressOf Me.attach_BROKER_DESK_TRADE_CLASSES, AddressOf Me.detach_BROKER_DESK_TRADE_CLASSES)
		Me._DESK_TRADE_CLASSES = New EntitySet(Of DESK_TRADE_CLASSES)(AddressOf Me.attach_DESK_TRADE_CLASSES, AddressOf Me.detach_DESK_TRADE_CLASSES)
		Me._DESK_TRADER_VOICE = New EntitySet(Of DESK_TRADER_VOICE)(AddressOf Me.attach_DESK_TRADER_VOICE, AddressOf Me.detach_DESK_TRADER_VOICE)
		Me._DESK_TRADERS = New EntitySet(Of DESK_TRADERS)(AddressOf Me.attach_DESK_TRADERS, AddressOf Me.detach_DESK_TRADERS)
		Me._DESK_TRADERS_IM_SUBSCRIPTIONS = New EntitySet(Of DESK_TRADERS_IM_SUBSCRIPTIONS)(AddressOf Me.attach_DESK_TRADERS_IM_SUBSCRIPTIONS, AddressOf Me.detach_DESK_TRADERS_IM_SUBSCRIPTIONS)
		Me._TRADE_CLASS_EXCHANGES = New EntitySet(Of TRADE_CLASS_EXCHANGES)(AddressOf Me.attach_TRADE_CLASS_EXCHANGES, AddressOf Me.detach_TRADE_CLASS_EXCHANGES)
		Me._TRADE_CLASS_RATIO_SPREADS = New EntitySet(Of TRADE_CLASS_RATIO_SPREADS)(AddressOf Me.attach_TRADE_CLASS_RATIO_SPREADS, AddressOf Me.detach_TRADE_CLASS_RATIO_SPREADS)
		Me._VESSEL_CLASS = New EntitySet(Of VESSEL_CLASS)(AddressOf Me.attach_VESSEL_CLASS, AddressOf Me.detach_VESSEL_CLASS)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TRADES_FFA"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class TRADES_FFA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TRADE_ID As Integer
	
	Private _ORDER_DATETIME As Date
	
	Private _TRADE_BOOKED_DATETIME As System.Nullable(Of Date)
	
	Private _TRADE_TYPE As Short
	
	Private _ORDER_QUALIFIER As System.Nullable(Of Char)
	
	Private _ORDER_ID1 As System.Nullable(Of Integer)
	
	Private _ORDER_ID2 As System.Nullable(Of Integer)
	
	Private _TRADE_BS1 As Char
	
	Private _TRADE_BS2 As Char
	
	Private _DESK_TRADER_ID1 As Integer
	
	Private _DESK_TRADER_ID2 As Integer
	
	Private _ROUTE_ID As Integer
	
	Private _MM1 As System.Nullable(Of Short)
	
	Private _YY1 As System.Nullable(Of Short)
	
	Private _MM2 As System.Nullable(Of Short)
	
	Private _YY2 As System.Nullable(Of Short)
	
	Private _SHORTDES As String
	
	Private _PRICE_TRADED As Double
	
	Private _AMMENDED_PRICE As Double
	
	Private _UPDATE_STATUS As Byte
	
	Private _DAY_QUALIFIER As Byte
	
	Private _QUANTITY As Integer
	
	Private _ROUTE_ID2 As System.Nullable(Of Integer)
	
	Private _MM21 As System.Nullable(Of Short)
	
	Private _YY21 As System.Nullable(Of Short)
	
	Private _MM22 As System.Nullable(Of Short)
	
	Private _YY22 As System.Nullable(Of Short)
	
	Private _PRICE_TRADED2 As System.Nullable(Of Double)
	
	Private _DAY_QUALIFIER2 As System.Nullable(Of Byte)
	
	Private _QUANTITY2 As System.Nullable(Of Integer)
	
	Private _EXCHANGE_ID As System.Nullable(Of Integer)
	
	Private _DEAL_CONFIRMATION_SENT As Boolean
	
	Private _SENT_TO_CLEARING As Boolean
	
	Private _CLEARING_ACCEPTED As Boolean
	
	Private _DEAL_CONFIRMATION_SENT2 As Boolean
	
	Private _SENT_TO_CLEARING2 As Boolean
	
	Private _CLEARING_ACCEPTED2 As Boolean
	
	Private _CLEARING_ID1 As System.Nullable(Of Integer)
	
	Private _CLEARING_ID2 As System.Nullable(Of Integer)
	
	Private _PNC As Boolean
	
	Private _INFORM_DESK_ID1 As System.Nullable(Of Integer)
	
	Private _INFORM_DESK_ID2 As System.Nullable(Of Integer)
	
	Private _IS_SYNTHETIC As Boolean
	
	Private _SPREAD_TRADE_ID1 As System.Nullable(Of Integer)
	
	Private _BROKER_ID1 As System.Nullable(Of Integer)
	
	Private _BROKER_ID2 As System.Nullable(Of Integer)
	
	Private _SPREAD_TRADE_ID2 As System.Nullable(Of Integer)
	
	Private _TRADES_FFA1 As EntitySet(Of TRADES_FFA)
	
	Private _TRADES_FFA3 As EntitySet(Of TRADES_FFA)
	
	Private _ACCOUNT_DESKS As EntityRef(Of ACCOUNT_DESKS)
	
	Private _ACCOUNT_DESKS1 As EntityRef(Of ACCOUNT_DESKS)
	
	Private _ACCOUNTS As EntityRef(Of ACCOUNTS)
	
	Private _ACCOUNTS1 As EntityRef(Of ACCOUNTS)
	
	Private _ACCOUNTS2 As EntityRef(Of ACCOUNTS)
	
	Private _ACCOUNTS3 As EntityRef(Of ACCOUNTS)
	
	Private _DESK_TRADERS As EntityRef(Of DESK_TRADERS)
	
	Private _DESK_TRADERS1 As EntityRef(Of DESK_TRADERS)
	
	Private _EXCHANGES As EntityRef(Of EXCHANGES)
	
	Private _ORDERS_FFA As EntityRef(Of ORDERS_FFA)
	
	Private _ORDERS_FFA1 As EntityRef(Of ORDERS_FFA)
	
	Private _ROUTES As EntityRef(Of ROUTES)
	
	Private _ROUTES1 As EntityRef(Of ROUTES)
	
	Private _TRADES_FFA As EntityRef(Of TRADES_FFA)
	
	Private _TRADES_FFA2 As EntityRef(Of TRADES_FFA)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTRADE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTRADE_IDChanged()
    End Sub
    Partial Private Sub OnORDER_DATETIMEChanging(value As Date)
    End Sub
    Partial Private Sub OnORDER_DATETIMEChanged()
    End Sub
    Partial Private Sub OnTRADE_BOOKED_DATETIMEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTRADE_BOOKED_DATETIMEChanged()
    End Sub
    Partial Private Sub OnTRADE_TYPEChanging(value As Short)
    End Sub
    Partial Private Sub OnTRADE_TYPEChanged()
    End Sub
    Partial Private Sub OnORDER_QUALIFIERChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnORDER_QUALIFIERChanged()
    End Sub
    Partial Private Sub OnORDER_ID1Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnORDER_ID1Changed()
    End Sub
    Partial Private Sub OnORDER_ID2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnORDER_ID2Changed()
    End Sub
    Partial Private Sub OnTRADE_BS1Changing(value As Char)
    End Sub
    Partial Private Sub OnTRADE_BS1Changed()
    End Sub
    Partial Private Sub OnTRADE_BS2Changing(value As Char)
    End Sub
    Partial Private Sub OnTRADE_BS2Changed()
    End Sub
    Partial Private Sub OnDESK_TRADER_ID1Changing(value As Integer)
    End Sub
    Partial Private Sub OnDESK_TRADER_ID1Changed()
    End Sub
    Partial Private Sub OnDESK_TRADER_ID2Changing(value As Integer)
    End Sub
    Partial Private Sub OnDESK_TRADER_ID2Changed()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnMM1Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMM1Changed()
    End Sub
    Partial Private Sub OnYY1Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnYY1Changed()
    End Sub
    Partial Private Sub OnMM2Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMM2Changed()
    End Sub
    Partial Private Sub OnYY2Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnYY2Changed()
    End Sub
    Partial Private Sub OnSHORTDESChanging(value As String)
    End Sub
    Partial Private Sub OnSHORTDESChanged()
    End Sub
    Partial Private Sub OnPRICE_TRADEDChanging(value As Double)
    End Sub
    Partial Private Sub OnPRICE_TRADEDChanged()
    End Sub
    Partial Private Sub OnAMMENDED_PRICEChanging(value As Double)
    End Sub
    Partial Private Sub OnAMMENDED_PRICEChanged()
    End Sub
    Partial Private Sub OnUPDATE_STATUSChanging(value As Byte)
    End Sub
    Partial Private Sub OnUPDATE_STATUSChanged()
    End Sub
    Partial Private Sub OnDAY_QUALIFIERChanging(value As Byte)
    End Sub
    Partial Private Sub OnDAY_QUALIFIERChanged()
    End Sub
    Partial Private Sub OnQUANTITYChanging(value As Integer)
    End Sub
    Partial Private Sub OnQUANTITYChanged()
    End Sub
    Partial Private Sub OnROUTE_ID2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnROUTE_ID2Changed()
    End Sub
    Partial Private Sub OnMM21Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMM21Changed()
    End Sub
    Partial Private Sub OnYY21Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnYY21Changed()
    End Sub
    Partial Private Sub OnMM22Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMM22Changed()
    End Sub
    Partial Private Sub OnYY22Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnYY22Changed()
    End Sub
    Partial Private Sub OnPRICE_TRADED2Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPRICE_TRADED2Changed()
    End Sub
    Partial Private Sub OnDAY_QUALIFIER2Changing(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnDAY_QUALIFIER2Changed()
    End Sub
    Partial Private Sub OnQUANTITY2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnQUANTITY2Changed()
    End Sub
    Partial Private Sub OnEXCHANGE_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEXCHANGE_IDChanged()
    End Sub
    Partial Private Sub OnDEAL_CONFIRMATION_SENTChanging(value As Boolean)
    End Sub
    Partial Private Sub OnDEAL_CONFIRMATION_SENTChanged()
    End Sub
    Partial Private Sub OnSENT_TO_CLEARINGChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSENT_TO_CLEARINGChanged()
    End Sub
    Partial Private Sub OnCLEARING_ACCEPTEDChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCLEARING_ACCEPTEDChanged()
    End Sub
    Partial Private Sub OnDEAL_CONFIRMATION_SENT2Changing(value As Boolean)
    End Sub
    Partial Private Sub OnDEAL_CONFIRMATION_SENT2Changed()
    End Sub
    Partial Private Sub OnSENT_TO_CLEARING2Changing(value As Boolean)
    End Sub
    Partial Private Sub OnSENT_TO_CLEARING2Changed()
    End Sub
    Partial Private Sub OnCLEARING_ACCEPTED2Changing(value As Boolean)
    End Sub
    Partial Private Sub OnCLEARING_ACCEPTED2Changed()
    End Sub
    Partial Private Sub OnCLEARING_ID1Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCLEARING_ID1Changed()
    End Sub
    Partial Private Sub OnCLEARING_ID2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCLEARING_ID2Changed()
    End Sub
    Partial Private Sub OnPNCChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPNCChanged()
    End Sub
    Partial Private Sub OnINFORM_DESK_ID1Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnINFORM_DESK_ID1Changed()
    End Sub
    Partial Private Sub OnINFORM_DESK_ID2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnINFORM_DESK_ID2Changed()
    End Sub
    Partial Private Sub OnIS_SYNTHETICChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIS_SYNTHETICChanged()
    End Sub
    Partial Private Sub OnSPREAD_TRADE_ID1Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSPREAD_TRADE_ID1Changed()
    End Sub
    Partial Private Sub OnBROKER_ID1Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBROKER_ID1Changed()
    End Sub
    Partial Private Sub OnBROKER_ID2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBROKER_ID2Changed()
    End Sub
    Partial Private Sub OnSPREAD_TRADE_ID2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSPREAD_TRADE_ID2Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property TRADE_ID() As Integer
		Get
			Return Me._TRADE_ID
		End Get
		Set
			If ((Me._TRADE_ID = value)  _
						= false) Then
				Me.OnTRADE_IDChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_ID = value
				Me.SendPropertyChanged("TRADE_ID")
				Me.OnTRADE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_DATETIME", DbType:="DateTime2 NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property ORDER_DATETIME() As Date
		Get
			Return Me._ORDER_DATETIME
		End Get
		Set
			If ((Me._ORDER_DATETIME = value)  _
						= false) Then
				Me.OnORDER_DATETIMEChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_DATETIME = value
				Me.SendPropertyChanged("ORDER_DATETIME")
				Me.OnORDER_DATETIMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_BOOKED_DATETIME", DbType:="DateTime2"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property TRADE_BOOKED_DATETIME() As System.Nullable(Of Date)
		Get
			Return Me._TRADE_BOOKED_DATETIME
		End Get
		Set
			If (Me._TRADE_BOOKED_DATETIME.Equals(value) = false) Then
				Me.OnTRADE_BOOKED_DATETIMEChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_BOOKED_DATETIME = value
				Me.SendPropertyChanged("TRADE_BOOKED_DATETIME")
				Me.OnTRADE_BOOKED_DATETIMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_TYPE", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property TRADE_TYPE() As Short
		Get
			Return Me._TRADE_TYPE
		End Get
		Set
			If ((Me._TRADE_TYPE = value)  _
						= false) Then
				Me.OnTRADE_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_TYPE = value
				Me.SendPropertyChanged("TRADE_TYPE")
				Me.OnTRADE_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_QUALIFIER", DbType:="Char(1)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property ORDER_QUALIFIER() As System.Nullable(Of Char)
		Get
			Return Me._ORDER_QUALIFIER
		End Get
		Set
			If (Me._ORDER_QUALIFIER.Equals(value) = false) Then
				Me.OnORDER_QUALIFIERChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_QUALIFIER = value
				Me.SendPropertyChanged("ORDER_QUALIFIER")
				Me.OnORDER_QUALIFIERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_ID1", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property ORDER_ID1() As System.Nullable(Of Integer)
		Get
			Return Me._ORDER_ID1
		End Get
		Set
			If (Me._ORDER_ID1.Equals(value) = false) Then
				If Me._ORDERS_FFA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnORDER_ID1Changing(value)
				Me.SendPropertyChanging
				Me._ORDER_ID1 = value
				Me.SendPropertyChanged("ORDER_ID1")
				Me.OnORDER_ID1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_ID2", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property ORDER_ID2() As System.Nullable(Of Integer)
		Get
			Return Me._ORDER_ID2
		End Get
		Set
			If (Me._ORDER_ID2.Equals(value) = false) Then
				If Me._ORDERS_FFA1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnORDER_ID2Changing(value)
				Me.SendPropertyChanging
				Me._ORDER_ID2 = value
				Me.SendPropertyChanged("ORDER_ID2")
				Me.OnORDER_ID2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_BS1", DbType:="Char(1) NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property TRADE_BS1() As Char
		Get
			Return Me._TRADE_BS1
		End Get
		Set
			If ((Me._TRADE_BS1 = value)  _
						= false) Then
				Me.OnTRADE_BS1Changing(value)
				Me.SendPropertyChanging
				Me._TRADE_BS1 = value
				Me.SendPropertyChanged("TRADE_BS1")
				Me.OnTRADE_BS1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_BS2", DbType:="Char(1) NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property TRADE_BS2() As Char
		Get
			Return Me._TRADE_BS2
		End Get
		Set
			If ((Me._TRADE_BS2 = value)  _
						= false) Then
				Me.OnTRADE_BS2Changing(value)
				Me.SendPropertyChanging
				Me._TRADE_BS2 = value
				Me.SendPropertyChanged("TRADE_BS2")
				Me.OnTRADE_BS2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_TRADER_ID1", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10)>  _
	Public Property DESK_TRADER_ID1() As Integer
		Get
			Return Me._DESK_TRADER_ID1
		End Get
		Set
			If ((Me._DESK_TRADER_ID1 = value)  _
						= false) Then
				If Me._DESK_TRADERS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDESK_TRADER_ID1Changing(value)
				Me.SendPropertyChanging
				Me._DESK_TRADER_ID1 = value
				Me.SendPropertyChanged("DESK_TRADER_ID1")
				Me.OnDESK_TRADER_ID1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_TRADER_ID2", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=11)>  _
	Public Property DESK_TRADER_ID2() As Integer
		Get
			Return Me._DESK_TRADER_ID2
		End Get
		Set
			If ((Me._DESK_TRADER_ID2 = value)  _
						= false) Then
				If Me._DESK_TRADERS1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDESK_TRADER_ID2Changing(value)
				Me.SendPropertyChanging
				Me._DESK_TRADER_ID2 = value
				Me.SendPropertyChanged("DESK_TRADER_ID2")
				Me.OnDESK_TRADER_ID2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=12)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If Me._ROUTES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM1", DbType:="SmallInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=13)>  _
	Public Property MM1() As System.Nullable(Of Short)
		Get
			Return Me._MM1
		End Get
		Set
			If (Me._MM1.Equals(value) = false) Then
				Me.OnMM1Changing(value)
				Me.SendPropertyChanging
				Me._MM1 = value
				Me.SendPropertyChanged("MM1")
				Me.OnMM1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY1", DbType:="SmallInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=14)>  _
	Public Property YY1() As System.Nullable(Of Short)
		Get
			Return Me._YY1
		End Get
		Set
			If (Me._YY1.Equals(value) = false) Then
				Me.OnYY1Changing(value)
				Me.SendPropertyChanging
				Me._YY1 = value
				Me.SendPropertyChanged("YY1")
				Me.OnYY1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM2", DbType:="SmallInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=15)>  _
	Public Property MM2() As System.Nullable(Of Short)
		Get
			Return Me._MM2
		End Get
		Set
			If (Me._MM2.Equals(value) = false) Then
				Me.OnMM2Changing(value)
				Me.SendPropertyChanging
				Me._MM2 = value
				Me.SendPropertyChanged("MM2")
				Me.OnMM2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY2", DbType:="SmallInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=16)>  _
	Public Property YY2() As System.Nullable(Of Short)
		Get
			Return Me._YY2
		End Get
		Set
			If (Me._YY2.Equals(value) = false) Then
				Me.OnYY2Changing(value)
				Me.SendPropertyChanging
				Me._YY2 = value
				Me.SendPropertyChanged("YY2")
				Me.OnYY2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SHORTDES", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=17)>  _
	Public Property SHORTDES() As String
		Get
			Return Me._SHORTDES
		End Get
		Set
			If (String.Equals(Me._SHORTDES, value) = false) Then
				Me.OnSHORTDESChanging(value)
				Me.SendPropertyChanging
				Me._SHORTDES = value
				Me.SendPropertyChanged("SHORTDES")
				Me.OnSHORTDESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE_TRADED", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=18)>  _
	Public Property PRICE_TRADED() As Double
		Get
			Return Me._PRICE_TRADED
		End Get
		Set
			If ((Me._PRICE_TRADED = value)  _
						= false) Then
				Me.OnPRICE_TRADEDChanging(value)
				Me.SendPropertyChanging
				Me._PRICE_TRADED = value
				Me.SendPropertyChanged("PRICE_TRADED")
				Me.OnPRICE_TRADEDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AMMENDED_PRICE", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=19)>  _
	Public Property AMMENDED_PRICE() As Double
		Get
			Return Me._AMMENDED_PRICE
		End Get
		Set
			If ((Me._AMMENDED_PRICE = value)  _
						= false) Then
				Me.OnAMMENDED_PRICEChanging(value)
				Me.SendPropertyChanging
				Me._AMMENDED_PRICE = value
				Me.SendPropertyChanged("AMMENDED_PRICE")
				Me.OnAMMENDED_PRICEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UPDATE_STATUS", DbType:="TinyInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=20)>  _
	Public Property UPDATE_STATUS() As Byte
		Get
			Return Me._UPDATE_STATUS
		End Get
		Set
			If ((Me._UPDATE_STATUS = value)  _
						= false) Then
				Me.OnUPDATE_STATUSChanging(value)
				Me.SendPropertyChanging
				Me._UPDATE_STATUS = value
				Me.SendPropertyChanged("UPDATE_STATUS")
				Me.OnUPDATE_STATUSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DAY_QUALIFIER", DbType:="TinyInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=21)>  _
	Public Property DAY_QUALIFIER() As Byte
		Get
			Return Me._DAY_QUALIFIER
		End Get
		Set
			If ((Me._DAY_QUALIFIER = value)  _
						= false) Then
				Me.OnDAY_QUALIFIERChanging(value)
				Me.SendPropertyChanging
				Me._DAY_QUALIFIER = value
				Me.SendPropertyChanged("DAY_QUALIFIER")
				Me.OnDAY_QUALIFIERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUANTITY", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=22)>  _
	Public Property QUANTITY() As Integer
		Get
			Return Me._QUANTITY
		End Get
		Set
			If ((Me._QUANTITY = value)  _
						= false) Then
				Me.OnQUANTITYChanging(value)
				Me.SendPropertyChanging
				Me._QUANTITY = value
				Me.SendPropertyChanged("QUANTITY")
				Me.OnQUANTITYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID2", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=23)>  _
	Public Property ROUTE_ID2() As System.Nullable(Of Integer)
		Get
			Return Me._ROUTE_ID2
		End Get
		Set
			If (Me._ROUTE_ID2.Equals(value) = false) Then
				If Me._ROUTES1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_ID2Changing(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID2 = value
				Me.SendPropertyChanged("ROUTE_ID2")
				Me.OnROUTE_ID2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM21", DbType:="SmallInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=24)>  _
	Public Property MM21() As System.Nullable(Of Short)
		Get
			Return Me._MM21
		End Get
		Set
			If (Me._MM21.Equals(value) = false) Then
				Me.OnMM21Changing(value)
				Me.SendPropertyChanging
				Me._MM21 = value
				Me.SendPropertyChanged("MM21")
				Me.OnMM21Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY21", DbType:="SmallInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=25)>  _
	Public Property YY21() As System.Nullable(Of Short)
		Get
			Return Me._YY21
		End Get
		Set
			If (Me._YY21.Equals(value) = false) Then
				Me.OnYY21Changing(value)
				Me.SendPropertyChanging
				Me._YY21 = value
				Me.SendPropertyChanged("YY21")
				Me.OnYY21Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM22", DbType:="SmallInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=26)>  _
	Public Property MM22() As System.Nullable(Of Short)
		Get
			Return Me._MM22
		End Get
		Set
			If (Me._MM22.Equals(value) = false) Then
				Me.OnMM22Changing(value)
				Me.SendPropertyChanging
				Me._MM22 = value
				Me.SendPropertyChanged("MM22")
				Me.OnMM22Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY22", DbType:="SmallInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=27)>  _
	Public Property YY22() As System.Nullable(Of Short)
		Get
			Return Me._YY22
		End Get
		Set
			If (Me._YY22.Equals(value) = false) Then
				Me.OnYY22Changing(value)
				Me.SendPropertyChanging
				Me._YY22 = value
				Me.SendPropertyChanged("YY22")
				Me.OnYY22Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE_TRADED2", DbType:="Float"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=28)>  _
	Public Property PRICE_TRADED2() As System.Nullable(Of Double)
		Get
			Return Me._PRICE_TRADED2
		End Get
		Set
			If (Me._PRICE_TRADED2.Equals(value) = false) Then
				Me.OnPRICE_TRADED2Changing(value)
				Me.SendPropertyChanging
				Me._PRICE_TRADED2 = value
				Me.SendPropertyChanged("PRICE_TRADED2")
				Me.OnPRICE_TRADED2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DAY_QUALIFIER2", DbType:="TinyInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=29)>  _
	Public Property DAY_QUALIFIER2() As System.Nullable(Of Byte)
		Get
			Return Me._DAY_QUALIFIER2
		End Get
		Set
			If (Me._DAY_QUALIFIER2.Equals(value) = false) Then
				Me.OnDAY_QUALIFIER2Changing(value)
				Me.SendPropertyChanging
				Me._DAY_QUALIFIER2 = value
				Me.SendPropertyChanged("DAY_QUALIFIER2")
				Me.OnDAY_QUALIFIER2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUANTITY2", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=30)>  _
	Public Property QUANTITY2() As System.Nullable(Of Integer)
		Get
			Return Me._QUANTITY2
		End Get
		Set
			If (Me._QUANTITY2.Equals(value) = false) Then
				Me.OnQUANTITY2Changing(value)
				Me.SendPropertyChanging
				Me._QUANTITY2 = value
				Me.SendPropertyChanged("QUANTITY2")
				Me.OnQUANTITY2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_ID", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=31)>  _
	Public Property EXCHANGE_ID() As System.Nullable(Of Integer)
		Get
			Return Me._EXCHANGE_ID
		End Get
		Set
			If (Me._EXCHANGE_ID.Equals(value) = false) Then
				If Me._EXCHANGES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEXCHANGE_IDChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_ID = value
				Me.SendPropertyChanged("EXCHANGE_ID")
				Me.OnEXCHANGE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEAL_CONFIRMATION_SENT", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=32)>  _
	Public Property DEAL_CONFIRMATION_SENT() As Boolean
		Get
			Return Me._DEAL_CONFIRMATION_SENT
		End Get
		Set
			If ((Me._DEAL_CONFIRMATION_SENT = value)  _
						= false) Then
				Me.OnDEAL_CONFIRMATION_SENTChanging(value)
				Me.SendPropertyChanging
				Me._DEAL_CONFIRMATION_SENT = value
				Me.SendPropertyChanged("DEAL_CONFIRMATION_SENT")
				Me.OnDEAL_CONFIRMATION_SENTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SENT_TO_CLEARING", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=33)>  _
	Public Property SENT_TO_CLEARING() As Boolean
		Get
			Return Me._SENT_TO_CLEARING
		End Get
		Set
			If ((Me._SENT_TO_CLEARING = value)  _
						= false) Then
				Me.OnSENT_TO_CLEARINGChanging(value)
				Me.SendPropertyChanging
				Me._SENT_TO_CLEARING = value
				Me.SendPropertyChanged("SENT_TO_CLEARING")
				Me.OnSENT_TO_CLEARINGChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLEARING_ACCEPTED", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=34)>  _
	Public Property CLEARING_ACCEPTED() As Boolean
		Get
			Return Me._CLEARING_ACCEPTED
		End Get
		Set
			If ((Me._CLEARING_ACCEPTED = value)  _
						= false) Then
				Me.OnCLEARING_ACCEPTEDChanging(value)
				Me.SendPropertyChanging
				Me._CLEARING_ACCEPTED = value
				Me.SendPropertyChanged("CLEARING_ACCEPTED")
				Me.OnCLEARING_ACCEPTEDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEAL_CONFIRMATION_SENT2", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=35)>  _
	Public Property DEAL_CONFIRMATION_SENT2() As Boolean
		Get
			Return Me._DEAL_CONFIRMATION_SENT2
		End Get
		Set
			If ((Me._DEAL_CONFIRMATION_SENT2 = value)  _
						= false) Then
				Me.OnDEAL_CONFIRMATION_SENT2Changing(value)
				Me.SendPropertyChanging
				Me._DEAL_CONFIRMATION_SENT2 = value
				Me.SendPropertyChanged("DEAL_CONFIRMATION_SENT2")
				Me.OnDEAL_CONFIRMATION_SENT2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SENT_TO_CLEARING2", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=36)>  _
	Public Property SENT_TO_CLEARING2() As Boolean
		Get
			Return Me._SENT_TO_CLEARING2
		End Get
		Set
			If ((Me._SENT_TO_CLEARING2 = value)  _
						= false) Then
				Me.OnSENT_TO_CLEARING2Changing(value)
				Me.SendPropertyChanging
				Me._SENT_TO_CLEARING2 = value
				Me.SendPropertyChanged("SENT_TO_CLEARING2")
				Me.OnSENT_TO_CLEARING2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLEARING_ACCEPTED2", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=37)>  _
	Public Property CLEARING_ACCEPTED2() As Boolean
		Get
			Return Me._CLEARING_ACCEPTED2
		End Get
		Set
			If ((Me._CLEARING_ACCEPTED2 = value)  _
						= false) Then
				Me.OnCLEARING_ACCEPTED2Changing(value)
				Me.SendPropertyChanging
				Me._CLEARING_ACCEPTED2 = value
				Me.SendPropertyChanged("CLEARING_ACCEPTED2")
				Me.OnCLEARING_ACCEPTED2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLEARING_ID1", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=38)>  _
	Public Property CLEARING_ID1() As System.Nullable(Of Integer)
		Get
			Return Me._CLEARING_ID1
		End Get
		Set
			If (Me._CLEARING_ID1.Equals(value) = false) Then
				If Me._ACCOUNTS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCLEARING_ID1Changing(value)
				Me.SendPropertyChanging
				Me._CLEARING_ID1 = value
				Me.SendPropertyChanged("CLEARING_ID1")
				Me.OnCLEARING_ID1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLEARING_ID2", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=39)>  _
	Public Property CLEARING_ID2() As System.Nullable(Of Integer)
		Get
			Return Me._CLEARING_ID2
		End Get
		Set
			If (Me._CLEARING_ID2.Equals(value) = false) Then
				If Me._ACCOUNTS1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCLEARING_ID2Changing(value)
				Me.SendPropertyChanging
				Me._CLEARING_ID2 = value
				Me.SendPropertyChanged("CLEARING_ID2")
				Me.OnCLEARING_ID2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PNC", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=40)>  _
	Public Property PNC() As Boolean
		Get
			Return Me._PNC
		End Get
		Set
			If ((Me._PNC = value)  _
						= false) Then
				Me.OnPNCChanging(value)
				Me.SendPropertyChanging
				Me._PNC = value
				Me.SendPropertyChanged("PNC")
				Me.OnPNCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_INFORM_DESK_ID1", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=41)>  _
	Public Property INFORM_DESK_ID1() As System.Nullable(Of Integer)
		Get
			Return Me._INFORM_DESK_ID1
		End Get
		Set
			If (Me._INFORM_DESK_ID1.Equals(value) = false) Then
				If Me._ACCOUNT_DESKS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnINFORM_DESK_ID1Changing(value)
				Me.SendPropertyChanging
				Me._INFORM_DESK_ID1 = value
				Me.SendPropertyChanged("INFORM_DESK_ID1")
				Me.OnINFORM_DESK_ID1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_INFORM_DESK_ID2", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=42)>  _
	Public Property INFORM_DESK_ID2() As System.Nullable(Of Integer)
		Get
			Return Me._INFORM_DESK_ID2
		End Get
		Set
			If (Me._INFORM_DESK_ID2.Equals(value) = false) Then
				If Me._ACCOUNT_DESKS1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnINFORM_DESK_ID2Changing(value)
				Me.SendPropertyChanging
				Me._INFORM_DESK_ID2 = value
				Me.SendPropertyChanged("INFORM_DESK_ID2")
				Me.OnINFORM_DESK_ID2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IS_SYNTHETIC", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=43)>  _
	Public Property IS_SYNTHETIC() As Boolean
		Get
			Return Me._IS_SYNTHETIC
		End Get
		Set
			If ((Me._IS_SYNTHETIC = value)  _
						= false) Then
				Me.OnIS_SYNTHETICChanging(value)
				Me.SendPropertyChanging
				Me._IS_SYNTHETIC = value
				Me.SendPropertyChanged("IS_SYNTHETIC")
				Me.OnIS_SYNTHETICChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SPREAD_TRADE_ID1", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=44)>  _
	Public Property SPREAD_TRADE_ID1() As System.Nullable(Of Integer)
		Get
			Return Me._SPREAD_TRADE_ID1
		End Get
		Set
			If (Me._SPREAD_TRADE_ID1.Equals(value) = false) Then
				If Me._TRADES_FFA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSPREAD_TRADE_ID1Changing(value)
				Me.SendPropertyChanging
				Me._SPREAD_TRADE_ID1 = value
				Me.SendPropertyChanged("SPREAD_TRADE_ID1")
				Me.OnSPREAD_TRADE_ID1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BROKER_ID1", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=45)>  _
	Public Property BROKER_ID1() As System.Nullable(Of Integer)
		Get
			Return Me._BROKER_ID1
		End Get
		Set
			If (Me._BROKER_ID1.Equals(value) = false) Then
				If Me._ACCOUNTS2.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBROKER_ID1Changing(value)
				Me.SendPropertyChanging
				Me._BROKER_ID1 = value
				Me.SendPropertyChanged("BROKER_ID1")
				Me.OnBROKER_ID1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BROKER_ID2", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=46)>  _
	Public Property BROKER_ID2() As System.Nullable(Of Integer)
		Get
			Return Me._BROKER_ID2
		End Get
		Set
			If (Me._BROKER_ID2.Equals(value) = false) Then
				If Me._ACCOUNTS3.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBROKER_ID2Changing(value)
				Me.SendPropertyChanging
				Me._BROKER_ID2 = value
				Me.SendPropertyChanged("BROKER_ID2")
				Me.OnBROKER_ID2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SPREAD_TRADE_ID2", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=47)>  _
	Public Property SPREAD_TRADE_ID2() As System.Nullable(Of Integer)
		Get
			Return Me._SPREAD_TRADE_ID2
		End Get
		Set
			If (Me._SPREAD_TRADE_ID2.Equals(value) = false) Then
				If Me._TRADES_FFA2.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSPREAD_TRADE_ID2Changing(value)
				Me.SendPropertyChanging
				Me._SPREAD_TRADE_ID2 = value
				Me.SendPropertyChanged("SPREAD_TRADE_ID2")
				Me.OnSPREAD_TRADE_ID2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADES_FFA_TRADES_FFA", Storage:="_TRADES_FFA1", ThisKey:="TRADE_ID", OtherKey:="SPREAD_TRADE_ID1"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=48, EmitDefaultValue:=false)>  _
	Public Property TRADES_FFA1() As EntitySet(Of TRADES_FFA)
		Get
			If (Me.serializing  _
						AndAlso (Me._TRADES_FFA1.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._TRADES_FFA1
		End Get
		Set
			Me._TRADES_FFA1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADES_FFA_TRADES_FFA1", Storage:="_TRADES_FFA3", ThisKey:="TRADE_ID", OtherKey:="SPREAD_TRADE_ID2"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=49, EmitDefaultValue:=false)>  _
	Public Property TRADES_FFA3() As EntitySet(Of TRADES_FFA)
		Get
			If (Me.serializing  _
						AndAlso (Me._TRADES_FFA3.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._TRADES_FFA3
		End Get
		Set
			Me._TRADES_FFA3.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESKS_TRADES_FFA", Storage:="_ACCOUNT_DESKS", ThisKey:="INFORM_DESK_ID1", OtherKey:="ACCOUNT_DESK_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT_DESKS() As ACCOUNT_DESKS
		Get
			Return Me._ACCOUNT_DESKS.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT_DESKS = Me._ACCOUNT_DESKS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT_DESKS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT_DESKS.Entity = Nothing
					previousValue.TRADES_FFA.Remove(Me)
				End If
				Me._ACCOUNT_DESKS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADES_FFA.Add(Me)
					Me._INFORM_DESK_ID1 = value.ACCOUNT_DESK_ID
				Else
					Me._INFORM_DESK_ID1 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ACCOUNT_DESKS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESKS_TRADES_FFA1", Storage:="_ACCOUNT_DESKS1", ThisKey:="INFORM_DESK_ID2", OtherKey:="ACCOUNT_DESK_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT_DESKS1() As ACCOUNT_DESKS
		Get
			Return Me._ACCOUNT_DESKS1.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT_DESKS = Me._ACCOUNT_DESKS1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT_DESKS1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT_DESKS1.Entity = Nothing
					previousValue.TRADES_FFA1.Remove(Me)
				End If
				Me._ACCOUNT_DESKS1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADES_FFA1.Add(Me)
					Me._INFORM_DESK_ID2 = value.ACCOUNT_DESK_ID
				Else
					Me._INFORM_DESK_ID2 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ACCOUNT_DESKS1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_TRADES_FFA", Storage:="_ACCOUNTS", ThisKey:="CLEARING_ID1", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNTS() As ACCOUNTS
		Get
			Return Me._ACCOUNTS.Entity
		End Get
		Set
			Dim previousValue As ACCOUNTS = Me._ACCOUNTS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNTS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNTS.Entity = Nothing
					previousValue.TRADES_FFA.Remove(Me)
				End If
				Me._ACCOUNTS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADES_FFA.Add(Me)
					Me._CLEARING_ID1 = value.ACCOUNT_ID
				Else
					Me._CLEARING_ID1 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ACCOUNTS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_TRADES_FFA1", Storage:="_ACCOUNTS1", ThisKey:="CLEARING_ID2", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNTS1() As ACCOUNTS
		Get
			Return Me._ACCOUNTS1.Entity
		End Get
		Set
			Dim previousValue As ACCOUNTS = Me._ACCOUNTS1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNTS1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNTS1.Entity = Nothing
					previousValue.TRADES_FFA1.Remove(Me)
				End If
				Me._ACCOUNTS1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADES_FFA1.Add(Me)
					Me._CLEARING_ID2 = value.ACCOUNT_ID
				Else
					Me._CLEARING_ID2 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ACCOUNTS1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_TRADES_FFA2", Storage:="_ACCOUNTS2", ThisKey:="BROKER_ID1", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNTS2() As ACCOUNTS
		Get
			Return Me._ACCOUNTS2.Entity
		End Get
		Set
			Dim previousValue As ACCOUNTS = Me._ACCOUNTS2.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNTS2.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNTS2.Entity = Nothing
					previousValue.TRADES_FFA2.Remove(Me)
				End If
				Me._ACCOUNTS2.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADES_FFA2.Add(Me)
					Me._BROKER_ID1 = value.ACCOUNT_ID
				Else
					Me._BROKER_ID1 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ACCOUNTS2")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_TRADES_FFA3", Storage:="_ACCOUNTS3", ThisKey:="BROKER_ID2", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNTS3() As ACCOUNTS
		Get
			Return Me._ACCOUNTS3.Entity
		End Get
		Set
			Dim previousValue As ACCOUNTS = Me._ACCOUNTS3.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNTS3.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNTS3.Entity = Nothing
					previousValue.TRADES_FFA3.Remove(Me)
				End If
				Me._ACCOUNTS3.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADES_FFA3.Add(Me)
					Me._BROKER_ID2 = value.ACCOUNT_ID
				Else
					Me._BROKER_ID2 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ACCOUNTS3")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADERS_TRADES_FFA", Storage:="_DESK_TRADERS", ThisKey:="DESK_TRADER_ID1", OtherKey:="DESK_TRADER_ID", IsForeignKey:=true)>  _
	Public Property DESK_TRADERS() As DESK_TRADERS
		Get
			Return Me._DESK_TRADERS.Entity
		End Get
		Set
			Dim previousValue As DESK_TRADERS = Me._DESK_TRADERS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DESK_TRADERS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DESK_TRADERS.Entity = Nothing
					previousValue.TRADES_FFA.Remove(Me)
				End If
				Me._DESK_TRADERS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADES_FFA.Add(Me)
					Me._DESK_TRADER_ID1 = value.DESK_TRADER_ID
				Else
					Me._DESK_TRADER_ID1 = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DESK_TRADERS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADERS_TRADES_FFA1", Storage:="_DESK_TRADERS1", ThisKey:="DESK_TRADER_ID2", OtherKey:="DESK_TRADER_ID", IsForeignKey:=true)>  _
	Public Property DESK_TRADERS1() As DESK_TRADERS
		Get
			Return Me._DESK_TRADERS1.Entity
		End Get
		Set
			Dim previousValue As DESK_TRADERS = Me._DESK_TRADERS1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DESK_TRADERS1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DESK_TRADERS1.Entity = Nothing
					previousValue.TRADES_FFA1.Remove(Me)
				End If
				Me._DESK_TRADERS1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADES_FFA1.Add(Me)
					Me._DESK_TRADER_ID2 = value.DESK_TRADER_ID
				Else
					Me._DESK_TRADER_ID2 = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DESK_TRADERS1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EXCHANGES_TRADES_FFA", Storage:="_EXCHANGES", ThisKey:="EXCHANGE_ID", OtherKey:="EXCHANGE_ID", IsForeignKey:=true)>  _
	Public Property EXCHANGES() As EXCHANGES
		Get
			Return Me._EXCHANGES.Entity
		End Get
		Set
			Dim previousValue As EXCHANGES = Me._EXCHANGES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EXCHANGES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EXCHANGES.Entity = Nothing
					previousValue.TRADES_FFA.Remove(Me)
				End If
				Me._EXCHANGES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADES_FFA.Add(Me)
					Me._EXCHANGE_ID = value.EXCHANGE_ID
				Else
					Me._EXCHANGE_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("EXCHANGES")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_TRADES_FFA", Storage:="_ORDERS_FFA", ThisKey:="ORDER_ID1", OtherKey:="ORDER_ID", IsForeignKey:=true)>  _
	Public Property ORDERS_FFA() As ORDERS_FFA
		Get
			Return Me._ORDERS_FFA.Entity
		End Get
		Set
			Dim previousValue As ORDERS_FFA = Me._ORDERS_FFA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ORDERS_FFA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ORDERS_FFA.Entity = Nothing
					previousValue.TRADES_FFA.Remove(Me)
				End If
				Me._ORDERS_FFA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADES_FFA.Add(Me)
					Me._ORDER_ID1 = value.ORDER_ID
				Else
					Me._ORDER_ID1 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ORDERS_FFA")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_TRADES_FFA1", Storage:="_ORDERS_FFA1", ThisKey:="ORDER_ID2", OtherKey:="ORDER_ID", IsForeignKey:=true)>  _
	Public Property ORDERS_FFA1() As ORDERS_FFA
		Get
			Return Me._ORDERS_FFA1.Entity
		End Get
		Set
			Dim previousValue As ORDERS_FFA = Me._ORDERS_FFA1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ORDERS_FFA1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ORDERS_FFA1.Entity = Nothing
					previousValue.TRADES_FFA1.Remove(Me)
				End If
				Me._ORDERS_FFA1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADES_FFA1.Add(Me)
					Me._ORDER_ID2 = value.ORDER_ID
				Else
					Me._ORDER_ID2 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ORDERS_FFA1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_TRADES_FFA", Storage:="_ROUTES", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTES() As ROUTES
		Get
			Return Me._ROUTES.Entity
		End Get
		Set
			Dim previousValue As ROUTES = Me._ROUTES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTES.Entity = Nothing
					previousValue.TRADES_FFA.Remove(Me)
				End If
				Me._ROUTES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADES_FFA.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTES")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_TRADES_FFA1", Storage:="_ROUTES1", ThisKey:="ROUTE_ID2", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTES1() As ROUTES
		Get
			Return Me._ROUTES1.Entity
		End Get
		Set
			Dim previousValue As ROUTES = Me._ROUTES1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTES1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTES1.Entity = Nothing
					previousValue.TRADES_FFA1.Remove(Me)
				End If
				Me._ROUTES1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADES_FFA1.Add(Me)
					Me._ROUTE_ID2 = value.ROUTE_ID
				Else
					Me._ROUTE_ID2 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ROUTES1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADES_FFA_TRADES_FFA", Storage:="_TRADES_FFA", ThisKey:="SPREAD_TRADE_ID1", OtherKey:="TRADE_ID", IsForeignKey:=true)>  _
	Public Property TRADES_FFA() As TRADES_FFA
		Get
			Return Me._TRADES_FFA.Entity
		End Get
		Set
			Dim previousValue As TRADES_FFA = Me._TRADES_FFA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TRADES_FFA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TRADES_FFA.Entity = Nothing
					previousValue.TRADES_FFA1.Remove(Me)
				End If
				Me._TRADES_FFA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADES_FFA1.Add(Me)
					Me._SPREAD_TRADE_ID1 = value.TRADE_ID
				Else
					Me._SPREAD_TRADE_ID1 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TRADES_FFA")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADES_FFA_TRADES_FFA1", Storage:="_TRADES_FFA2", ThisKey:="SPREAD_TRADE_ID2", OtherKey:="TRADE_ID", IsForeignKey:=true)>  _
	Public Property TRADES_FFA2() As TRADES_FFA
		Get
			Return Me._TRADES_FFA2.Entity
		End Get
		Set
			Dim previousValue As TRADES_FFA = Me._TRADES_FFA2.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TRADES_FFA2.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TRADES_FFA2.Entity = Nothing
					previousValue.TRADES_FFA3.Remove(Me)
				End If
				Me._TRADES_FFA2.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADES_FFA3.Add(Me)
					Me._SPREAD_TRADE_ID2 = value.TRADE_ID
				Else
					Me._SPREAD_TRADE_ID2 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TRADES_FFA2")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TRADES_FFA1(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.TRADES_FFA = Me
	End Sub
	
	Private Sub detach_TRADES_FFA1(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.TRADES_FFA = Nothing
	End Sub
	
	Private Sub attach_TRADES_FFA3(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.TRADES_FFA2 = Me
	End Sub
	
	Private Sub detach_TRADES_FFA3(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.TRADES_FFA2 = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._TRADES_FFA1 = New EntitySet(Of TRADES_FFA)(AddressOf Me.attach_TRADES_FFA1, AddressOf Me.detach_TRADES_FFA1)
		Me._TRADES_FFA3 = New EntitySet(Of TRADES_FFA)(AddressOf Me.attach_TRADES_FFA3, AddressOf Me.detach_TRADES_FFA3)
		Me._ACCOUNT_DESKS = CType(Nothing, EntityRef(Of ACCOUNT_DESKS))
		Me._ACCOUNT_DESKS1 = CType(Nothing, EntityRef(Of ACCOUNT_DESKS))
		Me._ACCOUNTS = CType(Nothing, EntityRef(Of ACCOUNTS))
		Me._ACCOUNTS1 = CType(Nothing, EntityRef(Of ACCOUNTS))
		Me._ACCOUNTS2 = CType(Nothing, EntityRef(Of ACCOUNTS))
		Me._ACCOUNTS3 = CType(Nothing, EntityRef(Of ACCOUNTS))
		Me._DESK_TRADERS = CType(Nothing, EntityRef(Of DESK_TRADERS))
		Me._DESK_TRADERS1 = CType(Nothing, EntityRef(Of DESK_TRADERS))
		Me._EXCHANGES = CType(Nothing, EntityRef(Of EXCHANGES))
		Me._ORDERS_FFA = CType(Nothing, EntityRef(Of ORDERS_FFA))
		Me._ORDERS_FFA1 = CType(Nothing, EntityRef(Of ORDERS_FFA))
		Me._ROUTES = CType(Nothing, EntityRef(Of ROUTES))
		Me._ROUTES1 = CType(Nothing, EntityRef(Of ROUTES))
		Me._TRADES_FFA = CType(Nothing, EntityRef(Of TRADES_FFA))
		Me._TRADES_FFA2 = CType(Nothing, EntityRef(Of TRADES_FFA))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.VESSEL_CLASS"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class VESSEL_CLASS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _VESSEL_CLASS_ID As Integer
	
	Private _VESSEL_CLASS As String
	
	Private _DRYWET As Char
	
	Private _WETSECTOR As System.Nullable(Of Char)
	
	Private _DESCRIPTION As String
	
	Private _DEFAULT_ROUTE_ID As System.Nullable(Of Integer)
	
	Private _DESK_TRADER_VOICE As EntitySet(Of DESK_TRADER_VOICE)
	
	Private _DESK_TRADERS_IM_SUBSCRIPTIONS As EntitySet(Of DESK_TRADERS_IM_SUBSCRIPTIONS)
	
	Private _EXCHANGE_ROUTES As EntitySet(Of EXCHANGE_ROUTES)
	
	Private _ROUTES As EntitySet(Of ROUTES)
	
	Private _VESSEL_CLASS_SPREAD_MARGINS As EntitySet(Of VESSEL_CLASS_SPREAD_MARGINS)
	
	Private _ROUTES1 As EntityRef(Of ROUTES)
	
	Private _TRADE_CLASSES As EntityRef(Of TRADE_CLASSES)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnVESSEL_CLASS_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnVESSEL_CLASS_IDChanged()
    End Sub
    Partial Private Sub OnVESSEL_CLASSChanging(value As String)
    End Sub
    Partial Private Sub OnVESSEL_CLASSChanged()
    End Sub
    Partial Private Sub OnDRYWETChanging(value As Char)
    End Sub
    Partial Private Sub OnDRYWETChanged()
    End Sub
    Partial Private Sub OnWETSECTORChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnWETSECTORChanged()
    End Sub
    Partial Private Sub OnDESCRIPTIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPTIONChanged()
    End Sub
    Partial Private Sub OnDEFAULT_ROUTE_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDEFAULT_ROUTE_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VESSEL_CLASS_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property VESSEL_CLASS_ID() As Integer
		Get
			Return Me._VESSEL_CLASS_ID
		End Get
		Set
			If ((Me._VESSEL_CLASS_ID = value)  _
						= false) Then
				Me.OnVESSEL_CLASS_IDChanging(value)
				Me.SendPropertyChanging
				Me._VESSEL_CLASS_ID = value
				Me.SendPropertyChanged("VESSEL_CLASS_ID")
				Me.OnVESSEL_CLASS_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VESSEL_CLASS", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property VESSEL_CLASS() As String
		Get
			Return Me._VESSEL_CLASS
		End Get
		Set
			If (String.Equals(Me._VESSEL_CLASS, value) = false) Then
				Me.OnVESSEL_CLASSChanging(value)
				Me.SendPropertyChanging
				Me._VESSEL_CLASS = value
				Me.SendPropertyChanged("VESSEL_CLASS")
				Me.OnVESSEL_CLASSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DRYWET", DbType:="Char(1) NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property DRYWET() As Char
		Get
			Return Me._DRYWET
		End Get
		Set
			If ((Me._DRYWET = value)  _
						= false) Then
				If Me._TRADE_CLASSES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDRYWETChanging(value)
				Me.SendPropertyChanging
				Me._DRYWET = value
				Me.SendPropertyChanged("DRYWET")
				Me.OnDRYWETChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WETSECTOR", DbType:="Char(1)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property WETSECTOR() As System.Nullable(Of Char)
		Get
			Return Me._WETSECTOR
		End Get
		Set
			If (Me._WETSECTOR.Equals(value) = false) Then
				Me.OnWETSECTORChanging(value)
				Me.SendPropertyChanging
				Me._WETSECTOR = value
				Me.SendPropertyChanged("WETSECTOR")
				Me.OnWETSECTORChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPTION", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property DESCRIPTION() As String
		Get
			Return Me._DESCRIPTION
		End Get
		Set
			If (String.Equals(Me._DESCRIPTION, value) = false) Then
				Me.OnDESCRIPTIONChanging(value)
				Me.SendPropertyChanging
				Me._DESCRIPTION = value
				Me.SendPropertyChanged("DESCRIPTION")
				Me.OnDESCRIPTIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEFAULT_ROUTE_ID", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property DEFAULT_ROUTE_ID() As System.Nullable(Of Integer)
		Get
			Return Me._DEFAULT_ROUTE_ID
		End Get
		Set
			If (Me._DEFAULT_ROUTE_ID.Equals(value) = false) Then
				If Me._ROUTES1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDEFAULT_ROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._DEFAULT_ROUTE_ID = value
				Me.SendPropertyChanged("DEFAULT_ROUTE_ID")
				Me.OnDEFAULT_ROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="VESSEL_CLASS_DESK_TRADER_VOICE", Storage:="_DESK_TRADER_VOICE", ThisKey:="VESSEL_CLASS_ID", OtherKey:="VESSEL_CLASS_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7, EmitDefaultValue:=false)>  _
	Public Property DESK_TRADER_VOICE() As EntitySet(Of DESK_TRADER_VOICE)
		Get
			If (Me.serializing  _
						AndAlso (Me._DESK_TRADER_VOICE.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._DESK_TRADER_VOICE
		End Get
		Set
			Me._DESK_TRADER_VOICE.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="VESSEL_CLASS_DESK_TRADERS_IM_SUBSCRIPTIONS", Storage:="_DESK_TRADERS_IM_SUBSCRIPTIONS", ThisKey:="VESSEL_CLASS_ID", OtherKey:="VESSEL_CLASS_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8, EmitDefaultValue:=false)>  _
	Public Property DESK_TRADERS_IM_SUBSCRIPTIONS() As EntitySet(Of DESK_TRADERS_IM_SUBSCRIPTIONS)
		Get
			If (Me.serializing  _
						AndAlso (Me._DESK_TRADERS_IM_SUBSCRIPTIONS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._DESK_TRADERS_IM_SUBSCRIPTIONS
		End Get
		Set
			Me._DESK_TRADERS_IM_SUBSCRIPTIONS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="VESSEL_CLASS_EXCHANGE_ROUTES", Storage:="_EXCHANGE_ROUTES", ThisKey:="VESSEL_CLASS_ID", OtherKey:="VESSEL_CLASS_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9, EmitDefaultValue:=false)>  _
	Public Property EXCHANGE_ROUTES() As EntitySet(Of EXCHANGE_ROUTES)
		Get
			If (Me.serializing  _
						AndAlso (Me._EXCHANGE_ROUTES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._EXCHANGE_ROUTES
		End Get
		Set
			Me._EXCHANGE_ROUTES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="VESSEL_CLASS_ROUTES", Storage:="_ROUTES", ThisKey:="VESSEL_CLASS_ID", OtherKey:="VESSEL_CLASS_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10, EmitDefaultValue:=false)>  _
	Public Property ROUTES() As EntitySet(Of ROUTES)
		Get
			If (Me.serializing  _
						AndAlso (Me._ROUTES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ROUTES
		End Get
		Set
			Me._ROUTES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="VESSEL_CLASS_VESSEL_CLASS_SPREAD_MARGINS", Storage:="_VESSEL_CLASS_SPREAD_MARGINS", ThisKey:="VESSEL_CLASS_ID", OtherKey:="VESSEL_CLASS_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=11, EmitDefaultValue:=false)>  _
	Public Property VESSEL_CLASS_SPREAD_MARGINS() As EntitySet(Of VESSEL_CLASS_SPREAD_MARGINS)
		Get
			If (Me.serializing  _
						AndAlso (Me._VESSEL_CLASS_SPREAD_MARGINS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._VESSEL_CLASS_SPREAD_MARGINS
		End Get
		Set
			Me._VESSEL_CLASS_SPREAD_MARGINS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_VESSEL_CLASS", Storage:="_ROUTES1", ThisKey:="DEFAULT_ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTES1() As ROUTES
		Get
			Return Me._ROUTES1.Entity
		End Get
		Set
			Dim previousValue As ROUTES = Me._ROUTES1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTES1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTES1.Entity = Nothing
					previousValue.VESSEL_CLASS1.Remove(Me)
				End If
				Me._ROUTES1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.VESSEL_CLASS1.Add(Me)
					Me._DEFAULT_ROUTE_ID = value.ROUTE_ID
				Else
					Me._DEFAULT_ROUTE_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ROUTES1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASSES_VESSEL_CLASS", Storage:="_TRADE_CLASSES", ThisKey:="DRYWET", OtherKey:="TRADE_CLASS_SHORT", IsForeignKey:=true)>  _
	Public Property TRADE_CLASSES() As TRADE_CLASSES
		Get
			Return Me._TRADE_CLASSES.Entity
		End Get
		Set
			Dim previousValue As TRADE_CLASSES = Me._TRADE_CLASSES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TRADE_CLASSES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TRADE_CLASSES.Entity = Nothing
					previousValue.VESSEL_CLASS.Remove(Me)
				End If
				Me._TRADE_CLASSES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.VESSEL_CLASS.Add(Me)
					Me._DRYWET = value.TRADE_CLASS_SHORT
				Else
					Me._DRYWET = CType(Nothing, Char)
				End If
				Me.SendPropertyChanged("TRADE_CLASSES")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DESK_TRADER_VOICE(ByVal entity As DESK_TRADER_VOICE)
		Me.SendPropertyChanging
		entity.VESSEL_CLASS = Me
	End Sub
	
	Private Sub detach_DESK_TRADER_VOICE(ByVal entity As DESK_TRADER_VOICE)
		Me.SendPropertyChanging
		entity.VESSEL_CLASS = Nothing
	End Sub
	
	Private Sub attach_DESK_TRADERS_IM_SUBSCRIPTIONS(ByVal entity As DESK_TRADERS_IM_SUBSCRIPTIONS)
		Me.SendPropertyChanging
		entity.VESSEL_CLASS = Me
	End Sub
	
	Private Sub detach_DESK_TRADERS_IM_SUBSCRIPTIONS(ByVal entity As DESK_TRADERS_IM_SUBSCRIPTIONS)
		Me.SendPropertyChanging
		entity.VESSEL_CLASS = Nothing
	End Sub
	
	Private Sub attach_EXCHANGE_ROUTES(ByVal entity As EXCHANGE_ROUTES)
		Me.SendPropertyChanging
		entity.VESSEL_CLASS = Me
	End Sub
	
	Private Sub detach_EXCHANGE_ROUTES(ByVal entity As EXCHANGE_ROUTES)
		Me.SendPropertyChanging
		entity.VESSEL_CLASS = Nothing
	End Sub
	
	Private Sub attach_ROUTES(ByVal entity As ROUTES)
		Me.SendPropertyChanging
		entity.VESSEL_CLASS = Me
	End Sub
	
	Private Sub detach_ROUTES(ByVal entity As ROUTES)
		Me.SendPropertyChanging
		entity.VESSEL_CLASS = Nothing
	End Sub
	
	Private Sub attach_VESSEL_CLASS_SPREAD_MARGINS(ByVal entity As VESSEL_CLASS_SPREAD_MARGINS)
		Me.SendPropertyChanging
		entity.VESSEL_CLASS = Me
	End Sub
	
	Private Sub detach_VESSEL_CLASS_SPREAD_MARGINS(ByVal entity As VESSEL_CLASS_SPREAD_MARGINS)
		Me.SendPropertyChanging
		entity.VESSEL_CLASS = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._DESK_TRADER_VOICE = New EntitySet(Of DESK_TRADER_VOICE)(AddressOf Me.attach_DESK_TRADER_VOICE, AddressOf Me.detach_DESK_TRADER_VOICE)
		Me._DESK_TRADERS_IM_SUBSCRIPTIONS = New EntitySet(Of DESK_TRADERS_IM_SUBSCRIPTIONS)(AddressOf Me.attach_DESK_TRADERS_IM_SUBSCRIPTIONS, AddressOf Me.detach_DESK_TRADERS_IM_SUBSCRIPTIONS)
		Me._EXCHANGE_ROUTES = New EntitySet(Of EXCHANGE_ROUTES)(AddressOf Me.attach_EXCHANGE_ROUTES, AddressOf Me.detach_EXCHANGE_ROUTES)
		Me._ROUTES = New EntitySet(Of ROUTES)(AddressOf Me.attach_ROUTES, AddressOf Me.detach_ROUTES)
		Me._VESSEL_CLASS_SPREAD_MARGINS = New EntitySet(Of VESSEL_CLASS_SPREAD_MARGINS)(AddressOf Me.attach_VESSEL_CLASS_SPREAD_MARGINS, AddressOf Me.detach_VESSEL_CLASS_SPREAD_MARGINS)
		Me._ROUTES1 = CType(Nothing, EntityRef(Of ROUTES))
		Me._TRADE_CLASSES = CType(Nothing, EntityRef(Of TRADE_CLASSES))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.VESSEL_CLASS_SPREAD_MARGINS"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class VESSEL_CLASS_SPREAD_MARGINS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _VESSEL_CLASS_ID As Integer
	
	Private _ROUTE_ID As Integer
	
	Private _CMSROUTE_ID As String
	
	Private _MM1 As Short
	
	Private _YY1 As Short
	
	Private _MM2 As Short
	
	Private _YY2 As Short
	
	Private _PERIOD As String
	
	Private _YY As Integer
	
	Private _MARGIN As Double
	
	Private _ROUTES As EntityRef(Of ROUTES)
	
	Private _VESSEL_CLASS As EntityRef(Of VESSEL_CLASS)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnVESSEL_CLASS_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnVESSEL_CLASS_IDChanged()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnCMSROUTE_IDChanging(value As String)
    End Sub
    Partial Private Sub OnCMSROUTE_IDChanged()
    End Sub
    Partial Private Sub OnMM1Changing(value As Short)
    End Sub
    Partial Private Sub OnMM1Changed()
    End Sub
    Partial Private Sub OnYY1Changing(value As Short)
    End Sub
    Partial Private Sub OnYY1Changed()
    End Sub
    Partial Private Sub OnMM2Changing(value As Short)
    End Sub
    Partial Private Sub OnMM2Changed()
    End Sub
    Partial Private Sub OnYY2Changing(value As Short)
    End Sub
    Partial Private Sub OnYY2Changed()
    End Sub
    Partial Private Sub OnPERIODChanging(value As String)
    End Sub
    Partial Private Sub OnPERIODChanged()
    End Sub
    Partial Private Sub OnYYChanging(value As Integer)
    End Sub
    Partial Private Sub OnYYChanged()
    End Sub
    Partial Private Sub OnMARGINChanging(value As Double)
    End Sub
    Partial Private Sub OnMARGINChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VESSEL_CLASS_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property VESSEL_CLASS_ID() As Integer
		Get
			Return Me._VESSEL_CLASS_ID
		End Get
		Set
			If ((Me._VESSEL_CLASS_ID = value)  _
						= false) Then
				If Me._VESSEL_CLASS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnVESSEL_CLASS_IDChanging(value)
				Me.SendPropertyChanging
				Me._VESSEL_CLASS_ID = value
				Me.SendPropertyChanged("VESSEL_CLASS_ID")
				Me.OnVESSEL_CLASS_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If Me._ROUTES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CMSROUTE_ID", DbType:="VarChar(15) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property CMSROUTE_ID() As String
		Get
			Return Me._CMSROUTE_ID
		End Get
		Set
			If (String.Equals(Me._CMSROUTE_ID, value) = false) Then
				Me.OnCMSROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._CMSROUTE_ID = value
				Me.SendPropertyChanged("CMSROUTE_ID")
				Me.OnCMSROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM1", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property MM1() As Short
		Get
			Return Me._MM1
		End Get
		Set
			If ((Me._MM1 = value)  _
						= false) Then
				Me.OnMM1Changing(value)
				Me.SendPropertyChanging
				Me._MM1 = value
				Me.SendPropertyChanged("MM1")
				Me.OnMM1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY1", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property YY1() As Short
		Get
			Return Me._YY1
		End Get
		Set
			If ((Me._YY1 = value)  _
						= false) Then
				Me.OnYY1Changing(value)
				Me.SendPropertyChanging
				Me._YY1 = value
				Me.SendPropertyChanged("YY1")
				Me.OnYY1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM2", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property MM2() As Short
		Get
			Return Me._MM2
		End Get
		Set
			If ((Me._MM2 = value)  _
						= false) Then
				Me.OnMM2Changing(value)
				Me.SendPropertyChanging
				Me._MM2 = value
				Me.SendPropertyChanged("MM2")
				Me.OnMM2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY2", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property YY2() As Short
		Get
			Return Me._YY2
		End Get
		Set
			If ((Me._YY2 = value)  _
						= false) Then
				Me.OnYY2Changing(value)
				Me.SendPropertyChanging
				Me._YY2 = value
				Me.SendPropertyChanged("YY2")
				Me.OnYY2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PERIOD", DbType:="VarChar(15) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property PERIOD() As String
		Get
			Return Me._PERIOD
		End Get
		Set
			If (String.Equals(Me._PERIOD, value) = false) Then
				Me.OnPERIODChanging(value)
				Me.SendPropertyChanging
				Me._PERIOD = value
				Me.SendPropertyChanged("PERIOD")
				Me.OnPERIODChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property YY() As Integer
		Get
			Return Me._YY
		End Get
		Set
			If ((Me._YY = value)  _
						= false) Then
				Me.OnYYChanging(value)
				Me.SendPropertyChanging
				Me._YY = value
				Me.SendPropertyChanged("YY")
				Me.OnYYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MARGIN", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10)>  _
	Public Property MARGIN() As Double
		Get
			Return Me._MARGIN
		End Get
		Set
			If ((Me._MARGIN = value)  _
						= false) Then
				Me.OnMARGINChanging(value)
				Me.SendPropertyChanging
				Me._MARGIN = value
				Me.SendPropertyChanged("MARGIN")
				Me.OnMARGINChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_VESSEL_CLASS_SPREAD_MARGINS", Storage:="_ROUTES", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTES() As ROUTES
		Get
			Return Me._ROUTES.Entity
		End Get
		Set
			Dim previousValue As ROUTES = Me._ROUTES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTES.Entity = Nothing
					previousValue.VESSEL_CLASS_SPREAD_MARGINS.Remove(Me)
				End If
				Me._ROUTES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.VESSEL_CLASS_SPREAD_MARGINS.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTES")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="VESSEL_CLASS_VESSEL_CLASS_SPREAD_MARGINS", Storage:="_VESSEL_CLASS", ThisKey:="VESSEL_CLASS_ID", OtherKey:="VESSEL_CLASS_ID", IsForeignKey:=true)>  _
	Public Property VESSEL_CLASS() As VESSEL_CLASS
		Get
			Return Me._VESSEL_CLASS.Entity
		End Get
		Set
			Dim previousValue As VESSEL_CLASS = Me._VESSEL_CLASS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._VESSEL_CLASS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._VESSEL_CLASS.Entity = Nothing
					previousValue.VESSEL_CLASS_SPREAD_MARGINS.Remove(Me)
				End If
				Me._VESSEL_CLASS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.VESSEL_CLASS_SPREAD_MARGINS.Add(Me)
					Me._VESSEL_CLASS_ID = value.VESSEL_CLASS_ID
				Else
					Me._VESSEL_CLASS_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("VESSEL_CLASS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._ROUTES = CType(Nothing, EntityRef(Of ROUTES))
		Me._VESSEL_CLASS = CType(Nothing, EntityRef(Of VESSEL_CLASS))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ACCOUNTS_ADMIN"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class ACCOUNTS_ADMIN
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ACCOUNT_ID As Integer
	
	Private _ADMIN_NAME As String
	
	Private _ADMIN_PASSWORD As String
	
	Private _ADMIN_OF_ID As String
	
	Private _ADMIN_OF_PASSWORD As String
	
	Private _ACCOUNTS As EntityRef(Of ACCOUNTS)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnACCOUNT_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_IDChanged()
    End Sub
    Partial Private Sub OnADMIN_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnADMIN_NAMEChanged()
    End Sub
    Partial Private Sub OnADMIN_PASSWORDChanging(value As String)
    End Sub
    Partial Private Sub OnADMIN_PASSWORDChanged()
    End Sub
    Partial Private Sub OnADMIN_OF_IDChanging(value As String)
    End Sub
    Partial Private Sub OnADMIN_OF_IDChanged()
    End Sub
    Partial Private Sub OnADMIN_OF_PASSWORDChanging(value As String)
    End Sub
    Partial Private Sub OnADMIN_OF_PASSWORDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ACCOUNT_ID() As Integer
		Get
			Return Me._ACCOUNT_ID
		End Get
		Set
			If ((Me._ACCOUNT_ID = value)  _
						= false) Then
				If Me._ACCOUNTS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACCOUNT_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_ID = value
				Me.SendPropertyChanged("ACCOUNT_ID")
				Me.OnACCOUNT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADMIN_NAME", DbType:="VarChar(15) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property ADMIN_NAME() As String
		Get
			Return Me._ADMIN_NAME
		End Get
		Set
			If (String.Equals(Me._ADMIN_NAME, value) = false) Then
				Me.OnADMIN_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._ADMIN_NAME = value
				Me.SendPropertyChanged("ADMIN_NAME")
				Me.OnADMIN_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADMIN_PASSWORD", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property ADMIN_PASSWORD() As String
		Get
			Return Me._ADMIN_PASSWORD
		End Get
		Set
			If (String.Equals(Me._ADMIN_PASSWORD, value) = false) Then
				Me.OnADMIN_PASSWORDChanging(value)
				Me.SendPropertyChanging
				Me._ADMIN_PASSWORD = value
				Me.SendPropertyChanged("ADMIN_PASSWORD")
				Me.OnADMIN_PASSWORDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADMIN_OF_ID", DbType:="VarChar(15)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property ADMIN_OF_ID() As String
		Get
			Return Me._ADMIN_OF_ID
		End Get
		Set
			If (String.Equals(Me._ADMIN_OF_ID, value) = false) Then
				Me.OnADMIN_OF_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADMIN_OF_ID = value
				Me.SendPropertyChanged("ADMIN_OF_ID")
				Me.OnADMIN_OF_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADMIN_OF_PASSWORD", DbType:="VarChar(15)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property ADMIN_OF_PASSWORD() As String
		Get
			Return Me._ADMIN_OF_PASSWORD
		End Get
		Set
			If (String.Equals(Me._ADMIN_OF_PASSWORD, value) = false) Then
				Me.OnADMIN_OF_PASSWORDChanging(value)
				Me.SendPropertyChanging
				Me._ADMIN_OF_PASSWORD = value
				Me.SendPropertyChanged("ADMIN_OF_PASSWORD")
				Me.OnADMIN_OF_PASSWORDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNTS_ACCOUNTS_ADMIN", Storage:="_ACCOUNTS", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNTS() As ACCOUNTS
		Get
			Return Me._ACCOUNTS.Entity
		End Get
		Set
			Dim previousValue As ACCOUNTS = Me._ACCOUNTS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNTS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNTS.Entity = Nothing
					previousValue.ACCOUNTS_ADMIN.Remove(Me)
				End If
				Me._ACCOUNTS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ACCOUNTS_ADMIN.Add(Me)
					Me._ACCOUNT_ID = value.ACCOUNT_ID
				Else
					Me._ACCOUNT_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNTS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._ACCOUNTS = CType(Nothing, EntityRef(Of ACCOUNTS))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class
