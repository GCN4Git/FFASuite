'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18034
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection
Imports System.Runtime.Serialization


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="ARTB")>  _
Partial Public Class BRSDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertBALTIC_FORWARD_RATES(instance As BALTIC_FORWARD_RATES)
    End Sub
  Partial Private Sub UpdateBALTIC_FORWARD_RATES(instance As BALTIC_FORWARD_RATES)
    End Sub
  Partial Private Sub DeleteBALTIC_FORWARD_RATES(instance As BALTIC_FORWARD_RATES)
    End Sub
  Partial Private Sub InsertVESSEL_CLASS(instance As VESSEL_CLASS)
    End Sub
  Partial Private Sub UpdateVESSEL_CLASS(instance As VESSEL_CLASS)
    End Sub
  Partial Private Sub DeleteVESSEL_CLASS(instance As VESSEL_CLASS)
    End Sub
  Partial Private Sub InsertBALTIC_FTP(instance As BALTIC_FTP)
    End Sub
  Partial Private Sub UpdateBALTIC_FTP(instance As BALTIC_FTP)
    End Sub
  Partial Private Sub DeleteBALTIC_FTP(instance As BALTIC_FTP)
    End Sub
  Partial Private Sub InsertBALTIC_OPTION_VOLATILITIES(instance As BALTIC_OPTION_VOLATILITIES)
    End Sub
  Partial Private Sub UpdateBALTIC_OPTION_VOLATILITIES(instance As BALTIC_OPTION_VOLATILITIES)
    End Sub
  Partial Private Sub DeleteBALTIC_OPTION_VOLATILITIES(instance As BALTIC_OPTION_VOLATILITIES)
    End Sub
  Partial Private Sub InsertBALTIC_SPOT_RATES(instance As BALTIC_SPOT_RATES)
    End Sub
  Partial Private Sub UpdateBALTIC_SPOT_RATES(instance As BALTIC_SPOT_RATES)
    End Sub
  Partial Private Sub DeleteBALTIC_SPOT_RATES(instance As BALTIC_SPOT_RATES)
    End Sub
  Partial Private Sub InsertROUTES(instance As ROUTES)
    End Sub
  Partial Private Sub UpdateROUTES(instance As ROUTES)
    End Sub
  Partial Private Sub DeleteROUTES(instance As ROUTES)
    End Sub
  Partial Private Sub InsertSMSCLIENTS(instance As SMSCLIENTS)
    End Sub
  Partial Private Sub UpdateSMSCLIENTS(instance As SMSCLIENTS)
    End Sub
  Partial Private Sub DeleteSMSCLIENTS(instance As SMSCLIENTS)
    End Sub
  Partial Private Sub InsertSMSPROVIDERS(instance As SMSPROVIDERS)
    End Sub
  Partial Private Sub UpdateSMSPROVIDERS(instance As SMSPROVIDERS)
    End Sub
  Partial Private Sub DeleteSMSPROVIDERS(instance As SMSPROVIDERS)
    End Sub
  Partial Private Sub InsertTRADE_CLASSES(instance As TRADE_CLASSES)
    End Sub
  Partial Private Sub UpdateTRADE_CLASSES(instance As TRADE_CLASSES)
    End Sub
  Partial Private Sub DeleteTRADE_CLASSES(instance As TRADE_CLASSES)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.FFASuiteUpdater.My.MySettings.Default.ConnectionString_BRS2, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property BALTIC_FORWARD_RATES() As System.Data.Linq.Table(Of BALTIC_FORWARD_RATES)
		Get
			Return Me.GetTable(Of BALTIC_FORWARD_RATES)
		End Get
	End Property
	
	Public ReadOnly Property VESSEL_CLASS() As System.Data.Linq.Table(Of VESSEL_CLASS)
		Get
			Return Me.GetTable(Of VESSEL_CLASS)
		End Get
	End Property
	
	Public ReadOnly Property BALTIC_FTP() As System.Data.Linq.Table(Of BALTIC_FTP)
		Get
			Return Me.GetTable(Of BALTIC_FTP)
		End Get
	End Property
	
	Public ReadOnly Property BALTIC_OPTION_VOLATILITIES() As System.Data.Linq.Table(Of BALTIC_OPTION_VOLATILITIES)
		Get
			Return Me.GetTable(Of BALTIC_OPTION_VOLATILITIES)
		End Get
	End Property
	
	Public ReadOnly Property BALTIC_SPOT_RATES() As System.Data.Linq.Table(Of BALTIC_SPOT_RATES)
		Get
			Return Me.GetTable(Of BALTIC_SPOT_RATES)
		End Get
	End Property
	
	Public ReadOnly Property ROUTES() As System.Data.Linq.Table(Of ROUTES)
		Get
			Return Me.GetTable(Of ROUTES)
		End Get
	End Property
	
	Public ReadOnly Property SMSCLIENTS() As System.Data.Linq.Table(Of SMSCLIENTS)
		Get
			Return Me.GetTable(Of SMSCLIENTS)
		End Get
	End Property
	
	Public ReadOnly Property SMSPROVIDERS() As System.Data.Linq.Table(Of SMSPROVIDERS)
		Get
			Return Me.GetTable(Of SMSPROVIDERS)
		End Get
	End Property
	
	Public ReadOnly Property TRADE_CLASSES() As System.Data.Linq.Table(Of TRADE_CLASSES)
		Get
			Return Me.GetTable(Of TRADE_CLASSES)
		End Get
	End Property
	
	Public ReadOnly Property BALTIC_SPOT_RATES_DIFF() As System.Data.Linq.Table(Of BALTIC_SPOT_RATES_DIFF)
		Get
			Return Me.GetTable(Of BALTIC_SPOT_RATES_DIFF)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BALTIC_FORWARD_RATES"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class BALTIC_FORWARD_RATES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ROUTE_ID As Integer
	
	Private _CMSROUTE_ID As String
	
	Private _FIXING_DATE As Date
	
	Private _NEXT_ROLLOVER_DATE As System.Nullable(Of Date)
	
	Private _FIXING As Double
	
	Private _REPORTDESC As String
	
	Private _MM1 As System.Nullable(Of Short)
	
	Private _YY1 As System.Nullable(Of Short)
	
	Private _MM2 As System.Nullable(Of Short)
	
	Private _YY2 As System.Nullable(Of Short)
	
	Private _PERIOD As String
	
	Private _YY As System.Nullable(Of Integer)
	
	Private _BALTIC_FTP As EntityRef(Of BALTIC_FTP)
	
	Private _ROUTES As EntityRef(Of ROUTES)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnCMSROUTE_IDChanging(value As String)
    End Sub
    Partial Private Sub OnCMSROUTE_IDChanged()
    End Sub
    Partial Private Sub OnFIXING_DATEChanging(value As Date)
    End Sub
    Partial Private Sub OnFIXING_DATEChanged()
    End Sub
    Partial Private Sub OnNEXT_ROLLOVER_DATEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnNEXT_ROLLOVER_DATEChanged()
    End Sub
    Partial Private Sub OnFIXINGChanging(value As Double)
    End Sub
    Partial Private Sub OnFIXINGChanged()
    End Sub
    Partial Private Sub OnREPORTDESCChanging(value As String)
    End Sub
    Partial Private Sub OnREPORTDESCChanged()
    End Sub
    Partial Private Sub OnMM1Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMM1Changed()
    End Sub
    Partial Private Sub OnYY1Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnYY1Changed()
    End Sub
    Partial Private Sub OnMM2Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMM2Changed()
    End Sub
    Partial Private Sub OnYY2Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnYY2Changed()
    End Sub
    Partial Private Sub OnPERIODChanging(value As String)
    End Sub
    Partial Private Sub OnPERIODChanged()
    End Sub
    Partial Private Sub OnYYChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnYYChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If (Me._BALTIC_FTP.HasLoadedOrAssignedValue OrElse Me._ROUTES.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CMSROUTE_ID", DbType:="VarChar(15) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property CMSROUTE_ID() As String
		Get
			Return Me._CMSROUTE_ID
		End Get
		Set
			If (String.Equals(Me._CMSROUTE_ID, value) = false) Then
				If Me._BALTIC_FTP.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCMSROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._CMSROUTE_ID = value
				Me.SendPropertyChanged("CMSROUTE_ID")
				Me.OnCMSROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING_DATE", DbType:="DateTime NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property FIXING_DATE() As Date
		Get
			Return Me._FIXING_DATE
		End Get
		Set
			If ((Me._FIXING_DATE = value)  _
						= false) Then
				Me.OnFIXING_DATEChanging(value)
				Me.SendPropertyChanging
				Me._FIXING_DATE = value
				Me.SendPropertyChanged("FIXING_DATE")
				Me.OnFIXING_DATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NEXT_ROLLOVER_DATE", DbType:="DateTime"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property NEXT_ROLLOVER_DATE() As System.Nullable(Of Date)
		Get
			Return Me._NEXT_ROLLOVER_DATE
		End Get
		Set
			If (Me._NEXT_ROLLOVER_DATE.Equals(value) = false) Then
				Me.OnNEXT_ROLLOVER_DATEChanging(value)
				Me.SendPropertyChanging
				Me._NEXT_ROLLOVER_DATE = value
				Me.SendPropertyChanged("NEXT_ROLLOVER_DATE")
				Me.OnNEXT_ROLLOVER_DATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property FIXING() As Double
		Get
			Return Me._FIXING
		End Get
		Set
			If ((Me._FIXING = value)  _
						= false) Then
				Me.OnFIXINGChanging(value)
				Me.SendPropertyChanging
				Me._FIXING = value
				Me.SendPropertyChanged("FIXING")
				Me.OnFIXINGChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REPORTDESC", DbType:="VarChar(15)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property REPORTDESC() As String
		Get
			Return Me._REPORTDESC
		End Get
		Set
			If (String.Equals(Me._REPORTDESC, value) = false) Then
				Me.OnREPORTDESCChanging(value)
				Me.SendPropertyChanging
				Me._REPORTDESC = value
				Me.SendPropertyChanged("REPORTDESC")
				Me.OnREPORTDESCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM1", DbType:="SmallInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property MM1() As System.Nullable(Of Short)
		Get
			Return Me._MM1
		End Get
		Set
			If (Me._MM1.Equals(value) = false) Then
				Me.OnMM1Changing(value)
				Me.SendPropertyChanging
				Me._MM1 = value
				Me.SendPropertyChanged("MM1")
				Me.OnMM1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY1", DbType:="SmallInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property YY1() As System.Nullable(Of Short)
		Get
			Return Me._YY1
		End Get
		Set
			If (Me._YY1.Equals(value) = false) Then
				Me.OnYY1Changing(value)
				Me.SendPropertyChanging
				Me._YY1 = value
				Me.SendPropertyChanged("YY1")
				Me.OnYY1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM2", DbType:="SmallInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property MM2() As System.Nullable(Of Short)
		Get
			Return Me._MM2
		End Get
		Set
			If (Me._MM2.Equals(value) = false) Then
				Me.OnMM2Changing(value)
				Me.SendPropertyChanging
				Me._MM2 = value
				Me.SendPropertyChanged("MM2")
				Me.OnMM2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY2", DbType:="SmallInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10)>  _
	Public Property YY2() As System.Nullable(Of Short)
		Get
			Return Me._YY2
		End Get
		Set
			If (Me._YY2.Equals(value) = false) Then
				Me.OnYY2Changing(value)
				Me.SendPropertyChanging
				Me._YY2 = value
				Me.SendPropertyChanged("YY2")
				Me.OnYY2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PERIOD", DbType:="VarChar(15)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=11)>  _
	Public Property PERIOD() As String
		Get
			Return Me._PERIOD
		End Get
		Set
			If (String.Equals(Me._PERIOD, value) = false) Then
				Me.OnPERIODChanging(value)
				Me.SendPropertyChanging
				Me._PERIOD = value
				Me.SendPropertyChanged("PERIOD")
				Me.OnPERIODChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=12)>  _
	Public Property YY() As System.Nullable(Of Integer)
		Get
			Return Me._YY
		End Get
		Set
			If (Me._YY.Equals(value) = false) Then
				Me.OnYYChanging(value)
				Me.SendPropertyChanging
				Me._YY = value
				Me.SendPropertyChanged("YY")
				Me.OnYYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BALTIC_FTP_BALTIC_FORWARD_RATES", Storage:="_BALTIC_FTP", ThisKey:="ROUTE_ID,CMSROUTE_ID", OtherKey:="ROUTE_ID,CMSROUTE_ID", IsForeignKey:=true)>  _
	Public Property BALTIC_FTP() As BALTIC_FTP
		Get
			Return Me._BALTIC_FTP.Entity
		End Get
		Set
			Dim previousValue As BALTIC_FTP = Me._BALTIC_FTP.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._BALTIC_FTP.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._BALTIC_FTP.Entity = Nothing
					previousValue.BALTIC_FORWARD_RATES.Remove(Me)
				End If
				Me._BALTIC_FTP.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BALTIC_FORWARD_RATES.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
					Me._CMSROUTE_ID = value.CMSROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
					Me._CMSROUTE_ID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("BALTIC_FTP")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_BALTIC_FORWARD_RATES", Storage:="_ROUTES", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTES() As ROUTES
		Get
			Return Me._ROUTES.Entity
		End Get
		Set
			Dim previousValue As ROUTES = Me._ROUTES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTES.Entity = Nothing
					previousValue.BALTIC_FORWARD_RATES.Remove(Me)
				End If
				Me._ROUTES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BALTIC_FORWARD_RATES.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTES")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._BALTIC_FTP = CType(Nothing, EntityRef(Of BALTIC_FTP))
		Me._ROUTES = CType(Nothing, EntityRef(Of ROUTES))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.VESSEL_CLASS"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class VESSEL_CLASS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _VESSEL_CLASS_ID As Integer
	
	Private _VESSEL_CLASS As String
	
	Private _DRYWET As Char
	
	Private _WETSECTOR As System.Nullable(Of Char)
	
	Private _DESCRIPTION As String
	
	Private _DEFAULT_ROUTE_ID As System.Nullable(Of Integer)
	
	Private _ROUTES As EntitySet(Of ROUTES)
	
	Private _TRADE_CLASSES As EntityRef(Of TRADE_CLASSES)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnVESSEL_CLASS_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnVESSEL_CLASS_IDChanged()
    End Sub
    Partial Private Sub OnVESSEL_CLASSChanging(value As String)
    End Sub
    Partial Private Sub OnVESSEL_CLASSChanged()
    End Sub
    Partial Private Sub OnDRYWETChanging(value As Char)
    End Sub
    Partial Private Sub OnDRYWETChanged()
    End Sub
    Partial Private Sub OnWETSECTORChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnWETSECTORChanged()
    End Sub
    Partial Private Sub OnDESCRIPTIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPTIONChanged()
    End Sub
    Partial Private Sub OnDEFAULT_ROUTE_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDEFAULT_ROUTE_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VESSEL_CLASS_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property VESSEL_CLASS_ID() As Integer
		Get
			Return Me._VESSEL_CLASS_ID
		End Get
		Set
			If ((Me._VESSEL_CLASS_ID = value)  _
						= false) Then
				Me.OnVESSEL_CLASS_IDChanging(value)
				Me.SendPropertyChanging
				Me._VESSEL_CLASS_ID = value
				Me.SendPropertyChanged("VESSEL_CLASS_ID")
				Me.OnVESSEL_CLASS_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VESSEL_CLASS", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property VESSEL_CLASS() As String
		Get
			Return Me._VESSEL_CLASS
		End Get
		Set
			If (String.Equals(Me._VESSEL_CLASS, value) = false) Then
				Me.OnVESSEL_CLASSChanging(value)
				Me.SendPropertyChanging
				Me._VESSEL_CLASS = value
				Me.SendPropertyChanged("VESSEL_CLASS")
				Me.OnVESSEL_CLASSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DRYWET", DbType:="Char(1) NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property DRYWET() As Char
		Get
			Return Me._DRYWET
		End Get
		Set
			If ((Me._DRYWET = value)  _
						= false) Then
				If Me._TRADE_CLASSES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDRYWETChanging(value)
				Me.SendPropertyChanging
				Me._DRYWET = value
				Me.SendPropertyChanged("DRYWET")
				Me.OnDRYWETChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WETSECTOR", DbType:="Char(1)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property WETSECTOR() As System.Nullable(Of Char)
		Get
			Return Me._WETSECTOR
		End Get
		Set
			If (Me._WETSECTOR.Equals(value) = false) Then
				Me.OnWETSECTORChanging(value)
				Me.SendPropertyChanging
				Me._WETSECTOR = value
				Me.SendPropertyChanged("WETSECTOR")
				Me.OnWETSECTORChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPTION", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property DESCRIPTION() As String
		Get
			Return Me._DESCRIPTION
		End Get
		Set
			If (String.Equals(Me._DESCRIPTION, value) = false) Then
				Me.OnDESCRIPTIONChanging(value)
				Me.SendPropertyChanging
				Me._DESCRIPTION = value
				Me.SendPropertyChanged("DESCRIPTION")
				Me.OnDESCRIPTIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEFAULT_ROUTE_ID", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property DEFAULT_ROUTE_ID() As System.Nullable(Of Integer)
		Get
			Return Me._DEFAULT_ROUTE_ID
		End Get
		Set
			If (Me._DEFAULT_ROUTE_ID.Equals(value) = false) Then
				Me.OnDEFAULT_ROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._DEFAULT_ROUTE_ID = value
				Me.SendPropertyChanged("DEFAULT_ROUTE_ID")
				Me.OnDEFAULT_ROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="VESSEL_CLASS_ROUTES", Storage:="_ROUTES", ThisKey:="VESSEL_CLASS_ID", OtherKey:="VESSEL_CLASS_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7, EmitDefaultValue:=false)>  _
	Public Property ROUTES() As EntitySet(Of ROUTES)
		Get
			If (Me.serializing  _
						AndAlso (Me._ROUTES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ROUTES
		End Get
		Set
			Me._ROUTES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASSES_VESSEL_CLASS", Storage:="_TRADE_CLASSES", ThisKey:="DRYWET", OtherKey:="TRADE_CLASS_SHORT", IsForeignKey:=true)>  _
	Public Property TRADE_CLASSES() As TRADE_CLASSES
		Get
			Return Me._TRADE_CLASSES.Entity
		End Get
		Set
			Dim previousValue As TRADE_CLASSES = Me._TRADE_CLASSES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TRADE_CLASSES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TRADE_CLASSES.Entity = Nothing
					previousValue.VESSEL_CLASS.Remove(Me)
				End If
				Me._TRADE_CLASSES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.VESSEL_CLASS.Add(Me)
					Me._DRYWET = value.TRADE_CLASS_SHORT
				Else
					Me._DRYWET = CType(Nothing, Char)
				End If
				Me.SendPropertyChanged("TRADE_CLASSES")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ROUTES(ByVal entity As ROUTES)
		Me.SendPropertyChanging
		entity.VESSEL_CLASS = Me
	End Sub
	
	Private Sub detach_ROUTES(ByVal entity As ROUTES)
		Me.SendPropertyChanging
		entity.VESSEL_CLASS = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._ROUTES = New EntitySet(Of ROUTES)(AddressOf Me.attach_ROUTES, AddressOf Me.detach_ROUTES)
		Me._TRADE_CLASSES = CType(Nothing, EntityRef(Of TRADE_CLASSES))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BALTIC_FTP"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class BALTIC_FTP
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _ROUTE_ID As Integer
	
	Private _CMSROUTE_ID As String
	
	Private _PERIOD As Char
	
	Private _QUALIFIER As Char
	
	Private _BALTIC_FORWARD_RATES As EntitySet(Of BALTIC_FORWARD_RATES)
	
	Private _BALTIC_OPTION_VOLATILITIES As EntitySet(Of BALTIC_OPTION_VOLATILITIES)
	
	Private _ROUTES As EntityRef(Of ROUTES)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnCMSROUTE_IDChanging(value As String)
    End Sub
    Partial Private Sub OnCMSROUTE_IDChanged()
    End Sub
    Partial Private Sub OnPERIODChanging(value As Char)
    End Sub
    Partial Private Sub OnPERIODChanged()
    End Sub
    Partial Private Sub OnQUALIFIERChanging(value As Char)
    End Sub
    Partial Private Sub OnQUALIFIERChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If Me._ROUTES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CMSROUTE_ID", DbType:="VarChar(15) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property CMSROUTE_ID() As String
		Get
			Return Me._CMSROUTE_ID
		End Get
		Set
			If (String.Equals(Me._CMSROUTE_ID, value) = false) Then
				Me.OnCMSROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._CMSROUTE_ID = value
				Me.SendPropertyChanged("CMSROUTE_ID")
				Me.OnCMSROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PERIOD", DbType:="Char(1) NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property PERIOD() As Char
		Get
			Return Me._PERIOD
		End Get
		Set
			If ((Me._PERIOD = value)  _
						= false) Then
				Me.OnPERIODChanging(value)
				Me.SendPropertyChanging
				Me._PERIOD = value
				Me.SendPropertyChanged("PERIOD")
				Me.OnPERIODChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUALIFIER", DbType:="Char(1) NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property QUALIFIER() As Char
		Get
			Return Me._QUALIFIER
		End Get
		Set
			If ((Me._QUALIFIER = value)  _
						= false) Then
				Me.OnQUALIFIERChanging(value)
				Me.SendPropertyChanging
				Me._QUALIFIER = value
				Me.SendPropertyChanged("QUALIFIER")
				Me.OnQUALIFIERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BALTIC_FTP_BALTIC_FORWARD_RATES", Storage:="_BALTIC_FORWARD_RATES", ThisKey:="ROUTE_ID,CMSROUTE_ID", OtherKey:="ROUTE_ID,CMSROUTE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6, EmitDefaultValue:=false)>  _
	Public Property BALTIC_FORWARD_RATES() As EntitySet(Of BALTIC_FORWARD_RATES)
		Get
			If (Me.serializing  _
						AndAlso (Me._BALTIC_FORWARD_RATES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._BALTIC_FORWARD_RATES
		End Get
		Set
			Me._BALTIC_FORWARD_RATES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BALTIC_FTP_BALTIC_OPTION_VOLATILITIES", Storage:="_BALTIC_OPTION_VOLATILITIES", ThisKey:="ROUTE_ID,CMSROUTE_ID", OtherKey:="ROUTE_ID,CMSROUTE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7, EmitDefaultValue:=false)>  _
	Public Property BALTIC_OPTION_VOLATILITIES() As EntitySet(Of BALTIC_OPTION_VOLATILITIES)
		Get
			If (Me.serializing  _
						AndAlso (Me._BALTIC_OPTION_VOLATILITIES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._BALTIC_OPTION_VOLATILITIES
		End Get
		Set
			Me._BALTIC_OPTION_VOLATILITIES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_BALTIC_FTP", Storage:="_ROUTES", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTES() As ROUTES
		Get
			Return Me._ROUTES.Entity
		End Get
		Set
			Dim previousValue As ROUTES = Me._ROUTES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTES.Entity = Nothing
					previousValue.BALTIC_FTP.Remove(Me)
				End If
				Me._ROUTES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BALTIC_FTP.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTES")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BALTIC_FORWARD_RATES(ByVal entity As BALTIC_FORWARD_RATES)
		Me.SendPropertyChanging
		entity.BALTIC_FTP = Me
	End Sub
	
	Private Sub detach_BALTIC_FORWARD_RATES(ByVal entity As BALTIC_FORWARD_RATES)
		Me.SendPropertyChanging
		entity.BALTIC_FTP = Nothing
	End Sub
	
	Private Sub attach_BALTIC_OPTION_VOLATILITIES(ByVal entity As BALTIC_OPTION_VOLATILITIES)
		Me.SendPropertyChanging
		entity.BALTIC_FTP = Me
	End Sub
	
	Private Sub detach_BALTIC_OPTION_VOLATILITIES(ByVal entity As BALTIC_OPTION_VOLATILITIES)
		Me.SendPropertyChanging
		entity.BALTIC_FTP = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._BALTIC_FORWARD_RATES = New EntitySet(Of BALTIC_FORWARD_RATES)(AddressOf Me.attach_BALTIC_FORWARD_RATES, AddressOf Me.detach_BALTIC_FORWARD_RATES)
		Me._BALTIC_OPTION_VOLATILITIES = New EntitySet(Of BALTIC_OPTION_VOLATILITIES)(AddressOf Me.attach_BALTIC_OPTION_VOLATILITIES, AddressOf Me.detach_BALTIC_OPTION_VOLATILITIES)
		Me._ROUTES = CType(Nothing, EntityRef(Of ROUTES))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BALTIC_OPTION_VOLATILITIES"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class BALTIC_OPTION_VOLATILITIES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ROUTE_ID As Integer
	
	Private _CMSROUTE_ID As String
	
	Private _FIXING_DATE As Date
	
	Private _NEXT_ROLLOVER_DATE As Date
	
	Private _FIXING As Double
	
	Private _REPORTDESC As String
	
	Private _MM1 As System.Nullable(Of Short)
	
	Private _YY1 As System.Nullable(Of Short)
	
	Private _MM2 As System.Nullable(Of Short)
	
	Private _YY2 As System.Nullable(Of Short)
	
	Private _PERIOD As String
	
	Private _YY As System.Nullable(Of Integer)
	
	Private _BALTIC_FTP As EntityRef(Of BALTIC_FTP)
	
	Private _ROUTES As EntityRef(Of ROUTES)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnCMSROUTE_IDChanging(value As String)
    End Sub
    Partial Private Sub OnCMSROUTE_IDChanged()
    End Sub
    Partial Private Sub OnFIXING_DATEChanging(value As Date)
    End Sub
    Partial Private Sub OnFIXING_DATEChanged()
    End Sub
    Partial Private Sub OnNEXT_ROLLOVER_DATEChanging(value As Date)
    End Sub
    Partial Private Sub OnNEXT_ROLLOVER_DATEChanged()
    End Sub
    Partial Private Sub OnFIXINGChanging(value As Double)
    End Sub
    Partial Private Sub OnFIXINGChanged()
    End Sub
    Partial Private Sub OnREPORTDESCChanging(value As String)
    End Sub
    Partial Private Sub OnREPORTDESCChanged()
    End Sub
    Partial Private Sub OnMM1Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMM1Changed()
    End Sub
    Partial Private Sub OnYY1Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnYY1Changed()
    End Sub
    Partial Private Sub OnMM2Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMM2Changed()
    End Sub
    Partial Private Sub OnYY2Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnYY2Changed()
    End Sub
    Partial Private Sub OnPERIODChanging(value As String)
    End Sub
    Partial Private Sub OnPERIODChanged()
    End Sub
    Partial Private Sub OnYYChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnYYChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If (Me._BALTIC_FTP.HasLoadedOrAssignedValue OrElse Me._ROUTES.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CMSROUTE_ID", DbType:="VarChar(15) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property CMSROUTE_ID() As String
		Get
			Return Me._CMSROUTE_ID
		End Get
		Set
			If (String.Equals(Me._CMSROUTE_ID, value) = false) Then
				If Me._BALTIC_FTP.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCMSROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._CMSROUTE_ID = value
				Me.SendPropertyChanged("CMSROUTE_ID")
				Me.OnCMSROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING_DATE", DbType:="DateTime NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property FIXING_DATE() As Date
		Get
			Return Me._FIXING_DATE
		End Get
		Set
			If ((Me._FIXING_DATE = value)  _
						= false) Then
				Me.OnFIXING_DATEChanging(value)
				Me.SendPropertyChanging
				Me._FIXING_DATE = value
				Me.SendPropertyChanged("FIXING_DATE")
				Me.OnFIXING_DATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NEXT_ROLLOVER_DATE", DbType:="DateTime NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property NEXT_ROLLOVER_DATE() As Date
		Get
			Return Me._NEXT_ROLLOVER_DATE
		End Get
		Set
			If ((Me._NEXT_ROLLOVER_DATE = value)  _
						= false) Then
				Me.OnNEXT_ROLLOVER_DATEChanging(value)
				Me.SendPropertyChanging
				Me._NEXT_ROLLOVER_DATE = value
				Me.SendPropertyChanged("NEXT_ROLLOVER_DATE")
				Me.OnNEXT_ROLLOVER_DATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property FIXING() As Double
		Get
			Return Me._FIXING
		End Get
		Set
			If ((Me._FIXING = value)  _
						= false) Then
				Me.OnFIXINGChanging(value)
				Me.SendPropertyChanging
				Me._FIXING = value
				Me.SendPropertyChanged("FIXING")
				Me.OnFIXINGChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REPORTDESC", DbType:="VarChar(15)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property REPORTDESC() As String
		Get
			Return Me._REPORTDESC
		End Get
		Set
			If (String.Equals(Me._REPORTDESC, value) = false) Then
				Me.OnREPORTDESCChanging(value)
				Me.SendPropertyChanging
				Me._REPORTDESC = value
				Me.SendPropertyChanged("REPORTDESC")
				Me.OnREPORTDESCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM1", DbType:="SmallInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property MM1() As System.Nullable(Of Short)
		Get
			Return Me._MM1
		End Get
		Set
			If (Me._MM1.Equals(value) = false) Then
				Me.OnMM1Changing(value)
				Me.SendPropertyChanging
				Me._MM1 = value
				Me.SendPropertyChanged("MM1")
				Me.OnMM1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY1", DbType:="SmallInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property YY1() As System.Nullable(Of Short)
		Get
			Return Me._YY1
		End Get
		Set
			If (Me._YY1.Equals(value) = false) Then
				Me.OnYY1Changing(value)
				Me.SendPropertyChanging
				Me._YY1 = value
				Me.SendPropertyChanged("YY1")
				Me.OnYY1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM2", DbType:="SmallInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property MM2() As System.Nullable(Of Short)
		Get
			Return Me._MM2
		End Get
		Set
			If (Me._MM2.Equals(value) = false) Then
				Me.OnMM2Changing(value)
				Me.SendPropertyChanging
				Me._MM2 = value
				Me.SendPropertyChanged("MM2")
				Me.OnMM2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY2", DbType:="SmallInt"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10)>  _
	Public Property YY2() As System.Nullable(Of Short)
		Get
			Return Me._YY2
		End Get
		Set
			If (Me._YY2.Equals(value) = false) Then
				Me.OnYY2Changing(value)
				Me.SendPropertyChanging
				Me._YY2 = value
				Me.SendPropertyChanged("YY2")
				Me.OnYY2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PERIOD", DbType:="VarChar(15)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=11)>  _
	Public Property PERIOD() As String
		Get
			Return Me._PERIOD
		End Get
		Set
			If (String.Equals(Me._PERIOD, value) = false) Then
				Me.OnPERIODChanging(value)
				Me.SendPropertyChanging
				Me._PERIOD = value
				Me.SendPropertyChanged("PERIOD")
				Me.OnPERIODChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=12)>  _
	Public Property YY() As System.Nullable(Of Integer)
		Get
			Return Me._YY
		End Get
		Set
			If (Me._YY.Equals(value) = false) Then
				Me.OnYYChanging(value)
				Me.SendPropertyChanging
				Me._YY = value
				Me.SendPropertyChanged("YY")
				Me.OnYYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BALTIC_FTP_BALTIC_OPTION_VOLATILITIES", Storage:="_BALTIC_FTP", ThisKey:="ROUTE_ID,CMSROUTE_ID", OtherKey:="ROUTE_ID,CMSROUTE_ID", IsForeignKey:=true)>  _
	Public Property BALTIC_FTP() As BALTIC_FTP
		Get
			Return Me._BALTIC_FTP.Entity
		End Get
		Set
			Dim previousValue As BALTIC_FTP = Me._BALTIC_FTP.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._BALTIC_FTP.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._BALTIC_FTP.Entity = Nothing
					previousValue.BALTIC_OPTION_VOLATILITIES.Remove(Me)
				End If
				Me._BALTIC_FTP.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BALTIC_OPTION_VOLATILITIES.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
					Me._CMSROUTE_ID = value.CMSROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
					Me._CMSROUTE_ID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("BALTIC_FTP")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_BALTIC_OPTION_VOLATILITIES", Storage:="_ROUTES", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTES() As ROUTES
		Get
			Return Me._ROUTES.Entity
		End Get
		Set
			Dim previousValue As ROUTES = Me._ROUTES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTES.Entity = Nothing
					previousValue.BALTIC_OPTION_VOLATILITIES.Remove(Me)
				End If
				Me._ROUTES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BALTIC_OPTION_VOLATILITIES.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTES")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._BALTIC_FTP = CType(Nothing, EntityRef(Of BALTIC_FTP))
		Me._ROUTES = CType(Nothing, EntityRef(Of ROUTES))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BALTIC_SPOT_RATES"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class BALTIC_SPOT_RATES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ROUTE_ID As Integer
	
	Private _FIXING_DATE As Date
	
	Private _FIXING As Double
	
	Private _ROUTES As EntityRef(Of ROUTES)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnFIXING_DATEChanging(value As Date)
    End Sub
    Partial Private Sub OnFIXING_DATEChanged()
    End Sub
    Partial Private Sub OnFIXINGChanging(value As Double)
    End Sub
    Partial Private Sub OnFIXINGChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If Me._ROUTES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING_DATE", DbType:="DateTime NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property FIXING_DATE() As Date
		Get
			Return Me._FIXING_DATE
		End Get
		Set
			If ((Me._FIXING_DATE = value)  _
						= false) Then
				Me.OnFIXING_DATEChanging(value)
				Me.SendPropertyChanging
				Me._FIXING_DATE = value
				Me.SendPropertyChanged("FIXING_DATE")
				Me.OnFIXING_DATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property FIXING() As Double
		Get
			Return Me._FIXING
		End Get
		Set
			If ((Me._FIXING = value)  _
						= false) Then
				Me.OnFIXINGChanging(value)
				Me.SendPropertyChanging
				Me._FIXING = value
				Me.SendPropertyChanged("FIXING")
				Me.OnFIXINGChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_BALTIC_SPOT_RATES", Storage:="_ROUTES", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTES() As ROUTES
		Get
			Return Me._ROUTES.Entity
		End Get
		Set
			Dim previousValue As ROUTES = Me._ROUTES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTES.Entity = Nothing
					previousValue.BALTIC_SPOT_RATES.Remove(Me)
				End If
				Me._ROUTES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BALTIC_SPOT_RATES.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTES")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._ROUTES = CType(Nothing, EntityRef(Of ROUTES))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ROUTES"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class ROUTES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ROUTE_ID As Integer
	
	Private _VESSEL_CLASS_ID As Integer
	
	Private _QUOTE_TYPE As Short
	
	Private _QUANTITY_TYPE As Short
	
	Private _CCY_ID As System.Nullable(Of Integer)
	
	Private _ROUTE_SHORT As String
	
	Private _ROUTE_DESCR As String
	
	Private _BALTIC_ABRV As String
	
	Private _BALTIC_ABRV_FFA As String
	
	Private _SETTLEMENT_TYPE As Short
	
	Private _LOT_SIZE As Integer
	
	Private _SETTLEMENT_TICK As Double
	
	Private _PRICING_TICK As Double
	
	Private _FULL_LOT_SIZE As Integer
	
	Private _FFA_TRADED As Boolean
	
	Private _LAST_DAY_RULE_ID As Integer
	
	Private _DEFAULT_QUANTITY As Double
	
	Private _SETTL_ROUTE_ID As Integer
	
	Private _OPTIONS_TRADED As Boolean
	
	Private _BALTIC_FORWARD_RATES As EntitySet(Of BALTIC_FORWARD_RATES)
	
	Private _BALTIC_FTP As EntitySet(Of BALTIC_FTP)
	
	Private _BALTIC_OPTION_VOLATILITIES As EntitySet(Of BALTIC_OPTION_VOLATILITIES)
	
	Private _BALTIC_SPOT_RATES As EntitySet(Of BALTIC_SPOT_RATES)
	
	Private _VESSEL_CLASS As EntityRef(Of VESSEL_CLASS)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnVESSEL_CLASS_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnVESSEL_CLASS_IDChanged()
    End Sub
    Partial Private Sub OnQUOTE_TYPEChanging(value As Short)
    End Sub
    Partial Private Sub OnQUOTE_TYPEChanged()
    End Sub
    Partial Private Sub OnQUANTITY_TYPEChanging(value As Short)
    End Sub
    Partial Private Sub OnQUANTITY_TYPEChanged()
    End Sub
    Partial Private Sub OnCCY_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCCY_IDChanged()
    End Sub
    Partial Private Sub OnROUTE_SHORTChanging(value As String)
    End Sub
    Partial Private Sub OnROUTE_SHORTChanged()
    End Sub
    Partial Private Sub OnROUTE_DESCRChanging(value As String)
    End Sub
    Partial Private Sub OnROUTE_DESCRChanged()
    End Sub
    Partial Private Sub OnBALTIC_ABRVChanging(value As String)
    End Sub
    Partial Private Sub OnBALTIC_ABRVChanged()
    End Sub
    Partial Private Sub OnBALTIC_ABRV_FFAChanging(value As String)
    End Sub
    Partial Private Sub OnBALTIC_ABRV_FFAChanged()
    End Sub
    Partial Private Sub OnSETTLEMENT_TYPEChanging(value As Short)
    End Sub
    Partial Private Sub OnSETTLEMENT_TYPEChanged()
    End Sub
    Partial Private Sub OnLOT_SIZEChanging(value As Integer)
    End Sub
    Partial Private Sub OnLOT_SIZEChanged()
    End Sub
    Partial Private Sub OnSETTLEMENT_TICKChanging(value As Double)
    End Sub
    Partial Private Sub OnSETTLEMENT_TICKChanged()
    End Sub
    Partial Private Sub OnPRICING_TICKChanging(value As Double)
    End Sub
    Partial Private Sub OnPRICING_TICKChanged()
    End Sub
    Partial Private Sub OnFULL_LOT_SIZEChanging(value As Integer)
    End Sub
    Partial Private Sub OnFULL_LOT_SIZEChanged()
    End Sub
    Partial Private Sub OnFFA_TRADEDChanging(value As Boolean)
    End Sub
    Partial Private Sub OnFFA_TRADEDChanged()
    End Sub
    Partial Private Sub OnLAST_DAY_RULE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnLAST_DAY_RULE_IDChanged()
    End Sub
    Partial Private Sub OnDEFAULT_QUANTITYChanging(value As Double)
    End Sub
    Partial Private Sub OnDEFAULT_QUANTITYChanged()
    End Sub
    Partial Private Sub OnSETTL_ROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSETTL_ROUTE_IDChanged()
    End Sub
    Partial Private Sub OnOPTIONS_TRADEDChanging(value As Boolean)
    End Sub
    Partial Private Sub OnOPTIONS_TRADEDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VESSEL_CLASS_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property VESSEL_CLASS_ID() As Integer
		Get
			Return Me._VESSEL_CLASS_ID
		End Get
		Set
			If ((Me._VESSEL_CLASS_ID = value)  _
						= false) Then
				If Me._VESSEL_CLASS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnVESSEL_CLASS_IDChanging(value)
				Me.SendPropertyChanging
				Me._VESSEL_CLASS_ID = value
				Me.SendPropertyChanged("VESSEL_CLASS_ID")
				Me.OnVESSEL_CLASS_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUOTE_TYPE", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property QUOTE_TYPE() As Short
		Get
			Return Me._QUOTE_TYPE
		End Get
		Set
			If ((Me._QUOTE_TYPE = value)  _
						= false) Then
				Me.OnQUOTE_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._QUOTE_TYPE = value
				Me.SendPropertyChanged("QUOTE_TYPE")
				Me.OnQUOTE_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUANTITY_TYPE", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property QUANTITY_TYPE() As Short
		Get
			Return Me._QUANTITY_TYPE
		End Get
		Set
			If ((Me._QUANTITY_TYPE = value)  _
						= false) Then
				Me.OnQUANTITY_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._QUANTITY_TYPE = value
				Me.SendPropertyChanged("QUANTITY_TYPE")
				Me.OnQUANTITY_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCY_ID", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property CCY_ID() As System.Nullable(Of Integer)
		Get
			Return Me._CCY_ID
		End Get
		Set
			If (Me._CCY_ID.Equals(value) = false) Then
				Me.OnCCY_IDChanging(value)
				Me.SendPropertyChanging
				Me._CCY_ID = value
				Me.SendPropertyChanged("CCY_ID")
				Me.OnCCY_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_SHORT", DbType:="NVarChar(20)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property ROUTE_SHORT() As String
		Get
			Return Me._ROUTE_SHORT
		End Get
		Set
			If (String.Equals(Me._ROUTE_SHORT, value) = false) Then
				Me.OnROUTE_SHORTChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_SHORT = value
				Me.SendPropertyChanged("ROUTE_SHORT")
				Me.OnROUTE_SHORTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_DESCR", DbType:="NVarChar(255)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property ROUTE_DESCR() As String
		Get
			Return Me._ROUTE_DESCR
		End Get
		Set
			If (String.Equals(Me._ROUTE_DESCR, value) = false) Then
				Me.OnROUTE_DESCRChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_DESCR = value
				Me.SendPropertyChanged("ROUTE_DESCR")
				Me.OnROUTE_DESCRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BALTIC_ABRV", DbType:="NVarChar(20)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property BALTIC_ABRV() As String
		Get
			Return Me._BALTIC_ABRV
		End Get
		Set
			If (String.Equals(Me._BALTIC_ABRV, value) = false) Then
				Me.OnBALTIC_ABRVChanging(value)
				Me.SendPropertyChanging
				Me._BALTIC_ABRV = value
				Me.SendPropertyChanged("BALTIC_ABRV")
				Me.OnBALTIC_ABRVChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BALTIC_ABRV_FFA", DbType:="NVarChar(20)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property BALTIC_ABRV_FFA() As String
		Get
			Return Me._BALTIC_ABRV_FFA
		End Get
		Set
			If (String.Equals(Me._BALTIC_ABRV_FFA, value) = false) Then
				Me.OnBALTIC_ABRV_FFAChanging(value)
				Me.SendPropertyChanging
				Me._BALTIC_ABRV_FFA = value
				Me.SendPropertyChanged("BALTIC_ABRV_FFA")
				Me.OnBALTIC_ABRV_FFAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SETTLEMENT_TYPE", DbType:="SmallInt NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10)>  _
	Public Property SETTLEMENT_TYPE() As Short
		Get
			Return Me._SETTLEMENT_TYPE
		End Get
		Set
			If ((Me._SETTLEMENT_TYPE = value)  _
						= false) Then
				Me.OnSETTLEMENT_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._SETTLEMENT_TYPE = value
				Me.SendPropertyChanged("SETTLEMENT_TYPE")
				Me.OnSETTLEMENT_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOT_SIZE", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=11)>  _
	Public Property LOT_SIZE() As Integer
		Get
			Return Me._LOT_SIZE
		End Get
		Set
			If ((Me._LOT_SIZE = value)  _
						= false) Then
				Me.OnLOT_SIZEChanging(value)
				Me.SendPropertyChanging
				Me._LOT_SIZE = value
				Me.SendPropertyChanged("LOT_SIZE")
				Me.OnLOT_SIZEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SETTLEMENT_TICK", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=12)>  _
	Public Property SETTLEMENT_TICK() As Double
		Get
			Return Me._SETTLEMENT_TICK
		End Get
		Set
			If ((Me._SETTLEMENT_TICK = value)  _
						= false) Then
				Me.OnSETTLEMENT_TICKChanging(value)
				Me.SendPropertyChanging
				Me._SETTLEMENT_TICK = value
				Me.SendPropertyChanged("SETTLEMENT_TICK")
				Me.OnSETTLEMENT_TICKChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICING_TICK", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=13)>  _
	Public Property PRICING_TICK() As Double
		Get
			Return Me._PRICING_TICK
		End Get
		Set
			If ((Me._PRICING_TICK = value)  _
						= false) Then
				Me.OnPRICING_TICKChanging(value)
				Me.SendPropertyChanging
				Me._PRICING_TICK = value
				Me.SendPropertyChanged("PRICING_TICK")
				Me.OnPRICING_TICKChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FULL_LOT_SIZE", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=14)>  _
	Public Property FULL_LOT_SIZE() As Integer
		Get
			Return Me._FULL_LOT_SIZE
		End Get
		Set
			If ((Me._FULL_LOT_SIZE = value)  _
						= false) Then
				Me.OnFULL_LOT_SIZEChanging(value)
				Me.SendPropertyChanging
				Me._FULL_LOT_SIZE = value
				Me.SendPropertyChanged("FULL_LOT_SIZE")
				Me.OnFULL_LOT_SIZEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FFA_TRADED", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=15)>  _
	Public Property FFA_TRADED() As Boolean
		Get
			Return Me._FFA_TRADED
		End Get
		Set
			If ((Me._FFA_TRADED = value)  _
						= false) Then
				Me.OnFFA_TRADEDChanging(value)
				Me.SendPropertyChanging
				Me._FFA_TRADED = value
				Me.SendPropertyChanged("FFA_TRADED")
				Me.OnFFA_TRADEDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LAST_DAY_RULE_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=16)>  _
	Public Property LAST_DAY_RULE_ID() As Integer
		Get
			Return Me._LAST_DAY_RULE_ID
		End Get
		Set
			If ((Me._LAST_DAY_RULE_ID = value)  _
						= false) Then
				Me.OnLAST_DAY_RULE_IDChanging(value)
				Me.SendPropertyChanging
				Me._LAST_DAY_RULE_ID = value
				Me.SendPropertyChanged("LAST_DAY_RULE_ID")
				Me.OnLAST_DAY_RULE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEFAULT_QUANTITY", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=17)>  _
	Public Property DEFAULT_QUANTITY() As Double
		Get
			Return Me._DEFAULT_QUANTITY
		End Get
		Set
			If ((Me._DEFAULT_QUANTITY = value)  _
						= false) Then
				Me.OnDEFAULT_QUANTITYChanging(value)
				Me.SendPropertyChanging
				Me._DEFAULT_QUANTITY = value
				Me.SendPropertyChanged("DEFAULT_QUANTITY")
				Me.OnDEFAULT_QUANTITYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SETTL_ROUTE_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=18)>  _
	Public Property SETTL_ROUTE_ID() As Integer
		Get
			Return Me._SETTL_ROUTE_ID
		End Get
		Set
			If ((Me._SETTL_ROUTE_ID = value)  _
						= false) Then
				Me.OnSETTL_ROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._SETTL_ROUTE_ID = value
				Me.SendPropertyChanged("SETTL_ROUTE_ID")
				Me.OnSETTL_ROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OPTIONS_TRADED", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=19)>  _
	Public Property OPTIONS_TRADED() As Boolean
		Get
			Return Me._OPTIONS_TRADED
		End Get
		Set
			If ((Me._OPTIONS_TRADED = value)  _
						= false) Then
				Me.OnOPTIONS_TRADEDChanging(value)
				Me.SendPropertyChanging
				Me._OPTIONS_TRADED = value
				Me.SendPropertyChanged("OPTIONS_TRADED")
				Me.OnOPTIONS_TRADEDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_BALTIC_FORWARD_RATES", Storage:="_BALTIC_FORWARD_RATES", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=20, EmitDefaultValue:=false)>  _
	Public Property BALTIC_FORWARD_RATES() As EntitySet(Of BALTIC_FORWARD_RATES)
		Get
			If (Me.serializing  _
						AndAlso (Me._BALTIC_FORWARD_RATES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._BALTIC_FORWARD_RATES
		End Get
		Set
			Me._BALTIC_FORWARD_RATES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_BALTIC_FTP", Storage:="_BALTIC_FTP", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=21, EmitDefaultValue:=false)>  _
	Public Property BALTIC_FTP() As EntitySet(Of BALTIC_FTP)
		Get
			If (Me.serializing  _
						AndAlso (Me._BALTIC_FTP.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._BALTIC_FTP
		End Get
		Set
			Me._BALTIC_FTP.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_BALTIC_OPTION_VOLATILITIES", Storage:="_BALTIC_OPTION_VOLATILITIES", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=22, EmitDefaultValue:=false)>  _
	Public Property BALTIC_OPTION_VOLATILITIES() As EntitySet(Of BALTIC_OPTION_VOLATILITIES)
		Get
			If (Me.serializing  _
						AndAlso (Me._BALTIC_OPTION_VOLATILITIES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._BALTIC_OPTION_VOLATILITIES
		End Get
		Set
			Me._BALTIC_OPTION_VOLATILITIES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTES_BALTIC_SPOT_RATES", Storage:="_BALTIC_SPOT_RATES", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=23, EmitDefaultValue:=false)>  _
	Public Property BALTIC_SPOT_RATES() As EntitySet(Of BALTIC_SPOT_RATES)
		Get
			If (Me.serializing  _
						AndAlso (Me._BALTIC_SPOT_RATES.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._BALTIC_SPOT_RATES
		End Get
		Set
			Me._BALTIC_SPOT_RATES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="VESSEL_CLASS_ROUTES", Storage:="_VESSEL_CLASS", ThisKey:="VESSEL_CLASS_ID", OtherKey:="VESSEL_CLASS_ID", IsForeignKey:=true)>  _
	Public Property VESSEL_CLASS() As VESSEL_CLASS
		Get
			Return Me._VESSEL_CLASS.Entity
		End Get
		Set
			Dim previousValue As VESSEL_CLASS = Me._VESSEL_CLASS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._VESSEL_CLASS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._VESSEL_CLASS.Entity = Nothing
					previousValue.ROUTES.Remove(Me)
				End If
				Me._VESSEL_CLASS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ROUTES.Add(Me)
					Me._VESSEL_CLASS_ID = value.VESSEL_CLASS_ID
				Else
					Me._VESSEL_CLASS_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("VESSEL_CLASS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BALTIC_FORWARD_RATES(ByVal entity As BALTIC_FORWARD_RATES)
		Me.SendPropertyChanging
		entity.ROUTES = Me
	End Sub
	
	Private Sub detach_BALTIC_FORWARD_RATES(ByVal entity As BALTIC_FORWARD_RATES)
		Me.SendPropertyChanging
		entity.ROUTES = Nothing
	End Sub
	
	Private Sub attach_BALTIC_FTP(ByVal entity As BALTIC_FTP)
		Me.SendPropertyChanging
		entity.ROUTES = Me
	End Sub
	
	Private Sub detach_BALTIC_FTP(ByVal entity As BALTIC_FTP)
		Me.SendPropertyChanging
		entity.ROUTES = Nothing
	End Sub
	
	Private Sub attach_BALTIC_OPTION_VOLATILITIES(ByVal entity As BALTIC_OPTION_VOLATILITIES)
		Me.SendPropertyChanging
		entity.ROUTES = Me
	End Sub
	
	Private Sub detach_BALTIC_OPTION_VOLATILITIES(ByVal entity As BALTIC_OPTION_VOLATILITIES)
		Me.SendPropertyChanging
		entity.ROUTES = Nothing
	End Sub
	
	Private Sub attach_BALTIC_SPOT_RATES(ByVal entity As BALTIC_SPOT_RATES)
		Me.SendPropertyChanging
		entity.ROUTES = Me
	End Sub
	
	Private Sub detach_BALTIC_SPOT_RATES(ByVal entity As BALTIC_SPOT_RATES)
		Me.SendPropertyChanging
		entity.ROUTES = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._BALTIC_FORWARD_RATES = New EntitySet(Of BALTIC_FORWARD_RATES)(AddressOf Me.attach_BALTIC_FORWARD_RATES, AddressOf Me.detach_BALTIC_FORWARD_RATES)
		Me._BALTIC_FTP = New EntitySet(Of BALTIC_FTP)(AddressOf Me.attach_BALTIC_FTP, AddressOf Me.detach_BALTIC_FTP)
		Me._BALTIC_OPTION_VOLATILITIES = New EntitySet(Of BALTIC_OPTION_VOLATILITIES)(AddressOf Me.attach_BALTIC_OPTION_VOLATILITIES, AddressOf Me.detach_BALTIC_OPTION_VOLATILITIES)
		Me._BALTIC_SPOT_RATES = New EntitySet(Of BALTIC_SPOT_RATES)(AddressOf Me.attach_BALTIC_SPOT_RATES, AddressOf Me.detach_BALTIC_SPOT_RATES)
		Me._VESSEL_CLASS = CType(Nothing, EntityRef(Of VESSEL_CLASS))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SMSCLIENTS"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class SMSCLIENTS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _COMPANY As String
	
	Private _FIRST_NAME As String
	
	Private _LAST_NAME As String
	
	Private _MOBILE As String
	
	Private _SMSPROVIDERID As Integer
	
	Private _CAPES As Boolean
	
	Private _PMX As Boolean
	
	Private _RESPONSE As String
	
	Private _SMSPROVIDERS As EntityRef(Of SMSPROVIDERS)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnCOMPANYChanging(value As String)
    End Sub
    Partial Private Sub OnCOMPANYChanged()
    End Sub
    Partial Private Sub OnFIRST_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnFIRST_NAMEChanged()
    End Sub
    Partial Private Sub OnLAST_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnLAST_NAMEChanged()
    End Sub
    Partial Private Sub OnMOBILEChanging(value As String)
    End Sub
    Partial Private Sub OnMOBILEChanged()
    End Sub
    Partial Private Sub OnSMSPROVIDERIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSMSPROVIDERIDChanged()
    End Sub
    Partial Private Sub OnCAPESChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCAPESChanged()
    End Sub
    Partial Private Sub OnPMXChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPMXChanged()
    End Sub
    Partial Private Sub OnRESPONSEChanging(value As String)
    End Sub
    Partial Private Sub OnRESPONSEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COMPANY", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property COMPANY() As String
		Get
			Return Me._COMPANY
		End Get
		Set
			If (String.Equals(Me._COMPANY, value) = false) Then
				Me.OnCOMPANYChanging(value)
				Me.SendPropertyChanging
				Me._COMPANY = value
				Me.SendPropertyChanged("COMPANY")
				Me.OnCOMPANYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIRST_NAME", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property FIRST_NAME() As String
		Get
			Return Me._FIRST_NAME
		End Get
		Set
			If (String.Equals(Me._FIRST_NAME, value) = false) Then
				Me.OnFIRST_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._FIRST_NAME = value
				Me.SendPropertyChanged("FIRST_NAME")
				Me.OnFIRST_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LAST_NAME", DbType:="NVarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property LAST_NAME() As String
		Get
			Return Me._LAST_NAME
		End Get
		Set
			If (String.Equals(Me._LAST_NAME, value) = false) Then
				Me.OnLAST_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._LAST_NAME = value
				Me.SendPropertyChanged("LAST_NAME")
				Me.OnLAST_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MOBILE", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property MOBILE() As String
		Get
			Return Me._MOBILE
		End Get
		Set
			If (String.Equals(Me._MOBILE, value) = false) Then
				Me.OnMOBILEChanging(value)
				Me.SendPropertyChanging
				Me._MOBILE = value
				Me.SendPropertyChanged("MOBILE")
				Me.OnMOBILEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SMSPROVIDERID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property SMSPROVIDERID() As Integer
		Get
			Return Me._SMSPROVIDERID
		End Get
		Set
			If ((Me._SMSPROVIDERID = value)  _
						= false) Then
				If Me._SMSPROVIDERS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSMSPROVIDERIDChanging(value)
				Me.SendPropertyChanging
				Me._SMSPROVIDERID = value
				Me.SendPropertyChanged("SMSPROVIDERID")
				Me.OnSMSPROVIDERIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CAPES", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property CAPES() As Boolean
		Get
			Return Me._CAPES
		End Get
		Set
			If ((Me._CAPES = value)  _
						= false) Then
				Me.OnCAPESChanging(value)
				Me.SendPropertyChanging
				Me._CAPES = value
				Me.SendPropertyChanged("CAPES")
				Me.OnCAPESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PMX", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property PMX() As Boolean
		Get
			Return Me._PMX
		End Get
		Set
			If ((Me._PMX = value)  _
						= false) Then
				Me.OnPMXChanging(value)
				Me.SendPropertyChanging
				Me._PMX = value
				Me.SendPropertyChanged("PMX")
				Me.OnPMXChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RESPONSE", DbType:="NVarChar(MAX)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property RESPONSE() As String
		Get
			Return Me._RESPONSE
		End Get
		Set
			If (String.Equals(Me._RESPONSE, value) = false) Then
				Me.OnRESPONSEChanging(value)
				Me.SendPropertyChanging
				Me._RESPONSE = value
				Me.SendPropertyChanged("RESPONSE")
				Me.OnRESPONSEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SMSPROVIDERS_SMSCLIENTS", Storage:="_SMSPROVIDERS", ThisKey:="SMSPROVIDERID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property SMSPROVIDERS() As SMSPROVIDERS
		Get
			Return Me._SMSPROVIDERS.Entity
		End Get
		Set
			Dim previousValue As SMSPROVIDERS = Me._SMSPROVIDERS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SMSPROVIDERS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SMSPROVIDERS.Entity = Nothing
					previousValue.SMSCLIENTS.Remove(Me)
				End If
				Me._SMSPROVIDERS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SMSCLIENTS.Add(Me)
					Me._SMSPROVIDERID = value.ID
				Else
					Me._SMSPROVIDERID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("SMSPROVIDERS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._SMSPROVIDERS = CType(Nothing, EntityRef(Of SMSPROVIDERS))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SMSPROVIDERS"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class SMSPROVIDERS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _SMSPROVIDER As String
	
	Private _SMSCLIENTS As EntitySet(Of SMSCLIENTS)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnSMSPROVIDERChanging(value As String)
    End Sub
    Partial Private Sub OnSMSPROVIDERChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SMSPROVIDER", DbType:="NChar(15) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property SMSPROVIDER() As String
		Get
			Return Me._SMSPROVIDER
		End Get
		Set
			If (String.Equals(Me._SMSPROVIDER, value) = false) Then
				Me.OnSMSPROVIDERChanging(value)
				Me.SendPropertyChanging
				Me._SMSPROVIDER = value
				Me.SendPropertyChanged("SMSPROVIDER")
				Me.OnSMSPROVIDERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SMSPROVIDERS_SMSCLIENTS", Storage:="_SMSCLIENTS", ThisKey:="ID", OtherKey:="SMSPROVIDERID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3, EmitDefaultValue:=false)>  _
	Public Property SMSCLIENTS() As EntitySet(Of SMSCLIENTS)
		Get
			If (Me.serializing  _
						AndAlso (Me._SMSCLIENTS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._SMSCLIENTS
		End Get
		Set
			Me._SMSCLIENTS.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SMSCLIENTS(ByVal entity As SMSCLIENTS)
		Me.SendPropertyChanging
		entity.SMSPROVIDERS = Me
	End Sub
	
	Private Sub detach_SMSCLIENTS(ByVal entity As SMSCLIENTS)
		Me.SendPropertyChanging
		entity.SMSPROVIDERS = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._SMSCLIENTS = New EntitySet(Of SMSCLIENTS)(AddressOf Me.attach_SMSCLIENTS, AddressOf Me.detach_SMSCLIENTS)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TRADE_CLASSES"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class TRADE_CLASSES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TRADE_CLASS_SHORT As Char
	
	Private _TRADE_CLASS As String
	
	Private _TRADE_CLASS_DES As String
	
	Private _VESSEL_CLASS As EntitySet(Of VESSEL_CLASS)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanging(value As Char)
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanged()
    End Sub
    Partial Private Sub OnTRADE_CLASSChanging(value As String)
    End Sub
    Partial Private Sub OnTRADE_CLASSChanged()
    End Sub
    Partial Private Sub OnTRADE_CLASS_DESChanging(value As String)
    End Sub
    Partial Private Sub OnTRADE_CLASS_DESChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_CLASS_SHORT", DbType:="Char(1) NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property TRADE_CLASS_SHORT() As Char
		Get
			Return Me._TRADE_CLASS_SHORT
		End Get
		Set
			If ((Me._TRADE_CLASS_SHORT = value)  _
						= false) Then
				Me.OnTRADE_CLASS_SHORTChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_CLASS_SHORT = value
				Me.SendPropertyChanged("TRADE_CLASS_SHORT")
				Me.OnTRADE_CLASS_SHORTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_CLASS", DbType:="VarChar(10) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property TRADE_CLASS() As String
		Get
			Return Me._TRADE_CLASS
		End Get
		Set
			If (String.Equals(Me._TRADE_CLASS, value) = false) Then
				Me.OnTRADE_CLASSChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_CLASS = value
				Me.SendPropertyChanged("TRADE_CLASS")
				Me.OnTRADE_CLASSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_CLASS_DES", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property TRADE_CLASS_DES() As String
		Get
			Return Me._TRADE_CLASS_DES
		End Get
		Set
			If (String.Equals(Me._TRADE_CLASS_DES, value) = false) Then
				Me.OnTRADE_CLASS_DESChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_CLASS_DES = value
				Me.SendPropertyChanged("TRADE_CLASS_DES")
				Me.OnTRADE_CLASS_DESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASSES_VESSEL_CLASS", Storage:="_VESSEL_CLASS", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="DRYWET"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4, EmitDefaultValue:=false)>  _
	Public Property VESSEL_CLASS() As EntitySet(Of VESSEL_CLASS)
		Get
			If (Me.serializing  _
						AndAlso (Me._VESSEL_CLASS.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._VESSEL_CLASS
		End Get
		Set
			Me._VESSEL_CLASS.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_VESSEL_CLASS(ByVal entity As VESSEL_CLASS)
		Me.SendPropertyChanging
		entity.TRADE_CLASSES = Me
	End Sub
	
	Private Sub detach_VESSEL_CLASS(ByVal entity As VESSEL_CLASS)
		Me.SendPropertyChanging
		entity.TRADE_CLASSES = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._VESSEL_CLASS = New EntitySet(Of VESSEL_CLASS)(AddressOf Me.attach_VESSEL_CLASS, AddressOf Me.detach_VESSEL_CLASS)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BALTIC_SPOT_RATES_DIFF"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class BALTIC_SPOT_RATES_DIFF
	
	Private _ROUTE_ID As Integer
	
	Private _FIXING_DATE As Date
	
	Private _FIXING As Double
	
	Private _PDATE As System.Nullable(Of Date)
	
	Private _PREV_FIXING As System.Nullable(Of Double)
	
	Private _FIXING_DIFF As System.Nullable(Of Double)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				Me._ROUTE_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING_DATE", DbType:="DateTime NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property FIXING_DATE() As Date
		Get
			Return Me._FIXING_DATE
		End Get
		Set
			If ((Me._FIXING_DATE = value)  _
						= false) Then
				Me._FIXING_DATE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property FIXING() As Double
		Get
			Return Me._FIXING
		End Get
		Set
			If ((Me._FIXING = value)  _
						= false) Then
				Me._FIXING = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PDATE", DbType:="DateTime"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property PDATE() As System.Nullable(Of Date)
		Get
			Return Me._PDATE
		End Get
		Set
			If (Me._PDATE.Equals(value) = false) Then
				Me._PDATE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PREV_FIXING", DbType:="Float"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property PREV_FIXING() As System.Nullable(Of Double)
		Get
			Return Me._PREV_FIXING
		End Get
		Set
			If (Me._PREV_FIXING.Equals(value) = false) Then
				Me._PREV_FIXING = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING_DIFF", DbType:="Float"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property FIXING_DIFF() As System.Nullable(Of Double)
		Get
			Return Me._FIXING_DIFF
		End Get
		Set
			If (Me._FIXING_DIFF.Equals(value) = false) Then
				Me._FIXING_DIFF = value
			End If
		End Set
	End Property
End Class
