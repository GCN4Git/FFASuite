'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18034
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="ARTB")>  _
Partial Public Class DB_ARTB_NETDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertWET_FLAT_RATE(instance As WET_FLAT_RATE)
    End Sub
  Partial Private Sub UpdateWET_FLAT_RATE(instance As WET_FLAT_RATE)
    End Sub
  Partial Private Sub DeleteWET_FLAT_RATE(instance As WET_FLAT_RATE)
    End Sub
  Partial Private Sub InsertACCOUNT_TYPE(instance As ACCOUNT_TYPE)
    End Sub
  Partial Private Sub UpdateACCOUNT_TYPE(instance As ACCOUNT_TYPE)
    End Sub
  Partial Private Sub DeleteACCOUNT_TYPE(instance As ACCOUNT_TYPE)
    End Sub
  Partial Private Sub InsertACCOUNTS_ADMIN(instance As ACCOUNTS_ADMIN)
    End Sub
  Partial Private Sub UpdateACCOUNTS_ADMIN(instance As ACCOUNTS_ADMIN)
    End Sub
  Partial Private Sub DeleteACCOUNTS_ADMIN(instance As ACCOUNTS_ADMIN)
    End Sub
  Partial Private Sub InsertACCOUNTS_CONTACT(instance As ACCOUNTS_CONTACT)
    End Sub
  Partial Private Sub UpdateACCOUNTS_CONTACT(instance As ACCOUNTS_CONTACT)
    End Sub
  Partial Private Sub DeleteACCOUNTS_CONTACT(instance As ACCOUNTS_CONTACT)
    End Sub
  Partial Private Sub InsertARTB_SOUND(instance As ARTB_SOUND)
    End Sub
  Partial Private Sub UpdateARTB_SOUND(instance As ARTB_SOUND)
    End Sub
  Partial Private Sub DeleteARTB_SOUND(instance As ARTB_SOUND)
    End Sub
  Partial Private Sub InsertBALTIC_FORWARD_RATE(instance As BALTIC_FORWARD_RATE)
    End Sub
  Partial Private Sub UpdateBALTIC_FORWARD_RATE(instance As BALTIC_FORWARD_RATE)
    End Sub
  Partial Private Sub DeleteBALTIC_FORWARD_RATE(instance As BALTIC_FORWARD_RATE)
    End Sub
  Partial Private Sub InsertBALTIC_FTP(instance As BALTIC_FTP)
    End Sub
  Partial Private Sub UpdateBALTIC_FTP(instance As BALTIC_FTP)
    End Sub
  Partial Private Sub DeleteBALTIC_FTP(instance As BALTIC_FTP)
    End Sub
  Partial Private Sub InsertBALTIC_FTP_SETTLEMENT(instance As BALTIC_FTP_SETTLEMENT)
    End Sub
  Partial Private Sub UpdateBALTIC_FTP_SETTLEMENT(instance As BALTIC_FTP_SETTLEMENT)
    End Sub
  Partial Private Sub DeleteBALTIC_FTP_SETTLEMENT(instance As BALTIC_FTP_SETTLEMENT)
    End Sub
  Partial Private Sub InsertBALTIC_OPTION_VOLATILITy(instance As BALTIC_OPTION_VOLATILITy)
    End Sub
  Partial Private Sub UpdateBALTIC_OPTION_VOLATILITy(instance As BALTIC_OPTION_VOLATILITy)
    End Sub
  Partial Private Sub DeleteBALTIC_OPTION_VOLATILITy(instance As BALTIC_OPTION_VOLATILITy)
    End Sub
  Partial Private Sub InsertBALTIC_SPOT_RATE(instance As BALTIC_SPOT_RATE)
    End Sub
  Partial Private Sub UpdateBALTIC_SPOT_RATE(instance As BALTIC_SPOT_RATE)
    End Sub
  Partial Private Sub DeleteBALTIC_SPOT_RATE(instance As BALTIC_SPOT_RATE)
    End Sub
  Partial Private Sub InsertBROKER_DESK_TRADE_CLASS(instance As BROKER_DESK_TRADE_CLASS)
    End Sub
  Partial Private Sub UpdateBROKER_DESK_TRADE_CLASS(instance As BROKER_DESK_TRADE_CLASS)
    End Sub
  Partial Private Sub DeleteBROKER_DESK_TRADE_CLASS(instance As BROKER_DESK_TRADE_CLASS)
    End Sub
  Partial Private Sub InsertCCY(instance As CCY)
    End Sub
  Partial Private Sub UpdateCCY(instance As CCY)
    End Sub
  Partial Private Sub DeleteCCY(instance As CCY)
    End Sub
  Partial Private Sub InsertCONTACT_TYPE(instance As CONTACT_TYPE)
    End Sub
  Partial Private Sub UpdateCONTACT_TYPE(instance As CONTACT_TYPE)
    End Sub
  Partial Private Sub DeleteCONTACT_TYPE(instance As CONTACT_TYPE)
    End Sub
  Partial Private Sub InsertCONTACT(instance As CONTACT)
    End Sub
  Partial Private Sub UpdateCONTACT(instance As CONTACT)
    End Sub
  Partial Private Sub DeleteCONTACT(instance As CONTACT)
    End Sub
  Partial Private Sub InsertCONTRACT_SERy(instance As CONTRACT_SERy)
    End Sub
  Partial Private Sub UpdateCONTRACT_SERy(instance As CONTRACT_SERy)
    End Sub
  Partial Private Sub DeleteCONTRACT_SERy(instance As CONTRACT_SERy)
    End Sub
  Partial Private Sub InsertCOUNTERPARTY_LIMIT(instance As COUNTERPARTY_LIMIT)
    End Sub
  Partial Private Sub UpdateCOUNTERPARTY_LIMIT(instance As COUNTERPARTY_LIMIT)
    End Sub
  Partial Private Sub DeleteCOUNTERPARTY_LIMIT(instance As COUNTERPARTY_LIMIT)
    End Sub
  Partial Private Sub InsertCOUNTRy(instance As COUNTRy)
    End Sub
  Partial Private Sub UpdateCOUNTRy(instance As COUNTRy)
    End Sub
  Partial Private Sub DeleteCOUNTRy(instance As COUNTRy)
    End Sub
  Partial Private Sub InsertDESK_EXCHANGE(instance As DESK_EXCHANGE)
    End Sub
  Partial Private Sub UpdateDESK_EXCHANGE(instance As DESK_EXCHANGE)
    End Sub
  Partial Private Sub DeleteDESK_EXCHANGE(instance As DESK_EXCHANGE)
    End Sub
  Partial Private Sub InsertDESK_EXCHANGES_CLEARER(instance As DESK_EXCHANGES_CLEARER)
    End Sub
  Partial Private Sub UpdateDESK_EXCHANGES_CLEARER(instance As DESK_EXCHANGES_CLEARER)
    End Sub
  Partial Private Sub DeleteDESK_EXCHANGES_CLEARER(instance As DESK_EXCHANGES_CLEARER)
    End Sub
  Partial Private Sub InsertDESK_QUALIFIER(instance As DESK_QUALIFIER)
    End Sub
  Partial Private Sub UpdateDESK_QUALIFIER(instance As DESK_QUALIFIER)
    End Sub
  Partial Private Sub DeleteDESK_QUALIFIER(instance As DESK_QUALIFIER)
    End Sub
  Partial Private Sub InsertDESK_TRADE_CONFO(instance As DESK_TRADE_CONFO)
    End Sub
  Partial Private Sub UpdateDESK_TRADE_CONFO(instance As DESK_TRADE_CONFO)
    End Sub
  Partial Private Sub DeleteDESK_TRADE_CONFO(instance As DESK_TRADE_CONFO)
    End Sub
  Partial Private Sub InsertDESK_TRADER_VOICE(instance As DESK_TRADER_VOICE)
    End Sub
  Partial Private Sub UpdateDESK_TRADER_VOICE(instance As DESK_TRADER_VOICE)
    End Sub
  Partial Private Sub DeleteDESK_TRADER_VOICE(instance As DESK_TRADER_VOICE)
    End Sub
  Partial Private Sub InsertDESK_TRADERS_IM_SUBSCRIPTION(instance As DESK_TRADERS_IM_SUBSCRIPTION)
    End Sub
  Partial Private Sub UpdateDESK_TRADERS_IM_SUBSCRIPTION(instance As DESK_TRADERS_IM_SUBSCRIPTION)
    End Sub
  Partial Private Sub DeleteDESK_TRADERS_IM_SUBSCRIPTION(instance As DESK_TRADERS_IM_SUBSCRIPTION)
    End Sub
  Partial Private Sub InsertEXCHANGE_HOLIDAY(instance As EXCHANGE_HOLIDAY)
    End Sub
  Partial Private Sub UpdateEXCHANGE_HOLIDAY(instance As EXCHANGE_HOLIDAY)
    End Sub
  Partial Private Sub DeleteEXCHANGE_HOLIDAY(instance As EXCHANGE_HOLIDAY)
    End Sub
  Partial Private Sub InsertEXCHANGE_ROUTE_PERIOD(instance As EXCHANGE_ROUTE_PERIOD)
    End Sub
  Partial Private Sub UpdateEXCHANGE_ROUTE_PERIOD(instance As EXCHANGE_ROUTE_PERIOD)
    End Sub
  Partial Private Sub DeleteEXCHANGE_ROUTE_PERIOD(instance As EXCHANGE_ROUTE_PERIOD)
    End Sub
  Partial Private Sub InsertEXCHANGE_ROUTE(instance As EXCHANGE_ROUTE)
    End Sub
  Partial Private Sub UpdateEXCHANGE_ROUTE(instance As EXCHANGE_ROUTE)
    End Sub
  Partial Private Sub DeleteEXCHANGE_ROUTE(instance As EXCHANGE_ROUTE)
    End Sub
  Partial Private Sub InsertEXCHANGE(instance As EXCHANGE)
    End Sub
  Partial Private Sub UpdateEXCHANGE(instance As EXCHANGE)
    End Sub
  Partial Private Sub DeleteEXCHANGE(instance As EXCHANGE)
    End Sub
  Partial Private Sub InsertHOLIDAY(instance As HOLIDAY)
    End Sub
  Partial Private Sub UpdateHOLIDAY(instance As HOLIDAY)
    End Sub
  Partial Private Sub DeleteHOLIDAY(instance As HOLIDAY)
    End Sub
  Partial Private Sub InsertIM_CLIENT(instance As IM_CLIENT)
    End Sub
  Partial Private Sub UpdateIM_CLIENT(instance As IM_CLIENT)
    End Sub
  Partial Private Sub DeleteIM_CLIENT(instance As IM_CLIENT)
    End Sub
  Partial Private Sub InsertIM_GATEWAY(instance As IM_GATEWAY)
    End Sub
  Partial Private Sub UpdateIM_GATEWAY(instance As IM_GATEWAY)
    End Sub
  Partial Private Sub DeleteIM_GATEWAY(instance As IM_GATEWAY)
    End Sub
  Partial Private Sub InsertIM_ORDERSFFA(instance As IM_ORDERSFFA)
    End Sub
  Partial Private Sub UpdateIM_ORDERSFFA(instance As IM_ORDERSFFA)
    End Sub
  Partial Private Sub DeleteIM_ORDERSFFA(instance As IM_ORDERSFFA)
    End Sub
  Partial Private Sub InsertIM_SERVER(instance As IM_SERVER)
    End Sub
  Partial Private Sub UpdateIM_SERVER(instance As IM_SERVER)
    End Sub
  Partial Private Sub DeleteIM_SERVER(instance As IM_SERVER)
    End Sub
  Partial Private Sub InsertISDA_TYPE(instance As ISDA_TYPE)
    End Sub
  Partial Private Sub UpdateISDA_TYPE(instance As ISDA_TYPE)
    End Sub
  Partial Private Sub DeleteISDA_TYPE(instance As ISDA_TYPE)
    End Sub
  Partial Private Sub InsertLAST_DAY_RULE(instance As LAST_DAY_RULE)
    End Sub
  Partial Private Sub UpdateLAST_DAY_RULE(instance As LAST_DAY_RULE)
    End Sub
  Partial Private Sub DeleteLAST_DAY_RULE(instance As LAST_DAY_RULE)
    End Sub
  Partial Private Sub InsertLAST_DAY_RULE_MONTH(instance As LAST_DAY_RULE_MONTH)
    End Sub
  Partial Private Sub UpdateLAST_DAY_RULE_MONTH(instance As LAST_DAY_RULE_MONTH)
    End Sub
  Partial Private Sub DeleteLAST_DAY_RULE_MONTH(instance As LAST_DAY_RULE_MONTH)
    End Sub
  Partial Private Sub InsertLAYOUT(instance As LAYOUT)
    End Sub
  Partial Private Sub UpdateLAYOUT(instance As LAYOUT)
    End Sub
  Partial Private Sub DeleteLAYOUT(instance As LAYOUT)
    End Sub
  Partial Private Sub InsertORDER_GOOD_TILL(instance As ORDER_GOOD_TILL)
    End Sub
  Partial Private Sub UpdateORDER_GOOD_TILL(instance As ORDER_GOOD_TILL)
    End Sub
  Partial Private Sub DeleteORDER_GOOD_TILL(instance As ORDER_GOOD_TILL)
    End Sub
  Partial Private Sub InsertORDER_STATUS(instance As ORDER_STATUS)
    End Sub
  Partial Private Sub UpdateORDER_STATUS(instance As ORDER_STATUS)
    End Sub
  Partial Private Sub DeleteORDER_STATUS(instance As ORDER_STATUS)
    End Sub
  Partial Private Sub InsertORDERS_FFA_EXCHANGE(instance As ORDERS_FFA_EXCHANGE)
    End Sub
  Partial Private Sub UpdateORDERS_FFA_EXCHANGE(instance As ORDERS_FFA_EXCHANGE)
    End Sub
  Partial Private Sub DeleteORDERS_FFA_EXCHANGE(instance As ORDERS_FFA_EXCHANGE)
    End Sub
  Partial Private Sub InsertORDERS_FFA_OPTION(instance As ORDERS_FFA_OPTION)
    End Sub
  Partial Private Sub UpdateORDERS_FFA_OPTION(instance As ORDERS_FFA_OPTION)
    End Sub
  Partial Private Sub DeleteORDERS_FFA_OPTION(instance As ORDERS_FFA_OPTION)
    End Sub
  Partial Private Sub InsertORDERS_FFA_SPREAD(instance As ORDERS_FFA_SPREAD)
    End Sub
  Partial Private Sub UpdateORDERS_FFA_SPREAD(instance As ORDERS_FFA_SPREAD)
    End Sub
  Partial Private Sub DeleteORDERS_FFA_SPREAD(instance As ORDERS_FFA_SPREAD)
    End Sub
  Partial Private Sub InsertPERIOD_LIMIT_DESCR(instance As PERIOD_LIMIT_DESCR)
    End Sub
  Partial Private Sub UpdatePERIOD_LIMIT_DESCR(instance As PERIOD_LIMIT_DESCR)
    End Sub
  Partial Private Sub DeletePERIOD_LIMIT_DESCR(instance As PERIOD_LIMIT_DESCR)
    End Sub
  Partial Private Sub InsertQUANTITY_QUALIFIER(instance As QUANTITY_QUALIFIER)
    End Sub
  Partial Private Sub UpdateQUANTITY_QUALIFIER(instance As QUANTITY_QUALIFIER)
    End Sub
  Partial Private Sub DeleteQUANTITY_QUALIFIER(instance As QUANTITY_QUALIFIER)
    End Sub
  Partial Private Sub InsertQUANTITY_TYPE(instance As QUANTITY_TYPE)
    End Sub
  Partial Private Sub UpdateQUANTITY_TYPE(instance As QUANTITY_TYPE)
    End Sub
  Partial Private Sub DeleteQUANTITY_TYPE(instance As QUANTITY_TYPE)
    End Sub
  Partial Private Sub InsertQUOTE_TYPE(instance As QUOTE_TYPE)
    End Sub
  Partial Private Sub UpdateQUOTE_TYPE(instance As QUOTE_TYPE)
    End Sub
  Partial Private Sub DeleteQUOTE_TYPE(instance As QUOTE_TYPE)
    End Sub
  Partial Private Sub InsertROUTE(instance As ROUTE)
    End Sub
  Partial Private Sub UpdateROUTE(instance As ROUTE)
    End Sub
  Partial Private Sub DeleteROUTE(instance As ROUTE)
    End Sub
  Partial Private Sub InsertSHOW_NAME_TYPE(instance As SHOW_NAME_TYPE)
    End Sub
  Partial Private Sub UpdateSHOW_NAME_TYPE(instance As SHOW_NAME_TYPE)
    End Sub
  Partial Private Sub DeleteSHOW_NAME_TYPE(instance As SHOW_NAME_TYPE)
    End Sub
  Partial Private Sub InsertSMSINDEX(instance As SMSINDEX)
    End Sub
  Partial Private Sub UpdateSMSINDEX(instance As SMSINDEX)
    End Sub
  Partial Private Sub DeleteSMSINDEX(instance As SMSINDEX)
    End Sub
  Partial Private Sub InsertTEST(instance As TEST)
    End Sub
  Partial Private Sub UpdateTEST(instance As TEST)
    End Sub
  Partial Private Sub DeleteTEST(instance As TEST)
    End Sub
  Partial Private Sub InsertTRADE_AUTHORITy(instance As TRADE_AUTHORITy)
    End Sub
  Partial Private Sub UpdateTRADE_AUTHORITy(instance As TRADE_AUTHORITy)
    End Sub
  Partial Private Sub DeleteTRADE_AUTHORITy(instance As TRADE_AUTHORITy)
    End Sub
  Partial Private Sub InsertTRADE_CLASS_EXCHANGE(instance As TRADE_CLASS_EXCHANGE)
    End Sub
  Partial Private Sub UpdateTRADE_CLASS_EXCHANGE(instance As TRADE_CLASS_EXCHANGE)
    End Sub
  Partial Private Sub DeleteTRADE_CLASS_EXCHANGE(instance As TRADE_CLASS_EXCHANGE)
    End Sub
  Partial Private Sub InsertTRADE_CLASS_RATIO_SPREAD(instance As TRADE_CLASS_RATIO_SPREAD)
    End Sub
  Partial Private Sub UpdateTRADE_CLASS_RATIO_SPREAD(instance As TRADE_CLASS_RATIO_SPREAD)
    End Sub
  Partial Private Sub DeleteTRADE_CLASS_RATIO_SPREAD(instance As TRADE_CLASS_RATIO_SPREAD)
    End Sub
  Partial Private Sub InsertTRADE_CLASS(instance As TRADE_CLASS)
    End Sub
  Partial Private Sub UpdateTRADE_CLASS(instance As TRADE_CLASS)
    End Sub
  Partial Private Sub DeleteTRADE_CLASS(instance As TRADE_CLASS)
    End Sub
  Partial Private Sub InsertTRADES_FFA(instance As TRADES_FFA)
    End Sub
  Partial Private Sub UpdateTRADES_FFA(instance As TRADES_FFA)
    End Sub
  Partial Private Sub DeleteTRADES_FFA(instance As TRADES_FFA)
    End Sub
  Partial Private Sub InsertVESSEL_CLASS(instance As VESSEL_CLASS)
    End Sub
  Partial Private Sub UpdateVESSEL_CLASS(instance As VESSEL_CLASS)
    End Sub
  Partial Private Sub DeleteVESSEL_CLASS(instance As VESSEL_CLASS)
    End Sub
  Partial Private Sub InsertVESSEL_CLASS_SPREAD_MARGIN(instance As VESSEL_CLASS_SPREAD_MARGIN)
    End Sub
  Partial Private Sub UpdateVESSEL_CLASS_SPREAD_MARGIN(instance As VESSEL_CLASS_SPREAD_MARGIN)
    End Sub
  Partial Private Sub DeleteVESSEL_CLASS_SPREAD_MARGIN(instance As VESSEL_CLASS_SPREAD_MARGIN)
    End Sub
  Partial Private Sub InsertORDERS_FFA(instance As ORDERS_FFA)
    End Sub
  Partial Private Sub UpdateORDERS_FFA(instance As ORDERS_FFA)
    End Sub
  Partial Private Sub DeleteORDERS_FFA(instance As ORDERS_FFA)
    End Sub
  Partial Private Sub InsertACCOUNT_DESK(instance As ACCOUNT_DESK)
    End Sub
  Partial Private Sub UpdateACCOUNT_DESK(instance As ACCOUNT_DESK)
    End Sub
  Partial Private Sub DeleteACCOUNT_DESK(instance As ACCOUNT_DESK)
    End Sub
  Partial Private Sub InsertSERVER_INFO(instance As SERVER_INFO)
    End Sub
  Partial Private Sub UpdateSERVER_INFO(instance As SERVER_INFO)
    End Sub
  Partial Private Sub DeleteSERVER_INFO(instance As SERVER_INFO)
    End Sub
  Partial Private Sub InsertDESK_TRADER(instance As DESK_TRADER)
    End Sub
  Partial Private Sub UpdateDESK_TRADER(instance As DESK_TRADER)
    End Sub
  Partial Private Sub DeleteDESK_TRADER(instance As DESK_TRADER)
    End Sub
  Partial Private Sub InsertDESK_TRADE_CLASS(instance As DESK_TRADE_CLASS)
    End Sub
  Partial Private Sub UpdateDESK_TRADE_CLASS(instance As DESK_TRADE_CLASS)
    End Sub
  Partial Private Sub DeleteDESK_TRADE_CLASS(instance As DESK_TRADE_CLASS)
    End Sub
  Partial Private Sub InsertACCOUNT(instance As ACCOUNT)
    End Sub
  Partial Private Sub UpdateACCOUNT(instance As ACCOUNT)
    End Sub
  Partial Private Sub DeleteACCOUNT(instance As ACCOUNT)
    End Sub
  Partial Private Sub InsertBALTIC_MONTHLY_SETTLEMENT(instance As BALTIC_MONTHLY_SETTLEMENT)
    End Sub
  Partial Private Sub UpdateBALTIC_MONTHLY_SETTLEMENT(instance As BALTIC_MONTHLY_SETTLEMENT)
    End Sub
  Partial Private Sub DeleteBALTIC_MONTHLY_SETTLEMENT(instance As BALTIC_MONTHLY_SETTLEMENT)
    End Sub
  Partial Private Sub InsertINTEREST_RATE(instance As INTEREST_RATE)
    End Sub
  Partial Private Sub UpdateINTEREST_RATE(instance As INTEREST_RATE)
    End Sub
  Partial Private Sub DeleteINTEREST_RATE(instance As INTEREST_RATE)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.ArtB_Class_Library.My.MySettings.Default.ARTBConnectionString2, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property WET_FLAT_RATEs() As System.Data.Linq.Table(Of WET_FLAT_RATE)
		Get
			Return Me.GetTable(Of WET_FLAT_RATE)
		End Get
	End Property
	
	Public ReadOnly Property ACCOUNT_TYPEs() As System.Data.Linq.Table(Of ACCOUNT_TYPE)
		Get
			Return Me.GetTable(Of ACCOUNT_TYPE)
		End Get
	End Property
	
	Public ReadOnly Property ACCOUNTS_ADMINs() As System.Data.Linq.Table(Of ACCOUNTS_ADMIN)
		Get
			Return Me.GetTable(Of ACCOUNTS_ADMIN)
		End Get
	End Property
	
	Public ReadOnly Property ACCOUNTS_CONTACTs() As System.Data.Linq.Table(Of ACCOUNTS_CONTACT)
		Get
			Return Me.GetTable(Of ACCOUNTS_CONTACT)
		End Get
	End Property
	
	Public ReadOnly Property ARTB_SOUNDs() As System.Data.Linq.Table(Of ARTB_SOUND)
		Get
			Return Me.GetTable(Of ARTB_SOUND)
		End Get
	End Property
	
	Public ReadOnly Property BALTIC_FFA_IMPORTs() As System.Data.Linq.Table(Of BALTIC_FFA_IMPORT)
		Get
			Return Me.GetTable(Of BALTIC_FFA_IMPORT)
		End Get
	End Property
	
	Public ReadOnly Property BALTIC_FORWARD_RATEs() As System.Data.Linq.Table(Of BALTIC_FORWARD_RATE)
		Get
			Return Me.GetTable(Of BALTIC_FORWARD_RATE)
		End Get
	End Property
	
	Public ReadOnly Property BALTIC_FTPs() As System.Data.Linq.Table(Of BALTIC_FTP)
		Get
			Return Me.GetTable(Of BALTIC_FTP)
		End Get
	End Property
	
	Public ReadOnly Property BALTIC_FTP_SETTLEMENTs() As System.Data.Linq.Table(Of BALTIC_FTP_SETTLEMENT)
		Get
			Return Me.GetTable(Of BALTIC_FTP_SETTLEMENT)
		End Get
	End Property
	
	Public ReadOnly Property BALTIC_OPTION_VOLATILITies() As System.Data.Linq.Table(Of BALTIC_OPTION_VOLATILITy)
		Get
			Return Me.GetTable(Of BALTIC_OPTION_VOLATILITy)
		End Get
	End Property
	
	Public ReadOnly Property BALTIC_SPOT_RATEs() As System.Data.Linq.Table(Of BALTIC_SPOT_RATE)
		Get
			Return Me.GetTable(Of BALTIC_SPOT_RATE)
		End Get
	End Property
	
	Public ReadOnly Property BROKER_DESK_TRADE_CLASSes() As System.Data.Linq.Table(Of BROKER_DESK_TRADE_CLASS)
		Get
			Return Me.GetTable(Of BROKER_DESK_TRADE_CLASS)
		End Get
	End Property
	
	Public ReadOnly Property CCies() As System.Data.Linq.Table(Of CCY)
		Get
			Return Me.GetTable(Of CCY)
		End Get
	End Property
	
	Public ReadOnly Property CONTACT_TYPEs() As System.Data.Linq.Table(Of CONTACT_TYPE)
		Get
			Return Me.GetTable(Of CONTACT_TYPE)
		End Get
	End Property
	
	Public ReadOnly Property CONTACTs() As System.Data.Linq.Table(Of CONTACT)
		Get
			Return Me.GetTable(Of CONTACT)
		End Get
	End Property
	
	Public ReadOnly Property CONTRACT_SERies() As System.Data.Linq.Table(Of CONTRACT_SERy)
		Get
			Return Me.GetTable(Of CONTRACT_SERy)
		End Get
	End Property
	
	Public ReadOnly Property COUNTERPARTY_LIMITs() As System.Data.Linq.Table(Of COUNTERPARTY_LIMIT)
		Get
			Return Me.GetTable(Of COUNTERPARTY_LIMIT)
		End Get
	End Property
	
	Public ReadOnly Property COUNTRies() As System.Data.Linq.Table(Of COUNTRy)
		Get
			Return Me.GetTable(Of COUNTRy)
		End Get
	End Property
	
	Public ReadOnly Property DESK_EXCHANGEs() As System.Data.Linq.Table(Of DESK_EXCHANGE)
		Get
			Return Me.GetTable(Of DESK_EXCHANGE)
		End Get
	End Property
	
	Public ReadOnly Property DESK_EXCHANGES_CLEARERs() As System.Data.Linq.Table(Of DESK_EXCHANGES_CLEARER)
		Get
			Return Me.GetTable(Of DESK_EXCHANGES_CLEARER)
		End Get
	End Property
	
	Public ReadOnly Property DESK_QUALIFIERs() As System.Data.Linq.Table(Of DESK_QUALIFIER)
		Get
			Return Me.GetTable(Of DESK_QUALIFIER)
		End Get
	End Property
	
	Public ReadOnly Property DESK_TRADE_CONFOs() As System.Data.Linq.Table(Of DESK_TRADE_CONFO)
		Get
			Return Me.GetTable(Of DESK_TRADE_CONFO)
		End Get
	End Property
	
	Public ReadOnly Property DESK_TRADER_VOICEs() As System.Data.Linq.Table(Of DESK_TRADER_VOICE)
		Get
			Return Me.GetTable(Of DESK_TRADER_VOICE)
		End Get
	End Property
	
	Public ReadOnly Property DESK_TRADERS_IM_SUBSCRIPTIONs() As System.Data.Linq.Table(Of DESK_TRADERS_IM_SUBSCRIPTION)
		Get
			Return Me.GetTable(Of DESK_TRADERS_IM_SUBSCRIPTION)
		End Get
	End Property
	
	Public ReadOnly Property EXCHANGE_HOLIDAYs() As System.Data.Linq.Table(Of EXCHANGE_HOLIDAY)
		Get
			Return Me.GetTable(Of EXCHANGE_HOLIDAY)
		End Get
	End Property
	
	Public ReadOnly Property EXCHANGE_ROUTE_PERIODs() As System.Data.Linq.Table(Of EXCHANGE_ROUTE_PERIOD)
		Get
			Return Me.GetTable(Of EXCHANGE_ROUTE_PERIOD)
		End Get
	End Property
	
	Public ReadOnly Property EXCHANGE_ROUTEs() As System.Data.Linq.Table(Of EXCHANGE_ROUTE)
		Get
			Return Me.GetTable(Of EXCHANGE_ROUTE)
		End Get
	End Property
	
	Public ReadOnly Property EXCHANGEs() As System.Data.Linq.Table(Of EXCHANGE)
		Get
			Return Me.GetTable(Of EXCHANGE)
		End Get
	End Property
	
	Public ReadOnly Property FFAFIXINGs() As System.Data.Linq.Table(Of FFAFIXING)
		Get
			Return Me.GetTable(Of FFAFIXING)
		End Get
	End Property
	
	Public ReadOnly Property HOLIDAYs() As System.Data.Linq.Table(Of HOLIDAY)
		Get
			Return Me.GetTable(Of HOLIDAY)
		End Get
	End Property
	
	Public ReadOnly Property IM_CLIENTs() As System.Data.Linq.Table(Of IM_CLIENT)
		Get
			Return Me.GetTable(Of IM_CLIENT)
		End Get
	End Property
	
	Public ReadOnly Property IM_GATEWAYs() As System.Data.Linq.Table(Of IM_GATEWAY)
		Get
			Return Me.GetTable(Of IM_GATEWAY)
		End Get
	End Property
	
	Public ReadOnly Property IM_ORDERSFFAs() As System.Data.Linq.Table(Of IM_ORDERSFFA)
		Get
			Return Me.GetTable(Of IM_ORDERSFFA)
		End Get
	End Property
	
	Public ReadOnly Property IM_SERVERs() As System.Data.Linq.Table(Of IM_SERVER)
		Get
			Return Me.GetTable(Of IM_SERVER)
		End Get
	End Property
	
	Public ReadOnly Property ISDA_TYPEs() As System.Data.Linq.Table(Of ISDA_TYPE)
		Get
			Return Me.GetTable(Of ISDA_TYPE)
		End Get
	End Property
	
	Public ReadOnly Property LAST_DAY_RULEs() As System.Data.Linq.Table(Of LAST_DAY_RULE)
		Get
			Return Me.GetTable(Of LAST_DAY_RULE)
		End Get
	End Property
	
	Public ReadOnly Property LAST_DAY_RULE_MONTHs() As System.Data.Linq.Table(Of LAST_DAY_RULE_MONTH)
		Get
			Return Me.GetTable(Of LAST_DAY_RULE_MONTH)
		End Get
	End Property
	
	Public ReadOnly Property LAYOUTs() As System.Data.Linq.Table(Of LAYOUT)
		Get
			Return Me.GetTable(Of LAYOUT)
		End Get
	End Property
	
	Public ReadOnly Property ORDER_GOOD_TILLs() As System.Data.Linq.Table(Of ORDER_GOOD_TILL)
		Get
			Return Me.GetTable(Of ORDER_GOOD_TILL)
		End Get
	End Property
	
	Public ReadOnly Property ORDER_STATUS() As System.Data.Linq.Table(Of ORDER_STATUS)
		Get
			Return Me.GetTable(Of ORDER_STATUS)
		End Get
	End Property
	
	Public ReadOnly Property ORDERS_FFA_EXCHANGEs() As System.Data.Linq.Table(Of ORDERS_FFA_EXCHANGE)
		Get
			Return Me.GetTable(Of ORDERS_FFA_EXCHANGE)
		End Get
	End Property
	
	Public ReadOnly Property ORDERS_FFA_OPTIONs() As System.Data.Linq.Table(Of ORDERS_FFA_OPTION)
		Get
			Return Me.GetTable(Of ORDERS_FFA_OPTION)
		End Get
	End Property
	
	Public ReadOnly Property ORDERS_FFA_OPTIONS_EXCHANGEs() As System.Data.Linq.Table(Of ORDERS_FFA_OPTIONS_EXCHANGE)
		Get
			Return Me.GetTable(Of ORDERS_FFA_OPTIONS_EXCHANGE)
		End Get
	End Property
	
	Public ReadOnly Property ORDERS_FFA_SPREADs() As System.Data.Linq.Table(Of ORDERS_FFA_SPREAD)
		Get
			Return Me.GetTable(Of ORDERS_FFA_SPREAD)
		End Get
	End Property
	
	Public ReadOnly Property PERIOD_LIMIT_DESCRs() As System.Data.Linq.Table(Of PERIOD_LIMIT_DESCR)
		Get
			Return Me.GetTable(Of PERIOD_LIMIT_DESCR)
		End Get
	End Property
	
	Public ReadOnly Property QUANTITY_QUALIFIERs() As System.Data.Linq.Table(Of QUANTITY_QUALIFIER)
		Get
			Return Me.GetTable(Of QUANTITY_QUALIFIER)
		End Get
	End Property
	
	Public ReadOnly Property QUANTITY_TYPEs() As System.Data.Linq.Table(Of QUANTITY_TYPE)
		Get
			Return Me.GetTable(Of QUANTITY_TYPE)
		End Get
	End Property
	
	Public ReadOnly Property QUOTE_TYPEs() As System.Data.Linq.Table(Of QUOTE_TYPE)
		Get
			Return Me.GetTable(Of QUOTE_TYPE)
		End Get
	End Property
	
	Public ReadOnly Property ROUTEs() As System.Data.Linq.Table(Of ROUTE)
		Get
			Return Me.GetTable(Of ROUTE)
		End Get
	End Property
	
	Public ReadOnly Property SHOW_NAME_TYPEs() As System.Data.Linq.Table(Of SHOW_NAME_TYPE)
		Get
			Return Me.GetTable(Of SHOW_NAME_TYPE)
		End Get
	End Property
	
	Public ReadOnly Property SMSINDEXes() As System.Data.Linq.Table(Of SMSINDEX)
		Get
			Return Me.GetTable(Of SMSINDEX)
		End Get
	End Property
	
	Public ReadOnly Property SPOTFIXINGs() As System.Data.Linq.Table(Of SPOTFIXING)
		Get
			Return Me.GetTable(Of SPOTFIXING)
		End Get
	End Property
	
	Public ReadOnly Property TESTs() As System.Data.Linq.Table(Of TEST)
		Get
			Return Me.GetTable(Of TEST)
		End Get
	End Property
	
	Public ReadOnly Property TRADE_AUTHORITies() As System.Data.Linq.Table(Of TRADE_AUTHORITy)
		Get
			Return Me.GetTable(Of TRADE_AUTHORITy)
		End Get
	End Property
	
	Public ReadOnly Property TRADE_CLASS_EXCHANGEs() As System.Data.Linq.Table(Of TRADE_CLASS_EXCHANGE)
		Get
			Return Me.GetTable(Of TRADE_CLASS_EXCHANGE)
		End Get
	End Property
	
	Public ReadOnly Property TRADE_CLASS_RATIO_SPREADs() As System.Data.Linq.Table(Of TRADE_CLASS_RATIO_SPREAD)
		Get
			Return Me.GetTable(Of TRADE_CLASS_RATIO_SPREAD)
		End Get
	End Property
	
	Public ReadOnly Property TRADE_CLASSes() As System.Data.Linq.Table(Of TRADE_CLASS)
		Get
			Return Me.GetTable(Of TRADE_CLASS)
		End Get
	End Property
	
	Public ReadOnly Property TRADES_FFAs() As System.Data.Linq.Table(Of TRADES_FFA)
		Get
			Return Me.GetTable(Of TRADES_FFA)
		End Get
	End Property
	
	Public ReadOnly Property TRADES_FFA_OPTIONs() As System.Data.Linq.Table(Of TRADES_FFA_OPTION)
		Get
			Return Me.GetTable(Of TRADES_FFA_OPTION)
		End Get
	End Property
	
	Public ReadOnly Property TRADES_FFA_SPREADs() As System.Data.Linq.Table(Of TRADES_FFA_SPREAD)
		Get
			Return Me.GetTable(Of TRADES_FFA_SPREAD)
		End Get
	End Property
	
	Public ReadOnly Property VESSEL_CLASSes() As System.Data.Linq.Table(Of VESSEL_CLASS)
		Get
			Return Me.GetTable(Of VESSEL_CLASS)
		End Get
	End Property
	
	Public ReadOnly Property BALTIC_FORWARD_RATES_VIEWs() As System.Data.Linq.Table(Of BALTIC_FORWARD_RATES_VIEW)
		Get
			Return Me.GetTable(Of BALTIC_FORWARD_RATES_VIEW)
		End Get
	End Property
	
	Public ReadOnly Property BALTIC_SPOT_RATES_DIFFs() As System.Data.Linq.Table(Of BALTIC_SPOT_RATES_DIFF)
		Get
			Return Me.GetTable(Of BALTIC_SPOT_RATES_DIFF)
		End Get
	End Property
	
	Public ReadOnly Property VIEW_DESK_ACTIVE_FUTURE_ORDERs() As System.Data.Linq.Table(Of VIEW_DESK_ACTIVE_FUTURE_ORDER)
		Get
			Return Me.GetTable(Of VIEW_DESK_ACTIVE_FUTURE_ORDER)
		End Get
	End Property
	
	Public ReadOnly Property VIEW_DESK_ACTIVE_TRADE_CLASSes() As System.Data.Linq.Table(Of VIEW_DESK_ACTIVE_TRADE_CLASS)
		Get
			Return Me.GetTable(Of VIEW_DESK_ACTIVE_TRADE_CLASS)
		End Get
	End Property
	
	Public ReadOnly Property VIEW_TRADES_FFA_DAILies() As System.Data.Linq.Table(Of VIEW_TRADES_FFA_DAILY)
		Get
			Return Me.GetTable(Of VIEW_TRADES_FFA_DAILY)
		End Get
	End Property
	
	Public ReadOnly Property VIEW_TRADES_FFA_HOURLies() As System.Data.Linq.Table(Of VIEW_TRADES_FFA_HOURLY)
		Get
			Return Me.GetTable(Of VIEW_TRADES_FFA_HOURLY)
		End Get
	End Property
	
	Public ReadOnly Property VESSEL_CLASS_SPREAD_MARGINs() As System.Data.Linq.Table(Of VESSEL_CLASS_SPREAD_MARGIN)
		Get
			Return Me.GetTable(Of VESSEL_CLASS_SPREAD_MARGIN)
		End Get
	End Property
	
	Public ReadOnly Property ORDERS_FFAs() As System.Data.Linq.Table(Of ORDERS_FFA)
		Get
			Return Me.GetTable(Of ORDERS_FFA)
		End Get
	End Property
	
	Public ReadOnly Property ACCOUNT_DESKs() As System.Data.Linq.Table(Of ACCOUNT_DESK)
		Get
			Return Me.GetTable(Of ACCOUNT_DESK)
		End Get
	End Property
	
	Public ReadOnly Property SERVER_INFOs() As System.Data.Linq.Table(Of SERVER_INFO)
		Get
			Return Me.GetTable(Of SERVER_INFO)
		End Get
	End Property
	
	Public ReadOnly Property DESK_TRADERs() As System.Data.Linq.Table(Of DESK_TRADER)
		Get
			Return Me.GetTable(Of DESK_TRADER)
		End Get
	End Property
	
	Public ReadOnly Property DESK_TRADE_CLASSes() As System.Data.Linq.Table(Of DESK_TRADE_CLASS)
		Get
			Return Me.GetTable(Of DESK_TRADE_CLASS)
		End Get
	End Property
	
	Public ReadOnly Property ACCOUNTs() As System.Data.Linq.Table(Of ACCOUNT)
		Get
			Return Me.GetTable(Of ACCOUNT)
		End Get
	End Property
	
	Public ReadOnly Property BALTIC_MONTHLY_SETTLEMENTs() As System.Data.Linq.Table(Of BALTIC_MONTHLY_SETTLEMENT)
		Get
			Return Me.GetTable(Of BALTIC_MONTHLY_SETTLEMENT)
		End Get
	End Property
	
	Public ReadOnly Property INTEREST_RATEs() As System.Data.Linq.Table(Of INTEREST_RATE)
		Get
			Return Me.GetTable(Of INTEREST_RATE)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetTraderNameWithRules", IsComposable:=true)>  _
	Public Function GetTraderNameWithRules(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TraderID", DbType:="Int")> ByVal traderID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ForTraderID", DbType:="Int")> ByVal forTraderID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ExchangeID", DbType:="Int")> ByVal exchangeID As System.Nullable(Of Integer)) As String
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), traderID, forTraderID, exchangeID).ReturnValue,String)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.TradeConfos", IsComposable:=true)>  _
	Public Function TradeConfos(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TradeId", DbType:="Int")> ByVal tradeId As System.Nullable(Of Integer)) As IQueryable(Of TradeConfosResult)
		Return Me.CreateMethodCallQuery(Of TradeConfosResult)(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), tradeId)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.HasOrdersTrades", IsComposable:=true)>  _
	Public Function HasOrdersTrades(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DeskTraderId", DbType:="Int")> ByVal deskTraderId As System.Nullable(Of Integer)) As System.Nullable(Of Integer)
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), deskTraderId).ReturnValue,System.Nullable(Of Integer))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.HasOrdersTradesClearers", IsComposable:=true)>  _
	Public Function HasOrdersTradesClearers(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AccountDeskId", DbType:="Int")> ByVal accountDeskId As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ExchangeId", DbType:="Int")> ByVal exchangeId As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AccountId", DbType:="Int")> ByVal accountId As System.Nullable(Of Integer)) As System.Nullable(Of Integer)
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), accountDeskId, exchangeId, accountId).ReturnValue,System.Nullable(Of Integer))
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.WET_FLAT_RATES")>  _
Partial Public Class WET_FLAT_RATE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ROUTE_ID As Integer
	
	Private _FLAT_YEAR As Integer
	
	Private _FLAT_RATE As Double
	
	Private _PROJECTION As Boolean
	
	Private _ROUTE As EntityRef(Of ROUTE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnFLAT_YEARChanging(value As Integer)
    End Sub
    Partial Private Sub OnFLAT_YEARChanged()
    End Sub
    Partial Private Sub OnFLAT_RATEChanging(value As Double)
    End Sub
    Partial Private Sub OnFLAT_RATEChanged()
    End Sub
    Partial Private Sub OnPROJECTIONChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPROJECTIONChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ROUTE = CType(Nothing, EntityRef(Of ROUTE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If Me._ROUTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FLAT_YEAR", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property FLAT_YEAR() As Integer
		Get
			Return Me._FLAT_YEAR
		End Get
		Set
			If ((Me._FLAT_YEAR = value)  _
						= false) Then
				Me.OnFLAT_YEARChanging(value)
				Me.SendPropertyChanging
				Me._FLAT_YEAR = value
				Me.SendPropertyChanged("FLAT_YEAR")
				Me.OnFLAT_YEARChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FLAT_RATE", DbType:="Float NOT NULL")>  _
	Public Property FLAT_RATE() As Double
		Get
			Return Me._FLAT_RATE
		End Get
		Set
			If ((Me._FLAT_RATE = value)  _
						= false) Then
				Me.OnFLAT_RATEChanging(value)
				Me.SendPropertyChanging
				Me._FLAT_RATE = value
				Me.SendPropertyChanged("FLAT_RATE")
				Me.OnFLAT_RATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROJECTION", DbType:="Bit NOT NULL")>  _
	Public Property PROJECTION() As Boolean
		Get
			Return Me._PROJECTION
		End Get
		Set
			If ((Me._PROJECTION = value)  _
						= false) Then
				Me.OnPROJECTIONChanging(value)
				Me.SendPropertyChanging
				Me._PROJECTION = value
				Me.SendPropertyChanged("PROJECTION")
				Me.OnPROJECTIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_WET_FLAT_RATE", Storage:="_ROUTE", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTE() As ROUTE
		Get
			Return Me._ROUTE.Entity
		End Get
		Set
			Dim previousValue As ROUTE = Me._ROUTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTE.Entity = Nothing
					previousValue.WET_FLAT_RATEs.Remove(Me)
				End If
				Me._ROUTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.WET_FLAT_RATEs.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ACCOUNT_TYPES")>  _
Partial Public Class ACCOUNT_TYPE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ACCOUNT_TYPE_ID As Integer
	
	Private _ACCOUNT_TYPE_DESCR As String
	
	Private _ACCOUNTs As EntitySet(Of ACCOUNT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnACCOUNT_TYPE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_TYPE_IDChanged()
    End Sub
    Partial Private Sub OnACCOUNT_TYPE_DESCRChanging(value As String)
    End Sub
    Partial Private Sub OnACCOUNT_TYPE_DESCRChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ACCOUNTs = New EntitySet(Of ACCOUNT)(AddressOf Me.attach_ACCOUNTs, AddressOf Me.detach_ACCOUNTs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_TYPE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ACCOUNT_TYPE_ID() As Integer
		Get
			Return Me._ACCOUNT_TYPE_ID
		End Get
		Set
			If ((Me._ACCOUNT_TYPE_ID = value)  _
						= false) Then
				Me.OnACCOUNT_TYPE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_TYPE_ID = value
				Me.SendPropertyChanged("ACCOUNT_TYPE_ID")
				Me.OnACCOUNT_TYPE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_TYPE_DESCR", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ACCOUNT_TYPE_DESCR() As String
		Get
			Return Me._ACCOUNT_TYPE_DESCR
		End Get
		Set
			If (String.Equals(Me._ACCOUNT_TYPE_DESCR, value) = false) Then
				Me.OnACCOUNT_TYPE_DESCRChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_TYPE_DESCR = value
				Me.SendPropertyChanged("ACCOUNT_TYPE_DESCR")
				Me.OnACCOUNT_TYPE_DESCRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_TYPE_ACCOUNT", Storage:="_ACCOUNTs", ThisKey:="ACCOUNT_TYPE_ID", OtherKey:="ACCOUNT_TYPE_ID")>  _
	Public Property ACCOUNTs() As EntitySet(Of ACCOUNT)
		Get
			Return Me._ACCOUNTs
		End Get
		Set
			Me._ACCOUNTs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ACCOUNTs(ByVal entity As ACCOUNT)
		Me.SendPropertyChanging
		entity.ACCOUNT_TYPE = Me
	End Sub
	
	Private Sub detach_ACCOUNTs(ByVal entity As ACCOUNT)
		Me.SendPropertyChanging
		entity.ACCOUNT_TYPE = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ACCOUNTS_ADMIN")>  _
Partial Public Class ACCOUNTS_ADMIN
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ACCOUNT_ID As Integer
	
	Private _ADMIN_NAME As String
	
	Private _ADMIN_PASSWORD As String
	
	Private _ADMIN_OF_ID As String
	
	Private _ADMIN_OF_PASSWORD As String
	
	Private _ACCOUNT As EntityRef(Of ACCOUNT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnACCOUNT_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_IDChanged()
    End Sub
    Partial Private Sub OnADMIN_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnADMIN_NAMEChanged()
    End Sub
    Partial Private Sub OnADMIN_PASSWORDChanging(value As String)
    End Sub
    Partial Private Sub OnADMIN_PASSWORDChanged()
    End Sub
    Partial Private Sub OnADMIN_OF_IDChanging(value As String)
    End Sub
    Partial Private Sub OnADMIN_OF_IDChanged()
    End Sub
    Partial Private Sub OnADMIN_OF_PASSWORDChanging(value As String)
    End Sub
    Partial Private Sub OnADMIN_OF_PASSWORDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ACCOUNT = CType(Nothing, EntityRef(Of ACCOUNT))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ACCOUNT_ID() As Integer
		Get
			Return Me._ACCOUNT_ID
		End Get
		Set
			If ((Me._ACCOUNT_ID = value)  _
						= false) Then
				If Me._ACCOUNT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACCOUNT_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_ID = value
				Me.SendPropertyChanged("ACCOUNT_ID")
				Me.OnACCOUNT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADMIN_NAME", DbType:="VarChar(15) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ADMIN_NAME() As String
		Get
			Return Me._ADMIN_NAME
		End Get
		Set
			If (String.Equals(Me._ADMIN_NAME, value) = false) Then
				Me.OnADMIN_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._ADMIN_NAME = value
				Me.SendPropertyChanged("ADMIN_NAME")
				Me.OnADMIN_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADMIN_PASSWORD", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ADMIN_PASSWORD() As String
		Get
			Return Me._ADMIN_PASSWORD
		End Get
		Set
			If (String.Equals(Me._ADMIN_PASSWORD, value) = false) Then
				Me.OnADMIN_PASSWORDChanging(value)
				Me.SendPropertyChanging
				Me._ADMIN_PASSWORD = value
				Me.SendPropertyChanged("ADMIN_PASSWORD")
				Me.OnADMIN_PASSWORDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADMIN_OF_ID", DbType:="VarChar(15)")>  _
	Public Property ADMIN_OF_ID() As String
		Get
			Return Me._ADMIN_OF_ID
		End Get
		Set
			If (String.Equals(Me._ADMIN_OF_ID, value) = false) Then
				Me.OnADMIN_OF_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADMIN_OF_ID = value
				Me.SendPropertyChanged("ADMIN_OF_ID")
				Me.OnADMIN_OF_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADMIN_OF_PASSWORD", DbType:="VarChar(15)")>  _
	Public Property ADMIN_OF_PASSWORD() As String
		Get
			Return Me._ADMIN_OF_PASSWORD
		End Get
		Set
			If (String.Equals(Me._ADMIN_OF_PASSWORD, value) = false) Then
				Me.OnADMIN_OF_PASSWORDChanging(value)
				Me.SendPropertyChanging
				Me._ADMIN_OF_PASSWORD = value
				Me.SendPropertyChanged("ADMIN_OF_PASSWORD")
				Me.OnADMIN_OF_PASSWORDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_ACCOUNTS_ADMIN", Storage:="_ACCOUNT", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT() As ACCOUNT
		Get
			Return Me._ACCOUNT.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT = Me._ACCOUNT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT.Entity = Nothing
					previousValue.ACCOUNTS_ADMINs.Remove(Me)
				End If
				Me._ACCOUNT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ACCOUNTS_ADMINs.Add(Me)
					Me._ACCOUNT_ID = value.ACCOUNT_ID
				Else
					Me._ACCOUNT_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNT")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ACCOUNTS_CONTACTS")>  _
Partial Public Class ACCOUNTS_CONTACT
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ACCOUNTS_CONTACTS_ID As Integer
	
	Private _ACCOUNT_ID As Integer
	
	Private _CONTACT_ID As Integer
	
	Private _ACTIVE As Boolean
	
	Private _MAIN_CONTACT As Boolean
	
	Private _CONTACT As EntityRef(Of CONTACT)
	
	Private _ACCOUNT As EntityRef(Of ACCOUNT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnACCOUNTS_CONTACTS_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNTS_CONTACTS_IDChanged()
    End Sub
    Partial Private Sub OnACCOUNT_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_IDChanged()
    End Sub
    Partial Private Sub OnCONTACT_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCONTACT_IDChanged()
    End Sub
    Partial Private Sub OnACTIVEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnACTIVEChanged()
    End Sub
    Partial Private Sub OnMAIN_CONTACTChanging(value As Boolean)
    End Sub
    Partial Private Sub OnMAIN_CONTACTChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CONTACT = CType(Nothing, EntityRef(Of CONTACT))
		Me._ACCOUNT = CType(Nothing, EntityRef(Of ACCOUNT))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNTS_CONTACTS_ID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property ACCOUNTS_CONTACTS_ID() As Integer
		Get
			Return Me._ACCOUNTS_CONTACTS_ID
		End Get
		Set
			If ((Me._ACCOUNTS_CONTACTS_ID = value)  _
						= false) Then
				Me.OnACCOUNTS_CONTACTS_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNTS_CONTACTS_ID = value
				Me.SendPropertyChanged("ACCOUNTS_CONTACTS_ID")
				Me.OnACCOUNTS_CONTACTS_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ACCOUNT_ID() As Integer
		Get
			Return Me._ACCOUNT_ID
		End Get
		Set
			If ((Me._ACCOUNT_ID = value)  _
						= false) Then
				If Me._ACCOUNT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACCOUNT_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_ID = value
				Me.SendPropertyChanged("ACCOUNT_ID")
				Me.OnACCOUNT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONTACT_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CONTACT_ID() As Integer
		Get
			Return Me._CONTACT_ID
		End Get
		Set
			If ((Me._CONTACT_ID = value)  _
						= false) Then
				If Me._CONTACT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCONTACT_IDChanging(value)
				Me.SendPropertyChanging
				Me._CONTACT_ID = value
				Me.SendPropertyChanged("CONTACT_ID")
				Me.OnCONTACT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACTIVE", DbType:="Bit NOT NULL")>  _
	Public Property ACTIVE() As Boolean
		Get
			Return Me._ACTIVE
		End Get
		Set
			If ((Me._ACTIVE = value)  _
						= false) Then
				Me.OnACTIVEChanging(value)
				Me.SendPropertyChanging
				Me._ACTIVE = value
				Me.SendPropertyChanged("ACTIVE")
				Me.OnACTIVEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MAIN_CONTACT", DbType:="Bit NOT NULL")>  _
	Public Property MAIN_CONTACT() As Boolean
		Get
			Return Me._MAIN_CONTACT
		End Get
		Set
			If ((Me._MAIN_CONTACT = value)  _
						= false) Then
				Me.OnMAIN_CONTACTChanging(value)
				Me.SendPropertyChanging
				Me._MAIN_CONTACT = value
				Me.SendPropertyChanged("MAIN_CONTACT")
				Me.OnMAIN_CONTACTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONTACT_ACCOUNTS_CONTACT", Storage:="_CONTACT", ThisKey:="CONTACT_ID", OtherKey:="CONTACT_ID", IsForeignKey:=true)>  _
	Public Property CONTACT() As CONTACT
		Get
			Return Me._CONTACT.Entity
		End Get
		Set
			Dim previousValue As CONTACT = Me._CONTACT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CONTACT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CONTACT.Entity = Nothing
					previousValue.ACCOUNTS_CONTACTs.Remove(Me)
				End If
				Me._CONTACT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ACCOUNTS_CONTACTs.Add(Me)
					Me._CONTACT_ID = value.CONTACT_ID
				Else
					Me._CONTACT_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CONTACT")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_ACCOUNTS_CONTACT", Storage:="_ACCOUNT", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT() As ACCOUNT
		Get
			Return Me._ACCOUNT.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT = Me._ACCOUNT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT.Entity = Nothing
					previousValue.ACCOUNTS_CONTACTs.Remove(Me)
				End If
				Me._ACCOUNT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ACCOUNTS_CONTACTs.Add(Me)
					Me._ACCOUNT_ID = value.ACCOUNT_ID
				Else
					Me._ACCOUNT_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNT")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ARTB_SOUNDS")>  _
Partial Public Class ARTB_SOUND
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SOUND_ID As Integer
	
	Private _SOUND_FILE As String
	
	Private _SOUND_DES As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSOUND_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSOUND_IDChanged()
    End Sub
    Partial Private Sub OnSOUND_FILEChanging(value As String)
    End Sub
    Partial Private Sub OnSOUND_FILEChanged()
    End Sub
    Partial Private Sub OnSOUND_DESChanging(value As String)
    End Sub
    Partial Private Sub OnSOUND_DESChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SOUND_ID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property SOUND_ID() As Integer
		Get
			Return Me._SOUND_ID
		End Get
		Set
			If ((Me._SOUND_ID = value)  _
						= false) Then
				Me.OnSOUND_IDChanging(value)
				Me.SendPropertyChanging
				Me._SOUND_ID = value
				Me.SendPropertyChanged("SOUND_ID")
				Me.OnSOUND_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SOUND_FILE", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property SOUND_FILE() As String
		Get
			Return Me._SOUND_FILE
		End Get
		Set
			If (String.Equals(Me._SOUND_FILE, value) = false) Then
				Me.OnSOUND_FILEChanging(value)
				Me.SendPropertyChanging
				Me._SOUND_FILE = value
				Me.SendPropertyChanged("SOUND_FILE")
				Me.OnSOUND_FILEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SOUND_DES", DbType:="NChar(10)")>  _
	Public Property SOUND_DES() As String
		Get
			Return Me._SOUND_DES
		End Get
		Set
			If (String.Equals(Me._SOUND_DES, value) = false) Then
				Me.OnSOUND_DESChanging(value)
				Me.SendPropertyChanging
				Me._SOUND_DES = value
				Me.SendPropertyChanged("SOUND_DES")
				Me.OnSOUND_DESChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BALTIC_FFA_IMPORT")>  _
Partial Public Class BALTIC_FFA_IMPORT
	
	Private _GroupDesc As String
	
	Private _ArchiveDate As Date
	
	Private _RouteIdentifier As String
	
	Private _RouteAverage As Double
	
	Private _FFADescription As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupDesc", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property GroupDesc() As String
		Get
			Return Me._GroupDesc
		End Get
		Set
			If (String.Equals(Me._GroupDesc, value) = false) Then
				Me._GroupDesc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArchiveDate", DbType:="Date NOT NULL")>  _
	Public Property ArchiveDate() As Date
		Get
			Return Me._ArchiveDate
		End Get
		Set
			If ((Me._ArchiveDate = value)  _
						= false) Then
				Me._ArchiveDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RouteIdentifier", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property RouteIdentifier() As String
		Get
			Return Me._RouteIdentifier
		End Get
		Set
			If (String.Equals(Me._RouteIdentifier, value) = false) Then
				Me._RouteIdentifier = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RouteAverage", DbType:="Float NOT NULL")>  _
	Public Property RouteAverage() As Double
		Get
			Return Me._RouteAverage
		End Get
		Set
			If ((Me._RouteAverage = value)  _
						= false) Then
				Me._RouteAverage = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FFADescription", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property FFADescription() As String
		Get
			Return Me._FFADescription
		End Get
		Set
			If (String.Equals(Me._FFADescription, value) = false) Then
				Me._FFADescription = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BALTIC_FORWARD_RATES")>  _
Partial Public Class BALTIC_FORWARD_RATE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ROUTE_ID As Integer
	
	Private _CMSROUTE_ID As String
	
	Private _FIXING_DATE As Date
	
	Private _NEXT_ROLLOVER_DATE As System.Nullable(Of Date)
	
	Private _FIXING As Double
	
	Private _REPORTDESC As String
	
	Private _MM1 As System.Nullable(Of Short)
	
	Private _YY1 As System.Nullable(Of Short)
	
	Private _MM2 As System.Nullable(Of Short)
	
	Private _YY2 As System.Nullable(Of Short)
	
	Private _PERIOD As String
	
	Private _YY As System.Nullable(Of Integer)
	
	Private _BALTIC_FTP As EntityRef(Of BALTIC_FTP)
	
	Private _ROUTE As EntityRef(Of ROUTE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnCMSROUTE_IDChanging(value As String)
    End Sub
    Partial Private Sub OnCMSROUTE_IDChanged()
    End Sub
    Partial Private Sub OnFIXING_DATEChanging(value As Date)
    End Sub
    Partial Private Sub OnFIXING_DATEChanged()
    End Sub
    Partial Private Sub OnNEXT_ROLLOVER_DATEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnNEXT_ROLLOVER_DATEChanged()
    End Sub
    Partial Private Sub OnFIXINGChanging(value As Double)
    End Sub
    Partial Private Sub OnFIXINGChanged()
    End Sub
    Partial Private Sub OnREPORTDESCChanging(value As String)
    End Sub
    Partial Private Sub OnREPORTDESCChanged()
    End Sub
    Partial Private Sub OnMM1Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMM1Changed()
    End Sub
    Partial Private Sub OnYY1Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnYY1Changed()
    End Sub
    Partial Private Sub OnMM2Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMM2Changed()
    End Sub
    Partial Private Sub OnYY2Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnYY2Changed()
    End Sub
    Partial Private Sub OnPERIODChanging(value As String)
    End Sub
    Partial Private Sub OnPERIODChanged()
    End Sub
    Partial Private Sub OnYYChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnYYChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BALTIC_FTP = CType(Nothing, EntityRef(Of BALTIC_FTP))
		Me._ROUTE = CType(Nothing, EntityRef(Of ROUTE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If (Me._BALTIC_FTP.HasLoadedOrAssignedValue OrElse Me._ROUTE.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CMSROUTE_ID", DbType:="VarChar(15) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CMSROUTE_ID() As String
		Get
			Return Me._CMSROUTE_ID
		End Get
		Set
			If (String.Equals(Me._CMSROUTE_ID, value) = false) Then
				If Me._BALTIC_FTP.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCMSROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._CMSROUTE_ID = value
				Me.SendPropertyChanged("CMSROUTE_ID")
				Me.OnCMSROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING_DATE", DbType:="Date NOT NULL", IsPrimaryKey:=true)>  _
	Public Property FIXING_DATE() As Date
		Get
			Return Me._FIXING_DATE
		End Get
		Set
			If ((Me._FIXING_DATE = value)  _
						= false) Then
				Me.OnFIXING_DATEChanging(value)
				Me.SendPropertyChanging
				Me._FIXING_DATE = value
				Me.SendPropertyChanged("FIXING_DATE")
				Me.OnFIXING_DATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NEXT_ROLLOVER_DATE", DbType:="Date")>  _
	Public Property NEXT_ROLLOVER_DATE() As System.Nullable(Of Date)
		Get
			Return Me._NEXT_ROLLOVER_DATE
		End Get
		Set
			If (Me._NEXT_ROLLOVER_DATE.Equals(value) = false) Then
				Me.OnNEXT_ROLLOVER_DATEChanging(value)
				Me.SendPropertyChanging
				Me._NEXT_ROLLOVER_DATE = value
				Me.SendPropertyChanged("NEXT_ROLLOVER_DATE")
				Me.OnNEXT_ROLLOVER_DATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING", DbType:="Float NOT NULL")>  _
	Public Property FIXING() As Double
		Get
			Return Me._FIXING
		End Get
		Set
			If ((Me._FIXING = value)  _
						= false) Then
				Me.OnFIXINGChanging(value)
				Me.SendPropertyChanging
				Me._FIXING = value
				Me.SendPropertyChanged("FIXING")
				Me.OnFIXINGChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REPORTDESC", DbType:="VarChar(15)")>  _
	Public Property REPORTDESC() As String
		Get
			Return Me._REPORTDESC
		End Get
		Set
			If (String.Equals(Me._REPORTDESC, value) = false) Then
				Me.OnREPORTDESCChanging(value)
				Me.SendPropertyChanging
				Me._REPORTDESC = value
				Me.SendPropertyChanged("REPORTDESC")
				Me.OnREPORTDESCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM1", DbType:="SmallInt")>  _
	Public Property MM1() As System.Nullable(Of Short)
		Get
			Return Me._MM1
		End Get
		Set
			If (Me._MM1.Equals(value) = false) Then
				Me.OnMM1Changing(value)
				Me.SendPropertyChanging
				Me._MM1 = value
				Me.SendPropertyChanged("MM1")
				Me.OnMM1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY1", DbType:="SmallInt")>  _
	Public Property YY1() As System.Nullable(Of Short)
		Get
			Return Me._YY1
		End Get
		Set
			If (Me._YY1.Equals(value) = false) Then
				Me.OnYY1Changing(value)
				Me.SendPropertyChanging
				Me._YY1 = value
				Me.SendPropertyChanged("YY1")
				Me.OnYY1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM2", DbType:="SmallInt")>  _
	Public Property MM2() As System.Nullable(Of Short)
		Get
			Return Me._MM2
		End Get
		Set
			If (Me._MM2.Equals(value) = false) Then
				Me.OnMM2Changing(value)
				Me.SendPropertyChanging
				Me._MM2 = value
				Me.SendPropertyChanged("MM2")
				Me.OnMM2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY2", DbType:="SmallInt")>  _
	Public Property YY2() As System.Nullable(Of Short)
		Get
			Return Me._YY2
		End Get
		Set
			If (Me._YY2.Equals(value) = false) Then
				Me.OnYY2Changing(value)
				Me.SendPropertyChanging
				Me._YY2 = value
				Me.SendPropertyChanged("YY2")
				Me.OnYY2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PERIOD", DbType:="VarChar(15)")>  _
	Public Property PERIOD() As String
		Get
			Return Me._PERIOD
		End Get
		Set
			If (String.Equals(Me._PERIOD, value) = false) Then
				Me.OnPERIODChanging(value)
				Me.SendPropertyChanging
				Me._PERIOD = value
				Me.SendPropertyChanged("PERIOD")
				Me.OnPERIODChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY", DbType:="Int")>  _
	Public Property YY() As System.Nullable(Of Integer)
		Get
			Return Me._YY
		End Get
		Set
			If (Me._YY.Equals(value) = false) Then
				Me.OnYYChanging(value)
				Me.SendPropertyChanging
				Me._YY = value
				Me.SendPropertyChanged("YY")
				Me.OnYYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BALTIC_FTP_BALTIC_FORWARD_RATE", Storage:="_BALTIC_FTP", ThisKey:="ROUTE_ID,CMSROUTE_ID", OtherKey:="ROUTE_ID,CMSROUTE_ID", IsForeignKey:=true)>  _
	Public Property BALTIC_FTP() As BALTIC_FTP
		Get
			Return Me._BALTIC_FTP.Entity
		End Get
		Set
			Dim previousValue As BALTIC_FTP = Me._BALTIC_FTP.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._BALTIC_FTP.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._BALTIC_FTP.Entity = Nothing
					previousValue.BALTIC_FORWARD_RATEs.Remove(Me)
				End If
				Me._BALTIC_FTP.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BALTIC_FORWARD_RATEs.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
					Me._CMSROUTE_ID = value.CMSROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
					Me._CMSROUTE_ID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("BALTIC_FTP")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_BALTIC_FORWARD_RATE", Storage:="_ROUTE", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTE() As ROUTE
		Get
			Return Me._ROUTE.Entity
		End Get
		Set
			Dim previousValue As ROUTE = Me._ROUTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTE.Entity = Nothing
					previousValue.BALTIC_FORWARD_RATEs.Remove(Me)
				End If
				Me._ROUTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BALTIC_FORWARD_RATEs.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BALTIC_FTP")>  _
Partial Public Class BALTIC_FTP
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _ROUTE_ID As Integer
	
	Private _CMSROUTE_ID As String
	
	Private _PERIOD As Char
	
	Private _QUALIFIER As Char
	
	Private _BALTIC_FORWARD_RATEs As EntitySet(Of BALTIC_FORWARD_RATE)
	
	Private _BALTIC_OPTION_VOLATILITies As EntitySet(Of BALTIC_OPTION_VOLATILITy)
	
	Private _ROUTE As EntityRef(Of ROUTE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnCMSROUTE_IDChanging(value As String)
    End Sub
    Partial Private Sub OnCMSROUTE_IDChanged()
    End Sub
    Partial Private Sub OnPERIODChanging(value As Char)
    End Sub
    Partial Private Sub OnPERIODChanged()
    End Sub
    Partial Private Sub OnQUALIFIERChanging(value As Char)
    End Sub
    Partial Private Sub OnQUALIFIERChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BALTIC_FORWARD_RATEs = New EntitySet(Of BALTIC_FORWARD_RATE)(AddressOf Me.attach_BALTIC_FORWARD_RATEs, AddressOf Me.detach_BALTIC_FORWARD_RATEs)
		Me._BALTIC_OPTION_VOLATILITies = New EntitySet(Of BALTIC_OPTION_VOLATILITy)(AddressOf Me.attach_BALTIC_OPTION_VOLATILITies, AddressOf Me.detach_BALTIC_OPTION_VOLATILITies)
		Me._ROUTE = CType(Nothing, EntityRef(Of ROUTE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If Me._ROUTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CMSROUTE_ID", DbType:="VarChar(15) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CMSROUTE_ID() As String
		Get
			Return Me._CMSROUTE_ID
		End Get
		Set
			If (String.Equals(Me._CMSROUTE_ID, value) = false) Then
				Me.OnCMSROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._CMSROUTE_ID = value
				Me.SendPropertyChanged("CMSROUTE_ID")
				Me.OnCMSROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PERIOD", DbType:="Char(1) NOT NULL")>  _
	Public Property PERIOD() As Char
		Get
			Return Me._PERIOD
		End Get
		Set
			If ((Me._PERIOD = value)  _
						= false) Then
				Me.OnPERIODChanging(value)
				Me.SendPropertyChanging
				Me._PERIOD = value
				Me.SendPropertyChanged("PERIOD")
				Me.OnPERIODChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUALIFIER", DbType:="Char(1) NOT NULL")>  _
	Public Property QUALIFIER() As Char
		Get
			Return Me._QUALIFIER
		End Get
		Set
			If ((Me._QUALIFIER = value)  _
						= false) Then
				Me.OnQUALIFIERChanging(value)
				Me.SendPropertyChanging
				Me._QUALIFIER = value
				Me.SendPropertyChanged("QUALIFIER")
				Me.OnQUALIFIERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BALTIC_FTP_BALTIC_FORWARD_RATE", Storage:="_BALTIC_FORWARD_RATEs", ThisKey:="ROUTE_ID,CMSROUTE_ID", OtherKey:="ROUTE_ID,CMSROUTE_ID")>  _
	Public Property BALTIC_FORWARD_RATEs() As EntitySet(Of BALTIC_FORWARD_RATE)
		Get
			Return Me._BALTIC_FORWARD_RATEs
		End Get
		Set
			Me._BALTIC_FORWARD_RATEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BALTIC_FTP_BALTIC_OPTION_VOLATILITy", Storage:="_BALTIC_OPTION_VOLATILITies", ThisKey:="ROUTE_ID,CMSROUTE_ID", OtherKey:="ROUTE_ID,CMSROUTE_ID")>  _
	Public Property BALTIC_OPTION_VOLATILITies() As EntitySet(Of BALTIC_OPTION_VOLATILITy)
		Get
			Return Me._BALTIC_OPTION_VOLATILITies
		End Get
		Set
			Me._BALTIC_OPTION_VOLATILITies.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_BALTIC_FTP", Storage:="_ROUTE", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTE() As ROUTE
		Get
			Return Me._ROUTE.Entity
		End Get
		Set
			Dim previousValue As ROUTE = Me._ROUTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTE.Entity = Nothing
					previousValue.BALTIC_FTPs.Remove(Me)
				End If
				Me._ROUTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BALTIC_FTPs.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BALTIC_FORWARD_RATEs(ByVal entity As BALTIC_FORWARD_RATE)
		Me.SendPropertyChanging
		entity.BALTIC_FTP = Me
	End Sub
	
	Private Sub detach_BALTIC_FORWARD_RATEs(ByVal entity As BALTIC_FORWARD_RATE)
		Me.SendPropertyChanging
		entity.BALTIC_FTP = Nothing
	End Sub
	
	Private Sub attach_BALTIC_OPTION_VOLATILITies(ByVal entity As BALTIC_OPTION_VOLATILITy)
		Me.SendPropertyChanging
		entity.BALTIC_FTP = Me
	End Sub
	
	Private Sub detach_BALTIC_OPTION_VOLATILITies(ByVal entity As BALTIC_OPTION_VOLATILITy)
		Me.SendPropertyChanging
		entity.BALTIC_FTP = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BALTIC_FTP_SETTLEMENT")>  _
Partial Public Class BALTIC_FTP_SETTLEMENT
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ROUTE_ID As Integer
	
	Private _CMSROUTE_ID As String
	
	Private _ROUTE As EntityRef(Of ROUTE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnCMSROUTE_IDChanging(value As String)
    End Sub
    Partial Private Sub OnCMSROUTE_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ROUTE = CType(Nothing, EntityRef(Of ROUTE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If Me._ROUTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CMSROUTE_ID", DbType:="VarChar(15) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CMSROUTE_ID() As String
		Get
			Return Me._CMSROUTE_ID
		End Get
		Set
			If (String.Equals(Me._CMSROUTE_ID, value) = false) Then
				Me.OnCMSROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._CMSROUTE_ID = value
				Me.SendPropertyChanged("CMSROUTE_ID")
				Me.OnCMSROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_BALTIC_FTP_SETTLEMENT", Storage:="_ROUTE", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTE() As ROUTE
		Get
			Return Me._ROUTE.Entity
		End Get
		Set
			Dim previousValue As ROUTE = Me._ROUTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTE.Entity = Nothing
					previousValue.BALTIC_FTP_SETTLEMENTs.Remove(Me)
				End If
				Me._ROUTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BALTIC_FTP_SETTLEMENTs.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BALTIC_OPTION_VOLATILITIES")>  _
Partial Public Class BALTIC_OPTION_VOLATILITy
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ROUTE_ID As Integer
	
	Private _CMSROUTE_ID As String
	
	Private _FIXING_DATE As Date
	
	Private _NEXT_ROLLOVER_DATE As Date
	
	Private _FIXING As Double
	
	Private _REPORTDESC As String
	
	Private _MM1 As System.Nullable(Of Short)
	
	Private _YY1 As System.Nullable(Of Short)
	
	Private _MM2 As System.Nullable(Of Short)
	
	Private _YY2 As System.Nullable(Of Short)
	
	Private _PERIOD As String
	
	Private _YY As System.Nullable(Of Integer)
	
	Private _BALTIC_FTP As EntityRef(Of BALTIC_FTP)
	
	Private _ROUTE As EntityRef(Of ROUTE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnCMSROUTE_IDChanging(value As String)
    End Sub
    Partial Private Sub OnCMSROUTE_IDChanged()
    End Sub
    Partial Private Sub OnFIXING_DATEChanging(value As Date)
    End Sub
    Partial Private Sub OnFIXING_DATEChanged()
    End Sub
    Partial Private Sub OnNEXT_ROLLOVER_DATEChanging(value As Date)
    End Sub
    Partial Private Sub OnNEXT_ROLLOVER_DATEChanged()
    End Sub
    Partial Private Sub OnFIXINGChanging(value As Double)
    End Sub
    Partial Private Sub OnFIXINGChanged()
    End Sub
    Partial Private Sub OnREPORTDESCChanging(value As String)
    End Sub
    Partial Private Sub OnREPORTDESCChanged()
    End Sub
    Partial Private Sub OnMM1Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMM1Changed()
    End Sub
    Partial Private Sub OnYY1Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnYY1Changed()
    End Sub
    Partial Private Sub OnMM2Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMM2Changed()
    End Sub
    Partial Private Sub OnYY2Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnYY2Changed()
    End Sub
    Partial Private Sub OnPERIODChanging(value As String)
    End Sub
    Partial Private Sub OnPERIODChanged()
    End Sub
    Partial Private Sub OnYYChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnYYChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BALTIC_FTP = CType(Nothing, EntityRef(Of BALTIC_FTP))
		Me._ROUTE = CType(Nothing, EntityRef(Of ROUTE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If (Me._BALTIC_FTP.HasLoadedOrAssignedValue OrElse Me._ROUTE.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CMSROUTE_ID", DbType:="VarChar(15) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CMSROUTE_ID() As String
		Get
			Return Me._CMSROUTE_ID
		End Get
		Set
			If (String.Equals(Me._CMSROUTE_ID, value) = false) Then
				If Me._BALTIC_FTP.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCMSROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._CMSROUTE_ID = value
				Me.SendPropertyChanged("CMSROUTE_ID")
				Me.OnCMSROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING_DATE", DbType:="Date NOT NULL", IsPrimaryKey:=true)>  _
	Public Property FIXING_DATE() As Date
		Get
			Return Me._FIXING_DATE
		End Get
		Set
			If ((Me._FIXING_DATE = value)  _
						= false) Then
				Me.OnFIXING_DATEChanging(value)
				Me.SendPropertyChanging
				Me._FIXING_DATE = value
				Me.SendPropertyChanged("FIXING_DATE")
				Me.OnFIXING_DATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NEXT_ROLLOVER_DATE", DbType:="Date NOT NULL")>  _
	Public Property NEXT_ROLLOVER_DATE() As Date
		Get
			Return Me._NEXT_ROLLOVER_DATE
		End Get
		Set
			If ((Me._NEXT_ROLLOVER_DATE = value)  _
						= false) Then
				Me.OnNEXT_ROLLOVER_DATEChanging(value)
				Me.SendPropertyChanging
				Me._NEXT_ROLLOVER_DATE = value
				Me.SendPropertyChanged("NEXT_ROLLOVER_DATE")
				Me.OnNEXT_ROLLOVER_DATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING", DbType:="Float NOT NULL")>  _
	Public Property FIXING() As Double
		Get
			Return Me._FIXING
		End Get
		Set
			If ((Me._FIXING = value)  _
						= false) Then
				Me.OnFIXINGChanging(value)
				Me.SendPropertyChanging
				Me._FIXING = value
				Me.SendPropertyChanged("FIXING")
				Me.OnFIXINGChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REPORTDESC", DbType:="VarChar(15)")>  _
	Public Property REPORTDESC() As String
		Get
			Return Me._REPORTDESC
		End Get
		Set
			If (String.Equals(Me._REPORTDESC, value) = false) Then
				Me.OnREPORTDESCChanging(value)
				Me.SendPropertyChanging
				Me._REPORTDESC = value
				Me.SendPropertyChanged("REPORTDESC")
				Me.OnREPORTDESCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM1", DbType:="SmallInt")>  _
	Public Property MM1() As System.Nullable(Of Short)
		Get
			Return Me._MM1
		End Get
		Set
			If (Me._MM1.Equals(value) = false) Then
				Me.OnMM1Changing(value)
				Me.SendPropertyChanging
				Me._MM1 = value
				Me.SendPropertyChanged("MM1")
				Me.OnMM1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY1", DbType:="SmallInt")>  _
	Public Property YY1() As System.Nullable(Of Short)
		Get
			Return Me._YY1
		End Get
		Set
			If (Me._YY1.Equals(value) = false) Then
				Me.OnYY1Changing(value)
				Me.SendPropertyChanging
				Me._YY1 = value
				Me.SendPropertyChanged("YY1")
				Me.OnYY1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM2", DbType:="SmallInt")>  _
	Public Property MM2() As System.Nullable(Of Short)
		Get
			Return Me._MM2
		End Get
		Set
			If (Me._MM2.Equals(value) = false) Then
				Me.OnMM2Changing(value)
				Me.SendPropertyChanging
				Me._MM2 = value
				Me.SendPropertyChanged("MM2")
				Me.OnMM2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY2", DbType:="SmallInt")>  _
	Public Property YY2() As System.Nullable(Of Short)
		Get
			Return Me._YY2
		End Get
		Set
			If (Me._YY2.Equals(value) = false) Then
				Me.OnYY2Changing(value)
				Me.SendPropertyChanging
				Me._YY2 = value
				Me.SendPropertyChanged("YY2")
				Me.OnYY2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PERIOD", DbType:="VarChar(15)")>  _
	Public Property PERIOD() As String
		Get
			Return Me._PERIOD
		End Get
		Set
			If (String.Equals(Me._PERIOD, value) = false) Then
				Me.OnPERIODChanging(value)
				Me.SendPropertyChanging
				Me._PERIOD = value
				Me.SendPropertyChanged("PERIOD")
				Me.OnPERIODChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY", DbType:="Int")>  _
	Public Property YY() As System.Nullable(Of Integer)
		Get
			Return Me._YY
		End Get
		Set
			If (Me._YY.Equals(value) = false) Then
				Me.OnYYChanging(value)
				Me.SendPropertyChanging
				Me._YY = value
				Me.SendPropertyChanged("YY")
				Me.OnYYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BALTIC_FTP_BALTIC_OPTION_VOLATILITy", Storage:="_BALTIC_FTP", ThisKey:="ROUTE_ID,CMSROUTE_ID", OtherKey:="ROUTE_ID,CMSROUTE_ID", IsForeignKey:=true)>  _
	Public Property BALTIC_FTP() As BALTIC_FTP
		Get
			Return Me._BALTIC_FTP.Entity
		End Get
		Set
			Dim previousValue As BALTIC_FTP = Me._BALTIC_FTP.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._BALTIC_FTP.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._BALTIC_FTP.Entity = Nothing
					previousValue.BALTIC_OPTION_VOLATILITies.Remove(Me)
				End If
				Me._BALTIC_FTP.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BALTIC_OPTION_VOLATILITies.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
					Me._CMSROUTE_ID = value.CMSROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
					Me._CMSROUTE_ID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("BALTIC_FTP")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_BALTIC_OPTION_VOLATILITy", Storage:="_ROUTE", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTE() As ROUTE
		Get
			Return Me._ROUTE.Entity
		End Get
		Set
			Dim previousValue As ROUTE = Me._ROUTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTE.Entity = Nothing
					previousValue.BALTIC_OPTION_VOLATILITies.Remove(Me)
				End If
				Me._ROUTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BALTIC_OPTION_VOLATILITies.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BALTIC_SPOT_RATES")>  _
Partial Public Class BALTIC_SPOT_RATE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ROUTE_ID As Integer
	
	Private _FIXING_DATE As Date
	
	Private _FIXING As Double
	
	Private _ROUTE As EntityRef(Of ROUTE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnFIXING_DATEChanging(value As Date)
    End Sub
    Partial Private Sub OnFIXING_DATEChanged()
    End Sub
    Partial Private Sub OnFIXINGChanging(value As Double)
    End Sub
    Partial Private Sub OnFIXINGChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ROUTE = CType(Nothing, EntityRef(Of ROUTE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If Me._ROUTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING_DATE", DbType:="Date NOT NULL", IsPrimaryKey:=true)>  _
	Public Property FIXING_DATE() As Date
		Get
			Return Me._FIXING_DATE
		End Get
		Set
			If ((Me._FIXING_DATE = value)  _
						= false) Then
				Me.OnFIXING_DATEChanging(value)
				Me.SendPropertyChanging
				Me._FIXING_DATE = value
				Me.SendPropertyChanged("FIXING_DATE")
				Me.OnFIXING_DATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING", DbType:="Float NOT NULL")>  _
	Public Property FIXING() As Double
		Get
			Return Me._FIXING
		End Get
		Set
			If ((Me._FIXING = value)  _
						= false) Then
				Me.OnFIXINGChanging(value)
				Me.SendPropertyChanging
				Me._FIXING = value
				Me.SendPropertyChanged("FIXING")
				Me.OnFIXINGChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_BALTIC_SPOT_RATE", Storage:="_ROUTE", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTE() As ROUTE
		Get
			Return Me._ROUTE.Entity
		End Get
		Set
			Dim previousValue As ROUTE = Me._ROUTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTE.Entity = Nothing
					previousValue.BALTIC_SPOT_RATEs.Remove(Me)
				End If
				Me._ROUTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BALTIC_SPOT_RATEs.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BROKER_DESK_TRADE_CLASSES")>  _
Partial Public Class BROKER_DESK_TRADE_CLASS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ACCOUNT_DESK_ID As Integer
	
	Private _TRADE_CLASS_SHORT As Char
	
	Private _TRADE_CLASS As EntityRef(Of TRADE_CLASS)
	
	Private _ACCOUNT_DESK As EntityRef(Of ACCOUNT_DESK)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnACCOUNT_DESK_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_DESK_IDChanged()
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanging(value As Char)
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TRADE_CLASS = CType(Nothing, EntityRef(Of TRADE_CLASS))
		Me._ACCOUNT_DESK = CType(Nothing, EntityRef(Of ACCOUNT_DESK))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_DESK_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ACCOUNT_DESK_ID() As Integer
		Get
			Return Me._ACCOUNT_DESK_ID
		End Get
		Set
			If ((Me._ACCOUNT_DESK_ID = value)  _
						= false) Then
				If Me._ACCOUNT_DESK.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACCOUNT_DESK_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_DESK_ID = value
				Me.SendPropertyChanged("ACCOUNT_DESK_ID")
				Me.OnACCOUNT_DESK_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_CLASS_SHORT", DbType:="Char(1) NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TRADE_CLASS_SHORT() As Char
		Get
			Return Me._TRADE_CLASS_SHORT
		End Get
		Set
			If ((Me._TRADE_CLASS_SHORT = value)  _
						= false) Then
				If Me._TRADE_CLASS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTRADE_CLASS_SHORTChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_CLASS_SHORT = value
				Me.SendPropertyChanged("TRADE_CLASS_SHORT")
				Me.OnTRADE_CLASS_SHORTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASS_BROKER_DESK_TRADE_CLASS", Storage:="_TRADE_CLASS", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="TRADE_CLASS_SHORT", IsForeignKey:=true)>  _
	Public Property TRADE_CLASS() As TRADE_CLASS
		Get
			Return Me._TRADE_CLASS.Entity
		End Get
		Set
			Dim previousValue As TRADE_CLASS = Me._TRADE_CLASS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TRADE_CLASS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TRADE_CLASS.Entity = Nothing
					previousValue.BROKER_DESK_TRADE_CLASSes.Remove(Me)
				End If
				Me._TRADE_CLASS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BROKER_DESK_TRADE_CLASSes.Add(Me)
					Me._TRADE_CLASS_SHORT = value.TRADE_CLASS_SHORT
				Else
					Me._TRADE_CLASS_SHORT = CType(Nothing, Char)
				End If
				Me.SendPropertyChanged("TRADE_CLASS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESK_BROKER_DESK_TRADE_CLASS", Storage:="_ACCOUNT_DESK", ThisKey:="ACCOUNT_DESK_ID", OtherKey:="ACCOUNT_DESK_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT_DESK() As ACCOUNT_DESK
		Get
			Return Me._ACCOUNT_DESK.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT_DESK = Me._ACCOUNT_DESK.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT_DESK.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT_DESK.Entity = Nothing
					previousValue.BROKER_DESK_TRADE_CLASSes.Remove(Me)
				End If
				Me._ACCOUNT_DESK.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BROKER_DESK_TRADE_CLASSes.Add(Me)
					Me._ACCOUNT_DESK_ID = value.ACCOUNT_DESK_ID
				Else
					Me._ACCOUNT_DESK_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNT_DESK")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CCY")>  _
Partial Public Class CCY
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CCY_ID As Integer
	
	Private _CCY As String
	
	Private _CCY_DESCR As String
	
	Private _CCY_SYMBOL As System.Nullable(Of Char)
	
	Private _CCY_UNICODE As Integer
	
	Private _ROUTEs As EntitySet(Of ROUTE)
	
	Private _ACCOUNTs As EntitySet(Of ACCOUNT)
	
	Private _INTEREST_RATEs As EntitySet(Of INTEREST_RATE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCCY_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCCY_IDChanged()
    End Sub
    Partial Private Sub OnCCYChanging(value As String)
    End Sub
    Partial Private Sub OnCCYChanged()
    End Sub
    Partial Private Sub OnCCY_DESCRChanging(value As String)
    End Sub
    Partial Private Sub OnCCY_DESCRChanged()
    End Sub
    Partial Private Sub OnCCY_SYMBOLChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnCCY_SYMBOLChanged()
    End Sub
    Partial Private Sub OnCCY_UNICODEChanging(value As Integer)
    End Sub
    Partial Private Sub OnCCY_UNICODEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ROUTEs = New EntitySet(Of ROUTE)(AddressOf Me.attach_ROUTEs, AddressOf Me.detach_ROUTEs)
		Me._ACCOUNTs = New EntitySet(Of ACCOUNT)(AddressOf Me.attach_ACCOUNTs, AddressOf Me.detach_ACCOUNTs)
		Me._INTEREST_RATEs = New EntitySet(Of INTEREST_RATE)(AddressOf Me.attach_INTEREST_RATEs, AddressOf Me.detach_INTEREST_RATEs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCY_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CCY_ID() As Integer
		Get
			Return Me._CCY_ID
		End Get
		Set
			If ((Me._CCY_ID = value)  _
						= false) Then
				Me.OnCCY_IDChanging(value)
				Me.SendPropertyChanging
				Me._CCY_ID = value
				Me.SendPropertyChanged("CCY_ID")
				Me.OnCCY_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCY", DbType:="NVarChar(5)")>  _
	Public Property CCY() As String
		Get
			Return Me._CCY
		End Get
		Set
			If (String.Equals(Me._CCY, value) = false) Then
				Me.OnCCYChanging(value)
				Me.SendPropertyChanging
				Me._CCY = value
				Me.SendPropertyChanged("CCY")
				Me.OnCCYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCY_DESCR", DbType:="NVarChar(50)")>  _
	Public Property CCY_DESCR() As String
		Get
			Return Me._CCY_DESCR
		End Get
		Set
			If (String.Equals(Me._CCY_DESCR, value) = false) Then
				Me.OnCCY_DESCRChanging(value)
				Me.SendPropertyChanging
				Me._CCY_DESCR = value
				Me.SendPropertyChanged("CCY_DESCR")
				Me.OnCCY_DESCRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCY_SYMBOL", DbType:="NVarChar(1)")>  _
	Public Property CCY_SYMBOL() As System.Nullable(Of Char)
		Get
			Return Me._CCY_SYMBOL
		End Get
		Set
			If (Me._CCY_SYMBOL.Equals(value) = false) Then
				Me.OnCCY_SYMBOLChanging(value)
				Me.SendPropertyChanging
				Me._CCY_SYMBOL = value
				Me.SendPropertyChanged("CCY_SYMBOL")
				Me.OnCCY_SYMBOLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCY_UNICODE", DbType:="Int NOT NULL")>  _
	Public Property CCY_UNICODE() As Integer
		Get
			Return Me._CCY_UNICODE
		End Get
		Set
			If ((Me._CCY_UNICODE = value)  _
						= false) Then
				Me.OnCCY_UNICODEChanging(value)
				Me.SendPropertyChanging
				Me._CCY_UNICODE = value
				Me.SendPropertyChanged("CCY_UNICODE")
				Me.OnCCY_UNICODEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CCY_ROUTE", Storage:="_ROUTEs", ThisKey:="CCY_ID", OtherKey:="CCY_ID")>  _
	Public Property ROUTEs() As EntitySet(Of ROUTE)
		Get
			Return Me._ROUTEs
		End Get
		Set
			Me._ROUTEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CCY_ACCOUNT", Storage:="_ACCOUNTs", ThisKey:="CCY_ID", OtherKey:="DEFAULT_CCY")>  _
	Public Property ACCOUNTs() As EntitySet(Of ACCOUNT)
		Get
			Return Me._ACCOUNTs
		End Get
		Set
			Me._ACCOUNTs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CCY_INTEREST_RATE", Storage:="_INTEREST_RATEs", ThisKey:="CCY_ID", OtherKey:="CCY_ID")>  _
	Public Property INTEREST_RATEs() As EntitySet(Of INTEREST_RATE)
		Get
			Return Me._INTEREST_RATEs
		End Get
		Set
			Me._INTEREST_RATEs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ROUTEs(ByVal entity As ROUTE)
		Me.SendPropertyChanging
		entity.CCY = Me
	End Sub
	
	Private Sub detach_ROUTEs(ByVal entity As ROUTE)
		Me.SendPropertyChanging
		entity.CCY = Nothing
	End Sub
	
	Private Sub attach_ACCOUNTs(ByVal entity As ACCOUNT)
		Me.SendPropertyChanging
		entity.CCY = Me
	End Sub
	
	Private Sub detach_ACCOUNTs(ByVal entity As ACCOUNT)
		Me.SendPropertyChanging
		entity.CCY = Nothing
	End Sub
	
	Private Sub attach_INTEREST_RATEs(ByVal entity As INTEREST_RATE)
		Me.SendPropertyChanging
		entity.CCY = Me
	End Sub
	
	Private Sub detach_INTEREST_RATEs(ByVal entity As INTEREST_RATE)
		Me.SendPropertyChanging
		entity.CCY = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CONTACT_TYPE")>  _
Partial Public Class CONTACT_TYPE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CONTACT_TYPE_ID As Integer
	
	Private _CONTACT_TYPEDES As String
	
	Private _CONTACTs As EntitySet(Of CONTACT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCONTACT_TYPE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCONTACT_TYPE_IDChanged()
    End Sub
    Partial Private Sub OnCONTACT_TYPEDESChanging(value As String)
    End Sub
    Partial Private Sub OnCONTACT_TYPEDESChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CONTACTs = New EntitySet(Of CONTACT)(AddressOf Me.attach_CONTACTs, AddressOf Me.detach_CONTACTs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONTACT_TYPE_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CONTACT_TYPE_ID() As Integer
		Get
			Return Me._CONTACT_TYPE_ID
		End Get
		Set
			If ((Me._CONTACT_TYPE_ID = value)  _
						= false) Then
				Me.OnCONTACT_TYPE_IDChanging(value)
				Me.SendPropertyChanging
				Me._CONTACT_TYPE_ID = value
				Me.SendPropertyChanged("CONTACT_TYPE_ID")
				Me.OnCONTACT_TYPE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONTACT_TYPEDES", DbType:="NVarChar(50)")>  _
	Public Property CONTACT_TYPEDES() As String
		Get
			Return Me._CONTACT_TYPEDES
		End Get
		Set
			If (String.Equals(Me._CONTACT_TYPEDES, value) = false) Then
				Me.OnCONTACT_TYPEDESChanging(value)
				Me.SendPropertyChanging
				Me._CONTACT_TYPEDES = value
				Me.SendPropertyChanged("CONTACT_TYPEDES")
				Me.OnCONTACT_TYPEDESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONTACT_TYPE_CONTACT", Storage:="_CONTACTs", ThisKey:="CONTACT_TYPE_ID", OtherKey:="CONTACT_TYPE_ID")>  _
	Public Property CONTACTs() As EntitySet(Of CONTACT)
		Get
			Return Me._CONTACTs
		End Get
		Set
			Me._CONTACTs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CONTACTs(ByVal entity As CONTACT)
		Me.SendPropertyChanging
		entity.CONTACT_TYPE = Me
	End Sub
	
	Private Sub detach_CONTACTs(ByVal entity As CONTACT)
		Me.SendPropertyChanging
		entity.CONTACT_TYPE = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CONTACTS")>  _
Partial Public Class CONTACT
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CONTACT_ID As Integer
	
	Private _FIRSTNAME As String
	
	Private _LASTNAME As String
	
	Private _TITLE As String
	
	Private _EMAIL1 As String
	
	Private _EMAIL2 As String
	
	Private _EMAIL3 As String
	
	Private _MSN As String
	
	Private _YAHOO As String
	
	Private _TEL_B1 As String
	
	Private _TEL_B2 As String
	
	Private _TEL_MBL1 As String
	
	Private _TEL_MBL2 As String
	
	Private _TEL_H1 As String
	
	Private _FAX_B As String
	
	Private _FAX_H As String
	
	Private _CONTACT_TYPE_ID As System.Nullable(Of Integer)
	
	Private _STREET As String
	
	Private _CITY As String
	
	Private _REGION As String
	
	Private _ZIPCODE As String
	
	Private _COUNTRY_ID As System.Nullable(Of Integer)
	
	Private _ACCOUNTS_CONTACTs As EntitySet(Of ACCOUNTS_CONTACT)
	
	Private _DESK_TRADE_CONFOs As EntitySet(Of DESK_TRADE_CONFO)
	
	Private _DESK_TRADERs As EntitySet(Of DESK_TRADER)
	
	Private _CONTACT_TYPE As EntityRef(Of CONTACT_TYPE)
	
	Private _COUNTRy As EntityRef(Of COUNTRy)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCONTACT_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCONTACT_IDChanged()
    End Sub
    Partial Private Sub OnFIRSTNAMEChanging(value As String)
    End Sub
    Partial Private Sub OnFIRSTNAMEChanged()
    End Sub
    Partial Private Sub OnLASTNAMEChanging(value As String)
    End Sub
    Partial Private Sub OnLASTNAMEChanged()
    End Sub
    Partial Private Sub OnTITLEChanging(value As String)
    End Sub
    Partial Private Sub OnTITLEChanged()
    End Sub
    Partial Private Sub OnEMAIL1Changing(value As String)
    End Sub
    Partial Private Sub OnEMAIL1Changed()
    End Sub
    Partial Private Sub OnEMAIL2Changing(value As String)
    End Sub
    Partial Private Sub OnEMAIL2Changed()
    End Sub
    Partial Private Sub OnEMAIL3Changing(value As String)
    End Sub
    Partial Private Sub OnEMAIL3Changed()
    End Sub
    Partial Private Sub OnMSNChanging(value As String)
    End Sub
    Partial Private Sub OnMSNChanged()
    End Sub
    Partial Private Sub OnYAHOOChanging(value As String)
    End Sub
    Partial Private Sub OnYAHOOChanged()
    End Sub
    Partial Private Sub OnTEL_B1Changing(value As String)
    End Sub
    Partial Private Sub OnTEL_B1Changed()
    End Sub
    Partial Private Sub OnTEL_B2Changing(value As String)
    End Sub
    Partial Private Sub OnTEL_B2Changed()
    End Sub
    Partial Private Sub OnTEL_MBL1Changing(value As String)
    End Sub
    Partial Private Sub OnTEL_MBL1Changed()
    End Sub
    Partial Private Sub OnTEL_MBL2Changing(value As String)
    End Sub
    Partial Private Sub OnTEL_MBL2Changed()
    End Sub
    Partial Private Sub OnTEL_H1Changing(value As String)
    End Sub
    Partial Private Sub OnTEL_H1Changed()
    End Sub
    Partial Private Sub OnFAX_BChanging(value As String)
    End Sub
    Partial Private Sub OnFAX_BChanged()
    End Sub
    Partial Private Sub OnFAX_HChanging(value As String)
    End Sub
    Partial Private Sub OnFAX_HChanged()
    End Sub
    Partial Private Sub OnCONTACT_TYPE_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCONTACT_TYPE_IDChanged()
    End Sub
    Partial Private Sub OnSTREETChanging(value As String)
    End Sub
    Partial Private Sub OnSTREETChanged()
    End Sub
    Partial Private Sub OnCITYChanging(value As String)
    End Sub
    Partial Private Sub OnCITYChanged()
    End Sub
    Partial Private Sub OnREGIONChanging(value As String)
    End Sub
    Partial Private Sub OnREGIONChanged()
    End Sub
    Partial Private Sub OnZIPCODEChanging(value As String)
    End Sub
    Partial Private Sub OnZIPCODEChanged()
    End Sub
    Partial Private Sub OnCOUNTRY_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCOUNTRY_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ACCOUNTS_CONTACTs = New EntitySet(Of ACCOUNTS_CONTACT)(AddressOf Me.attach_ACCOUNTS_CONTACTs, AddressOf Me.detach_ACCOUNTS_CONTACTs)
		Me._DESK_TRADE_CONFOs = New EntitySet(Of DESK_TRADE_CONFO)(AddressOf Me.attach_DESK_TRADE_CONFOs, AddressOf Me.detach_DESK_TRADE_CONFOs)
		Me._DESK_TRADERs = New EntitySet(Of DESK_TRADER)(AddressOf Me.attach_DESK_TRADERs, AddressOf Me.detach_DESK_TRADERs)
		Me._CONTACT_TYPE = CType(Nothing, EntityRef(Of CONTACT_TYPE))
		Me._COUNTRy = CType(Nothing, EntityRef(Of COUNTRy))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONTACT_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CONTACT_ID() As Integer
		Get
			Return Me._CONTACT_ID
		End Get
		Set
			If ((Me._CONTACT_ID = value)  _
						= false) Then
				Me.OnCONTACT_IDChanging(value)
				Me.SendPropertyChanging
				Me._CONTACT_ID = value
				Me.SendPropertyChanged("CONTACT_ID")
				Me.OnCONTACT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIRSTNAME", DbType:="NVarChar(50)")>  _
	Public Property FIRSTNAME() As String
		Get
			Return Me._FIRSTNAME
		End Get
		Set
			If (String.Equals(Me._FIRSTNAME, value) = false) Then
				Me.OnFIRSTNAMEChanging(value)
				Me.SendPropertyChanging
				Me._FIRSTNAME = value
				Me.SendPropertyChanged("FIRSTNAME")
				Me.OnFIRSTNAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LASTNAME", DbType:="NVarChar(50)")>  _
	Public Property LASTNAME() As String
		Get
			Return Me._LASTNAME
		End Get
		Set
			If (String.Equals(Me._LASTNAME, value) = false) Then
				Me.OnLASTNAMEChanging(value)
				Me.SendPropertyChanging
				Me._LASTNAME = value
				Me.SendPropertyChanged("LASTNAME")
				Me.OnLASTNAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TITLE", DbType:="NVarChar(50)")>  _
	Public Property TITLE() As String
		Get
			Return Me._TITLE
		End Get
		Set
			If (String.Equals(Me._TITLE, value) = false) Then
				Me.OnTITLEChanging(value)
				Me.SendPropertyChanging
				Me._TITLE = value
				Me.SendPropertyChanged("TITLE")
				Me.OnTITLEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMAIL1", DbType:="NVarChar(50)")>  _
	Public Property EMAIL1() As String
		Get
			Return Me._EMAIL1
		End Get
		Set
			If (String.Equals(Me._EMAIL1, value) = false) Then
				Me.OnEMAIL1Changing(value)
				Me.SendPropertyChanging
				Me._EMAIL1 = value
				Me.SendPropertyChanged("EMAIL1")
				Me.OnEMAIL1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMAIL2", DbType:="NVarChar(50)")>  _
	Public Property EMAIL2() As String
		Get
			Return Me._EMAIL2
		End Get
		Set
			If (String.Equals(Me._EMAIL2, value) = false) Then
				Me.OnEMAIL2Changing(value)
				Me.SendPropertyChanging
				Me._EMAIL2 = value
				Me.SendPropertyChanged("EMAIL2")
				Me.OnEMAIL2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMAIL3", DbType:="NVarChar(50)")>  _
	Public Property EMAIL3() As String
		Get
			Return Me._EMAIL3
		End Get
		Set
			If (String.Equals(Me._EMAIL3, value) = false) Then
				Me.OnEMAIL3Changing(value)
				Me.SendPropertyChanging
				Me._EMAIL3 = value
				Me.SendPropertyChanged("EMAIL3")
				Me.OnEMAIL3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MSN", DbType:="NVarChar(50)")>  _
	Public Property MSN() As String
		Get
			Return Me._MSN
		End Get
		Set
			If (String.Equals(Me._MSN, value) = false) Then
				Me.OnMSNChanging(value)
				Me.SendPropertyChanging
				Me._MSN = value
				Me.SendPropertyChanged("MSN")
				Me.OnMSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YAHOO", DbType:="NVarChar(50)")>  _
	Public Property YAHOO() As String
		Get
			Return Me._YAHOO
		End Get
		Set
			If (String.Equals(Me._YAHOO, value) = false) Then
				Me.OnYAHOOChanging(value)
				Me.SendPropertyChanging
				Me._YAHOO = value
				Me.SendPropertyChanged("YAHOO")
				Me.OnYAHOOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TEL_B1", DbType:="NVarChar(50)")>  _
	Public Property TEL_B1() As String
		Get
			Return Me._TEL_B1
		End Get
		Set
			If (String.Equals(Me._TEL_B1, value) = false) Then
				Me.OnTEL_B1Changing(value)
				Me.SendPropertyChanging
				Me._TEL_B1 = value
				Me.SendPropertyChanged("TEL_B1")
				Me.OnTEL_B1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TEL_B2", DbType:="NVarChar(50)")>  _
	Public Property TEL_B2() As String
		Get
			Return Me._TEL_B2
		End Get
		Set
			If (String.Equals(Me._TEL_B2, value) = false) Then
				Me.OnTEL_B2Changing(value)
				Me.SendPropertyChanging
				Me._TEL_B2 = value
				Me.SendPropertyChanged("TEL_B2")
				Me.OnTEL_B2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TEL_MBL1", DbType:="NVarChar(50)")>  _
	Public Property TEL_MBL1() As String
		Get
			Return Me._TEL_MBL1
		End Get
		Set
			If (String.Equals(Me._TEL_MBL1, value) = false) Then
				Me.OnTEL_MBL1Changing(value)
				Me.SendPropertyChanging
				Me._TEL_MBL1 = value
				Me.SendPropertyChanged("TEL_MBL1")
				Me.OnTEL_MBL1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TEL_MBL2", DbType:="NVarChar(50)")>  _
	Public Property TEL_MBL2() As String
		Get
			Return Me._TEL_MBL2
		End Get
		Set
			If (String.Equals(Me._TEL_MBL2, value) = false) Then
				Me.OnTEL_MBL2Changing(value)
				Me.SendPropertyChanging
				Me._TEL_MBL2 = value
				Me.SendPropertyChanged("TEL_MBL2")
				Me.OnTEL_MBL2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TEL_H1", DbType:="NVarChar(50)")>  _
	Public Property TEL_H1() As String
		Get
			Return Me._TEL_H1
		End Get
		Set
			If (String.Equals(Me._TEL_H1, value) = false) Then
				Me.OnTEL_H1Changing(value)
				Me.SendPropertyChanging
				Me._TEL_H1 = value
				Me.SendPropertyChanged("TEL_H1")
				Me.OnTEL_H1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FAX_B", DbType:="NVarChar(50)")>  _
	Public Property FAX_B() As String
		Get
			Return Me._FAX_B
		End Get
		Set
			If (String.Equals(Me._FAX_B, value) = false) Then
				Me.OnFAX_BChanging(value)
				Me.SendPropertyChanging
				Me._FAX_B = value
				Me.SendPropertyChanged("FAX_B")
				Me.OnFAX_BChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FAX_H", DbType:="NVarChar(50)")>  _
	Public Property FAX_H() As String
		Get
			Return Me._FAX_H
		End Get
		Set
			If (String.Equals(Me._FAX_H, value) = false) Then
				Me.OnFAX_HChanging(value)
				Me.SendPropertyChanging
				Me._FAX_H = value
				Me.SendPropertyChanged("FAX_H")
				Me.OnFAX_HChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONTACT_TYPE_ID", DbType:="Int")>  _
	Public Property CONTACT_TYPE_ID() As System.Nullable(Of Integer)
		Get
			Return Me._CONTACT_TYPE_ID
		End Get
		Set
			If (Me._CONTACT_TYPE_ID.Equals(value) = false) Then
				If Me._CONTACT_TYPE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCONTACT_TYPE_IDChanging(value)
				Me.SendPropertyChanging
				Me._CONTACT_TYPE_ID = value
				Me.SendPropertyChanged("CONTACT_TYPE_ID")
				Me.OnCONTACT_TYPE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_STREET", DbType:="NVarChar(50)")>  _
	Public Property STREET() As String
		Get
			Return Me._STREET
		End Get
		Set
			If (String.Equals(Me._STREET, value) = false) Then
				Me.OnSTREETChanging(value)
				Me.SendPropertyChanging
				Me._STREET = value
				Me.SendPropertyChanged("STREET")
				Me.OnSTREETChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CITY", DbType:="NVarChar(50)")>  _
	Public Property CITY() As String
		Get
			Return Me._CITY
		End Get
		Set
			If (String.Equals(Me._CITY, value) = false) Then
				Me.OnCITYChanging(value)
				Me.SendPropertyChanging
				Me._CITY = value
				Me.SendPropertyChanged("CITY")
				Me.OnCITYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REGION", DbType:="NVarChar(50)")>  _
	Public Property REGION() As String
		Get
			Return Me._REGION
		End Get
		Set
			If (String.Equals(Me._REGION, value) = false) Then
				Me.OnREGIONChanging(value)
				Me.SendPropertyChanging
				Me._REGION = value
				Me.SendPropertyChanged("REGION")
				Me.OnREGIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ZIPCODE", DbType:="NVarChar(50)")>  _
	Public Property ZIPCODE() As String
		Get
			Return Me._ZIPCODE
		End Get
		Set
			If (String.Equals(Me._ZIPCODE, value) = false) Then
				Me.OnZIPCODEChanging(value)
				Me.SendPropertyChanging
				Me._ZIPCODE = value
				Me.SendPropertyChanged("ZIPCODE")
				Me.OnZIPCODEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COUNTRY_ID", DbType:="Int")>  _
	Public Property COUNTRY_ID() As System.Nullable(Of Integer)
		Get
			Return Me._COUNTRY_ID
		End Get
		Set
			If (Me._COUNTRY_ID.Equals(value) = false) Then
				If Me._COUNTRy.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCOUNTRY_IDChanging(value)
				Me.SendPropertyChanging
				Me._COUNTRY_ID = value
				Me.SendPropertyChanged("COUNTRY_ID")
				Me.OnCOUNTRY_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONTACT_ACCOUNTS_CONTACT", Storage:="_ACCOUNTS_CONTACTs", ThisKey:="CONTACT_ID", OtherKey:="CONTACT_ID")>  _
	Public Property ACCOUNTS_CONTACTs() As EntitySet(Of ACCOUNTS_CONTACT)
		Get
			Return Me._ACCOUNTS_CONTACTs
		End Get
		Set
			Me._ACCOUNTS_CONTACTs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONTACT_DESK_TRADE_CONFO", Storage:="_DESK_TRADE_CONFOs", ThisKey:="CONTACT_ID", OtherKey:="CONTACT_ID")>  _
	Public Property DESK_TRADE_CONFOs() As EntitySet(Of DESK_TRADE_CONFO)
		Get
			Return Me._DESK_TRADE_CONFOs
		End Get
		Set
			Me._DESK_TRADE_CONFOs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONTACT_DESK_TRADER", Storage:="_DESK_TRADERs", ThisKey:="CONTACT_ID", OtherKey:="CONTACT_ID")>  _
	Public Property DESK_TRADERs() As EntitySet(Of DESK_TRADER)
		Get
			Return Me._DESK_TRADERs
		End Get
		Set
			Me._DESK_TRADERs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONTACT_TYPE_CONTACT", Storage:="_CONTACT_TYPE", ThisKey:="CONTACT_TYPE_ID", OtherKey:="CONTACT_TYPE_ID", IsForeignKey:=true)>  _
	Public Property CONTACT_TYPE() As CONTACT_TYPE
		Get
			Return Me._CONTACT_TYPE.Entity
		End Get
		Set
			Dim previousValue As CONTACT_TYPE = Me._CONTACT_TYPE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CONTACT_TYPE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CONTACT_TYPE.Entity = Nothing
					previousValue.CONTACTs.Remove(Me)
				End If
				Me._CONTACT_TYPE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CONTACTs.Add(Me)
					Me._CONTACT_TYPE_ID = value.CONTACT_TYPE_ID
				Else
					Me._CONTACT_TYPE_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("CONTACT_TYPE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="COUNTRy_CONTACT", Storage:="_COUNTRy", ThisKey:="COUNTRY_ID", OtherKey:="COUNTRY_ID", IsForeignKey:=true)>  _
	Public Property COUNTRy() As COUNTRy
		Get
			Return Me._COUNTRy.Entity
		End Get
		Set
			Dim previousValue As COUNTRy = Me._COUNTRy.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._COUNTRy.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._COUNTRy.Entity = Nothing
					previousValue.CONTACTs.Remove(Me)
				End If
				Me._COUNTRy.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CONTACTs.Add(Me)
					Me._COUNTRY_ID = value.COUNTRY_ID
				Else
					Me._COUNTRY_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("COUNTRy")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ACCOUNTS_CONTACTs(ByVal entity As ACCOUNTS_CONTACT)
		Me.SendPropertyChanging
		entity.CONTACT = Me
	End Sub
	
	Private Sub detach_ACCOUNTS_CONTACTs(ByVal entity As ACCOUNTS_CONTACT)
		Me.SendPropertyChanging
		entity.CONTACT = Nothing
	End Sub
	
	Private Sub attach_DESK_TRADE_CONFOs(ByVal entity As DESK_TRADE_CONFO)
		Me.SendPropertyChanging
		entity.CONTACT = Me
	End Sub
	
	Private Sub detach_DESK_TRADE_CONFOs(ByVal entity As DESK_TRADE_CONFO)
		Me.SendPropertyChanging
		entity.CONTACT = Nothing
	End Sub
	
	Private Sub attach_DESK_TRADERs(ByVal entity As DESK_TRADER)
		Me.SendPropertyChanging
		entity.CONTACT = Me
	End Sub
	
	Private Sub detach_DESK_TRADERs(ByVal entity As DESK_TRADER)
		Me.SendPropertyChanging
		entity.CONTACT = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CONTRACT_SERIES")>  _
Partial Public Class CONTRACT_SERy
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ROUTE_ID As Integer
	
	Private _ACCOUNT_ID As Integer
	
	Private _FRONT_MONTHS As Short
	
	Private _FRONT_QUARTERS As Short
	
	Private _FRONT_HALF_YEARS As Short
	
	Private _FRONT_YEARS As Short
	
	Private _FRONT_MAX_MONTHS As Short
	
	Private _ROUTE As EntityRef(Of ROUTE)
	
	Private _ACCOUNT As EntityRef(Of ACCOUNT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnACCOUNT_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_IDChanged()
    End Sub
    Partial Private Sub OnFRONT_MONTHSChanging(value As Short)
    End Sub
    Partial Private Sub OnFRONT_MONTHSChanged()
    End Sub
    Partial Private Sub OnFRONT_QUARTERSChanging(value As Short)
    End Sub
    Partial Private Sub OnFRONT_QUARTERSChanged()
    End Sub
    Partial Private Sub OnFRONT_HALF_YEARSChanging(value As Short)
    End Sub
    Partial Private Sub OnFRONT_HALF_YEARSChanged()
    End Sub
    Partial Private Sub OnFRONT_YEARSChanging(value As Short)
    End Sub
    Partial Private Sub OnFRONT_YEARSChanged()
    End Sub
    Partial Private Sub OnFRONT_MAX_MONTHSChanging(value As Short)
    End Sub
    Partial Private Sub OnFRONT_MAX_MONTHSChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ROUTE = CType(Nothing, EntityRef(Of ROUTE))
		Me._ACCOUNT = CType(Nothing, EntityRef(Of ACCOUNT))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If Me._ROUTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ACCOUNT_ID() As Integer
		Get
			Return Me._ACCOUNT_ID
		End Get
		Set
			If ((Me._ACCOUNT_ID = value)  _
						= false) Then
				If Me._ACCOUNT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACCOUNT_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_ID = value
				Me.SendPropertyChanged("ACCOUNT_ID")
				Me.OnACCOUNT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FRONT_MONTHS", DbType:="SmallInt NOT NULL")>  _
	Public Property FRONT_MONTHS() As Short
		Get
			Return Me._FRONT_MONTHS
		End Get
		Set
			If ((Me._FRONT_MONTHS = value)  _
						= false) Then
				Me.OnFRONT_MONTHSChanging(value)
				Me.SendPropertyChanging
				Me._FRONT_MONTHS = value
				Me.SendPropertyChanged("FRONT_MONTHS")
				Me.OnFRONT_MONTHSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FRONT_QUARTERS", DbType:="SmallInt NOT NULL")>  _
	Public Property FRONT_QUARTERS() As Short
		Get
			Return Me._FRONT_QUARTERS
		End Get
		Set
			If ((Me._FRONT_QUARTERS = value)  _
						= false) Then
				Me.OnFRONT_QUARTERSChanging(value)
				Me.SendPropertyChanging
				Me._FRONT_QUARTERS = value
				Me.SendPropertyChanged("FRONT_QUARTERS")
				Me.OnFRONT_QUARTERSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FRONT_HALF_YEARS", DbType:="SmallInt NOT NULL")>  _
	Public Property FRONT_HALF_YEARS() As Short
		Get
			Return Me._FRONT_HALF_YEARS
		End Get
		Set
			If ((Me._FRONT_HALF_YEARS = value)  _
						= false) Then
				Me.OnFRONT_HALF_YEARSChanging(value)
				Me.SendPropertyChanging
				Me._FRONT_HALF_YEARS = value
				Me.SendPropertyChanged("FRONT_HALF_YEARS")
				Me.OnFRONT_HALF_YEARSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FRONT_YEARS", DbType:="SmallInt NOT NULL")>  _
	Public Property FRONT_YEARS() As Short
		Get
			Return Me._FRONT_YEARS
		End Get
		Set
			If ((Me._FRONT_YEARS = value)  _
						= false) Then
				Me.OnFRONT_YEARSChanging(value)
				Me.SendPropertyChanging
				Me._FRONT_YEARS = value
				Me.SendPropertyChanged("FRONT_YEARS")
				Me.OnFRONT_YEARSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FRONT_MAX_MONTHS", DbType:="SmallInt NOT NULL")>  _
	Public Property FRONT_MAX_MONTHS() As Short
		Get
			Return Me._FRONT_MAX_MONTHS
		End Get
		Set
			If ((Me._FRONT_MAX_MONTHS = value)  _
						= false) Then
				Me.OnFRONT_MAX_MONTHSChanging(value)
				Me.SendPropertyChanging
				Me._FRONT_MAX_MONTHS = value
				Me.SendPropertyChanged("FRONT_MAX_MONTHS")
				Me.OnFRONT_MAX_MONTHSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_CONTRACT_SERy", Storage:="_ROUTE", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTE() As ROUTE
		Get
			Return Me._ROUTE.Entity
		End Get
		Set
			Dim previousValue As ROUTE = Me._ROUTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTE.Entity = Nothing
					previousValue.CONTRACT_SERies.Remove(Me)
				End If
				Me._ROUTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CONTRACT_SERies.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_CONTRACT_SERy", Storage:="_ACCOUNT", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT() As ACCOUNT
		Get
			Return Me._ACCOUNT.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT = Me._ACCOUNT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT.Entity = Nothing
					previousValue.CONTRACT_SERies.Remove(Me)
				End If
				Me._ACCOUNT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CONTRACT_SERies.Add(Me)
					Me._ACCOUNT_ID = value.ACCOUNT_ID
				Else
					Me._ACCOUNT_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNT")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.COUNTERPARTY_LIMITS")>  _
Partial Public Class COUNTERPARTY_LIMIT
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PRI_ACCOUNT_DESK_ID As Integer
	
	Private _SEC_ACCOUNT_DESK_ID As Integer
	
	Private _CLEARED As Boolean
	
	Private _CLEARED_SHOW_NAME As Short
	
	Private _OTC As Boolean
	
	Private _OTC_SHOW_NAME As Short
	
	Private _PERIOD_LIMIT As Integer
	
	Private _PERIOD_LIMIT_DESCR As EntityRef(Of PERIOD_LIMIT_DESCR)
	
	Private _SHOW_NAME_TYPE As EntityRef(Of SHOW_NAME_TYPE)
	
	Private _SHOW_NAME_TYPE1 As EntityRef(Of SHOW_NAME_TYPE)
	
	Private _ACCOUNT_DESK As EntityRef(Of ACCOUNT_DESK)
	
	Private _ACCOUNT_DESK1 As EntityRef(Of ACCOUNT_DESK)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPRI_ACCOUNT_DESK_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPRI_ACCOUNT_DESK_IDChanged()
    End Sub
    Partial Private Sub OnSEC_ACCOUNT_DESK_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSEC_ACCOUNT_DESK_IDChanged()
    End Sub
    Partial Private Sub OnCLEAREDChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCLEAREDChanged()
    End Sub
    Partial Private Sub OnCLEARED_SHOW_NAMEChanging(value As Short)
    End Sub
    Partial Private Sub OnCLEARED_SHOW_NAMEChanged()
    End Sub
    Partial Private Sub OnOTCChanging(value As Boolean)
    End Sub
    Partial Private Sub OnOTCChanged()
    End Sub
    Partial Private Sub OnOTC_SHOW_NAMEChanging(value As Short)
    End Sub
    Partial Private Sub OnOTC_SHOW_NAMEChanged()
    End Sub
    Partial Private Sub OnPERIOD_LIMITChanging(value As Integer)
    End Sub
    Partial Private Sub OnPERIOD_LIMITChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PERIOD_LIMIT_DESCR = CType(Nothing, EntityRef(Of PERIOD_LIMIT_DESCR))
		Me._SHOW_NAME_TYPE = CType(Nothing, EntityRef(Of SHOW_NAME_TYPE))
		Me._SHOW_NAME_TYPE1 = CType(Nothing, EntityRef(Of SHOW_NAME_TYPE))
		Me._ACCOUNT_DESK = CType(Nothing, EntityRef(Of ACCOUNT_DESK))
		Me._ACCOUNT_DESK1 = CType(Nothing, EntityRef(Of ACCOUNT_DESK))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRI_ACCOUNT_DESK_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property PRI_ACCOUNT_DESK_ID() As Integer
		Get
			Return Me._PRI_ACCOUNT_DESK_ID
		End Get
		Set
			If ((Me._PRI_ACCOUNT_DESK_ID = value)  _
						= false) Then
				If Me._ACCOUNT_DESK.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPRI_ACCOUNT_DESK_IDChanging(value)
				Me.SendPropertyChanging
				Me._PRI_ACCOUNT_DESK_ID = value
				Me.SendPropertyChanged("PRI_ACCOUNT_DESK_ID")
				Me.OnPRI_ACCOUNT_DESK_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SEC_ACCOUNT_DESK_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SEC_ACCOUNT_DESK_ID() As Integer
		Get
			Return Me._SEC_ACCOUNT_DESK_ID
		End Get
		Set
			If ((Me._SEC_ACCOUNT_DESK_ID = value)  _
						= false) Then
				If Me._ACCOUNT_DESK1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSEC_ACCOUNT_DESK_IDChanging(value)
				Me.SendPropertyChanging
				Me._SEC_ACCOUNT_DESK_ID = value
				Me.SendPropertyChanged("SEC_ACCOUNT_DESK_ID")
				Me.OnSEC_ACCOUNT_DESK_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLEARED", DbType:="Bit NOT NULL")>  _
	Public Property CLEARED() As Boolean
		Get
			Return Me._CLEARED
		End Get
		Set
			If ((Me._CLEARED = value)  _
						= false) Then
				Me.OnCLEAREDChanging(value)
				Me.SendPropertyChanging
				Me._CLEARED = value
				Me.SendPropertyChanged("CLEARED")
				Me.OnCLEAREDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLEARED_SHOW_NAME", DbType:="SmallInt NOT NULL")>  _
	Public Property CLEARED_SHOW_NAME() As Short
		Get
			Return Me._CLEARED_SHOW_NAME
		End Get
		Set
			If ((Me._CLEARED_SHOW_NAME = value)  _
						= false) Then
				If Me._SHOW_NAME_TYPE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCLEARED_SHOW_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._CLEARED_SHOW_NAME = value
				Me.SendPropertyChanged("CLEARED_SHOW_NAME")
				Me.OnCLEARED_SHOW_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OTC", DbType:="Bit NOT NULL")>  _
	Public Property OTC() As Boolean
		Get
			Return Me._OTC
		End Get
		Set
			If ((Me._OTC = value)  _
						= false) Then
				Me.OnOTCChanging(value)
				Me.SendPropertyChanging
				Me._OTC = value
				Me.SendPropertyChanged("OTC")
				Me.OnOTCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OTC_SHOW_NAME", DbType:="SmallInt NOT NULL")>  _
	Public Property OTC_SHOW_NAME() As Short
		Get
			Return Me._OTC_SHOW_NAME
		End Get
		Set
			If ((Me._OTC_SHOW_NAME = value)  _
						= false) Then
				If Me._SHOW_NAME_TYPE1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnOTC_SHOW_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._OTC_SHOW_NAME = value
				Me.SendPropertyChanged("OTC_SHOW_NAME")
				Me.OnOTC_SHOW_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PERIOD_LIMIT", DbType:="Int NOT NULL")>  _
	Public Property PERIOD_LIMIT() As Integer
		Get
			Return Me._PERIOD_LIMIT
		End Get
		Set
			If ((Me._PERIOD_LIMIT = value)  _
						= false) Then
				If Me._PERIOD_LIMIT_DESCR.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPERIOD_LIMITChanging(value)
				Me.SendPropertyChanging
				Me._PERIOD_LIMIT = value
				Me.SendPropertyChanged("PERIOD_LIMIT")
				Me.OnPERIOD_LIMITChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PERIOD_LIMIT_DESCR_COUNTERPARTY_LIMIT", Storage:="_PERIOD_LIMIT_DESCR", ThisKey:="PERIOD_LIMIT", OtherKey:="PERIOD_LIMIT", IsForeignKey:=true)>  _
	Public Property PERIOD_LIMIT_DESCR() As PERIOD_LIMIT_DESCR
		Get
			Return Me._PERIOD_LIMIT_DESCR.Entity
		End Get
		Set
			Dim previousValue As PERIOD_LIMIT_DESCR = Me._PERIOD_LIMIT_DESCR.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PERIOD_LIMIT_DESCR.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PERIOD_LIMIT_DESCR.Entity = Nothing
					previousValue.COUNTERPARTY_LIMITs.Remove(Me)
				End If
				Me._PERIOD_LIMIT_DESCR.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.COUNTERPARTY_LIMITs.Add(Me)
					Me._PERIOD_LIMIT = value.PERIOD_LIMIT
				Else
					Me._PERIOD_LIMIT = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PERIOD_LIMIT_DESCR")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SHOW_NAME_TYPE_COUNTERPARTY_LIMIT", Storage:="_SHOW_NAME_TYPE", ThisKey:="CLEARED_SHOW_NAME", OtherKey:="SHOW_NAME_ID", IsForeignKey:=true)>  _
	Public Property SHOW_NAME_TYPE() As SHOW_NAME_TYPE
		Get
			Return Me._SHOW_NAME_TYPE.Entity
		End Get
		Set
			Dim previousValue As SHOW_NAME_TYPE = Me._SHOW_NAME_TYPE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SHOW_NAME_TYPE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SHOW_NAME_TYPE.Entity = Nothing
					previousValue.COUNTERPARTY_LIMITs.Remove(Me)
				End If
				Me._SHOW_NAME_TYPE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.COUNTERPARTY_LIMITs.Add(Me)
					Me._CLEARED_SHOW_NAME = value.SHOW_NAME_ID
				Else
					Me._CLEARED_SHOW_NAME = CType(Nothing, Short)
				End If
				Me.SendPropertyChanged("SHOW_NAME_TYPE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SHOW_NAME_TYPE_COUNTERPARTY_LIMIT1", Storage:="_SHOW_NAME_TYPE1", ThisKey:="OTC_SHOW_NAME", OtherKey:="SHOW_NAME_ID", IsForeignKey:=true)>  _
	Public Property SHOW_NAME_TYPE1() As SHOW_NAME_TYPE
		Get
			Return Me._SHOW_NAME_TYPE1.Entity
		End Get
		Set
			Dim previousValue As SHOW_NAME_TYPE = Me._SHOW_NAME_TYPE1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SHOW_NAME_TYPE1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SHOW_NAME_TYPE1.Entity = Nothing
					previousValue.COUNTERPARTY_LIMITs1.Remove(Me)
				End If
				Me._SHOW_NAME_TYPE1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.COUNTERPARTY_LIMITs1.Add(Me)
					Me._OTC_SHOW_NAME = value.SHOW_NAME_ID
				Else
					Me._OTC_SHOW_NAME = CType(Nothing, Short)
				End If
				Me.SendPropertyChanged("SHOW_NAME_TYPE1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESK_COUNTERPARTY_LIMIT", Storage:="_ACCOUNT_DESK", ThisKey:="PRI_ACCOUNT_DESK_ID", OtherKey:="ACCOUNT_DESK_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT_DESK() As ACCOUNT_DESK
		Get
			Return Me._ACCOUNT_DESK.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT_DESK = Me._ACCOUNT_DESK.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT_DESK.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT_DESK.Entity = Nothing
					previousValue.COUNTERPARTY_LIMITs.Remove(Me)
				End If
				Me._ACCOUNT_DESK.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.COUNTERPARTY_LIMITs.Add(Me)
					Me._PRI_ACCOUNT_DESK_ID = value.ACCOUNT_DESK_ID
				Else
					Me._PRI_ACCOUNT_DESK_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNT_DESK")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESK_COUNTERPARTY_LIMIT1", Storage:="_ACCOUNT_DESK1", ThisKey:="SEC_ACCOUNT_DESK_ID", OtherKey:="ACCOUNT_DESK_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT_DESK1() As ACCOUNT_DESK
		Get
			Return Me._ACCOUNT_DESK1.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT_DESK = Me._ACCOUNT_DESK1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT_DESK1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT_DESK1.Entity = Nothing
					previousValue.COUNTERPARTY_LIMITs1.Remove(Me)
				End If
				Me._ACCOUNT_DESK1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.COUNTERPARTY_LIMITs1.Add(Me)
					Me._SEC_ACCOUNT_DESK_ID = value.ACCOUNT_DESK_ID
				Else
					Me._SEC_ACCOUNT_DESK_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNT_DESK1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.COUNTRIES")>  _
Partial Public Class COUNTRy
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _COUNTRY_ID As Integer
	
	Private _COUNTRY_ISO As String
	
	Private _COUNTRY_UN As String
	
	Private _COUNTRY_DESCR As String
	
	Private _CONTACTs As EntitySet(Of CONTACT)
	
	Private _EXCHANGEs As EntitySet(Of EXCHANGE)
	
	Private _ACCOUNTs As EntitySet(Of ACCOUNT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCOUNTRY_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCOUNTRY_IDChanged()
    End Sub
    Partial Private Sub OnCOUNTRY_ISOChanging(value As String)
    End Sub
    Partial Private Sub OnCOUNTRY_ISOChanged()
    End Sub
    Partial Private Sub OnCOUNTRY_UNChanging(value As String)
    End Sub
    Partial Private Sub OnCOUNTRY_UNChanged()
    End Sub
    Partial Private Sub OnCOUNTRY_DESCRChanging(value As String)
    End Sub
    Partial Private Sub OnCOUNTRY_DESCRChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CONTACTs = New EntitySet(Of CONTACT)(AddressOf Me.attach_CONTACTs, AddressOf Me.detach_CONTACTs)
		Me._EXCHANGEs = New EntitySet(Of EXCHANGE)(AddressOf Me.attach_EXCHANGEs, AddressOf Me.detach_EXCHANGEs)
		Me._ACCOUNTs = New EntitySet(Of ACCOUNT)(AddressOf Me.attach_ACCOUNTs, AddressOf Me.detach_ACCOUNTs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COUNTRY_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property COUNTRY_ID() As Integer
		Get
			Return Me._COUNTRY_ID
		End Get
		Set
			If ((Me._COUNTRY_ID = value)  _
						= false) Then
				Me.OnCOUNTRY_IDChanging(value)
				Me.SendPropertyChanging
				Me._COUNTRY_ID = value
				Me.SendPropertyChanged("COUNTRY_ID")
				Me.OnCOUNTRY_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COUNTRY_ISO", DbType:="NVarChar(3) NOT NULL", CanBeNull:=false)>  _
	Public Property COUNTRY_ISO() As String
		Get
			Return Me._COUNTRY_ISO
		End Get
		Set
			If (String.Equals(Me._COUNTRY_ISO, value) = false) Then
				Me.OnCOUNTRY_ISOChanging(value)
				Me.SendPropertyChanging
				Me._COUNTRY_ISO = value
				Me.SendPropertyChanged("COUNTRY_ISO")
				Me.OnCOUNTRY_ISOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COUNTRY_UN", DbType:="NVarChar(3) NOT NULL", CanBeNull:=false)>  _
	Public Property COUNTRY_UN() As String
		Get
			Return Me._COUNTRY_UN
		End Get
		Set
			If (String.Equals(Me._COUNTRY_UN, value) = false) Then
				Me.OnCOUNTRY_UNChanging(value)
				Me.SendPropertyChanging
				Me._COUNTRY_UN = value
				Me.SendPropertyChanged("COUNTRY_UN")
				Me.OnCOUNTRY_UNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COUNTRY_DESCR", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property COUNTRY_DESCR() As String
		Get
			Return Me._COUNTRY_DESCR
		End Get
		Set
			If (String.Equals(Me._COUNTRY_DESCR, value) = false) Then
				Me.OnCOUNTRY_DESCRChanging(value)
				Me.SendPropertyChanging
				Me._COUNTRY_DESCR = value
				Me.SendPropertyChanged("COUNTRY_DESCR")
				Me.OnCOUNTRY_DESCRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="COUNTRy_CONTACT", Storage:="_CONTACTs", ThisKey:="COUNTRY_ID", OtherKey:="COUNTRY_ID")>  _
	Public Property CONTACTs() As EntitySet(Of CONTACT)
		Get
			Return Me._CONTACTs
		End Get
		Set
			Me._CONTACTs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="COUNTRy_EXCHANGE", Storage:="_EXCHANGEs", ThisKey:="COUNTRY_ID", OtherKey:="COUNTRY_ID")>  _
	Public Property EXCHANGEs() As EntitySet(Of EXCHANGE)
		Get
			Return Me._EXCHANGEs
		End Get
		Set
			Me._EXCHANGEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="COUNTRy_ACCOUNT", Storage:="_ACCOUNTs", ThisKey:="COUNTRY_ID", OtherKey:="COUNTRY_ID")>  _
	Public Property ACCOUNTs() As EntitySet(Of ACCOUNT)
		Get
			Return Me._ACCOUNTs
		End Get
		Set
			Me._ACCOUNTs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CONTACTs(ByVal entity As CONTACT)
		Me.SendPropertyChanging
		entity.COUNTRy = Me
	End Sub
	
	Private Sub detach_CONTACTs(ByVal entity As CONTACT)
		Me.SendPropertyChanging
		entity.COUNTRy = Nothing
	End Sub
	
	Private Sub attach_EXCHANGEs(ByVal entity As EXCHANGE)
		Me.SendPropertyChanging
		entity.COUNTRy = Me
	End Sub
	
	Private Sub detach_EXCHANGEs(ByVal entity As EXCHANGE)
		Me.SendPropertyChanging
		entity.COUNTRy = Nothing
	End Sub
	
	Private Sub attach_ACCOUNTs(ByVal entity As ACCOUNT)
		Me.SendPropertyChanging
		entity.COUNTRy = Me
	End Sub
	
	Private Sub detach_ACCOUNTs(ByVal entity As ACCOUNT)
		Me.SendPropertyChanging
		entity.COUNTRy = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DESK_EXCHANGES")>  _
Partial Public Class DESK_EXCHANGE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ACCOUNT_DESK_ID As Integer
	
	Private _EXCHANGE_ID As Integer
	
	Private _TRADE_CLASS_SHORT As Char
	
	Private _ACTIVE As Boolean
	
	Private _ORDER_INCLUDE As Boolean
	
	Private _RANKING As Integer
	
	Private _DESK_EXCHANGES_CLEARERs As EntitySet(Of DESK_EXCHANGES_CLEARER)
	
	Private _EXCHANGE As EntityRef(Of EXCHANGE)
	
	Private _DESK_TRADE_CLASS As EntityRef(Of DESK_TRADE_CLASS)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnACCOUNT_DESK_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_DESK_IDChanged()
    End Sub
    Partial Private Sub OnEXCHANGE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEXCHANGE_IDChanged()
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanging(value As Char)
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanged()
    End Sub
    Partial Private Sub OnACTIVEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnACTIVEChanged()
    End Sub
    Partial Private Sub OnORDER_INCLUDEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnORDER_INCLUDEChanged()
    End Sub
    Partial Private Sub OnRANKINGChanging(value As Integer)
    End Sub
    Partial Private Sub OnRANKINGChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DESK_EXCHANGES_CLEARERs = New EntitySet(Of DESK_EXCHANGES_CLEARER)(AddressOf Me.attach_DESK_EXCHANGES_CLEARERs, AddressOf Me.detach_DESK_EXCHANGES_CLEARERs)
		Me._EXCHANGE = CType(Nothing, EntityRef(Of EXCHANGE))
		Me._DESK_TRADE_CLASS = CType(Nothing, EntityRef(Of DESK_TRADE_CLASS))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_DESK_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ACCOUNT_DESK_ID() As Integer
		Get
			Return Me._ACCOUNT_DESK_ID
		End Get
		Set
			If ((Me._ACCOUNT_DESK_ID = value)  _
						= false) Then
				If Me._DESK_TRADE_CLASS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACCOUNT_DESK_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_DESK_ID = value
				Me.SendPropertyChanged("ACCOUNT_DESK_ID")
				Me.OnACCOUNT_DESK_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property EXCHANGE_ID() As Integer
		Get
			Return Me._EXCHANGE_ID
		End Get
		Set
			If ((Me._EXCHANGE_ID = value)  _
						= false) Then
				If Me._EXCHANGE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEXCHANGE_IDChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_ID = value
				Me.SendPropertyChanged("EXCHANGE_ID")
				Me.OnEXCHANGE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_CLASS_SHORT", DbType:="Char(1) NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TRADE_CLASS_SHORT() As Char
		Get
			Return Me._TRADE_CLASS_SHORT
		End Get
		Set
			If ((Me._TRADE_CLASS_SHORT = value)  _
						= false) Then
				If Me._DESK_TRADE_CLASS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTRADE_CLASS_SHORTChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_CLASS_SHORT = value
				Me.SendPropertyChanged("TRADE_CLASS_SHORT")
				Me.OnTRADE_CLASS_SHORTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACTIVE", DbType:="Bit NOT NULL")>  _
	Public Property ACTIVE() As Boolean
		Get
			Return Me._ACTIVE
		End Get
		Set
			If ((Me._ACTIVE = value)  _
						= false) Then
				Me.OnACTIVEChanging(value)
				Me.SendPropertyChanging
				Me._ACTIVE = value
				Me.SendPropertyChanged("ACTIVE")
				Me.OnACTIVEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_INCLUDE", DbType:="Bit NOT NULL")>  _
	Public Property ORDER_INCLUDE() As Boolean
		Get
			Return Me._ORDER_INCLUDE
		End Get
		Set
			If ((Me._ORDER_INCLUDE = value)  _
						= false) Then
				Me.OnORDER_INCLUDEChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_INCLUDE = value
				Me.SendPropertyChanged("ORDER_INCLUDE")
				Me.OnORDER_INCLUDEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RANKING", DbType:="Int NOT NULL")>  _
	Public Property RANKING() As Integer
		Get
			Return Me._RANKING
		End Get
		Set
			If ((Me._RANKING = value)  _
						= false) Then
				Me.OnRANKINGChanging(value)
				Me.SendPropertyChanging
				Me._RANKING = value
				Me.SendPropertyChanged("RANKING")
				Me.OnRANKINGChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_EXCHANGE_DESK_EXCHANGES_CLEARER", Storage:="_DESK_EXCHANGES_CLEARERs", ThisKey:="ACCOUNT_DESK_ID,EXCHANGE_ID,TRADE_CLASS_SHORT", OtherKey:="ACCOUNT_DESK_ID,EXCHANGE_ID,TRADE_CLASS_SHORT")>  _
	Public Property DESK_EXCHANGES_CLEARERs() As EntitySet(Of DESK_EXCHANGES_CLEARER)
		Get
			Return Me._DESK_EXCHANGES_CLEARERs
		End Get
		Set
			Me._DESK_EXCHANGES_CLEARERs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EXCHANGE_DESK_EXCHANGE", Storage:="_EXCHANGE", ThisKey:="EXCHANGE_ID", OtherKey:="EXCHANGE_ID", IsForeignKey:=true)>  _
	Public Property EXCHANGE() As EXCHANGE
		Get
			Return Me._EXCHANGE.Entity
		End Get
		Set
			Dim previousValue As EXCHANGE = Me._EXCHANGE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EXCHANGE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EXCHANGE.Entity = Nothing
					previousValue.DESK_EXCHANGEs.Remove(Me)
				End If
				Me._EXCHANGE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_EXCHANGEs.Add(Me)
					Me._EXCHANGE_ID = value.EXCHANGE_ID
				Else
					Me._EXCHANGE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("EXCHANGE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADE_CLASS_DESK_EXCHANGE", Storage:="_DESK_TRADE_CLASS", ThisKey:="ACCOUNT_DESK_ID,TRADE_CLASS_SHORT", OtherKey:="ACCOUNT_DESK_ID,TRADE_CLASS_SHORT", IsForeignKey:=true)>  _
	Public Property DESK_TRADE_CLASS() As DESK_TRADE_CLASS
		Get
			Return Me._DESK_TRADE_CLASS.Entity
		End Get
		Set
			Dim previousValue As DESK_TRADE_CLASS = Me._DESK_TRADE_CLASS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DESK_TRADE_CLASS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DESK_TRADE_CLASS.Entity = Nothing
					previousValue.DESK_EXCHANGEs.Remove(Me)
				End If
				Me._DESK_TRADE_CLASS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_EXCHANGEs.Add(Me)
					Me._ACCOUNT_DESK_ID = value.ACCOUNT_DESK_ID
					Me._TRADE_CLASS_SHORT = value.TRADE_CLASS_SHORT
				Else
					Me._ACCOUNT_DESK_ID = CType(Nothing, Integer)
					Me._TRADE_CLASS_SHORT = CType(Nothing, Char)
				End If
				Me.SendPropertyChanged("DESK_TRADE_CLASS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DESK_EXCHANGES_CLEARERs(ByVal entity As DESK_EXCHANGES_CLEARER)
		Me.SendPropertyChanging
		entity.DESK_EXCHANGE = Me
	End Sub
	
	Private Sub detach_DESK_EXCHANGES_CLEARERs(ByVal entity As DESK_EXCHANGES_CLEARER)
		Me.SendPropertyChanging
		entity.DESK_EXCHANGE = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DESK_EXCHANGES_CLEARERS")>  _
Partial Public Class DESK_EXCHANGES_CLEARER
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ACCOUNT_DESK_ID As Integer
	
	Private _EXCHANGE_ID As Integer
	
	Private _ACCOUNT_ID As Integer
	
	Private _TRADE_CLASS_SHORT As Char
	
	Private _CLEARER_ACCOUNT As String
	
	Private _CLEARER_EXTRA1 As String
	
	Private _CLEARER_EXTRA2 As String
	
	Private _CLEARER_EXTRA3 As String
	
	Private _ACTIVE As Boolean
	
	Private _MAIN As Boolean
	
	Private _FORCE_TO_OTC As Boolean
	
	Private _ISDA_ID As Integer
	
	Private _DESK_EXCHANGE As EntityRef(Of DESK_EXCHANGE)
	
	Private _ISDA_TYPE As EntityRef(Of ISDA_TYPE)
	
	Private _ACCOUNT As EntityRef(Of ACCOUNT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnACCOUNT_DESK_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_DESK_IDChanged()
    End Sub
    Partial Private Sub OnEXCHANGE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEXCHANGE_IDChanged()
    End Sub
    Partial Private Sub OnACCOUNT_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_IDChanged()
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanging(value As Char)
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanged()
    End Sub
    Partial Private Sub OnCLEARER_ACCOUNTChanging(value As String)
    End Sub
    Partial Private Sub OnCLEARER_ACCOUNTChanged()
    End Sub
    Partial Private Sub OnCLEARER_EXTRA1Changing(value As String)
    End Sub
    Partial Private Sub OnCLEARER_EXTRA1Changed()
    End Sub
    Partial Private Sub OnCLEARER_EXTRA2Changing(value As String)
    End Sub
    Partial Private Sub OnCLEARER_EXTRA2Changed()
    End Sub
    Partial Private Sub OnCLEARER_EXTRA3Changing(value As String)
    End Sub
    Partial Private Sub OnCLEARER_EXTRA3Changed()
    End Sub
    Partial Private Sub OnACTIVEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnACTIVEChanged()
    End Sub
    Partial Private Sub OnMAINChanging(value As Boolean)
    End Sub
    Partial Private Sub OnMAINChanged()
    End Sub
    Partial Private Sub OnFORCE_TO_OTCChanging(value As Boolean)
    End Sub
    Partial Private Sub OnFORCE_TO_OTCChanged()
    End Sub
    Partial Private Sub OnISDA_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnISDA_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DESK_EXCHANGE = CType(Nothing, EntityRef(Of DESK_EXCHANGE))
		Me._ISDA_TYPE = CType(Nothing, EntityRef(Of ISDA_TYPE))
		Me._ACCOUNT = CType(Nothing, EntityRef(Of ACCOUNT))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_DESK_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ACCOUNT_DESK_ID() As Integer
		Get
			Return Me._ACCOUNT_DESK_ID
		End Get
		Set
			If ((Me._ACCOUNT_DESK_ID = value)  _
						= false) Then
				If Me._DESK_EXCHANGE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACCOUNT_DESK_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_DESK_ID = value
				Me.SendPropertyChanged("ACCOUNT_DESK_ID")
				Me.OnACCOUNT_DESK_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property EXCHANGE_ID() As Integer
		Get
			Return Me._EXCHANGE_ID
		End Get
		Set
			If ((Me._EXCHANGE_ID = value)  _
						= false) Then
				If Me._DESK_EXCHANGE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEXCHANGE_IDChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_ID = value
				Me.SendPropertyChanged("EXCHANGE_ID")
				Me.OnEXCHANGE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ACCOUNT_ID() As Integer
		Get
			Return Me._ACCOUNT_ID
		End Get
		Set
			If ((Me._ACCOUNT_ID = value)  _
						= false) Then
				If Me._ACCOUNT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACCOUNT_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_ID = value
				Me.SendPropertyChanged("ACCOUNT_ID")
				Me.OnACCOUNT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_CLASS_SHORT", DbType:="Char(1) NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TRADE_CLASS_SHORT() As Char
		Get
			Return Me._TRADE_CLASS_SHORT
		End Get
		Set
			If ((Me._TRADE_CLASS_SHORT = value)  _
						= false) Then
				If Me._DESK_EXCHANGE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTRADE_CLASS_SHORTChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_CLASS_SHORT = value
				Me.SendPropertyChanged("TRADE_CLASS_SHORT")
				Me.OnTRADE_CLASS_SHORTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLEARER_ACCOUNT", DbType:="VarChar(50)")>  _
	Public Property CLEARER_ACCOUNT() As String
		Get
			Return Me._CLEARER_ACCOUNT
		End Get
		Set
			If (String.Equals(Me._CLEARER_ACCOUNT, value) = false) Then
				Me.OnCLEARER_ACCOUNTChanging(value)
				Me.SendPropertyChanging
				Me._CLEARER_ACCOUNT = value
				Me.SendPropertyChanged("CLEARER_ACCOUNT")
				Me.OnCLEARER_ACCOUNTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLEARER_EXTRA1", DbType:="VarChar(50)")>  _
	Public Property CLEARER_EXTRA1() As String
		Get
			Return Me._CLEARER_EXTRA1
		End Get
		Set
			If (String.Equals(Me._CLEARER_EXTRA1, value) = false) Then
				Me.OnCLEARER_EXTRA1Changing(value)
				Me.SendPropertyChanging
				Me._CLEARER_EXTRA1 = value
				Me.SendPropertyChanged("CLEARER_EXTRA1")
				Me.OnCLEARER_EXTRA1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLEARER_EXTRA2", DbType:="VarChar(50)")>  _
	Public Property CLEARER_EXTRA2() As String
		Get
			Return Me._CLEARER_EXTRA2
		End Get
		Set
			If (String.Equals(Me._CLEARER_EXTRA2, value) = false) Then
				Me.OnCLEARER_EXTRA2Changing(value)
				Me.SendPropertyChanging
				Me._CLEARER_EXTRA2 = value
				Me.SendPropertyChanged("CLEARER_EXTRA2")
				Me.OnCLEARER_EXTRA2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLEARER_EXTRA3", DbType:="VarChar(50)")>  _
	Public Property CLEARER_EXTRA3() As String
		Get
			Return Me._CLEARER_EXTRA3
		End Get
		Set
			If (String.Equals(Me._CLEARER_EXTRA3, value) = false) Then
				Me.OnCLEARER_EXTRA3Changing(value)
				Me.SendPropertyChanging
				Me._CLEARER_EXTRA3 = value
				Me.SendPropertyChanged("CLEARER_EXTRA3")
				Me.OnCLEARER_EXTRA3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACTIVE", DbType:="Bit NOT NULL")>  _
	Public Property ACTIVE() As Boolean
		Get
			Return Me._ACTIVE
		End Get
		Set
			If ((Me._ACTIVE = value)  _
						= false) Then
				Me.OnACTIVEChanging(value)
				Me.SendPropertyChanging
				Me._ACTIVE = value
				Me.SendPropertyChanged("ACTIVE")
				Me.OnACTIVEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MAIN", DbType:="Bit NOT NULL")>  _
	Public Property MAIN() As Boolean
		Get
			Return Me._MAIN
		End Get
		Set
			If ((Me._MAIN = value)  _
						= false) Then
				Me.OnMAINChanging(value)
				Me.SendPropertyChanging
				Me._MAIN = value
				Me.SendPropertyChanged("MAIN")
				Me.OnMAINChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FORCE_TO_OTC", DbType:="Bit NOT NULL")>  _
	Public Property FORCE_TO_OTC() As Boolean
		Get
			Return Me._FORCE_TO_OTC
		End Get
		Set
			If ((Me._FORCE_TO_OTC = value)  _
						= false) Then
				Me.OnFORCE_TO_OTCChanging(value)
				Me.SendPropertyChanging
				Me._FORCE_TO_OTC = value
				Me.SendPropertyChanged("FORCE_TO_OTC")
				Me.OnFORCE_TO_OTCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ISDA_ID", DbType:="Int NOT NULL")>  _
	Public Property ISDA_ID() As Integer
		Get
			Return Me._ISDA_ID
		End Get
		Set
			If ((Me._ISDA_ID = value)  _
						= false) Then
				If Me._ISDA_TYPE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnISDA_IDChanging(value)
				Me.SendPropertyChanging
				Me._ISDA_ID = value
				Me.SendPropertyChanged("ISDA_ID")
				Me.OnISDA_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_EXCHANGE_DESK_EXCHANGES_CLEARER", Storage:="_DESK_EXCHANGE", ThisKey:="ACCOUNT_DESK_ID,EXCHANGE_ID,TRADE_CLASS_SHORT", OtherKey:="ACCOUNT_DESK_ID,EXCHANGE_ID,TRADE_CLASS_SHORT", IsForeignKey:=true)>  _
	Public Property DESK_EXCHANGE() As DESK_EXCHANGE
		Get
			Return Me._DESK_EXCHANGE.Entity
		End Get
		Set
			Dim previousValue As DESK_EXCHANGE = Me._DESK_EXCHANGE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DESK_EXCHANGE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DESK_EXCHANGE.Entity = Nothing
					previousValue.DESK_EXCHANGES_CLEARERs.Remove(Me)
				End If
				Me._DESK_EXCHANGE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_EXCHANGES_CLEARERs.Add(Me)
					Me._ACCOUNT_DESK_ID = value.ACCOUNT_DESK_ID
					Me._EXCHANGE_ID = value.EXCHANGE_ID
					Me._TRADE_CLASS_SHORT = value.TRADE_CLASS_SHORT
				Else
					Me._ACCOUNT_DESK_ID = CType(Nothing, Integer)
					Me._EXCHANGE_ID = CType(Nothing, Integer)
					Me._TRADE_CLASS_SHORT = CType(Nothing, Char)
				End If
				Me.SendPropertyChanged("DESK_EXCHANGE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ISDA_TYPE_DESK_EXCHANGES_CLEARER", Storage:="_ISDA_TYPE", ThisKey:="ISDA_ID", OtherKey:="ISDA_ID", IsForeignKey:=true)>  _
	Public Property ISDA_TYPE() As ISDA_TYPE
		Get
			Return Me._ISDA_TYPE.Entity
		End Get
		Set
			Dim previousValue As ISDA_TYPE = Me._ISDA_TYPE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ISDA_TYPE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ISDA_TYPE.Entity = Nothing
					previousValue.DESK_EXCHANGES_CLEARERs.Remove(Me)
				End If
				Me._ISDA_TYPE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_EXCHANGES_CLEARERs.Add(Me)
					Me._ISDA_ID = value.ISDA_ID
				Else
					Me._ISDA_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ISDA_TYPE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESK_EXCHANGES_CLEARER", Storage:="_ACCOUNT", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT() As ACCOUNT
		Get
			Return Me._ACCOUNT.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT = Me._ACCOUNT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT.Entity = Nothing
					previousValue.DESK_EXCHANGES_CLEARERs.Remove(Me)
				End If
				Me._ACCOUNT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_EXCHANGES_CLEARERs.Add(Me)
					Me._ACCOUNT_ID = value.ACCOUNT_ID
				Else
					Me._ACCOUNT_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNT")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DESK_QUALIFIER")>  _
Partial Public Class DESK_QUALIFIER
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DESK_QUALIFIER As Short
	
	Private _DESK_QUALIFIER_DESCR As String
	
	Private _DESK_QUALIFIER2 As EntityRef(Of DESK_QUALIFIER)
	
	Private _ACCOUNT_DESKs As EntitySet(Of ACCOUNT_DESK)
	
	Private _DESK_QUALIFIER1 As EntityRef(Of DESK_QUALIFIER)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDESK_QUALIFIERChanging(value As Short)
    End Sub
    Partial Private Sub OnDESK_QUALIFIERChanged()
    End Sub
    Partial Private Sub OnDESK_QUALIFIER_DESCRChanging(value As String)
    End Sub
    Partial Private Sub OnDESK_QUALIFIER_DESCRChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DESK_QUALIFIER2 = CType(Nothing, EntityRef(Of DESK_QUALIFIER))
		Me._ACCOUNT_DESKs = New EntitySet(Of ACCOUNT_DESK)(AddressOf Me.attach_ACCOUNT_DESKs, AddressOf Me.detach_ACCOUNT_DESKs)
		Me._DESK_QUALIFIER1 = CType(Nothing, EntityRef(Of DESK_QUALIFIER))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_QUALIFIER", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property DESK_QUALIFIER() As Short
		Get
			Return Me._DESK_QUALIFIER
		End Get
		Set
			If ((Me._DESK_QUALIFIER = value)  _
						= false) Then
				If Me._DESK_QUALIFIER1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDESK_QUALIFIERChanging(value)
				Me.SendPropertyChanging
				Me._DESK_QUALIFIER = value
				Me.SendPropertyChanged("DESK_QUALIFIER")
				Me.OnDESK_QUALIFIERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_QUALIFIER_DESCR", DbType:="NVarChar(50)")>  _
	Public Property DESK_QUALIFIER_DESCR() As String
		Get
			Return Me._DESK_QUALIFIER_DESCR
		End Get
		Set
			If (String.Equals(Me._DESK_QUALIFIER_DESCR, value) = false) Then
				Me.OnDESK_QUALIFIER_DESCRChanging(value)
				Me.SendPropertyChanging
				Me._DESK_QUALIFIER_DESCR = value
				Me.SendPropertyChanged("DESK_QUALIFIER_DESCR")
				Me.OnDESK_QUALIFIER_DESCRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_QUALIFIER_DESK_QUALIFIER", Storage:="_DESK_QUALIFIER2", ThisKey:="DESK_QUALIFIER", OtherKey:="DESK_QUALIFIER", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property DESK_QUALIFIER2() As DESK_QUALIFIER
		Get
			Return Me._DESK_QUALIFIER2.Entity
		End Get
		Set
			Dim previousValue As DESK_QUALIFIER = Me._DESK_QUALIFIER2.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DESK_QUALIFIER2.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DESK_QUALIFIER2.Entity = Nothing
					previousValue.DESK_QUALIFIER1 = Nothing
				End If
				Me._DESK_QUALIFIER2.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.DESK_QUALIFIER1 = Me
				End If
				Me.SendPropertyChanged("DESK_QUALIFIER2")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_QUALIFIER_ACCOUNT_DESK", Storage:="_ACCOUNT_DESKs", ThisKey:="DESK_QUALIFIER", OtherKey:="DESK_QUALIFIER")>  _
	Public Property ACCOUNT_DESKs() As EntitySet(Of ACCOUNT_DESK)
		Get
			Return Me._ACCOUNT_DESKs
		End Get
		Set
			Me._ACCOUNT_DESKs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_QUALIFIER_DESK_QUALIFIER", Storage:="_DESK_QUALIFIER1", ThisKey:="DESK_QUALIFIER", OtherKey:="DESK_QUALIFIER", IsForeignKey:=true)>  _
	Public Property DESK_QUALIFIER1() As DESK_QUALIFIER
		Get
			Return Me._DESK_QUALIFIER1.Entity
		End Get
		Set
			Dim previousValue As DESK_QUALIFIER = Me._DESK_QUALIFIER1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DESK_QUALIFIER1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DESK_QUALIFIER1.Entity = Nothing
					previousValue.DESK_QUALIFIER2 = Nothing
				End If
				Me._DESK_QUALIFIER1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_QUALIFIER2 = Me
					Me._DESK_QUALIFIER = value.DESK_QUALIFIER
				Else
					Me._DESK_QUALIFIER = CType(Nothing, Short)
				End If
				Me.SendPropertyChanged("DESK_QUALIFIER1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ACCOUNT_DESKs(ByVal entity As ACCOUNT_DESK)
		Me.SendPropertyChanging
		entity.DESK_QUALIFIER1 = Me
	End Sub
	
	Private Sub detach_ACCOUNT_DESKs(ByVal entity As ACCOUNT_DESK)
		Me.SendPropertyChanging
		entity.DESK_QUALIFIER1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DESK_TRADE_CONFOS")>  _
Partial Public Class DESK_TRADE_CONFO
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ACCOUNT_DESK_ID As Integer
	
	Private _CONTACT_ID As Integer
	
	Private _SEND_TRADE_EMAIL As Boolean
	
	Private _SEND_TRADE_RECAP As Boolean
	
	Private _SEND_TRADE_SMS As Boolean
	
	Private _CONTACT As EntityRef(Of CONTACT)
	
	Private _ACCOUNT_DESK As EntityRef(Of ACCOUNT_DESK)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnACCOUNT_DESK_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_DESK_IDChanged()
    End Sub
    Partial Private Sub OnCONTACT_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCONTACT_IDChanged()
    End Sub
    Partial Private Sub OnSEND_TRADE_EMAILChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSEND_TRADE_EMAILChanged()
    End Sub
    Partial Private Sub OnSEND_TRADE_RECAPChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSEND_TRADE_RECAPChanged()
    End Sub
    Partial Private Sub OnSEND_TRADE_SMSChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSEND_TRADE_SMSChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CONTACT = CType(Nothing, EntityRef(Of CONTACT))
		Me._ACCOUNT_DESK = CType(Nothing, EntityRef(Of ACCOUNT_DESK))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_DESK_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ACCOUNT_DESK_ID() As Integer
		Get
			Return Me._ACCOUNT_DESK_ID
		End Get
		Set
			If ((Me._ACCOUNT_DESK_ID = value)  _
						= false) Then
				If Me._ACCOUNT_DESK.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACCOUNT_DESK_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_DESK_ID = value
				Me.SendPropertyChanged("ACCOUNT_DESK_ID")
				Me.OnACCOUNT_DESK_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONTACT_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CONTACT_ID() As Integer
		Get
			Return Me._CONTACT_ID
		End Get
		Set
			If ((Me._CONTACT_ID = value)  _
						= false) Then
				If Me._CONTACT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCONTACT_IDChanging(value)
				Me.SendPropertyChanging
				Me._CONTACT_ID = value
				Me.SendPropertyChanged("CONTACT_ID")
				Me.OnCONTACT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SEND_TRADE_EMAIL", DbType:="Bit NOT NULL")>  _
	Public Property SEND_TRADE_EMAIL() As Boolean
		Get
			Return Me._SEND_TRADE_EMAIL
		End Get
		Set
			If ((Me._SEND_TRADE_EMAIL = value)  _
						= false) Then
				Me.OnSEND_TRADE_EMAILChanging(value)
				Me.SendPropertyChanging
				Me._SEND_TRADE_EMAIL = value
				Me.SendPropertyChanged("SEND_TRADE_EMAIL")
				Me.OnSEND_TRADE_EMAILChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SEND_TRADE_RECAP", DbType:="Bit NOT NULL")>  _
	Public Property SEND_TRADE_RECAP() As Boolean
		Get
			Return Me._SEND_TRADE_RECAP
		End Get
		Set
			If ((Me._SEND_TRADE_RECAP = value)  _
						= false) Then
				Me.OnSEND_TRADE_RECAPChanging(value)
				Me.SendPropertyChanging
				Me._SEND_TRADE_RECAP = value
				Me.SendPropertyChanged("SEND_TRADE_RECAP")
				Me.OnSEND_TRADE_RECAPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SEND_TRADE_SMS", DbType:="Bit NOT NULL")>  _
	Public Property SEND_TRADE_SMS() As Boolean
		Get
			Return Me._SEND_TRADE_SMS
		End Get
		Set
			If ((Me._SEND_TRADE_SMS = value)  _
						= false) Then
				Me.OnSEND_TRADE_SMSChanging(value)
				Me.SendPropertyChanging
				Me._SEND_TRADE_SMS = value
				Me.SendPropertyChanged("SEND_TRADE_SMS")
				Me.OnSEND_TRADE_SMSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONTACT_DESK_TRADE_CONFO", Storage:="_CONTACT", ThisKey:="CONTACT_ID", OtherKey:="CONTACT_ID", IsForeignKey:=true)>  _
	Public Property CONTACT() As CONTACT
		Get
			Return Me._CONTACT.Entity
		End Get
		Set
			Dim previousValue As CONTACT = Me._CONTACT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CONTACT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CONTACT.Entity = Nothing
					previousValue.DESK_TRADE_CONFOs.Remove(Me)
				End If
				Me._CONTACT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADE_CONFOs.Add(Me)
					Me._CONTACT_ID = value.CONTACT_ID
				Else
					Me._CONTACT_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CONTACT")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESK_DESK_TRADE_CONFO", Storage:="_ACCOUNT_DESK", ThisKey:="ACCOUNT_DESK_ID", OtherKey:="ACCOUNT_DESK_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT_DESK() As ACCOUNT_DESK
		Get
			Return Me._ACCOUNT_DESK.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT_DESK = Me._ACCOUNT_DESK.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT_DESK.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT_DESK.Entity = Nothing
					previousValue.DESK_TRADE_CONFOs.Remove(Me)
				End If
				Me._ACCOUNT_DESK.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADE_CONFOs.Add(Me)
					Me._ACCOUNT_DESK_ID = value.ACCOUNT_DESK_ID
				Else
					Me._ACCOUNT_DESK_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNT_DESK")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DESK_TRADER_VOICE")>  _
Partial Public Class DESK_TRADER_VOICE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DESK_TRADER_ID As Integer
	
	Private _TRADE_CLASS_SHORT As Char
	
	Private _VESSEL_CLASS_ID As Integer
	
	Private _ROUTE_ID As Integer
	
	Private _VOICE_SUBSCRIBE As Boolean
	
	Private _ROUTE As EntityRef(Of ROUTE)
	
	Private _TRADE_CLASS As EntityRef(Of TRADE_CLASS)
	
	Private _VESSEL_CLASS As EntityRef(Of VESSEL_CLASS)
	
	Private _DESK_TRADER As EntityRef(Of DESK_TRADER)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDESK_TRADER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDESK_TRADER_IDChanged()
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanging(value As Char)
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanged()
    End Sub
    Partial Private Sub OnVESSEL_CLASS_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnVESSEL_CLASS_IDChanged()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnVOICE_SUBSCRIBEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnVOICE_SUBSCRIBEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ROUTE = CType(Nothing, EntityRef(Of ROUTE))
		Me._TRADE_CLASS = CType(Nothing, EntityRef(Of TRADE_CLASS))
		Me._VESSEL_CLASS = CType(Nothing, EntityRef(Of VESSEL_CLASS))
		Me._DESK_TRADER = CType(Nothing, EntityRef(Of DESK_TRADER))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_TRADER_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property DESK_TRADER_ID() As Integer
		Get
			Return Me._DESK_TRADER_ID
		End Get
		Set
			If ((Me._DESK_TRADER_ID = value)  _
						= false) Then
				If Me._DESK_TRADER.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDESK_TRADER_IDChanging(value)
				Me.SendPropertyChanging
				Me._DESK_TRADER_ID = value
				Me.SendPropertyChanged("DESK_TRADER_ID")
				Me.OnDESK_TRADER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_CLASS_SHORT", DbType:="Char(1) NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TRADE_CLASS_SHORT() As Char
		Get
			Return Me._TRADE_CLASS_SHORT
		End Get
		Set
			If ((Me._TRADE_CLASS_SHORT = value)  _
						= false) Then
				If Me._TRADE_CLASS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTRADE_CLASS_SHORTChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_CLASS_SHORT = value
				Me.SendPropertyChanged("TRADE_CLASS_SHORT")
				Me.OnTRADE_CLASS_SHORTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VESSEL_CLASS_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property VESSEL_CLASS_ID() As Integer
		Get
			Return Me._VESSEL_CLASS_ID
		End Get
		Set
			If ((Me._VESSEL_CLASS_ID = value)  _
						= false) Then
				If Me._VESSEL_CLASS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnVESSEL_CLASS_IDChanging(value)
				Me.SendPropertyChanging
				Me._VESSEL_CLASS_ID = value
				Me.SendPropertyChanged("VESSEL_CLASS_ID")
				Me.OnVESSEL_CLASS_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If Me._ROUTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VOICE_SUBSCRIBE", DbType:="Bit NOT NULL")>  _
	Public Property VOICE_SUBSCRIBE() As Boolean
		Get
			Return Me._VOICE_SUBSCRIBE
		End Get
		Set
			If ((Me._VOICE_SUBSCRIBE = value)  _
						= false) Then
				Me.OnVOICE_SUBSCRIBEChanging(value)
				Me.SendPropertyChanging
				Me._VOICE_SUBSCRIBE = value
				Me.SendPropertyChanged("VOICE_SUBSCRIBE")
				Me.OnVOICE_SUBSCRIBEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_DESK_TRADER_VOICE", Storage:="_ROUTE", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTE() As ROUTE
		Get
			Return Me._ROUTE.Entity
		End Get
		Set
			Dim previousValue As ROUTE = Me._ROUTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTE.Entity = Nothing
					previousValue.DESK_TRADER_VOICEs.Remove(Me)
				End If
				Me._ROUTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADER_VOICEs.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASS_DESK_TRADER_VOICE", Storage:="_TRADE_CLASS", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="TRADE_CLASS_SHORT", IsForeignKey:=true)>  _
	Public Property TRADE_CLASS() As TRADE_CLASS
		Get
			Return Me._TRADE_CLASS.Entity
		End Get
		Set
			Dim previousValue As TRADE_CLASS = Me._TRADE_CLASS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TRADE_CLASS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TRADE_CLASS.Entity = Nothing
					previousValue.DESK_TRADER_VOICEs.Remove(Me)
				End If
				Me._TRADE_CLASS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADER_VOICEs.Add(Me)
					Me._TRADE_CLASS_SHORT = value.TRADE_CLASS_SHORT
				Else
					Me._TRADE_CLASS_SHORT = CType(Nothing, Char)
				End If
				Me.SendPropertyChanged("TRADE_CLASS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="VESSEL_CLASS_DESK_TRADER_VOICE", Storage:="_VESSEL_CLASS", ThisKey:="VESSEL_CLASS_ID", OtherKey:="VESSEL_CLASS_ID", IsForeignKey:=true)>  _
	Public Property VESSEL_CLASS() As VESSEL_CLASS
		Get
			Return Me._VESSEL_CLASS.Entity
		End Get
		Set
			Dim previousValue As VESSEL_CLASS = Me._VESSEL_CLASS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._VESSEL_CLASS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._VESSEL_CLASS.Entity = Nothing
					previousValue.DESK_TRADER_VOICEs.Remove(Me)
				End If
				Me._VESSEL_CLASS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADER_VOICEs.Add(Me)
					Me._VESSEL_CLASS_ID = value.VESSEL_CLASS_ID
				Else
					Me._VESSEL_CLASS_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("VESSEL_CLASS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADER_DESK_TRADER_VOICE", Storage:="_DESK_TRADER", ThisKey:="DESK_TRADER_ID", OtherKey:="DESK_TRADER_ID", IsForeignKey:=true)>  _
	Public Property DESK_TRADER() As DESK_TRADER
		Get
			Return Me._DESK_TRADER.Entity
		End Get
		Set
			Dim previousValue As DESK_TRADER = Me._DESK_TRADER.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DESK_TRADER.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DESK_TRADER.Entity = Nothing
					previousValue.DESK_TRADER_VOICEs.Remove(Me)
				End If
				Me._DESK_TRADER.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADER_VOICEs.Add(Me)
					Me._DESK_TRADER_ID = value.DESK_TRADER_ID
				Else
					Me._DESK_TRADER_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DESK_TRADER")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DESK_TRADERS_IM_SUBSCRIPTIONS")>  _
Partial Public Class DESK_TRADERS_IM_SUBSCRIPTION
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DESK_TRADER_ID As Integer
	
	Private _TRADE_CLASS_SHORT As Char
	
	Private _VESSEL_CLASS_ID As Integer
	
	Private _ROUTE_ID As Integer
	
	Private _IM_SUBSCRIBE As Boolean
	
	Private _IM_ID As Integer
	
	Private _VOICE_SUBSCRIBE As Boolean
	
	Private _VOICE_ID As String
	
	Private _IM_GATEWAY As EntityRef(Of IM_GATEWAY)
	
	Private _ROUTE As EntityRef(Of ROUTE)
	
	Private _TRADE_CLASS As EntityRef(Of TRADE_CLASS)
	
	Private _VESSEL_CLASS As EntityRef(Of VESSEL_CLASS)
	
	Private _DESK_TRADER As EntityRef(Of DESK_TRADER)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDESK_TRADER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDESK_TRADER_IDChanged()
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanging(value As Char)
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanged()
    End Sub
    Partial Private Sub OnVESSEL_CLASS_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnVESSEL_CLASS_IDChanged()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnIM_SUBSCRIBEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIM_SUBSCRIBEChanged()
    End Sub
    Partial Private Sub OnIM_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIM_IDChanged()
    End Sub
    Partial Private Sub OnVOICE_SUBSCRIBEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnVOICE_SUBSCRIBEChanged()
    End Sub
    Partial Private Sub OnVOICE_IDChanging(value As String)
    End Sub
    Partial Private Sub OnVOICE_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._IM_GATEWAY = CType(Nothing, EntityRef(Of IM_GATEWAY))
		Me._ROUTE = CType(Nothing, EntityRef(Of ROUTE))
		Me._TRADE_CLASS = CType(Nothing, EntityRef(Of TRADE_CLASS))
		Me._VESSEL_CLASS = CType(Nothing, EntityRef(Of VESSEL_CLASS))
		Me._DESK_TRADER = CType(Nothing, EntityRef(Of DESK_TRADER))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_TRADER_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property DESK_TRADER_ID() As Integer
		Get
			Return Me._DESK_TRADER_ID
		End Get
		Set
			If ((Me._DESK_TRADER_ID = value)  _
						= false) Then
				If Me._DESK_TRADER.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDESK_TRADER_IDChanging(value)
				Me.SendPropertyChanging
				Me._DESK_TRADER_ID = value
				Me.SendPropertyChanged("DESK_TRADER_ID")
				Me.OnDESK_TRADER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_CLASS_SHORT", DbType:="Char(1) NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TRADE_CLASS_SHORT() As Char
		Get
			Return Me._TRADE_CLASS_SHORT
		End Get
		Set
			If ((Me._TRADE_CLASS_SHORT = value)  _
						= false) Then
				If Me._TRADE_CLASS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTRADE_CLASS_SHORTChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_CLASS_SHORT = value
				Me.SendPropertyChanged("TRADE_CLASS_SHORT")
				Me.OnTRADE_CLASS_SHORTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VESSEL_CLASS_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property VESSEL_CLASS_ID() As Integer
		Get
			Return Me._VESSEL_CLASS_ID
		End Get
		Set
			If ((Me._VESSEL_CLASS_ID = value)  _
						= false) Then
				If Me._VESSEL_CLASS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnVESSEL_CLASS_IDChanging(value)
				Me.SendPropertyChanging
				Me._VESSEL_CLASS_ID = value
				Me.SendPropertyChanged("VESSEL_CLASS_ID")
				Me.OnVESSEL_CLASS_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If Me._ROUTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IM_SUBSCRIBE", DbType:="Bit NOT NULL")>  _
	Public Property IM_SUBSCRIBE() As Boolean
		Get
			Return Me._IM_SUBSCRIBE
		End Get
		Set
			If ((Me._IM_SUBSCRIBE = value)  _
						= false) Then
				Me.OnIM_SUBSCRIBEChanging(value)
				Me.SendPropertyChanging
				Me._IM_SUBSCRIBE = value
				Me.SendPropertyChanged("IM_SUBSCRIBE")
				Me.OnIM_SUBSCRIBEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IM_ID", DbType:="Int NOT NULL")>  _
	Public Property IM_ID() As Integer
		Get
			Return Me._IM_ID
		End Get
		Set
			If ((Me._IM_ID = value)  _
						= false) Then
				If Me._IM_GATEWAY.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIM_IDChanging(value)
				Me.SendPropertyChanging
				Me._IM_ID = value
				Me.SendPropertyChanged("IM_ID")
				Me.OnIM_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VOICE_SUBSCRIBE", DbType:="Bit NOT NULL")>  _
	Public Property VOICE_SUBSCRIBE() As Boolean
		Get
			Return Me._VOICE_SUBSCRIBE
		End Get
		Set
			If ((Me._VOICE_SUBSCRIBE = value)  _
						= false) Then
				Me.OnVOICE_SUBSCRIBEChanging(value)
				Me.SendPropertyChanging
				Me._VOICE_SUBSCRIBE = value
				Me.SendPropertyChanged("VOICE_SUBSCRIBE")
				Me.OnVOICE_SUBSCRIBEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VOICE_ID", DbType:="NVarChar(50)")>  _
	Public Property VOICE_ID() As String
		Get
			Return Me._VOICE_ID
		End Get
		Set
			If (String.Equals(Me._VOICE_ID, value) = false) Then
				Me.OnVOICE_IDChanging(value)
				Me.SendPropertyChanging
				Me._VOICE_ID = value
				Me.SendPropertyChanged("VOICE_ID")
				Me.OnVOICE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IM_GATEWAY_DESK_TRADERS_IM_SUBSCRIPTION", Storage:="_IM_GATEWAY", ThisKey:="IM_ID", OtherKey:="IM_ID", IsForeignKey:=true)>  _
	Public Property IM_GATEWAY() As IM_GATEWAY
		Get
			Return Me._IM_GATEWAY.Entity
		End Get
		Set
			Dim previousValue As IM_GATEWAY = Me._IM_GATEWAY.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IM_GATEWAY.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IM_GATEWAY.Entity = Nothing
					previousValue.DESK_TRADERS_IM_SUBSCRIPTIONs.Remove(Me)
				End If
				Me._IM_GATEWAY.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADERS_IM_SUBSCRIPTIONs.Add(Me)
					Me._IM_ID = value.IM_ID
				Else
					Me._IM_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IM_GATEWAY")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_DESK_TRADERS_IM_SUBSCRIPTION", Storage:="_ROUTE", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTE() As ROUTE
		Get
			Return Me._ROUTE.Entity
		End Get
		Set
			Dim previousValue As ROUTE = Me._ROUTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTE.Entity = Nothing
					previousValue.DESK_TRADERS_IM_SUBSCRIPTIONs.Remove(Me)
				End If
				Me._ROUTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADERS_IM_SUBSCRIPTIONs.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASS_DESK_TRADERS_IM_SUBSCRIPTION", Storage:="_TRADE_CLASS", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="TRADE_CLASS_SHORT", IsForeignKey:=true)>  _
	Public Property TRADE_CLASS() As TRADE_CLASS
		Get
			Return Me._TRADE_CLASS.Entity
		End Get
		Set
			Dim previousValue As TRADE_CLASS = Me._TRADE_CLASS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TRADE_CLASS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TRADE_CLASS.Entity = Nothing
					previousValue.DESK_TRADERS_IM_SUBSCRIPTIONs.Remove(Me)
				End If
				Me._TRADE_CLASS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADERS_IM_SUBSCRIPTIONs.Add(Me)
					Me._TRADE_CLASS_SHORT = value.TRADE_CLASS_SHORT
				Else
					Me._TRADE_CLASS_SHORT = CType(Nothing, Char)
				End If
				Me.SendPropertyChanged("TRADE_CLASS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="VESSEL_CLASS_DESK_TRADERS_IM_SUBSCRIPTION", Storage:="_VESSEL_CLASS", ThisKey:="VESSEL_CLASS_ID", OtherKey:="VESSEL_CLASS_ID", IsForeignKey:=true)>  _
	Public Property VESSEL_CLASS() As VESSEL_CLASS
		Get
			Return Me._VESSEL_CLASS.Entity
		End Get
		Set
			Dim previousValue As VESSEL_CLASS = Me._VESSEL_CLASS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._VESSEL_CLASS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._VESSEL_CLASS.Entity = Nothing
					previousValue.DESK_TRADERS_IM_SUBSCRIPTIONs.Remove(Me)
				End If
				Me._VESSEL_CLASS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADERS_IM_SUBSCRIPTIONs.Add(Me)
					Me._VESSEL_CLASS_ID = value.VESSEL_CLASS_ID
				Else
					Me._VESSEL_CLASS_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("VESSEL_CLASS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADER_DESK_TRADERS_IM_SUBSCRIPTION", Storage:="_DESK_TRADER", ThisKey:="DESK_TRADER_ID", OtherKey:="DESK_TRADER_ID", IsForeignKey:=true)>  _
	Public Property DESK_TRADER() As DESK_TRADER
		Get
			Return Me._DESK_TRADER.Entity
		End Get
		Set
			Dim previousValue As DESK_TRADER = Me._DESK_TRADER.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DESK_TRADER.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DESK_TRADER.Entity = Nothing
					previousValue.DESK_TRADERS_IM_SUBSCRIPTIONs.Remove(Me)
				End If
				Me._DESK_TRADER.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADERS_IM_SUBSCRIPTIONs.Add(Me)
					Me._DESK_TRADER_ID = value.DESK_TRADER_ID
				Else
					Me._DESK_TRADER_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DESK_TRADER")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EXCHANGE_HOLIDAYS")>  _
Partial Public Class EXCHANGE_HOLIDAY
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _HOLIDAY As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnHOLIDAYChanging(value As Date)
    End Sub
    Partial Private Sub OnHOLIDAYChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HOLIDAY", DbType:="DateTime NOT NULL", IsPrimaryKey:=true)>  _
	Public Property HOLIDAY() As Date
		Get
			Return Me._HOLIDAY
		End Get
		Set
			If ((Me._HOLIDAY = value)  _
						= false) Then
				Me.OnHOLIDAYChanging(value)
				Me.SendPropertyChanging
				Me._HOLIDAY = value
				Me.SendPropertyChanged("HOLIDAY")
				Me.OnHOLIDAYChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EXCHANGE_ROUTE_PERIODS")>  _
Partial Public Class EXCHANGE_ROUTE_PERIOD
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _EXCHANGE_ROUTE_PERIOD_ID As Integer
	
	Private _EXCHANGE_ROUTE_PERIOD_DESCR As String
	
	Private _FRONT_MONTHS As Integer
	
	Private _FRONT_QUARTERS As Integer
	
	Private _FRONT_HALF_YEARS As Integer
	
	Private _FRONT_YEARS As Integer
	
	Private _FRONT_MAX_MONTHS As Integer
	
	Private _MC_0_1 As Boolean
	
	Private _MC_1_2 As Boolean
	
	Private _MC_0_1_2 As Boolean
	
	Private _QC_0_1 As Boolean
	
	Private _EXCHANGE_ROUTEs As EntitySet(Of EXCHANGE_ROUTE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEXCHANGE_ROUTE_PERIOD_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEXCHANGE_ROUTE_PERIOD_IDChanged()
    End Sub
    Partial Private Sub OnEXCHANGE_ROUTE_PERIOD_DESCRChanging(value As String)
    End Sub
    Partial Private Sub OnEXCHANGE_ROUTE_PERIOD_DESCRChanged()
    End Sub
    Partial Private Sub OnFRONT_MONTHSChanging(value As Integer)
    End Sub
    Partial Private Sub OnFRONT_MONTHSChanged()
    End Sub
    Partial Private Sub OnFRONT_QUARTERSChanging(value As Integer)
    End Sub
    Partial Private Sub OnFRONT_QUARTERSChanged()
    End Sub
    Partial Private Sub OnFRONT_HALF_YEARSChanging(value As Integer)
    End Sub
    Partial Private Sub OnFRONT_HALF_YEARSChanged()
    End Sub
    Partial Private Sub OnFRONT_YEARSChanging(value As Integer)
    End Sub
    Partial Private Sub OnFRONT_YEARSChanged()
    End Sub
    Partial Private Sub OnFRONT_MAX_MONTHSChanging(value As Integer)
    End Sub
    Partial Private Sub OnFRONT_MAX_MONTHSChanged()
    End Sub
    Partial Private Sub OnMC_0_1Changing(value As Boolean)
    End Sub
    Partial Private Sub OnMC_0_1Changed()
    End Sub
    Partial Private Sub OnMC_1_2Changing(value As Boolean)
    End Sub
    Partial Private Sub OnMC_1_2Changed()
    End Sub
    Partial Private Sub OnMC_0_1_2Changing(value As Boolean)
    End Sub
    Partial Private Sub OnMC_0_1_2Changed()
    End Sub
    Partial Private Sub OnQC_0_1Changing(value As Boolean)
    End Sub
    Partial Private Sub OnQC_0_1Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._EXCHANGE_ROUTEs = New EntitySet(Of EXCHANGE_ROUTE)(AddressOf Me.attach_EXCHANGE_ROUTEs, AddressOf Me.detach_EXCHANGE_ROUTEs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_ROUTE_PERIOD_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property EXCHANGE_ROUTE_PERIOD_ID() As Integer
		Get
			Return Me._EXCHANGE_ROUTE_PERIOD_ID
		End Get
		Set
			If ((Me._EXCHANGE_ROUTE_PERIOD_ID = value)  _
						= false) Then
				Me.OnEXCHANGE_ROUTE_PERIOD_IDChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_ROUTE_PERIOD_ID = value
				Me.SendPropertyChanged("EXCHANGE_ROUTE_PERIOD_ID")
				Me.OnEXCHANGE_ROUTE_PERIOD_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_ROUTE_PERIOD_DESCR", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property EXCHANGE_ROUTE_PERIOD_DESCR() As String
		Get
			Return Me._EXCHANGE_ROUTE_PERIOD_DESCR
		End Get
		Set
			If (String.Equals(Me._EXCHANGE_ROUTE_PERIOD_DESCR, value) = false) Then
				Me.OnEXCHANGE_ROUTE_PERIOD_DESCRChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_ROUTE_PERIOD_DESCR = value
				Me.SendPropertyChanged("EXCHANGE_ROUTE_PERIOD_DESCR")
				Me.OnEXCHANGE_ROUTE_PERIOD_DESCRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FRONT_MONTHS", DbType:="Int NOT NULL")>  _
	Public Property FRONT_MONTHS() As Integer
		Get
			Return Me._FRONT_MONTHS
		End Get
		Set
			If ((Me._FRONT_MONTHS = value)  _
						= false) Then
				Me.OnFRONT_MONTHSChanging(value)
				Me.SendPropertyChanging
				Me._FRONT_MONTHS = value
				Me.SendPropertyChanged("FRONT_MONTHS")
				Me.OnFRONT_MONTHSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FRONT_QUARTERS", DbType:="Int NOT NULL")>  _
	Public Property FRONT_QUARTERS() As Integer
		Get
			Return Me._FRONT_QUARTERS
		End Get
		Set
			If ((Me._FRONT_QUARTERS = value)  _
						= false) Then
				Me.OnFRONT_QUARTERSChanging(value)
				Me.SendPropertyChanging
				Me._FRONT_QUARTERS = value
				Me.SendPropertyChanged("FRONT_QUARTERS")
				Me.OnFRONT_QUARTERSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FRONT_HALF_YEARS", DbType:="Int NOT NULL")>  _
	Public Property FRONT_HALF_YEARS() As Integer
		Get
			Return Me._FRONT_HALF_YEARS
		End Get
		Set
			If ((Me._FRONT_HALF_YEARS = value)  _
						= false) Then
				Me.OnFRONT_HALF_YEARSChanging(value)
				Me.SendPropertyChanging
				Me._FRONT_HALF_YEARS = value
				Me.SendPropertyChanged("FRONT_HALF_YEARS")
				Me.OnFRONT_HALF_YEARSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FRONT_YEARS", DbType:="Int NOT NULL")>  _
	Public Property FRONT_YEARS() As Integer
		Get
			Return Me._FRONT_YEARS
		End Get
		Set
			If ((Me._FRONT_YEARS = value)  _
						= false) Then
				Me.OnFRONT_YEARSChanging(value)
				Me.SendPropertyChanging
				Me._FRONT_YEARS = value
				Me.SendPropertyChanged("FRONT_YEARS")
				Me.OnFRONT_YEARSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FRONT_MAX_MONTHS", DbType:="Int NOT NULL")>  _
	Public Property FRONT_MAX_MONTHS() As Integer
		Get
			Return Me._FRONT_MAX_MONTHS
		End Get
		Set
			If ((Me._FRONT_MAX_MONTHS = value)  _
						= false) Then
				Me.OnFRONT_MAX_MONTHSChanging(value)
				Me.SendPropertyChanging
				Me._FRONT_MAX_MONTHS = value
				Me.SendPropertyChanged("FRONT_MAX_MONTHS")
				Me.OnFRONT_MAX_MONTHSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MC_0_1", DbType:="Bit NOT NULL")>  _
	Public Property MC_0_1() As Boolean
		Get
			Return Me._MC_0_1
		End Get
		Set
			If ((Me._MC_0_1 = value)  _
						= false) Then
				Me.OnMC_0_1Changing(value)
				Me.SendPropertyChanging
				Me._MC_0_1 = value
				Me.SendPropertyChanged("MC_0_1")
				Me.OnMC_0_1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MC_1_2", DbType:="Bit NOT NULL")>  _
	Public Property MC_1_2() As Boolean
		Get
			Return Me._MC_1_2
		End Get
		Set
			If ((Me._MC_1_2 = value)  _
						= false) Then
				Me.OnMC_1_2Changing(value)
				Me.SendPropertyChanging
				Me._MC_1_2 = value
				Me.SendPropertyChanged("MC_1_2")
				Me.OnMC_1_2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MC_0_1_2", DbType:="Bit NOT NULL")>  _
	Public Property MC_0_1_2() As Boolean
		Get
			Return Me._MC_0_1_2
		End Get
		Set
			If ((Me._MC_0_1_2 = value)  _
						= false) Then
				Me.OnMC_0_1_2Changing(value)
				Me.SendPropertyChanging
				Me._MC_0_1_2 = value
				Me.SendPropertyChanged("MC_0_1_2")
				Me.OnMC_0_1_2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QC_0_1", DbType:="Bit NOT NULL")>  _
	Public Property QC_0_1() As Boolean
		Get
			Return Me._QC_0_1
		End Get
		Set
			If ((Me._QC_0_1 = value)  _
						= false) Then
				Me.OnQC_0_1Changing(value)
				Me.SendPropertyChanging
				Me._QC_0_1 = value
				Me.SendPropertyChanged("QC_0_1")
				Me.OnQC_0_1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EXCHANGE_ROUTE_PERIOD_EXCHANGE_ROUTE", Storage:="_EXCHANGE_ROUTEs", ThisKey:="EXCHANGE_ROUTE_PERIOD_ID", OtherKey:="EXCHANGE_ROUTE_PERIOD_ID")>  _
	Public Property EXCHANGE_ROUTEs() As EntitySet(Of EXCHANGE_ROUTE)
		Get
			Return Me._EXCHANGE_ROUTEs
		End Get
		Set
			Me._EXCHANGE_ROUTEs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_EXCHANGE_ROUTEs(ByVal entity As EXCHANGE_ROUTE)
		Me.SendPropertyChanging
		entity.EXCHANGE_ROUTE_PERIOD = Me
	End Sub
	
	Private Sub detach_EXCHANGE_ROUTEs(ByVal entity As EXCHANGE_ROUTE)
		Me.SendPropertyChanging
		entity.EXCHANGE_ROUTE_PERIOD = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EXCHANGE_ROUTES")>  _
Partial Public Class EXCHANGE_ROUTE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _EXCHANGE_ROUTES_ID As Integer
	
	Private _EXCHANGE_ID As Integer
	
	Private _VESSEL_CLASS_ID As Integer
	
	Private _ROUTE_ID As Integer
	
	Private _ACTIVE As Boolean
	
	Private _EXCHANGE_ABRV As String
	
	Private _TRADING_START As System.Nullable(Of System.TimeSpan)
	
	Private _TRADING_END As System.Nullable(Of System.TimeSpan)
	
	Private _TRADE_REGISTRATION_START As System.Nullable(Of System.TimeSpan)
	
	Private _TRADE_REGISTRATION_END As System.Nullable(Of System.TimeSpan)
	
	Private _TRADE_REGISTRATION_LAST As System.Nullable(Of System.TimeSpan)
	
	Private _OPTIONS_AVAILABLE As Boolean
	
	Private _EXCHANGE_ROUTE_PERIOD_ID As Integer
	
	Private _EXCHANGE_ROUTE_PERIOD As EntityRef(Of EXCHANGE_ROUTE_PERIOD)
	
	Private _EXCHANGE As EntityRef(Of EXCHANGE)
	
	Private _ROUTE As EntityRef(Of ROUTE)
	
	Private _VESSEL_CLASS As EntityRef(Of VESSEL_CLASS)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEXCHANGE_ROUTES_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEXCHANGE_ROUTES_IDChanged()
    End Sub
    Partial Private Sub OnEXCHANGE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEXCHANGE_IDChanged()
    End Sub
    Partial Private Sub OnVESSEL_CLASS_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnVESSEL_CLASS_IDChanged()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnACTIVEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnACTIVEChanged()
    End Sub
    Partial Private Sub OnEXCHANGE_ABRVChanging(value As String)
    End Sub
    Partial Private Sub OnEXCHANGE_ABRVChanged()
    End Sub
    Partial Private Sub OnTRADING_STARTChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub OnTRADING_STARTChanged()
    End Sub
    Partial Private Sub OnTRADING_ENDChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub OnTRADING_ENDChanged()
    End Sub
    Partial Private Sub OnTRADE_REGISTRATION_STARTChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub OnTRADE_REGISTRATION_STARTChanged()
    End Sub
    Partial Private Sub OnTRADE_REGISTRATION_ENDChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub OnTRADE_REGISTRATION_ENDChanged()
    End Sub
    Partial Private Sub OnTRADE_REGISTRATION_LASTChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub OnTRADE_REGISTRATION_LASTChanged()
    End Sub
    Partial Private Sub OnOPTIONS_AVAILABLEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnOPTIONS_AVAILABLEChanged()
    End Sub
    Partial Private Sub OnEXCHANGE_ROUTE_PERIOD_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEXCHANGE_ROUTE_PERIOD_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._EXCHANGE_ROUTE_PERIOD = CType(Nothing, EntityRef(Of EXCHANGE_ROUTE_PERIOD))
		Me._EXCHANGE = CType(Nothing, EntityRef(Of EXCHANGE))
		Me._ROUTE = CType(Nothing, EntityRef(Of ROUTE))
		Me._VESSEL_CLASS = CType(Nothing, EntityRef(Of VESSEL_CLASS))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_ROUTES_ID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property EXCHANGE_ROUTES_ID() As Integer
		Get
			Return Me._EXCHANGE_ROUTES_ID
		End Get
		Set
			If ((Me._EXCHANGE_ROUTES_ID = value)  _
						= false) Then
				Me.OnEXCHANGE_ROUTES_IDChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_ROUTES_ID = value
				Me.SendPropertyChanged("EXCHANGE_ROUTES_ID")
				Me.OnEXCHANGE_ROUTES_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property EXCHANGE_ID() As Integer
		Get
			Return Me._EXCHANGE_ID
		End Get
		Set
			If ((Me._EXCHANGE_ID = value)  _
						= false) Then
				If Me._EXCHANGE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEXCHANGE_IDChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_ID = value
				Me.SendPropertyChanged("EXCHANGE_ID")
				Me.OnEXCHANGE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VESSEL_CLASS_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property VESSEL_CLASS_ID() As Integer
		Get
			Return Me._VESSEL_CLASS_ID
		End Get
		Set
			If ((Me._VESSEL_CLASS_ID = value)  _
						= false) Then
				If Me._VESSEL_CLASS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnVESSEL_CLASS_IDChanging(value)
				Me.SendPropertyChanging
				Me._VESSEL_CLASS_ID = value
				Me.SendPropertyChanged("VESSEL_CLASS_ID")
				Me.OnVESSEL_CLASS_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If Me._ROUTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACTIVE", DbType:="Bit NOT NULL")>  _
	Public Property ACTIVE() As Boolean
		Get
			Return Me._ACTIVE
		End Get
		Set
			If ((Me._ACTIVE = value)  _
						= false) Then
				Me.OnACTIVEChanging(value)
				Me.SendPropertyChanging
				Me._ACTIVE = value
				Me.SendPropertyChanged("ACTIVE")
				Me.OnACTIVEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_ABRV", DbType:="VarChar(50)")>  _
	Public Property EXCHANGE_ABRV() As String
		Get
			Return Me._EXCHANGE_ABRV
		End Get
		Set
			If (String.Equals(Me._EXCHANGE_ABRV, value) = false) Then
				Me.OnEXCHANGE_ABRVChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_ABRV = value
				Me.SendPropertyChanged("EXCHANGE_ABRV")
				Me.OnEXCHANGE_ABRVChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADING_START", DbType:="Time")>  _
	Public Property TRADING_START() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._TRADING_START
		End Get
		Set
			If (Me._TRADING_START.Equals(value) = false) Then
				Me.OnTRADING_STARTChanging(value)
				Me.SendPropertyChanging
				Me._TRADING_START = value
				Me.SendPropertyChanged("TRADING_START")
				Me.OnTRADING_STARTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADING_END", DbType:="Time")>  _
	Public Property TRADING_END() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._TRADING_END
		End Get
		Set
			If (Me._TRADING_END.Equals(value) = false) Then
				Me.OnTRADING_ENDChanging(value)
				Me.SendPropertyChanging
				Me._TRADING_END = value
				Me.SendPropertyChanged("TRADING_END")
				Me.OnTRADING_ENDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_REGISTRATION_START", DbType:="Time")>  _
	Public Property TRADE_REGISTRATION_START() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._TRADE_REGISTRATION_START
		End Get
		Set
			If (Me._TRADE_REGISTRATION_START.Equals(value) = false) Then
				Me.OnTRADE_REGISTRATION_STARTChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_REGISTRATION_START = value
				Me.SendPropertyChanged("TRADE_REGISTRATION_START")
				Me.OnTRADE_REGISTRATION_STARTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_REGISTRATION_END", DbType:="Time")>  _
	Public Property TRADE_REGISTRATION_END() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._TRADE_REGISTRATION_END
		End Get
		Set
			If (Me._TRADE_REGISTRATION_END.Equals(value) = false) Then
				Me.OnTRADE_REGISTRATION_ENDChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_REGISTRATION_END = value
				Me.SendPropertyChanged("TRADE_REGISTRATION_END")
				Me.OnTRADE_REGISTRATION_ENDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_REGISTRATION_LAST", DbType:="Time")>  _
	Public Property TRADE_REGISTRATION_LAST() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._TRADE_REGISTRATION_LAST
		End Get
		Set
			If (Me._TRADE_REGISTRATION_LAST.Equals(value) = false) Then
				Me.OnTRADE_REGISTRATION_LASTChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_REGISTRATION_LAST = value
				Me.SendPropertyChanged("TRADE_REGISTRATION_LAST")
				Me.OnTRADE_REGISTRATION_LASTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OPTIONS_AVAILABLE", DbType:="Bit NOT NULL")>  _
	Public Property OPTIONS_AVAILABLE() As Boolean
		Get
			Return Me._OPTIONS_AVAILABLE
		End Get
		Set
			If ((Me._OPTIONS_AVAILABLE = value)  _
						= false) Then
				Me.OnOPTIONS_AVAILABLEChanging(value)
				Me.SendPropertyChanging
				Me._OPTIONS_AVAILABLE = value
				Me.SendPropertyChanged("OPTIONS_AVAILABLE")
				Me.OnOPTIONS_AVAILABLEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_ROUTE_PERIOD_ID", DbType:="Int NOT NULL")>  _
	Public Property EXCHANGE_ROUTE_PERIOD_ID() As Integer
		Get
			Return Me._EXCHANGE_ROUTE_PERIOD_ID
		End Get
		Set
			If ((Me._EXCHANGE_ROUTE_PERIOD_ID = value)  _
						= false) Then
				If Me._EXCHANGE_ROUTE_PERIOD.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEXCHANGE_ROUTE_PERIOD_IDChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_ROUTE_PERIOD_ID = value
				Me.SendPropertyChanged("EXCHANGE_ROUTE_PERIOD_ID")
				Me.OnEXCHANGE_ROUTE_PERIOD_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EXCHANGE_ROUTE_PERIOD_EXCHANGE_ROUTE", Storage:="_EXCHANGE_ROUTE_PERIOD", ThisKey:="EXCHANGE_ROUTE_PERIOD_ID", OtherKey:="EXCHANGE_ROUTE_PERIOD_ID", IsForeignKey:=true)>  _
	Public Property EXCHANGE_ROUTE_PERIOD() As EXCHANGE_ROUTE_PERIOD
		Get
			Return Me._EXCHANGE_ROUTE_PERIOD.Entity
		End Get
		Set
			Dim previousValue As EXCHANGE_ROUTE_PERIOD = Me._EXCHANGE_ROUTE_PERIOD.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EXCHANGE_ROUTE_PERIOD.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EXCHANGE_ROUTE_PERIOD.Entity = Nothing
					previousValue.EXCHANGE_ROUTEs.Remove(Me)
				End If
				Me._EXCHANGE_ROUTE_PERIOD.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EXCHANGE_ROUTEs.Add(Me)
					Me._EXCHANGE_ROUTE_PERIOD_ID = value.EXCHANGE_ROUTE_PERIOD_ID
				Else
					Me._EXCHANGE_ROUTE_PERIOD_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("EXCHANGE_ROUTE_PERIOD")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EXCHANGE_EXCHANGE_ROUTE", Storage:="_EXCHANGE", ThisKey:="EXCHANGE_ID", OtherKey:="EXCHANGE_ID", IsForeignKey:=true)>  _
	Public Property EXCHANGE() As EXCHANGE
		Get
			Return Me._EXCHANGE.Entity
		End Get
		Set
			Dim previousValue As EXCHANGE = Me._EXCHANGE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EXCHANGE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EXCHANGE.Entity = Nothing
					previousValue.EXCHANGE_ROUTEs.Remove(Me)
				End If
				Me._EXCHANGE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EXCHANGE_ROUTEs.Add(Me)
					Me._EXCHANGE_ID = value.EXCHANGE_ID
				Else
					Me._EXCHANGE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("EXCHANGE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_EXCHANGE_ROUTE", Storage:="_ROUTE", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTE() As ROUTE
		Get
			Return Me._ROUTE.Entity
		End Get
		Set
			Dim previousValue As ROUTE = Me._ROUTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTE.Entity = Nothing
					previousValue.EXCHANGE_ROUTEs.Remove(Me)
				End If
				Me._ROUTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EXCHANGE_ROUTEs.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="VESSEL_CLASS_EXCHANGE_ROUTE", Storage:="_VESSEL_CLASS", ThisKey:="VESSEL_CLASS_ID", OtherKey:="VESSEL_CLASS_ID", IsForeignKey:=true)>  _
	Public Property VESSEL_CLASS() As VESSEL_CLASS
		Get
			Return Me._VESSEL_CLASS.Entity
		End Get
		Set
			Dim previousValue As VESSEL_CLASS = Me._VESSEL_CLASS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._VESSEL_CLASS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._VESSEL_CLASS.Entity = Nothing
					previousValue.EXCHANGE_ROUTEs.Remove(Me)
				End If
				Me._VESSEL_CLASS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EXCHANGE_ROUTEs.Add(Me)
					Me._VESSEL_CLASS_ID = value.VESSEL_CLASS_ID
				Else
					Me._VESSEL_CLASS_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("VESSEL_CLASS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EXCHANGES")>  _
Partial Public Class EXCHANGE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _EXCHANGE_ID As Integer
	
	Private _EXCHANGE_NAME_FULL As String
	
	Private _EXCHANGE_NAME_SHORT As String
	
	Private _EXCHANGE_OPEN_TIME As System.TimeSpan
	
	Private _EXCHANGE_CLOSING_TIME As System.TimeSpan
	
	Private _COUNTRY_ID As Integer
	
	Private _EXCHANGE_WEBSITE As String
	
	Private _EXCHANGE_GMT As Double
	
	Private _ACCOUNT_ID As System.Nullable(Of Integer)
	
	Private _HALF_DAYS As Boolean
	
	Private _DEFAULT_CLEARER_ID As Integer
	
	Private _FORCE_TO_OTC As Boolean
	
	Private _ISDA_ID As Integer
	
	Private _EXCHANGE_SHORTCUT As Char
	
	Private _DESK_EXCHANGEs As EntitySet(Of DESK_EXCHANGE)
	
	Private _EXCHANGE_ROUTEs As EntitySet(Of EXCHANGE_ROUTE)
	
	Private _ORDERS_FFA_EXCHANGEs As EntitySet(Of ORDERS_FFA_EXCHANGE)
	
	Private _TRADE_CLASS_EXCHANGEs As EntitySet(Of TRADE_CLASS_EXCHANGE)
	
	Private _TRADES_FFAs As EntitySet(Of TRADES_FFA)
	
	Private _COUNTRy As EntityRef(Of COUNTRy)
	
	Private _ISDA_TYPE As EntityRef(Of ISDA_TYPE)
	
	Private _ACCOUNT As EntityRef(Of ACCOUNT)
	
	Private _ACCOUNT1 As EntityRef(Of ACCOUNT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEXCHANGE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEXCHANGE_IDChanged()
    End Sub
    Partial Private Sub OnEXCHANGE_NAME_FULLChanging(value As String)
    End Sub
    Partial Private Sub OnEXCHANGE_NAME_FULLChanged()
    End Sub
    Partial Private Sub OnEXCHANGE_NAME_SHORTChanging(value As String)
    End Sub
    Partial Private Sub OnEXCHANGE_NAME_SHORTChanged()
    End Sub
    Partial Private Sub OnEXCHANGE_OPEN_TIMEChanging(value As System.TimeSpan)
    End Sub
    Partial Private Sub OnEXCHANGE_OPEN_TIMEChanged()
    End Sub
    Partial Private Sub OnEXCHANGE_CLOSING_TIMEChanging(value As System.TimeSpan)
    End Sub
    Partial Private Sub OnEXCHANGE_CLOSING_TIMEChanged()
    End Sub
    Partial Private Sub OnCOUNTRY_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCOUNTRY_IDChanged()
    End Sub
    Partial Private Sub OnEXCHANGE_WEBSITEChanging(value As String)
    End Sub
    Partial Private Sub OnEXCHANGE_WEBSITEChanged()
    End Sub
    Partial Private Sub OnEXCHANGE_GMTChanging(value As Double)
    End Sub
    Partial Private Sub OnEXCHANGE_GMTChanged()
    End Sub
    Partial Private Sub OnACCOUNT_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnACCOUNT_IDChanged()
    End Sub
    Partial Private Sub OnHALF_DAYSChanging(value As Boolean)
    End Sub
    Partial Private Sub OnHALF_DAYSChanged()
    End Sub
    Partial Private Sub OnDEFAULT_CLEARER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDEFAULT_CLEARER_IDChanged()
    End Sub
    Partial Private Sub OnFORCE_TO_OTCChanging(value As Boolean)
    End Sub
    Partial Private Sub OnFORCE_TO_OTCChanged()
    End Sub
    Partial Private Sub OnISDA_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnISDA_IDChanged()
    End Sub
    Partial Private Sub OnEXCHANGE_SHORTCUTChanging(value As Char)
    End Sub
    Partial Private Sub OnEXCHANGE_SHORTCUTChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DESK_EXCHANGEs = New EntitySet(Of DESK_EXCHANGE)(AddressOf Me.attach_DESK_EXCHANGEs, AddressOf Me.detach_DESK_EXCHANGEs)
		Me._EXCHANGE_ROUTEs = New EntitySet(Of EXCHANGE_ROUTE)(AddressOf Me.attach_EXCHANGE_ROUTEs, AddressOf Me.detach_EXCHANGE_ROUTEs)
		Me._ORDERS_FFA_EXCHANGEs = New EntitySet(Of ORDERS_FFA_EXCHANGE)(AddressOf Me.attach_ORDERS_FFA_EXCHANGEs, AddressOf Me.detach_ORDERS_FFA_EXCHANGEs)
		Me._TRADE_CLASS_EXCHANGEs = New EntitySet(Of TRADE_CLASS_EXCHANGE)(AddressOf Me.attach_TRADE_CLASS_EXCHANGEs, AddressOf Me.detach_TRADE_CLASS_EXCHANGEs)
		Me._TRADES_FFAs = New EntitySet(Of TRADES_FFA)(AddressOf Me.attach_TRADES_FFAs, AddressOf Me.detach_TRADES_FFAs)
		Me._COUNTRy = CType(Nothing, EntityRef(Of COUNTRy))
		Me._ISDA_TYPE = CType(Nothing, EntityRef(Of ISDA_TYPE))
		Me._ACCOUNT = CType(Nothing, EntityRef(Of ACCOUNT))
		Me._ACCOUNT1 = CType(Nothing, EntityRef(Of ACCOUNT))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property EXCHANGE_ID() As Integer
		Get
			Return Me._EXCHANGE_ID
		End Get
		Set
			If ((Me._EXCHANGE_ID = value)  _
						= false) Then
				Me.OnEXCHANGE_IDChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_ID = value
				Me.SendPropertyChanged("EXCHANGE_ID")
				Me.OnEXCHANGE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_NAME_FULL", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property EXCHANGE_NAME_FULL() As String
		Get
			Return Me._EXCHANGE_NAME_FULL
		End Get
		Set
			If (String.Equals(Me._EXCHANGE_NAME_FULL, value) = false) Then
				Me.OnEXCHANGE_NAME_FULLChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_NAME_FULL = value
				Me.SendPropertyChanged("EXCHANGE_NAME_FULL")
				Me.OnEXCHANGE_NAME_FULLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_NAME_SHORT", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property EXCHANGE_NAME_SHORT() As String
		Get
			Return Me._EXCHANGE_NAME_SHORT
		End Get
		Set
			If (String.Equals(Me._EXCHANGE_NAME_SHORT, value) = false) Then
				Me.OnEXCHANGE_NAME_SHORTChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_NAME_SHORT = value
				Me.SendPropertyChanged("EXCHANGE_NAME_SHORT")
				Me.OnEXCHANGE_NAME_SHORTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_OPEN_TIME", DbType:="Time NOT NULL")>  _
	Public Property EXCHANGE_OPEN_TIME() As System.TimeSpan
		Get
			Return Me._EXCHANGE_OPEN_TIME
		End Get
		Set
			If ((Me._EXCHANGE_OPEN_TIME = value)  _
						= false) Then
				Me.OnEXCHANGE_OPEN_TIMEChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_OPEN_TIME = value
				Me.SendPropertyChanged("EXCHANGE_OPEN_TIME")
				Me.OnEXCHANGE_OPEN_TIMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_CLOSING_TIME", DbType:="Time NOT NULL")>  _
	Public Property EXCHANGE_CLOSING_TIME() As System.TimeSpan
		Get
			Return Me._EXCHANGE_CLOSING_TIME
		End Get
		Set
			If ((Me._EXCHANGE_CLOSING_TIME = value)  _
						= false) Then
				Me.OnEXCHANGE_CLOSING_TIMEChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_CLOSING_TIME = value
				Me.SendPropertyChanged("EXCHANGE_CLOSING_TIME")
				Me.OnEXCHANGE_CLOSING_TIMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COUNTRY_ID", DbType:="Int NOT NULL")>  _
	Public Property COUNTRY_ID() As Integer
		Get
			Return Me._COUNTRY_ID
		End Get
		Set
			If ((Me._COUNTRY_ID = value)  _
						= false) Then
				If Me._COUNTRy.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCOUNTRY_IDChanging(value)
				Me.SendPropertyChanging
				Me._COUNTRY_ID = value
				Me.SendPropertyChanged("COUNTRY_ID")
				Me.OnCOUNTRY_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_WEBSITE", DbType:="NVarChar(50)")>  _
	Public Property EXCHANGE_WEBSITE() As String
		Get
			Return Me._EXCHANGE_WEBSITE
		End Get
		Set
			If (String.Equals(Me._EXCHANGE_WEBSITE, value) = false) Then
				Me.OnEXCHANGE_WEBSITEChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_WEBSITE = value
				Me.SendPropertyChanged("EXCHANGE_WEBSITE")
				Me.OnEXCHANGE_WEBSITEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_GMT", DbType:="Float NOT NULL")>  _
	Public Property EXCHANGE_GMT() As Double
		Get
			Return Me._EXCHANGE_GMT
		End Get
		Set
			If ((Me._EXCHANGE_GMT = value)  _
						= false) Then
				Me.OnEXCHANGE_GMTChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_GMT = value
				Me.SendPropertyChanged("EXCHANGE_GMT")
				Me.OnEXCHANGE_GMTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_ID", DbType:="Int")>  _
	Public Property ACCOUNT_ID() As System.Nullable(Of Integer)
		Get
			Return Me._ACCOUNT_ID
		End Get
		Set
			If (Me._ACCOUNT_ID.Equals(value) = false) Then
				If Me._ACCOUNT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACCOUNT_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_ID = value
				Me.SendPropertyChanged("ACCOUNT_ID")
				Me.OnACCOUNT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HALF_DAYS", DbType:="Bit NOT NULL")>  _
	Public Property HALF_DAYS() As Boolean
		Get
			Return Me._HALF_DAYS
		End Get
		Set
			If ((Me._HALF_DAYS = value)  _
						= false) Then
				Me.OnHALF_DAYSChanging(value)
				Me.SendPropertyChanging
				Me._HALF_DAYS = value
				Me.SendPropertyChanged("HALF_DAYS")
				Me.OnHALF_DAYSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEFAULT_CLEARER_ID", DbType:="Int NOT NULL")>  _
	Public Property DEFAULT_CLEARER_ID() As Integer
		Get
			Return Me._DEFAULT_CLEARER_ID
		End Get
		Set
			If ((Me._DEFAULT_CLEARER_ID = value)  _
						= false) Then
				If Me._ACCOUNT1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDEFAULT_CLEARER_IDChanging(value)
				Me.SendPropertyChanging
				Me._DEFAULT_CLEARER_ID = value
				Me.SendPropertyChanged("DEFAULT_CLEARER_ID")
				Me.OnDEFAULT_CLEARER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FORCE_TO_OTC", DbType:="Bit NOT NULL")>  _
	Public Property FORCE_TO_OTC() As Boolean
		Get
			Return Me._FORCE_TO_OTC
		End Get
		Set
			If ((Me._FORCE_TO_OTC = value)  _
						= false) Then
				Me.OnFORCE_TO_OTCChanging(value)
				Me.SendPropertyChanging
				Me._FORCE_TO_OTC = value
				Me.SendPropertyChanged("FORCE_TO_OTC")
				Me.OnFORCE_TO_OTCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ISDA_ID", DbType:="Int NOT NULL")>  _
	Public Property ISDA_ID() As Integer
		Get
			Return Me._ISDA_ID
		End Get
		Set
			If ((Me._ISDA_ID = value)  _
						= false) Then
				If Me._ISDA_TYPE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnISDA_IDChanging(value)
				Me.SendPropertyChanging
				Me._ISDA_ID = value
				Me.SendPropertyChanged("ISDA_ID")
				Me.OnISDA_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_SHORTCUT", DbType:="Char(1) NOT NULL")>  _
	Public Property EXCHANGE_SHORTCUT() As Char
		Get
			Return Me._EXCHANGE_SHORTCUT
		End Get
		Set
			If ((Me._EXCHANGE_SHORTCUT = value)  _
						= false) Then
				Me.OnEXCHANGE_SHORTCUTChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_SHORTCUT = value
				Me.SendPropertyChanged("EXCHANGE_SHORTCUT")
				Me.OnEXCHANGE_SHORTCUTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EXCHANGE_DESK_EXCHANGE", Storage:="_DESK_EXCHANGEs", ThisKey:="EXCHANGE_ID", OtherKey:="EXCHANGE_ID")>  _
	Public Property DESK_EXCHANGEs() As EntitySet(Of DESK_EXCHANGE)
		Get
			Return Me._DESK_EXCHANGEs
		End Get
		Set
			Me._DESK_EXCHANGEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EXCHANGE_EXCHANGE_ROUTE", Storage:="_EXCHANGE_ROUTEs", ThisKey:="EXCHANGE_ID", OtherKey:="EXCHANGE_ID")>  _
	Public Property EXCHANGE_ROUTEs() As EntitySet(Of EXCHANGE_ROUTE)
		Get
			Return Me._EXCHANGE_ROUTEs
		End Get
		Set
			Me._EXCHANGE_ROUTEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EXCHANGE_ORDERS_FFA_EXCHANGE", Storage:="_ORDERS_FFA_EXCHANGEs", ThisKey:="EXCHANGE_ID", OtherKey:="EXCHANGE_ID")>  _
	Public Property ORDERS_FFA_EXCHANGEs() As EntitySet(Of ORDERS_FFA_EXCHANGE)
		Get
			Return Me._ORDERS_FFA_EXCHANGEs
		End Get
		Set
			Me._ORDERS_FFA_EXCHANGEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EXCHANGE_TRADE_CLASS_EXCHANGE", Storage:="_TRADE_CLASS_EXCHANGEs", ThisKey:="EXCHANGE_ID", OtherKey:="EXCHANGE_ID")>  _
	Public Property TRADE_CLASS_EXCHANGEs() As EntitySet(Of TRADE_CLASS_EXCHANGE)
		Get
			Return Me._TRADE_CLASS_EXCHANGEs
		End Get
		Set
			Me._TRADE_CLASS_EXCHANGEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EXCHANGE_TRADES_FFA", Storage:="_TRADES_FFAs", ThisKey:="EXCHANGE_ID", OtherKey:="EXCHANGE_ID")>  _
	Public Property TRADES_FFAs() As EntitySet(Of TRADES_FFA)
		Get
			Return Me._TRADES_FFAs
		End Get
		Set
			Me._TRADES_FFAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="COUNTRy_EXCHANGE", Storage:="_COUNTRy", ThisKey:="COUNTRY_ID", OtherKey:="COUNTRY_ID", IsForeignKey:=true)>  _
	Public Property COUNTRy() As COUNTRy
		Get
			Return Me._COUNTRy.Entity
		End Get
		Set
			Dim previousValue As COUNTRy = Me._COUNTRy.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._COUNTRy.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._COUNTRy.Entity = Nothing
					previousValue.EXCHANGEs.Remove(Me)
				End If
				Me._COUNTRy.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EXCHANGEs.Add(Me)
					Me._COUNTRY_ID = value.COUNTRY_ID
				Else
					Me._COUNTRY_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("COUNTRy")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ISDA_TYPE_EXCHANGE", Storage:="_ISDA_TYPE", ThisKey:="ISDA_ID", OtherKey:="ISDA_ID", IsForeignKey:=true)>  _
	Public Property ISDA_TYPE() As ISDA_TYPE
		Get
			Return Me._ISDA_TYPE.Entity
		End Get
		Set
			Dim previousValue As ISDA_TYPE = Me._ISDA_TYPE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ISDA_TYPE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ISDA_TYPE.Entity = Nothing
					previousValue.EXCHANGEs.Remove(Me)
				End If
				Me._ISDA_TYPE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EXCHANGEs.Add(Me)
					Me._ISDA_ID = value.ISDA_ID
				Else
					Me._ISDA_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ISDA_TYPE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_EXCHANGE", Storage:="_ACCOUNT", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT() As ACCOUNT
		Get
			Return Me._ACCOUNT.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT = Me._ACCOUNT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT.Entity = Nothing
					previousValue.EXCHANGEs.Remove(Me)
				End If
				Me._ACCOUNT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EXCHANGEs.Add(Me)
					Me._ACCOUNT_ID = value.ACCOUNT_ID
				Else
					Me._ACCOUNT_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ACCOUNT")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_EXCHANGE1", Storage:="_ACCOUNT1", ThisKey:="DEFAULT_CLEARER_ID", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT1() As ACCOUNT
		Get
			Return Me._ACCOUNT1.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT = Me._ACCOUNT1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT1.Entity = Nothing
					previousValue.EXCHANGEs1.Remove(Me)
				End If
				Me._ACCOUNT1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EXCHANGEs1.Add(Me)
					Me._DEFAULT_CLEARER_ID = value.ACCOUNT_ID
				Else
					Me._DEFAULT_CLEARER_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNT1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DESK_EXCHANGEs(ByVal entity As DESK_EXCHANGE)
		Me.SendPropertyChanging
		entity.EXCHANGE = Me
	End Sub
	
	Private Sub detach_DESK_EXCHANGEs(ByVal entity As DESK_EXCHANGE)
		Me.SendPropertyChanging
		entity.EXCHANGE = Nothing
	End Sub
	
	Private Sub attach_EXCHANGE_ROUTEs(ByVal entity As EXCHANGE_ROUTE)
		Me.SendPropertyChanging
		entity.EXCHANGE = Me
	End Sub
	
	Private Sub detach_EXCHANGE_ROUTEs(ByVal entity As EXCHANGE_ROUTE)
		Me.SendPropertyChanging
		entity.EXCHANGE = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFA_EXCHANGEs(ByVal entity As ORDERS_FFA_EXCHANGE)
		Me.SendPropertyChanging
		entity.EXCHANGE = Me
	End Sub
	
	Private Sub detach_ORDERS_FFA_EXCHANGEs(ByVal entity As ORDERS_FFA_EXCHANGE)
		Me.SendPropertyChanging
		entity.EXCHANGE = Nothing
	End Sub
	
	Private Sub attach_TRADE_CLASS_EXCHANGEs(ByVal entity As TRADE_CLASS_EXCHANGE)
		Me.SendPropertyChanging
		entity.EXCHANGE = Me
	End Sub
	
	Private Sub detach_TRADE_CLASS_EXCHANGEs(ByVal entity As TRADE_CLASS_EXCHANGE)
		Me.SendPropertyChanging
		entity.EXCHANGE = Nothing
	End Sub
	
	Private Sub attach_TRADES_FFAs(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.EXCHANGE = Me
	End Sub
	
	Private Sub detach_TRADES_FFAs(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.EXCHANGE = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FFAFIXINGS")>  _
Partial Public Class FFAFIXING
	
	Private _ID As Integer
	
	Private _ROUTE_ID As Integer
	
	Private _FIXDATE As Date
	
	Private _SPECIFIER As Char
	
	Private _PERIOD As Short
	
	Private _YEAR As Short
	
	Private _FIXING As System.Nullable(Of Double)
	
	Private _upsize_ts As System.Data.Linq.Binary
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me._ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				Me._ROUTE_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXDATE", DbType:="DateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FIXDATE() As Date
		Get
			Return Me._FIXDATE
		End Get
		Set
			If ((Me._FIXDATE = value)  _
						= false) Then
				Me._FIXDATE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SPECIFIER", DbType:="NVarChar(1) NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SPECIFIER() As Char
		Get
			Return Me._SPECIFIER
		End Get
		Set
			If ((Me._SPECIFIER = value)  _
						= false) Then
				Me._SPECIFIER = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PERIOD", DbType:="SmallInt NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PERIOD() As Short
		Get
			Return Me._PERIOD
		End Get
		Set
			If ((Me._PERIOD = value)  _
						= false) Then
				Me._PERIOD = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YEAR", DbType:="SmallInt NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property YEAR() As Short
		Get
			Return Me._YEAR
		End Get
		Set
			If ((Me._YEAR = value)  _
						= false) Then
				Me._YEAR = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FIXING() As System.Nullable(Of Double)
		Get
			Return Me._FIXING
		End Get
		Set
			If (Me._FIXING.Equals(value) = false) Then
				Me._FIXING = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_upsize_ts", AutoSync:=AutoSync.Always, DbType:="rowversion NOT NULL", CanBeNull:=false, IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property upsize_ts() As System.Data.Linq.Binary
		Get
			Return Me._upsize_ts
		End Get
		Set
			If (Object.Equals(Me._upsize_ts, value) = false) Then
				Me._upsize_ts = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HOLIDAYS")>  _
Partial Public Class HOLIDAY
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _HOLIDAY As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnHOLIDAYChanging(value As Date)
    End Sub
    Partial Private Sub OnHOLIDAYChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HOLIDAY", DbType:="DateTime NOT NULL", IsPrimaryKey:=true)>  _
	Public Property HOLIDAY() As Date
		Get
			Return Me._HOLIDAY
		End Get
		Set
			If ((Me._HOLIDAY = value)  _
						= false) Then
				Me.OnHOLIDAYChanging(value)
				Me.SendPropertyChanging
				Me._HOLIDAY = value
				Me.SendPropertyChanged("HOLIDAY")
				Me.OnHOLIDAYChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.IM_CLIENTS")>  _
Partial Public Class IM_CLIENT
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DESK_TRADER_ID As Integer
	
	Private _TRADE_CLASS_SHORT As Char
	
	Private _IM_ID As System.Nullable(Of Integer)
	
	Private _IM_ACCOUNT As String
	
	Private _OF_BARE As String
	
	Private _IM_GATEWAY As EntityRef(Of IM_GATEWAY)
	
	Private _TRADE_CLASS As EntityRef(Of TRADE_CLASS)
	
	Private _DESK_TRADER As EntityRef(Of DESK_TRADER)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDESK_TRADER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDESK_TRADER_IDChanged()
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanging(value As Char)
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanged()
    End Sub
    Partial Private Sub OnIM_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIM_IDChanged()
    End Sub
    Partial Private Sub OnIM_ACCOUNTChanging(value As String)
    End Sub
    Partial Private Sub OnIM_ACCOUNTChanged()
    End Sub
    Partial Private Sub OnOF_BAREChanging(value As String)
    End Sub
    Partial Private Sub OnOF_BAREChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._IM_GATEWAY = CType(Nothing, EntityRef(Of IM_GATEWAY))
		Me._TRADE_CLASS = CType(Nothing, EntityRef(Of TRADE_CLASS))
		Me._DESK_TRADER = CType(Nothing, EntityRef(Of DESK_TRADER))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_TRADER_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property DESK_TRADER_ID() As Integer
		Get
			Return Me._DESK_TRADER_ID
		End Get
		Set
			If ((Me._DESK_TRADER_ID = value)  _
						= false) Then
				If Me._DESK_TRADER.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDESK_TRADER_IDChanging(value)
				Me.SendPropertyChanging
				Me._DESK_TRADER_ID = value
				Me.SendPropertyChanged("DESK_TRADER_ID")
				Me.OnDESK_TRADER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_CLASS_SHORT", DbType:="Char(1) NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TRADE_CLASS_SHORT() As Char
		Get
			Return Me._TRADE_CLASS_SHORT
		End Get
		Set
			If ((Me._TRADE_CLASS_SHORT = value)  _
						= false) Then
				If Me._TRADE_CLASS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTRADE_CLASS_SHORTChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_CLASS_SHORT = value
				Me.SendPropertyChanged("TRADE_CLASS_SHORT")
				Me.OnTRADE_CLASS_SHORTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IM_ID", DbType:="Int")>  _
	Public Property IM_ID() As System.Nullable(Of Integer)
		Get
			Return Me._IM_ID
		End Get
		Set
			If (Me._IM_ID.Equals(value) = false) Then
				If Me._IM_GATEWAY.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIM_IDChanging(value)
				Me.SendPropertyChanging
				Me._IM_ID = value
				Me.SendPropertyChanged("IM_ID")
				Me.OnIM_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IM_ACCOUNT", DbType:="VarChar(100)")>  _
	Public Property IM_ACCOUNT() As String
		Get
			Return Me._IM_ACCOUNT
		End Get
		Set
			If (String.Equals(Me._IM_ACCOUNT, value) = false) Then
				Me.OnIM_ACCOUNTChanging(value)
				Me.SendPropertyChanging
				Me._IM_ACCOUNT = value
				Me.SendPropertyChanged("IM_ACCOUNT")
				Me.OnIM_ACCOUNTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OF_BARE", DbType:="VarChar(100)")>  _
	Public Property OF_BARE() As String
		Get
			Return Me._OF_BARE
		End Get
		Set
			If (String.Equals(Me._OF_BARE, value) = false) Then
				Me.OnOF_BAREChanging(value)
				Me.SendPropertyChanging
				Me._OF_BARE = value
				Me.SendPropertyChanged("OF_BARE")
				Me.OnOF_BAREChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IM_GATEWAY_IM_CLIENT", Storage:="_IM_GATEWAY", ThisKey:="IM_ID", OtherKey:="IM_ID", IsForeignKey:=true)>  _
	Public Property IM_GATEWAY() As IM_GATEWAY
		Get
			Return Me._IM_GATEWAY.Entity
		End Get
		Set
			Dim previousValue As IM_GATEWAY = Me._IM_GATEWAY.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IM_GATEWAY.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IM_GATEWAY.Entity = Nothing
					previousValue.IM_CLIENTs.Remove(Me)
				End If
				Me._IM_GATEWAY.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.IM_CLIENTs.Add(Me)
					Me._IM_ID = value.IM_ID
				Else
					Me._IM_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("IM_GATEWAY")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASS_IM_CLIENT", Storage:="_TRADE_CLASS", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="TRADE_CLASS_SHORT", IsForeignKey:=true)>  _
	Public Property TRADE_CLASS() As TRADE_CLASS
		Get
			Return Me._TRADE_CLASS.Entity
		End Get
		Set
			Dim previousValue As TRADE_CLASS = Me._TRADE_CLASS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TRADE_CLASS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TRADE_CLASS.Entity = Nothing
					previousValue.IM_CLIENTs.Remove(Me)
				End If
				Me._TRADE_CLASS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.IM_CLIENTs.Add(Me)
					Me._TRADE_CLASS_SHORT = value.TRADE_CLASS_SHORT
				Else
					Me._TRADE_CLASS_SHORT = CType(Nothing, Char)
				End If
				Me.SendPropertyChanged("TRADE_CLASS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADER_IM_CLIENT", Storage:="_DESK_TRADER", ThisKey:="DESK_TRADER_ID", OtherKey:="DESK_TRADER_ID", IsForeignKey:=true)>  _
	Public Property DESK_TRADER() As DESK_TRADER
		Get
			Return Me._DESK_TRADER.Entity
		End Get
		Set
			Dim previousValue As DESK_TRADER = Me._DESK_TRADER.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DESK_TRADER.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DESK_TRADER.Entity = Nothing
					previousValue.IM_CLIENTs.Remove(Me)
				End If
				Me._DESK_TRADER.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.IM_CLIENTs.Add(Me)
					Me._DESK_TRADER_ID = value.DESK_TRADER_ID
				Else
					Me._DESK_TRADER_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DESK_TRADER")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.IM_GATEWAYS")>  _
Partial Public Class IM_GATEWAY
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IM_ID As Integer
	
	Private _IM_DES As String
	
	Private _DESK_TRADERS_IM_SUBSCRIPTIONs As EntitySet(Of DESK_TRADERS_IM_SUBSCRIPTION)
	
	Private _IM_CLIENTs As EntitySet(Of IM_CLIENT)
	
	Private _IM_SERVERs As EntitySet(Of IM_SERVER)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIM_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIM_IDChanged()
    End Sub
    Partial Private Sub OnIM_DESChanging(value As String)
    End Sub
    Partial Private Sub OnIM_DESChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DESK_TRADERS_IM_SUBSCRIPTIONs = New EntitySet(Of DESK_TRADERS_IM_SUBSCRIPTION)(AddressOf Me.attach_DESK_TRADERS_IM_SUBSCRIPTIONs, AddressOf Me.detach_DESK_TRADERS_IM_SUBSCRIPTIONs)
		Me._IM_CLIENTs = New EntitySet(Of IM_CLIENT)(AddressOf Me.attach_IM_CLIENTs, AddressOf Me.detach_IM_CLIENTs)
		Me._IM_SERVERs = New EntitySet(Of IM_SERVER)(AddressOf Me.attach_IM_SERVERs, AddressOf Me.detach_IM_SERVERs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IM_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IM_ID() As Integer
		Get
			Return Me._IM_ID
		End Get
		Set
			If ((Me._IM_ID = value)  _
						= false) Then
				Me.OnIM_IDChanging(value)
				Me.SendPropertyChanging
				Me._IM_ID = value
				Me.SendPropertyChanged("IM_ID")
				Me.OnIM_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IM_DES", DbType:="NChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property IM_DES() As String
		Get
			Return Me._IM_DES
		End Get
		Set
			If (String.Equals(Me._IM_DES, value) = false) Then
				Me.OnIM_DESChanging(value)
				Me.SendPropertyChanging
				Me._IM_DES = value
				Me.SendPropertyChanged("IM_DES")
				Me.OnIM_DESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IM_GATEWAY_DESK_TRADERS_IM_SUBSCRIPTION", Storage:="_DESK_TRADERS_IM_SUBSCRIPTIONs", ThisKey:="IM_ID", OtherKey:="IM_ID")>  _
	Public Property DESK_TRADERS_IM_SUBSCRIPTIONs() As EntitySet(Of DESK_TRADERS_IM_SUBSCRIPTION)
		Get
			Return Me._DESK_TRADERS_IM_SUBSCRIPTIONs
		End Get
		Set
			Me._DESK_TRADERS_IM_SUBSCRIPTIONs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IM_GATEWAY_IM_CLIENT", Storage:="_IM_CLIENTs", ThisKey:="IM_ID", OtherKey:="IM_ID")>  _
	Public Property IM_CLIENTs() As EntitySet(Of IM_CLIENT)
		Get
			Return Me._IM_CLIENTs
		End Get
		Set
			Me._IM_CLIENTs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IM_GATEWAY_IM_SERVER", Storage:="_IM_SERVERs", ThisKey:="IM_ID", OtherKey:="IM_ID")>  _
	Public Property IM_SERVERs() As EntitySet(Of IM_SERVER)
		Get
			Return Me._IM_SERVERs
		End Get
		Set
			Me._IM_SERVERs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DESK_TRADERS_IM_SUBSCRIPTIONs(ByVal entity As DESK_TRADERS_IM_SUBSCRIPTION)
		Me.SendPropertyChanging
		entity.IM_GATEWAY = Me
	End Sub
	
	Private Sub detach_DESK_TRADERS_IM_SUBSCRIPTIONs(ByVal entity As DESK_TRADERS_IM_SUBSCRIPTION)
		Me.SendPropertyChanging
		entity.IM_GATEWAY = Nothing
	End Sub
	
	Private Sub attach_IM_CLIENTs(ByVal entity As IM_CLIENT)
		Me.SendPropertyChanging
		entity.IM_GATEWAY = Me
	End Sub
	
	Private Sub detach_IM_CLIENTs(ByVal entity As IM_CLIENT)
		Me.SendPropertyChanging
		entity.IM_GATEWAY = Nothing
	End Sub
	
	Private Sub attach_IM_SERVERs(ByVal entity As IM_SERVER)
		Me.SendPropertyChanging
		entity.IM_GATEWAY = Me
	End Sub
	
	Private Sub detach_IM_SERVERs(ByVal entity As IM_SERVER)
		Me.SendPropertyChanging
		entity.IM_GATEWAY = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.IM_ORDERSFFA")>  _
Partial Public Class IM_ORDERSFFA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ORDER_DATE As Date
	
	Private _ORDER_THREAD As Integer
	
	Private _ORDER_MARK As String
	
	Private _ORDER_BUDDY As String
	
	Private _ORDER_STATUS As Char
	
	Private _ORDER_TEXT As String
	
	Private _IMSERVICE As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnORDER_DATEChanging(value As Date)
    End Sub
    Partial Private Sub OnORDER_DATEChanged()
    End Sub
    Partial Private Sub OnORDER_THREADChanging(value As Integer)
    End Sub
    Partial Private Sub OnORDER_THREADChanged()
    End Sub
    Partial Private Sub OnORDER_MARKChanging(value As String)
    End Sub
    Partial Private Sub OnORDER_MARKChanged()
    End Sub
    Partial Private Sub OnORDER_BUDDYChanging(value As String)
    End Sub
    Partial Private Sub OnORDER_BUDDYChanged()
    End Sub
    Partial Private Sub OnORDER_STATUSChanging(value As Char)
    End Sub
    Partial Private Sub OnORDER_STATUSChanged()
    End Sub
    Partial Private Sub OnORDER_TEXTChanging(value As String)
    End Sub
    Partial Private Sub OnORDER_TEXTChanged()
    End Sub
    Partial Private Sub OnIMSERVICEChanging(value As Integer)
    End Sub
    Partial Private Sub OnIMSERVICEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_DATE", DbType:="DateTime NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ORDER_DATE() As Date
		Get
			Return Me._ORDER_DATE
		End Get
		Set
			If ((Me._ORDER_DATE = value)  _
						= false) Then
				Me.OnORDER_DATEChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_DATE = value
				Me.SendPropertyChanged("ORDER_DATE")
				Me.OnORDER_DATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_THREAD", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ORDER_THREAD() As Integer
		Get
			Return Me._ORDER_THREAD
		End Get
		Set
			If ((Me._ORDER_THREAD = value)  _
						= false) Then
				Me.OnORDER_THREADChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_THREAD = value
				Me.SendPropertyChanged("ORDER_THREAD")
				Me.OnORDER_THREADChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_MARK", DbType:="NVarChar(4) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ORDER_MARK() As String
		Get
			Return Me._ORDER_MARK
		End Get
		Set
			If (String.Equals(Me._ORDER_MARK, value) = false) Then
				Me.OnORDER_MARKChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_MARK = value
				Me.SendPropertyChanged("ORDER_MARK")
				Me.OnORDER_MARKChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_BUDDY", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ORDER_BUDDY() As String
		Get
			Return Me._ORDER_BUDDY
		End Get
		Set
			If (String.Equals(Me._ORDER_BUDDY, value) = false) Then
				Me.OnORDER_BUDDYChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_BUDDY = value
				Me.SendPropertyChanged("ORDER_BUDDY")
				Me.OnORDER_BUDDYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_STATUS", DbType:="Char(1) NOT NULL")>  _
	Public Property ORDER_STATUS() As Char
		Get
			Return Me._ORDER_STATUS
		End Get
		Set
			If ((Me._ORDER_STATUS = value)  _
						= false) Then
				Me.OnORDER_STATUSChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_STATUS = value
				Me.SendPropertyChanged("ORDER_STATUS")
				Me.OnORDER_STATUSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_TEXT", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ORDER_TEXT() As String
		Get
			Return Me._ORDER_TEXT
		End Get
		Set
			If (String.Equals(Me._ORDER_TEXT, value) = false) Then
				Me.OnORDER_TEXTChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_TEXT = value
				Me.SendPropertyChanged("ORDER_TEXT")
				Me.OnORDER_TEXTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IMSERVICE", DbType:="Int NOT NULL")>  _
	Public Property IMSERVICE() As Integer
		Get
			Return Me._IMSERVICE
		End Get
		Set
			If ((Me._IMSERVICE = value)  _
						= false) Then
				Me.OnIMSERVICEChanging(value)
				Me.SendPropertyChanging
				Me._IMSERVICE = value
				Me.SendPropertyChanged("IMSERVICE")
				Me.OnIMSERVICEChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.IM_SERVERS")>  _
Partial Public Class IM_SERVER
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IM_SERVERS_ID As Integer
	
	Private _IM_ID As Integer
	
	Private _TRADE_CLASS_SHORT As Char
	
	Private _IM_SERVER_DES As String
	
	Private _IM_CONNECT_ID As String
	
	Private _IM_GATEWAY As EntityRef(Of IM_GATEWAY)
	
	Private _TRADE_CLASS As EntityRef(Of TRADE_CLASS)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIM_SERVERS_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIM_SERVERS_IDChanged()
    End Sub
    Partial Private Sub OnIM_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIM_IDChanged()
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanging(value As Char)
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanged()
    End Sub
    Partial Private Sub OnIM_SERVER_DESChanging(value As String)
    End Sub
    Partial Private Sub OnIM_SERVER_DESChanged()
    End Sub
    Partial Private Sub OnIM_CONNECT_IDChanging(value As String)
    End Sub
    Partial Private Sub OnIM_CONNECT_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._IM_GATEWAY = CType(Nothing, EntityRef(Of IM_GATEWAY))
		Me._TRADE_CLASS = CType(Nothing, EntityRef(Of TRADE_CLASS))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IM_SERVERS_ID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property IM_SERVERS_ID() As Integer
		Get
			Return Me._IM_SERVERS_ID
		End Get
		Set
			If ((Me._IM_SERVERS_ID = value)  _
						= false) Then
				Me.OnIM_SERVERS_IDChanging(value)
				Me.SendPropertyChanging
				Me._IM_SERVERS_ID = value
				Me.SendPropertyChanged("IM_SERVERS_ID")
				Me.OnIM_SERVERS_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IM_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IM_ID() As Integer
		Get
			Return Me._IM_ID
		End Get
		Set
			If ((Me._IM_ID = value)  _
						= false) Then
				If Me._IM_GATEWAY.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIM_IDChanging(value)
				Me.SendPropertyChanging
				Me._IM_ID = value
				Me.SendPropertyChanged("IM_ID")
				Me.OnIM_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_CLASS_SHORT", DbType:="Char(1) NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TRADE_CLASS_SHORT() As Char
		Get
			Return Me._TRADE_CLASS_SHORT
		End Get
		Set
			If ((Me._TRADE_CLASS_SHORT = value)  _
						= false) Then
				If Me._TRADE_CLASS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTRADE_CLASS_SHORTChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_CLASS_SHORT = value
				Me.SendPropertyChanged("TRADE_CLASS_SHORT")
				Me.OnTRADE_CLASS_SHORTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IM_SERVER_DES", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property IM_SERVER_DES() As String
		Get
			Return Me._IM_SERVER_DES
		End Get
		Set
			If (String.Equals(Me._IM_SERVER_DES, value) = false) Then
				Me.OnIM_SERVER_DESChanging(value)
				Me.SendPropertyChanging
				Me._IM_SERVER_DES = value
				Me.SendPropertyChanged("IM_SERVER_DES")
				Me.OnIM_SERVER_DESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IM_CONNECT_ID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property IM_CONNECT_ID() As String
		Get
			Return Me._IM_CONNECT_ID
		End Get
		Set
			If (String.Equals(Me._IM_CONNECT_ID, value) = false) Then
				Me.OnIM_CONNECT_IDChanging(value)
				Me.SendPropertyChanging
				Me._IM_CONNECT_ID = value
				Me.SendPropertyChanged("IM_CONNECT_ID")
				Me.OnIM_CONNECT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IM_GATEWAY_IM_SERVER", Storage:="_IM_GATEWAY", ThisKey:="IM_ID", OtherKey:="IM_ID", IsForeignKey:=true)>  _
	Public Property IM_GATEWAY() As IM_GATEWAY
		Get
			Return Me._IM_GATEWAY.Entity
		End Get
		Set
			Dim previousValue As IM_GATEWAY = Me._IM_GATEWAY.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IM_GATEWAY.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IM_GATEWAY.Entity = Nothing
					previousValue.IM_SERVERs.Remove(Me)
				End If
				Me._IM_GATEWAY.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.IM_SERVERs.Add(Me)
					Me._IM_ID = value.IM_ID
				Else
					Me._IM_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IM_GATEWAY")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASS_IM_SERVER", Storage:="_TRADE_CLASS", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="TRADE_CLASS_SHORT", IsForeignKey:=true)>  _
	Public Property TRADE_CLASS() As TRADE_CLASS
		Get
			Return Me._TRADE_CLASS.Entity
		End Get
		Set
			Dim previousValue As TRADE_CLASS = Me._TRADE_CLASS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TRADE_CLASS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TRADE_CLASS.Entity = Nothing
					previousValue.IM_SERVERs.Remove(Me)
				End If
				Me._TRADE_CLASS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.IM_SERVERs.Add(Me)
					Me._TRADE_CLASS_SHORT = value.TRADE_CLASS_SHORT
				Else
					Me._TRADE_CLASS_SHORT = CType(Nothing, Char)
				End If
				Me.SendPropertyChanged("TRADE_CLASS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ISDA_TYPES")>  _
Partial Public Class ISDA_TYPE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ISDA_ID As Integer
	
	Private _ISDA_DES As String
	
	Private _DESK_EXCHANGES_CLEARERs As EntitySet(Of DESK_EXCHANGES_CLEARER)
	
	Private _EXCHANGEs As EntitySet(Of EXCHANGE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnISDA_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnISDA_IDChanged()
    End Sub
    Partial Private Sub OnISDA_DESChanging(value As String)
    End Sub
    Partial Private Sub OnISDA_DESChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DESK_EXCHANGES_CLEARERs = New EntitySet(Of DESK_EXCHANGES_CLEARER)(AddressOf Me.attach_DESK_EXCHANGES_CLEARERs, AddressOf Me.detach_DESK_EXCHANGES_CLEARERs)
		Me._EXCHANGEs = New EntitySet(Of EXCHANGE)(AddressOf Me.attach_EXCHANGEs, AddressOf Me.detach_EXCHANGEs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ISDA_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ISDA_ID() As Integer
		Get
			Return Me._ISDA_ID
		End Get
		Set
			If ((Me._ISDA_ID = value)  _
						= false) Then
				Me.OnISDA_IDChanging(value)
				Me.SendPropertyChanging
				Me._ISDA_ID = value
				Me.SendPropertyChanged("ISDA_ID")
				Me.OnISDA_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ISDA_DES", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ISDA_DES() As String
		Get
			Return Me._ISDA_DES
		End Get
		Set
			If (String.Equals(Me._ISDA_DES, value) = false) Then
				Me.OnISDA_DESChanging(value)
				Me.SendPropertyChanging
				Me._ISDA_DES = value
				Me.SendPropertyChanged("ISDA_DES")
				Me.OnISDA_DESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ISDA_TYPE_DESK_EXCHANGES_CLEARER", Storage:="_DESK_EXCHANGES_CLEARERs", ThisKey:="ISDA_ID", OtherKey:="ISDA_ID")>  _
	Public Property DESK_EXCHANGES_CLEARERs() As EntitySet(Of DESK_EXCHANGES_CLEARER)
		Get
			Return Me._DESK_EXCHANGES_CLEARERs
		End Get
		Set
			Me._DESK_EXCHANGES_CLEARERs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ISDA_TYPE_EXCHANGE", Storage:="_EXCHANGEs", ThisKey:="ISDA_ID", OtherKey:="ISDA_ID")>  _
	Public Property EXCHANGEs() As EntitySet(Of EXCHANGE)
		Get
			Return Me._EXCHANGEs
		End Get
		Set
			Me._EXCHANGEs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DESK_EXCHANGES_CLEARERs(ByVal entity As DESK_EXCHANGES_CLEARER)
		Me.SendPropertyChanging
		entity.ISDA_TYPE = Me
	End Sub
	
	Private Sub detach_DESK_EXCHANGES_CLEARERs(ByVal entity As DESK_EXCHANGES_CLEARER)
		Me.SendPropertyChanging
		entity.ISDA_TYPE = Nothing
	End Sub
	
	Private Sub attach_EXCHANGEs(ByVal entity As EXCHANGE)
		Me.SendPropertyChanging
		entity.ISDA_TYPE = Me
	End Sub
	
	Private Sub detach_EXCHANGEs(ByVal entity As EXCHANGE)
		Me.SendPropertyChanging
		entity.ISDA_TYPE = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LAST_DAY_RULE")>  _
Partial Public Class LAST_DAY_RULE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LAST_DAY_RULE_ID As Integer
	
	Private _LAST_DAY_RULE_DESCR As String
	
	Private _LAST_DAY_RULE_MONTHs As EntitySet(Of LAST_DAY_RULE_MONTH)
	
	Private _ROUTEs As EntitySet(Of ROUTE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLAST_DAY_RULE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnLAST_DAY_RULE_IDChanged()
    End Sub
    Partial Private Sub OnLAST_DAY_RULE_DESCRChanging(value As String)
    End Sub
    Partial Private Sub OnLAST_DAY_RULE_DESCRChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LAST_DAY_RULE_MONTHs = New EntitySet(Of LAST_DAY_RULE_MONTH)(AddressOf Me.attach_LAST_DAY_RULE_MONTHs, AddressOf Me.detach_LAST_DAY_RULE_MONTHs)
		Me._ROUTEs = New EntitySet(Of ROUTE)(AddressOf Me.attach_ROUTEs, AddressOf Me.detach_ROUTEs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LAST_DAY_RULE_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property LAST_DAY_RULE_ID() As Integer
		Get
			Return Me._LAST_DAY_RULE_ID
		End Get
		Set
			If ((Me._LAST_DAY_RULE_ID = value)  _
						= false) Then
				Me.OnLAST_DAY_RULE_IDChanging(value)
				Me.SendPropertyChanging
				Me._LAST_DAY_RULE_ID = value
				Me.SendPropertyChanged("LAST_DAY_RULE_ID")
				Me.OnLAST_DAY_RULE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LAST_DAY_RULE_DESCR", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property LAST_DAY_RULE_DESCR() As String
		Get
			Return Me._LAST_DAY_RULE_DESCR
		End Get
		Set
			If (String.Equals(Me._LAST_DAY_RULE_DESCR, value) = false) Then
				Me.OnLAST_DAY_RULE_DESCRChanging(value)
				Me.SendPropertyChanging
				Me._LAST_DAY_RULE_DESCR = value
				Me.SendPropertyChanged("LAST_DAY_RULE_DESCR")
				Me.OnLAST_DAY_RULE_DESCRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LAST_DAY_RULE_LAST_DAY_RULE_MONTH", Storage:="_LAST_DAY_RULE_MONTHs", ThisKey:="LAST_DAY_RULE_ID", OtherKey:="LAST_DAY_RULE_ID")>  _
	Public Property LAST_DAY_RULE_MONTHs() As EntitySet(Of LAST_DAY_RULE_MONTH)
		Get
			Return Me._LAST_DAY_RULE_MONTHs
		End Get
		Set
			Me._LAST_DAY_RULE_MONTHs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LAST_DAY_RULE_ROUTE", Storage:="_ROUTEs", ThisKey:="LAST_DAY_RULE_ID", OtherKey:="LAST_DAY_RULE_ID")>  _
	Public Property ROUTEs() As EntitySet(Of ROUTE)
		Get
			Return Me._ROUTEs
		End Get
		Set
			Me._ROUTEs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LAST_DAY_RULE_MONTHs(ByVal entity As LAST_DAY_RULE_MONTH)
		Me.SendPropertyChanging
		entity.LAST_DAY_RULE = Me
	End Sub
	
	Private Sub detach_LAST_DAY_RULE_MONTHs(ByVal entity As LAST_DAY_RULE_MONTH)
		Me.SendPropertyChanging
		entity.LAST_DAY_RULE = Nothing
	End Sub
	
	Private Sub attach_ROUTEs(ByVal entity As ROUTE)
		Me.SendPropertyChanging
		entity.LAST_DAY_RULE = Me
	End Sub
	
	Private Sub detach_ROUTEs(ByVal entity As ROUTE)
		Me.SendPropertyChanging
		entity.LAST_DAY_RULE = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LAST_DAY_RULE_MONTHS")>  _
Partial Public Class LAST_DAY_RULE_MONTH
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LAST_DAY_RULE_ID As Integer
	
	Private _MONTH As Short
	
	Private _SETTLEMENT_DAY As Short
	
	Private _LAST_DAY_RULE As EntityRef(Of LAST_DAY_RULE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLAST_DAY_RULE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnLAST_DAY_RULE_IDChanged()
    End Sub
    Partial Private Sub OnMONTHChanging(value As Short)
    End Sub
    Partial Private Sub OnMONTHChanged()
    End Sub
    Partial Private Sub OnSETTLEMENT_DAYChanging(value As Short)
    End Sub
    Partial Private Sub OnSETTLEMENT_DAYChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LAST_DAY_RULE = CType(Nothing, EntityRef(Of LAST_DAY_RULE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LAST_DAY_RULE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property LAST_DAY_RULE_ID() As Integer
		Get
			Return Me._LAST_DAY_RULE_ID
		End Get
		Set
			If ((Me._LAST_DAY_RULE_ID = value)  _
						= false) Then
				If Me._LAST_DAY_RULE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLAST_DAY_RULE_IDChanging(value)
				Me.SendPropertyChanging
				Me._LAST_DAY_RULE_ID = value
				Me.SendPropertyChanged("LAST_DAY_RULE_ID")
				Me.OnLAST_DAY_RULE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MONTH", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property MONTH() As Short
		Get
			Return Me._MONTH
		End Get
		Set
			If ((Me._MONTH = value)  _
						= false) Then
				Me.OnMONTHChanging(value)
				Me.SendPropertyChanging
				Me._MONTH = value
				Me.SendPropertyChanged("MONTH")
				Me.OnMONTHChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SETTLEMENT_DAY", DbType:="SmallInt NOT NULL")>  _
	Public Property SETTLEMENT_DAY() As Short
		Get
			Return Me._SETTLEMENT_DAY
		End Get
		Set
			If ((Me._SETTLEMENT_DAY = value)  _
						= false) Then
				Me.OnSETTLEMENT_DAYChanging(value)
				Me.SendPropertyChanging
				Me._SETTLEMENT_DAY = value
				Me.SendPropertyChanged("SETTLEMENT_DAY")
				Me.OnSETTLEMENT_DAYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LAST_DAY_RULE_LAST_DAY_RULE_MONTH", Storage:="_LAST_DAY_RULE", ThisKey:="LAST_DAY_RULE_ID", OtherKey:="LAST_DAY_RULE_ID", IsForeignKey:=true)>  _
	Public Property LAST_DAY_RULE() As LAST_DAY_RULE
		Get
			Return Me._LAST_DAY_RULE.Entity
		End Get
		Set
			Dim previousValue As LAST_DAY_RULE = Me._LAST_DAY_RULE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._LAST_DAY_RULE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._LAST_DAY_RULE.Entity = Nothing
					previousValue.LAST_DAY_RULE_MONTHs.Remove(Me)
				End If
				Me._LAST_DAY_RULE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LAST_DAY_RULE_MONTHs.Add(Me)
					Me._LAST_DAY_RULE_ID = value.LAST_DAY_RULE_ID
				Else
					Me._LAST_DAY_RULE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("LAST_DAY_RULE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LAYOUTS")>  _
Partial Public Class LAYOUT
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DESK_TRADER_ID As Integer
	
	Private _FILENAME As String
	
	Private _CONTENTS As System.Data.Linq.Binary
	
	Private _DESK_TRADER As EntityRef(Of DESK_TRADER)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDESK_TRADER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDESK_TRADER_IDChanged()
    End Sub
    Partial Private Sub OnFILENAMEChanging(value As String)
    End Sub
    Partial Private Sub OnFILENAMEChanged()
    End Sub
    Partial Private Sub OnCONTENTSChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnCONTENTSChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DESK_TRADER = CType(Nothing, EntityRef(Of DESK_TRADER))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_TRADER_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property DESK_TRADER_ID() As Integer
		Get
			Return Me._DESK_TRADER_ID
		End Get
		Set
			If ((Me._DESK_TRADER_ID = value)  _
						= false) Then
				If Me._DESK_TRADER.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDESK_TRADER_IDChanging(value)
				Me.SendPropertyChanging
				Me._DESK_TRADER_ID = value
				Me.SendPropertyChanged("DESK_TRADER_ID")
				Me.OnDESK_TRADER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FILENAME", DbType:="VarChar(255) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property FILENAME() As String
		Get
			Return Me._FILENAME
		End Get
		Set
			If (String.Equals(Me._FILENAME, value) = false) Then
				Me.OnFILENAMEChanging(value)
				Me.SendPropertyChanging
				Me._FILENAME = value
				Me.SendPropertyChanged("FILENAME")
				Me.OnFILENAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONTENTS", DbType:="VarBinary(MAX)", CanBeNull:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CONTENTS() As System.Data.Linq.Binary
		Get
			Return Me._CONTENTS
		End Get
		Set
			If (Object.Equals(Me._CONTENTS, value) = false) Then
				Me.OnCONTENTSChanging(value)
				Me.SendPropertyChanging
				Me._CONTENTS = value
				Me.SendPropertyChanged("CONTENTS")
				Me.OnCONTENTSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADER_LAYOUT", Storage:="_DESK_TRADER", ThisKey:="DESK_TRADER_ID", OtherKey:="DESK_TRADER_ID", IsForeignKey:=true)>  _
	Public Property DESK_TRADER() As DESK_TRADER
		Get
			Return Me._DESK_TRADER.Entity
		End Get
		Set
			Dim previousValue As DESK_TRADER = Me._DESK_TRADER.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DESK_TRADER.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DESK_TRADER.Entity = Nothing
					previousValue.LAYOUTs.Remove(Me)
				End If
				Me._DESK_TRADER.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LAYOUTs.Add(Me)
					Me._DESK_TRADER_ID = value.DESK_TRADER_ID
				Else
					Me._DESK_TRADER_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DESK_TRADER")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ORDER_GOOD_TILL")>  _
Partial Public Class ORDER_GOOD_TILL
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ORDER_GOOD_TILL_ID As Short
	
	Private _ORDER_GOOD_TILL_DESCR As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnORDER_GOOD_TILL_IDChanging(value As Short)
    End Sub
    Partial Private Sub OnORDER_GOOD_TILL_IDChanged()
    End Sub
    Partial Private Sub OnORDER_GOOD_TILL_DESCRChanging(value As String)
    End Sub
    Partial Private Sub OnORDER_GOOD_TILL_DESCRChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_GOOD_TILL_ID", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ORDER_GOOD_TILL_ID() As Short
		Get
			Return Me._ORDER_GOOD_TILL_ID
		End Get
		Set
			If ((Me._ORDER_GOOD_TILL_ID = value)  _
						= false) Then
				Me.OnORDER_GOOD_TILL_IDChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_GOOD_TILL_ID = value
				Me.SendPropertyChanged("ORDER_GOOD_TILL_ID")
				Me.OnORDER_GOOD_TILL_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_GOOD_TILL_DESCR", DbType:="NVarChar(50)")>  _
	Public Property ORDER_GOOD_TILL_DESCR() As String
		Get
			Return Me._ORDER_GOOD_TILL_DESCR
		End Get
		Set
			If (String.Equals(Me._ORDER_GOOD_TILL_DESCR, value) = false) Then
				Me.OnORDER_GOOD_TILL_DESCRChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_GOOD_TILL_DESCR = value
				Me.SendPropertyChanged("ORDER_GOOD_TILL_DESCR")
				Me.OnORDER_GOOD_TILL_DESCRChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ORDER_STATUS")>  _
Partial Public Class ORDER_STATUS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ORDER_STATUS_ID As Integer
	
	Private _ORDER_STATUS_DESCR As String
	
	Private _ORDER_STATUS_SHORT As Char
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnORDER_STATUS_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnORDER_STATUS_IDChanged()
    End Sub
    Partial Private Sub OnORDER_STATUS_DESCRChanging(value As String)
    End Sub
    Partial Private Sub OnORDER_STATUS_DESCRChanged()
    End Sub
    Partial Private Sub OnORDER_STATUS_SHORTChanging(value As Char)
    End Sub
    Partial Private Sub OnORDER_STATUS_SHORTChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_STATUS_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ORDER_STATUS_ID() As Integer
		Get
			Return Me._ORDER_STATUS_ID
		End Get
		Set
			If ((Me._ORDER_STATUS_ID = value)  _
						= false) Then
				Me.OnORDER_STATUS_IDChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_STATUS_ID = value
				Me.SendPropertyChanged("ORDER_STATUS_ID")
				Me.OnORDER_STATUS_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_STATUS_DESCR", DbType:="NVarChar(50)")>  _
	Public Property ORDER_STATUS_DESCR() As String
		Get
			Return Me._ORDER_STATUS_DESCR
		End Get
		Set
			If (String.Equals(Me._ORDER_STATUS_DESCR, value) = false) Then
				Me.OnORDER_STATUS_DESCRChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_STATUS_DESCR = value
				Me.SendPropertyChanged("ORDER_STATUS_DESCR")
				Me.OnORDER_STATUS_DESCRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_STATUS_SHORT", DbType:="Char(1) NOT NULL")>  _
	Public Property ORDER_STATUS_SHORT() As Char
		Get
			Return Me._ORDER_STATUS_SHORT
		End Get
		Set
			If ((Me._ORDER_STATUS_SHORT = value)  _
						= false) Then
				Me.OnORDER_STATUS_SHORTChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_STATUS_SHORT = value
				Me.SendPropertyChanged("ORDER_STATUS_SHORT")
				Me.OnORDER_STATUS_SHORTChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ORDERS_FFA_EXCHANGES")>  _
Partial Public Class ORDERS_FFA_EXCHANGE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ORDER_ID As Integer
	
	Private _EXCHANGE_ID As Integer
	
	Private _ACCOUNT_ID As Integer
	
	Private _EXCHANGE As EntityRef(Of EXCHANGE)
	
	Private _ORDERS_FFA As EntityRef(Of ORDERS_FFA)
	
	Private _ACCOUNT As EntityRef(Of ACCOUNT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnORDER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnORDER_IDChanged()
    End Sub
    Partial Private Sub OnEXCHANGE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEXCHANGE_IDChanged()
    End Sub
    Partial Private Sub OnACCOUNT_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._EXCHANGE = CType(Nothing, EntityRef(Of EXCHANGE))
		Me._ORDERS_FFA = CType(Nothing, EntityRef(Of ORDERS_FFA))
		Me._ACCOUNT = CType(Nothing, EntityRef(Of ACCOUNT))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ORDER_ID() As Integer
		Get
			Return Me._ORDER_ID
		End Get
		Set
			If ((Me._ORDER_ID = value)  _
						= false) Then
				If Me._ORDERS_FFA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnORDER_IDChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_ID = value
				Me.SendPropertyChanged("ORDER_ID")
				Me.OnORDER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property EXCHANGE_ID() As Integer
		Get
			Return Me._EXCHANGE_ID
		End Get
		Set
			If ((Me._EXCHANGE_ID = value)  _
						= false) Then
				If Me._EXCHANGE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEXCHANGE_IDChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_ID = value
				Me.SendPropertyChanged("EXCHANGE_ID")
				Me.OnEXCHANGE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_ID", DbType:="Int NOT NULL")>  _
	Public Property ACCOUNT_ID() As Integer
		Get
			Return Me._ACCOUNT_ID
		End Get
		Set
			If ((Me._ACCOUNT_ID = value)  _
						= false) Then
				If Me._ACCOUNT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACCOUNT_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_ID = value
				Me.SendPropertyChanged("ACCOUNT_ID")
				Me.OnACCOUNT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EXCHANGE_ORDERS_FFA_EXCHANGE", Storage:="_EXCHANGE", ThisKey:="EXCHANGE_ID", OtherKey:="EXCHANGE_ID", IsForeignKey:=true)>  _
	Public Property EXCHANGE() As EXCHANGE
		Get
			Return Me._EXCHANGE.Entity
		End Get
		Set
			Dim previousValue As EXCHANGE = Me._EXCHANGE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EXCHANGE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EXCHANGE.Entity = Nothing
					previousValue.ORDERS_FFA_EXCHANGEs.Remove(Me)
				End If
				Me._EXCHANGE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA_EXCHANGEs.Add(Me)
					Me._EXCHANGE_ID = value.EXCHANGE_ID
				Else
					Me._EXCHANGE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("EXCHANGE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA_EXCHANGE", Storage:="_ORDERS_FFA", ThisKey:="ORDER_ID", OtherKey:="ORDER_ID", IsForeignKey:=true)>  _
	Public Property ORDERS_FFA() As ORDERS_FFA
		Get
			Return Me._ORDERS_FFA.Entity
		End Get
		Set
			Dim previousValue As ORDERS_FFA = Me._ORDERS_FFA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ORDERS_FFA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ORDERS_FFA.Entity = Nothing
					previousValue.ORDERS_FFA_EXCHANGEs.Remove(Me)
				End If
				Me._ORDERS_FFA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA_EXCHANGEs.Add(Me)
					Me._ORDER_ID = value.ORDER_ID
				Else
					Me._ORDER_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ORDERS_FFA")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_ORDERS_FFA_EXCHANGE", Storage:="_ACCOUNT", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT() As ACCOUNT
		Get
			Return Me._ACCOUNT.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT = Me._ACCOUNT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT.Entity = Nothing
					previousValue.ORDERS_FFA_EXCHANGEs.Remove(Me)
				End If
				Me._ACCOUNT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA_EXCHANGEs.Add(Me)
					Me._ACCOUNT_ID = value.ACCOUNT_ID
				Else
					Me._ACCOUNT_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNT")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ORDERS_FFA_OPTIONS")>  _
Partial Public Class ORDERS_FFA_OPTION
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ORDER_ID As Integer
	
	Private _ORDER_TYPE As System.Nullable(Of Short)
	
	Private _PREV_ORDER_ID As System.Nullable(Of Integer)
	
	Private _LINK_ORDER_ID As System.Nullable(Of Integer)
	
	Private _ORDER_ORIGIN As System.Nullable(Of Short)
	
	Private _ORDER_STATUS As System.Nullable(Of Short)
	
	Private _ORDER_QUALIFIER As System.Nullable(Of Short)
	
	Private _ACCOUNT_ID As System.Nullable(Of Integer)
	
	Private _ACCOUNT_DESK_ID As System.Nullable(Of Integer)
	
	Private _DESK_TRADER_ID As System.Nullable(Of Integer)
	
	Private _FOR_ACCOUNT_ID As System.Nullable(Of Integer)
	
	Private _FOR_ACCOUNT_DESK_ID As System.Nullable(Of Integer)
	
	Private _FOR_DESK_TRADER_ID As System.Nullable(Of Integer)
	
	Private _ORDER_DATETIME As System.Nullable(Of Date)
	
	Private _ORDER_BS As System.Nullable(Of Char)
	
	Private _ROUTE_ID As System.Nullable(Of Integer)
	
	Private _TRADE_DATE As System.Nullable(Of Date)
	
	Private _MM1 As System.Nullable(Of Short)
	
	Private _YY1 As System.Nullable(Of Short)
	
	Private _MM2 As System.Nullable(Of Short)
	
	Private _YY2 As System.Nullable(Of Short)
	
	Private _SHORTDES As String
	
	Private _OPTION_TYPE As System.Nullable(Of Short)
	
	Private _STRIKE_PRICE1 As System.Nullable(Of Double)
	
	Private _STRIKE_PRICE2 As System.Nullable(Of Double)
	
	Private _SPOT_PRICE As System.Nullable(Of Double)
	
	Private _VOLATILITY As System.Nullable(Of Double)
	
	Private _IR As System.Nullable(Of Double)
	
	Private _DELTA As System.Nullable(Of Double)
	
	Private _ORDER_QUANTITY As System.Nullable(Of Short)
	
	Private _QUANTITY_QUALIFIER As System.Nullable(Of Short)
	
	Private _QUANTITY_FLEXIBLE As System.Nullable(Of Short)
	
	Private _PRICE As System.Nullable(Of Double)
	
	Private _PRICE_QUALIFIER As System.Nullable(Of Short)
	
	Private _PARTIAL_FILL As System.Nullable(Of Boolean)
	
	Private _ORDER_GT As System.Nullable(Of Short)
	
	Private _ORDER_TIME_LIMIT As System.Nullable(Of Integer)
	
	Private _ORDER_EXPIRES_AT As System.Nullable(Of Date)
	
	Private _REQUIRE_DELTA As System.Nullable(Of Boolean)
	
	Private _PNC_ORDER As System.Nullable(Of Boolean)
	
	Private _SINGLE_EXCHANGE_EXECUTION As System.Nullable(Of Boolean)
	
	Private _CLEARER_ID As System.Nullable(Of Integer)
	
	Private _ORDER_EXCHANGES As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnORDER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnORDER_IDChanged()
    End Sub
    Partial Private Sub OnORDER_TYPEChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnORDER_TYPEChanged()
    End Sub
    Partial Private Sub OnPREV_ORDER_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPREV_ORDER_IDChanged()
    End Sub
    Partial Private Sub OnLINK_ORDER_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLINK_ORDER_IDChanged()
    End Sub
    Partial Private Sub OnORDER_ORIGINChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnORDER_ORIGINChanged()
    End Sub
    Partial Private Sub OnORDER_STATUSChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnORDER_STATUSChanged()
    End Sub
    Partial Private Sub OnORDER_QUALIFIERChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnORDER_QUALIFIERChanged()
    End Sub
    Partial Private Sub OnACCOUNT_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnACCOUNT_IDChanged()
    End Sub
    Partial Private Sub OnACCOUNT_DESK_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnACCOUNT_DESK_IDChanged()
    End Sub
    Partial Private Sub OnDESK_TRADER_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDESK_TRADER_IDChanged()
    End Sub
    Partial Private Sub OnFOR_ACCOUNT_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFOR_ACCOUNT_IDChanged()
    End Sub
    Partial Private Sub OnFOR_ACCOUNT_DESK_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFOR_ACCOUNT_DESK_IDChanged()
    End Sub
    Partial Private Sub OnFOR_DESK_TRADER_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFOR_DESK_TRADER_IDChanged()
    End Sub
    Partial Private Sub OnORDER_DATETIMEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnORDER_DATETIMEChanged()
    End Sub
    Partial Private Sub OnORDER_BSChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnORDER_BSChanged()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnTRADE_DATEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTRADE_DATEChanged()
    End Sub
    Partial Private Sub OnMM1Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMM1Changed()
    End Sub
    Partial Private Sub OnYY1Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnYY1Changed()
    End Sub
    Partial Private Sub OnMM2Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMM2Changed()
    End Sub
    Partial Private Sub OnYY2Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnYY2Changed()
    End Sub
    Partial Private Sub OnSHORTDESChanging(value As String)
    End Sub
    Partial Private Sub OnSHORTDESChanged()
    End Sub
    Partial Private Sub OnOPTION_TYPEChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnOPTION_TYPEChanged()
    End Sub
    Partial Private Sub OnSTRIKE_PRICE1Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnSTRIKE_PRICE1Changed()
    End Sub
    Partial Private Sub OnSTRIKE_PRICE2Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnSTRIKE_PRICE2Changed()
    End Sub
    Partial Private Sub OnSPOT_PRICEChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnSPOT_PRICEChanged()
    End Sub
    Partial Private Sub OnVOLATILITYChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnVOLATILITYChanged()
    End Sub
    Partial Private Sub OnIRChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnIRChanged()
    End Sub
    Partial Private Sub OnDELTAChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDELTAChanged()
    End Sub
    Partial Private Sub OnORDER_QUANTITYChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnORDER_QUANTITYChanged()
    End Sub
    Partial Private Sub OnQUANTITY_QUALIFIERChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnQUANTITY_QUALIFIERChanged()
    End Sub
    Partial Private Sub OnQUANTITY_FLEXIBLEChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnQUANTITY_FLEXIBLEChanged()
    End Sub
    Partial Private Sub OnPRICEChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPRICEChanged()
    End Sub
    Partial Private Sub OnPRICE_QUALIFIERChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnPRICE_QUALIFIERChanged()
    End Sub
    Partial Private Sub OnPARTIAL_FILLChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPARTIAL_FILLChanged()
    End Sub
    Partial Private Sub OnORDER_GTChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnORDER_GTChanged()
    End Sub
    Partial Private Sub OnORDER_TIME_LIMITChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnORDER_TIME_LIMITChanged()
    End Sub
    Partial Private Sub OnORDER_EXPIRES_ATChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnORDER_EXPIRES_ATChanged()
    End Sub
    Partial Private Sub OnREQUIRE_DELTAChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnREQUIRE_DELTAChanged()
    End Sub
    Partial Private Sub OnPNC_ORDERChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPNC_ORDERChanged()
    End Sub
    Partial Private Sub OnSINGLE_EXCHANGE_EXECUTIONChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSINGLE_EXCHANGE_EXECUTIONChanged()
    End Sub
    Partial Private Sub OnCLEARER_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCLEARER_IDChanged()
    End Sub
    Partial Private Sub OnORDER_EXCHANGESChanging(value As String)
    End Sub
    Partial Private Sub OnORDER_EXCHANGESChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ORDER_ID() As Integer
		Get
			Return Me._ORDER_ID
		End Get
		Set
			If ((Me._ORDER_ID = value)  _
						= false) Then
				Me.OnORDER_IDChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_ID = value
				Me.SendPropertyChanged("ORDER_ID")
				Me.OnORDER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_TYPE", DbType:="SmallInt")>  _
	Public Property ORDER_TYPE() As System.Nullable(Of Short)
		Get
			Return Me._ORDER_TYPE
		End Get
		Set
			If (Me._ORDER_TYPE.Equals(value) = false) Then
				Me.OnORDER_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_TYPE = value
				Me.SendPropertyChanged("ORDER_TYPE")
				Me.OnORDER_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PREV_ORDER_ID", DbType:="Int")>  _
	Public Property PREV_ORDER_ID() As System.Nullable(Of Integer)
		Get
			Return Me._PREV_ORDER_ID
		End Get
		Set
			If (Me._PREV_ORDER_ID.Equals(value) = false) Then
				Me.OnPREV_ORDER_IDChanging(value)
				Me.SendPropertyChanging
				Me._PREV_ORDER_ID = value
				Me.SendPropertyChanged("PREV_ORDER_ID")
				Me.OnPREV_ORDER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LINK_ORDER_ID", DbType:="Int")>  _
	Public Property LINK_ORDER_ID() As System.Nullable(Of Integer)
		Get
			Return Me._LINK_ORDER_ID
		End Get
		Set
			If (Me._LINK_ORDER_ID.Equals(value) = false) Then
				Me.OnLINK_ORDER_IDChanging(value)
				Me.SendPropertyChanging
				Me._LINK_ORDER_ID = value
				Me.SendPropertyChanged("LINK_ORDER_ID")
				Me.OnLINK_ORDER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_ORIGIN", DbType:="SmallInt")>  _
	Public Property ORDER_ORIGIN() As System.Nullable(Of Short)
		Get
			Return Me._ORDER_ORIGIN
		End Get
		Set
			If (Me._ORDER_ORIGIN.Equals(value) = false) Then
				Me.OnORDER_ORIGINChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_ORIGIN = value
				Me.SendPropertyChanged("ORDER_ORIGIN")
				Me.OnORDER_ORIGINChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_STATUS", DbType:="SmallInt")>  _
	Public Property ORDER_STATUS() As System.Nullable(Of Short)
		Get
			Return Me._ORDER_STATUS
		End Get
		Set
			If (Me._ORDER_STATUS.Equals(value) = false) Then
				Me.OnORDER_STATUSChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_STATUS = value
				Me.SendPropertyChanged("ORDER_STATUS")
				Me.OnORDER_STATUSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_QUALIFIER", DbType:="SmallInt")>  _
	Public Property ORDER_QUALIFIER() As System.Nullable(Of Short)
		Get
			Return Me._ORDER_QUALIFIER
		End Get
		Set
			If (Me._ORDER_QUALIFIER.Equals(value) = false) Then
				Me.OnORDER_QUALIFIERChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_QUALIFIER = value
				Me.SendPropertyChanged("ORDER_QUALIFIER")
				Me.OnORDER_QUALIFIERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_ID", DbType:="Int")>  _
	Public Property ACCOUNT_ID() As System.Nullable(Of Integer)
		Get
			Return Me._ACCOUNT_ID
		End Get
		Set
			If (Me._ACCOUNT_ID.Equals(value) = false) Then
				Me.OnACCOUNT_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_ID = value
				Me.SendPropertyChanged("ACCOUNT_ID")
				Me.OnACCOUNT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_DESK_ID", DbType:="Int")>  _
	Public Property ACCOUNT_DESK_ID() As System.Nullable(Of Integer)
		Get
			Return Me._ACCOUNT_DESK_ID
		End Get
		Set
			If (Me._ACCOUNT_DESK_ID.Equals(value) = false) Then
				Me.OnACCOUNT_DESK_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_DESK_ID = value
				Me.SendPropertyChanged("ACCOUNT_DESK_ID")
				Me.OnACCOUNT_DESK_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_TRADER_ID", DbType:="Int")>  _
	Public Property DESK_TRADER_ID() As System.Nullable(Of Integer)
		Get
			Return Me._DESK_TRADER_ID
		End Get
		Set
			If (Me._DESK_TRADER_ID.Equals(value) = false) Then
				Me.OnDESK_TRADER_IDChanging(value)
				Me.SendPropertyChanging
				Me._DESK_TRADER_ID = value
				Me.SendPropertyChanged("DESK_TRADER_ID")
				Me.OnDESK_TRADER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FOR_ACCOUNT_ID", DbType:="Int")>  _
	Public Property FOR_ACCOUNT_ID() As System.Nullable(Of Integer)
		Get
			Return Me._FOR_ACCOUNT_ID
		End Get
		Set
			If (Me._FOR_ACCOUNT_ID.Equals(value) = false) Then
				Me.OnFOR_ACCOUNT_IDChanging(value)
				Me.SendPropertyChanging
				Me._FOR_ACCOUNT_ID = value
				Me.SendPropertyChanged("FOR_ACCOUNT_ID")
				Me.OnFOR_ACCOUNT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FOR_ACCOUNT_DESK_ID", DbType:="Int")>  _
	Public Property FOR_ACCOUNT_DESK_ID() As System.Nullable(Of Integer)
		Get
			Return Me._FOR_ACCOUNT_DESK_ID
		End Get
		Set
			If (Me._FOR_ACCOUNT_DESK_ID.Equals(value) = false) Then
				Me.OnFOR_ACCOUNT_DESK_IDChanging(value)
				Me.SendPropertyChanging
				Me._FOR_ACCOUNT_DESK_ID = value
				Me.SendPropertyChanged("FOR_ACCOUNT_DESK_ID")
				Me.OnFOR_ACCOUNT_DESK_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FOR_DESK_TRADER_ID", DbType:="Int")>  _
	Public Property FOR_DESK_TRADER_ID() As System.Nullable(Of Integer)
		Get
			Return Me._FOR_DESK_TRADER_ID
		End Get
		Set
			If (Me._FOR_DESK_TRADER_ID.Equals(value) = false) Then
				Me.OnFOR_DESK_TRADER_IDChanging(value)
				Me.SendPropertyChanging
				Me._FOR_DESK_TRADER_ID = value
				Me.SendPropertyChanged("FOR_DESK_TRADER_ID")
				Me.OnFOR_DESK_TRADER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_DATETIME", DbType:="DateTime2")>  _
	Public Property ORDER_DATETIME() As System.Nullable(Of Date)
		Get
			Return Me._ORDER_DATETIME
		End Get
		Set
			If (Me._ORDER_DATETIME.Equals(value) = false) Then
				Me.OnORDER_DATETIMEChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_DATETIME = value
				Me.SendPropertyChanged("ORDER_DATETIME")
				Me.OnORDER_DATETIMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_BS", DbType:="NVarChar(1)")>  _
	Public Property ORDER_BS() As System.Nullable(Of Char)
		Get
			Return Me._ORDER_BS
		End Get
		Set
			If (Me._ORDER_BS.Equals(value) = false) Then
				Me.OnORDER_BSChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_BS = value
				Me.SendPropertyChanged("ORDER_BS")
				Me.OnORDER_BSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int")>  _
	Public Property ROUTE_ID() As System.Nullable(Of Integer)
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If (Me._ROUTE_ID.Equals(value) = false) Then
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_DATE", DbType:="Date")>  _
	Public Property TRADE_DATE() As System.Nullable(Of Date)
		Get
			Return Me._TRADE_DATE
		End Get
		Set
			If (Me._TRADE_DATE.Equals(value) = false) Then
				Me.OnTRADE_DATEChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_DATE = value
				Me.SendPropertyChanged("TRADE_DATE")
				Me.OnTRADE_DATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM1", DbType:="SmallInt")>  _
	Public Property MM1() As System.Nullable(Of Short)
		Get
			Return Me._MM1
		End Get
		Set
			If (Me._MM1.Equals(value) = false) Then
				Me.OnMM1Changing(value)
				Me.SendPropertyChanging
				Me._MM1 = value
				Me.SendPropertyChanged("MM1")
				Me.OnMM1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY1", DbType:="SmallInt")>  _
	Public Property YY1() As System.Nullable(Of Short)
		Get
			Return Me._YY1
		End Get
		Set
			If (Me._YY1.Equals(value) = false) Then
				Me.OnYY1Changing(value)
				Me.SendPropertyChanging
				Me._YY1 = value
				Me.SendPropertyChanged("YY1")
				Me.OnYY1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM2", DbType:="SmallInt")>  _
	Public Property MM2() As System.Nullable(Of Short)
		Get
			Return Me._MM2
		End Get
		Set
			If (Me._MM2.Equals(value) = false) Then
				Me.OnMM2Changing(value)
				Me.SendPropertyChanging
				Me._MM2 = value
				Me.SendPropertyChanged("MM2")
				Me.OnMM2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY2", DbType:="SmallInt")>  _
	Public Property YY2() As System.Nullable(Of Short)
		Get
			Return Me._YY2
		End Get
		Set
			If (Me._YY2.Equals(value) = false) Then
				Me.OnYY2Changing(value)
				Me.SendPropertyChanging
				Me._YY2 = value
				Me.SendPropertyChanged("YY2")
				Me.OnYY2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SHORTDES", DbType:="NVarChar(50)")>  _
	Public Property SHORTDES() As String
		Get
			Return Me._SHORTDES
		End Get
		Set
			If (String.Equals(Me._SHORTDES, value) = false) Then
				Me.OnSHORTDESChanging(value)
				Me.SendPropertyChanging
				Me._SHORTDES = value
				Me.SendPropertyChanged("SHORTDES")
				Me.OnSHORTDESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OPTION_TYPE", DbType:="SmallInt")>  _
	Public Property OPTION_TYPE() As System.Nullable(Of Short)
		Get
			Return Me._OPTION_TYPE
		End Get
		Set
			If (Me._OPTION_TYPE.Equals(value) = false) Then
				Me.OnOPTION_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._OPTION_TYPE = value
				Me.SendPropertyChanged("OPTION_TYPE")
				Me.OnOPTION_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_STRIKE_PRICE1", DbType:="Float")>  _
	Public Property STRIKE_PRICE1() As System.Nullable(Of Double)
		Get
			Return Me._STRIKE_PRICE1
		End Get
		Set
			If (Me._STRIKE_PRICE1.Equals(value) = false) Then
				Me.OnSTRIKE_PRICE1Changing(value)
				Me.SendPropertyChanging
				Me._STRIKE_PRICE1 = value
				Me.SendPropertyChanged("STRIKE_PRICE1")
				Me.OnSTRIKE_PRICE1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_STRIKE_PRICE2", DbType:="Float")>  _
	Public Property STRIKE_PRICE2() As System.Nullable(Of Double)
		Get
			Return Me._STRIKE_PRICE2
		End Get
		Set
			If (Me._STRIKE_PRICE2.Equals(value) = false) Then
				Me.OnSTRIKE_PRICE2Changing(value)
				Me.SendPropertyChanging
				Me._STRIKE_PRICE2 = value
				Me.SendPropertyChanged("STRIKE_PRICE2")
				Me.OnSTRIKE_PRICE2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SPOT_PRICE", DbType:="Float")>  _
	Public Property SPOT_PRICE() As System.Nullable(Of Double)
		Get
			Return Me._SPOT_PRICE
		End Get
		Set
			If (Me._SPOT_PRICE.Equals(value) = false) Then
				Me.OnSPOT_PRICEChanging(value)
				Me.SendPropertyChanging
				Me._SPOT_PRICE = value
				Me.SendPropertyChanged("SPOT_PRICE")
				Me.OnSPOT_PRICEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VOLATILITY", DbType:="Float")>  _
	Public Property VOLATILITY() As System.Nullable(Of Double)
		Get
			Return Me._VOLATILITY
		End Get
		Set
			If (Me._VOLATILITY.Equals(value) = false) Then
				Me.OnVOLATILITYChanging(value)
				Me.SendPropertyChanging
				Me._VOLATILITY = value
				Me.SendPropertyChanged("VOLATILITY")
				Me.OnVOLATILITYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IR", DbType:="Float")>  _
	Public Property IR() As System.Nullable(Of Double)
		Get
			Return Me._IR
		End Get
		Set
			If (Me._IR.Equals(value) = false) Then
				Me.OnIRChanging(value)
				Me.SendPropertyChanging
				Me._IR = value
				Me.SendPropertyChanged("IR")
				Me.OnIRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DELTA", DbType:="Float")>  _
	Public Property DELTA() As System.Nullable(Of Double)
		Get
			Return Me._DELTA
		End Get
		Set
			If (Me._DELTA.Equals(value) = false) Then
				Me.OnDELTAChanging(value)
				Me.SendPropertyChanging
				Me._DELTA = value
				Me.SendPropertyChanged("DELTA")
				Me.OnDELTAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_QUANTITY", DbType:="SmallInt")>  _
	Public Property ORDER_QUANTITY() As System.Nullable(Of Short)
		Get
			Return Me._ORDER_QUANTITY
		End Get
		Set
			If (Me._ORDER_QUANTITY.Equals(value) = false) Then
				Me.OnORDER_QUANTITYChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_QUANTITY = value
				Me.SendPropertyChanged("ORDER_QUANTITY")
				Me.OnORDER_QUANTITYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUANTITY_QUALIFIER", DbType:="SmallInt")>  _
	Public Property QUANTITY_QUALIFIER() As System.Nullable(Of Short)
		Get
			Return Me._QUANTITY_QUALIFIER
		End Get
		Set
			If (Me._QUANTITY_QUALIFIER.Equals(value) = false) Then
				Me.OnQUANTITY_QUALIFIERChanging(value)
				Me.SendPropertyChanging
				Me._QUANTITY_QUALIFIER = value
				Me.SendPropertyChanged("QUANTITY_QUALIFIER")
				Me.OnQUANTITY_QUALIFIERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUANTITY_FLEXIBLE", DbType:="SmallInt")>  _
	Public Property QUANTITY_FLEXIBLE() As System.Nullable(Of Short)
		Get
			Return Me._QUANTITY_FLEXIBLE
		End Get
		Set
			If (Me._QUANTITY_FLEXIBLE.Equals(value) = false) Then
				Me.OnQUANTITY_FLEXIBLEChanging(value)
				Me.SendPropertyChanging
				Me._QUANTITY_FLEXIBLE = value
				Me.SendPropertyChanged("QUANTITY_FLEXIBLE")
				Me.OnQUANTITY_FLEXIBLEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE", DbType:="Float")>  _
	Public Property PRICE() As System.Nullable(Of Double)
		Get
			Return Me._PRICE
		End Get
		Set
			If (Me._PRICE.Equals(value) = false) Then
				Me.OnPRICEChanging(value)
				Me.SendPropertyChanging
				Me._PRICE = value
				Me.SendPropertyChanged("PRICE")
				Me.OnPRICEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE_QUALIFIER", DbType:="SmallInt")>  _
	Public Property PRICE_QUALIFIER() As System.Nullable(Of Short)
		Get
			Return Me._PRICE_QUALIFIER
		End Get
		Set
			If (Me._PRICE_QUALIFIER.Equals(value) = false) Then
				Me.OnPRICE_QUALIFIERChanging(value)
				Me.SendPropertyChanging
				Me._PRICE_QUALIFIER = value
				Me.SendPropertyChanged("PRICE_QUALIFIER")
				Me.OnPRICE_QUALIFIERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PARTIAL_FILL", DbType:="Bit")>  _
	Public Property PARTIAL_FILL() As System.Nullable(Of Boolean)
		Get
			Return Me._PARTIAL_FILL
		End Get
		Set
			If (Me._PARTIAL_FILL.Equals(value) = false) Then
				Me.OnPARTIAL_FILLChanging(value)
				Me.SendPropertyChanging
				Me._PARTIAL_FILL = value
				Me.SendPropertyChanged("PARTIAL_FILL")
				Me.OnPARTIAL_FILLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_GT", DbType:="SmallInt")>  _
	Public Property ORDER_GT() As System.Nullable(Of Short)
		Get
			Return Me._ORDER_GT
		End Get
		Set
			If (Me._ORDER_GT.Equals(value) = false) Then
				Me.OnORDER_GTChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_GT = value
				Me.SendPropertyChanged("ORDER_GT")
				Me.OnORDER_GTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_TIME_LIMIT", DbType:="Int")>  _
	Public Property ORDER_TIME_LIMIT() As System.Nullable(Of Integer)
		Get
			Return Me._ORDER_TIME_LIMIT
		End Get
		Set
			If (Me._ORDER_TIME_LIMIT.Equals(value) = false) Then
				Me.OnORDER_TIME_LIMITChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_TIME_LIMIT = value
				Me.SendPropertyChanged("ORDER_TIME_LIMIT")
				Me.OnORDER_TIME_LIMITChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_EXPIRES_AT", DbType:="DateTime2")>  _
	Public Property ORDER_EXPIRES_AT() As System.Nullable(Of Date)
		Get
			Return Me._ORDER_EXPIRES_AT
		End Get
		Set
			If (Me._ORDER_EXPIRES_AT.Equals(value) = false) Then
				Me.OnORDER_EXPIRES_ATChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_EXPIRES_AT = value
				Me.SendPropertyChanged("ORDER_EXPIRES_AT")
				Me.OnORDER_EXPIRES_ATChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REQUIRE_DELTA", DbType:="Bit")>  _
	Public Property REQUIRE_DELTA() As System.Nullable(Of Boolean)
		Get
			Return Me._REQUIRE_DELTA
		End Get
		Set
			If (Me._REQUIRE_DELTA.Equals(value) = false) Then
				Me.OnREQUIRE_DELTAChanging(value)
				Me.SendPropertyChanging
				Me._REQUIRE_DELTA = value
				Me.SendPropertyChanged("REQUIRE_DELTA")
				Me.OnREQUIRE_DELTAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PNC_ORDER", DbType:="Bit")>  _
	Public Property PNC_ORDER() As System.Nullable(Of Boolean)
		Get
			Return Me._PNC_ORDER
		End Get
		Set
			If (Me._PNC_ORDER.Equals(value) = false) Then
				Me.OnPNC_ORDERChanging(value)
				Me.SendPropertyChanging
				Me._PNC_ORDER = value
				Me.SendPropertyChanged("PNC_ORDER")
				Me.OnPNC_ORDERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SINGLE_EXCHANGE_EXECUTION", DbType:="Bit")>  _
	Public Property SINGLE_EXCHANGE_EXECUTION() As System.Nullable(Of Boolean)
		Get
			Return Me._SINGLE_EXCHANGE_EXECUTION
		End Get
		Set
			If (Me._SINGLE_EXCHANGE_EXECUTION.Equals(value) = false) Then
				Me.OnSINGLE_EXCHANGE_EXECUTIONChanging(value)
				Me.SendPropertyChanging
				Me._SINGLE_EXCHANGE_EXECUTION = value
				Me.SendPropertyChanged("SINGLE_EXCHANGE_EXECUTION")
				Me.OnSINGLE_EXCHANGE_EXECUTIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLEARER_ID", DbType:="Int")>  _
	Public Property CLEARER_ID() As System.Nullable(Of Integer)
		Get
			Return Me._CLEARER_ID
		End Get
		Set
			If (Me._CLEARER_ID.Equals(value) = false) Then
				Me.OnCLEARER_IDChanging(value)
				Me.SendPropertyChanging
				Me._CLEARER_ID = value
				Me.SendPropertyChanged("CLEARER_ID")
				Me.OnCLEARER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_EXCHANGES", DbType:="VarChar(50)")>  _
	Public Property ORDER_EXCHANGES() As String
		Get
			Return Me._ORDER_EXCHANGES
		End Get
		Set
			If (String.Equals(Me._ORDER_EXCHANGES, value) = false) Then
				Me.OnORDER_EXCHANGESChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_EXCHANGES = value
				Me.SendPropertyChanged("ORDER_EXCHANGES")
				Me.OnORDER_EXCHANGESChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ORDERS_FFA_OPTIONS_EXCHANGES")>  _
Partial Public Class ORDERS_FFA_OPTIONS_EXCHANGE
	
	Private _ID As Integer
	
	Private _ORDER_ID As Integer
	
	Private _EXCHANGE_ID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me._ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_ID", DbType:="Int NOT NULL")>  _
	Public Property ORDER_ID() As Integer
		Get
			Return Me._ORDER_ID
		End Get
		Set
			If ((Me._ORDER_ID = value)  _
						= false) Then
				Me._ORDER_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_ID", DbType:="Int NOT NULL")>  _
	Public Property EXCHANGE_ID() As Integer
		Get
			Return Me._EXCHANGE_ID
		End Get
		Set
			If ((Me._EXCHANGE_ID = value)  _
						= false) Then
				Me._EXCHANGE_ID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ORDERS_FFA_SPREADS")>  _
Partial Public Class ORDERS_FFA_SPREAD
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SPREAD_ORDER_ID As Integer
	
	Private _SPREAD_TYPE As Short
	
	Private _ORDER_ID1 As Integer
	
	Private _ORDER_ID2 As Integer
	
	Private _ORDER_DATETIME As Date
	
	Private _DESK_TRADER_ID As Integer
	
	Private _FOR_DESK_TRADER_ID As Integer
	
	Private _ORDERED_BY_WHO As Char
	
	Private _PREVIOUS_ORDER_ID As System.Nullable(Of Integer)
	
	Private _LIVE_STATUS As Char
	
	Private _ORDER_STATUS As Char
	
	Private _ORDER_QUALIFIER As Char
	
	Private _ORDER_FILL_STATUS As Char
	
	Private _UPDN_TICK As Byte
	
	Private _ORDER_BS As Char
	
	Private _SHORTDES As String
	
	Private _PRICE_INDICATED As Double
	
	Private _PRICE_TYPE As Char
	
	Private _PRICE_TRY_BETTER As Boolean
	
	Private _FLEXIBLE_QUANTITY As Short
	
	Private _ORDER_GOOD_TILL As Short
	
	Private _ORDER_TIME_LIMIT As Integer
	
	Private _SHOW_MY_NAME As Boolean
	
	Private _PNC_ORDER As Boolean
	
	Private _COUNTER_PARTY_ORDER_ID As System.Nullable(Of Integer)
	
	Private _LOCK_DESK_TRADER_ID As System.Nullable(Of Integer)
	
	Private _LOCK_ORDER_ID As System.Nullable(Of Integer)
	
	Private _COMMIT_ORDER_ID As System.Nullable(Of Integer)
	
	Private _SINGLE_EXCHANGE_EXECUTION As Boolean
	
	Private _INFORM_DESK_ID As System.Nullable(Of Integer)
	
	Private _NEGOTIATION_ORDER_ID As System.Nullable(Of Integer)
	
	Private _LOCKED_BY_ORDER_ID As Integer
	
	Private _CROSS_ORDER_ID2 As System.Nullable(Of Integer)
	
	Private _CROSS_ORDER_ID1 As System.Nullable(Of Integer)
	
	Private _PROJECTED_ORDER_ID1 As System.Nullable(Of Integer)
	
	Private _PROJECTED_ORDER_ID2 As System.Nullable(Of Integer)
	
	Private _ORDERS_FFA_SPREAD1 As EntityRef(Of ORDERS_FFA_SPREAD)
	
	Private _ORDERS_FFA_SPREADs As EntitySet(Of ORDERS_FFA_SPREAD)
	
	Private _ORDERS_FFA_SPREADs1 As EntitySet(Of ORDERS_FFA_SPREAD)
	
	Private _ORDERS_FFA_SPREADs2 As EntitySet(Of ORDERS_FFA_SPREAD)
	
	Private _ORDERS_FFA_SPREADs3 As EntitySet(Of ORDERS_FFA_SPREAD)
	
	Private _ORDERS_FFA_SPREADs4 As EntitySet(Of ORDERS_FFA_SPREAD)
	
	Private _ORDERS_FFA_SPREADs5 As EntitySet(Of ORDERS_FFA_SPREAD)
	
	Private _ORDERS_FFA_SPREAD As EntityRef(Of ORDERS_FFA_SPREAD)
	
	Private _ORDERS_FFA_SPREAD2 As EntityRef(Of ORDERS_FFA_SPREAD)
	
	Private _ORDERS_FFA_SPREAD3 As EntityRef(Of ORDERS_FFA_SPREAD)
	
	Private _ORDERS_FFA_SPREAD4 As EntityRef(Of ORDERS_FFA_SPREAD)
	
	Private _ORDERS_FFA_SPREAD5 As EntityRef(Of ORDERS_FFA_SPREAD)
	
	Private _ORDERS_FFA_SPREAD6 As EntityRef(Of ORDERS_FFA_SPREAD)
	
	Private _ORDERS_FFA_SPREAD7 As EntityRef(Of ORDERS_FFA_SPREAD)
	
	Private _ACCOUNT_DESK As EntityRef(Of ACCOUNT_DESK)
	
	Private _DESK_TRADER As EntityRef(Of DESK_TRADER)
	
	Private _DESK_TRADER1 As EntityRef(Of DESK_TRADER)
	
	Private _DESK_TRADER2 As EntityRef(Of DESK_TRADER)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSPREAD_ORDER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSPREAD_ORDER_IDChanged()
    End Sub
    Partial Private Sub OnSPREAD_TYPEChanging(value As Short)
    End Sub
    Partial Private Sub OnSPREAD_TYPEChanged()
    End Sub
    Partial Private Sub OnORDER_ID1Changing(value As Integer)
    End Sub
    Partial Private Sub OnORDER_ID1Changed()
    End Sub
    Partial Private Sub OnORDER_ID2Changing(value As Integer)
    End Sub
    Partial Private Sub OnORDER_ID2Changed()
    End Sub
    Partial Private Sub OnORDER_DATETIMEChanging(value As Date)
    End Sub
    Partial Private Sub OnORDER_DATETIMEChanged()
    End Sub
    Partial Private Sub OnDESK_TRADER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDESK_TRADER_IDChanged()
    End Sub
    Partial Private Sub OnFOR_DESK_TRADER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFOR_DESK_TRADER_IDChanged()
    End Sub
    Partial Private Sub OnORDERED_BY_WHOChanging(value As Char)
    End Sub
    Partial Private Sub OnORDERED_BY_WHOChanged()
    End Sub
    Partial Private Sub OnPREVIOUS_ORDER_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPREVIOUS_ORDER_IDChanged()
    End Sub
    Partial Private Sub OnLIVE_STATUSChanging(value As Char)
    End Sub
    Partial Private Sub OnLIVE_STATUSChanged()
    End Sub
    Partial Private Sub OnORDER_STATUSChanging(value As Char)
    End Sub
    Partial Private Sub OnORDER_STATUSChanged()
    End Sub
    Partial Private Sub OnORDER_QUALIFIERChanging(value As Char)
    End Sub
    Partial Private Sub OnORDER_QUALIFIERChanged()
    End Sub
    Partial Private Sub OnORDER_FILL_STATUSChanging(value As Char)
    End Sub
    Partial Private Sub OnORDER_FILL_STATUSChanged()
    End Sub
    Partial Private Sub OnUPDN_TICKChanging(value As Byte)
    End Sub
    Partial Private Sub OnUPDN_TICKChanged()
    End Sub
    Partial Private Sub OnORDER_BSChanging(value As Char)
    End Sub
    Partial Private Sub OnORDER_BSChanged()
    End Sub
    Partial Private Sub OnSHORTDESChanging(value As String)
    End Sub
    Partial Private Sub OnSHORTDESChanged()
    End Sub
    Partial Private Sub OnPRICE_INDICATEDChanging(value As Double)
    End Sub
    Partial Private Sub OnPRICE_INDICATEDChanged()
    End Sub
    Partial Private Sub OnPRICE_TYPEChanging(value As Char)
    End Sub
    Partial Private Sub OnPRICE_TYPEChanged()
    End Sub
    Partial Private Sub OnPRICE_TRY_BETTERChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPRICE_TRY_BETTERChanged()
    End Sub
    Partial Private Sub OnFLEXIBLE_QUANTITYChanging(value As Short)
    End Sub
    Partial Private Sub OnFLEXIBLE_QUANTITYChanged()
    End Sub
    Partial Private Sub OnORDER_GOOD_TILLChanging(value As Short)
    End Sub
    Partial Private Sub OnORDER_GOOD_TILLChanged()
    End Sub
    Partial Private Sub OnORDER_TIME_LIMITChanging(value As Integer)
    End Sub
    Partial Private Sub OnORDER_TIME_LIMITChanged()
    End Sub
    Partial Private Sub OnSHOW_MY_NAMEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSHOW_MY_NAMEChanged()
    End Sub
    Partial Private Sub OnPNC_ORDERChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPNC_ORDERChanged()
    End Sub
    Partial Private Sub OnCOUNTER_PARTY_ORDER_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCOUNTER_PARTY_ORDER_IDChanged()
    End Sub
    Partial Private Sub OnLOCK_DESK_TRADER_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLOCK_DESK_TRADER_IDChanged()
    End Sub
    Partial Private Sub OnLOCK_ORDER_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLOCK_ORDER_IDChanged()
    End Sub
    Partial Private Sub OnCOMMIT_ORDER_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCOMMIT_ORDER_IDChanged()
    End Sub
    Partial Private Sub OnSINGLE_EXCHANGE_EXECUTIONChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSINGLE_EXCHANGE_EXECUTIONChanged()
    End Sub
    Partial Private Sub OnINFORM_DESK_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnINFORM_DESK_IDChanged()
    End Sub
    Partial Private Sub OnNEGOTIATION_ORDER_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNEGOTIATION_ORDER_IDChanged()
    End Sub
    Partial Private Sub OnLOCKED_BY_ORDER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnLOCKED_BY_ORDER_IDChanged()
    End Sub
    Partial Private Sub OnCROSS_ORDER_ID2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCROSS_ORDER_ID2Changed()
    End Sub
    Partial Private Sub OnCROSS_ORDER_ID1Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCROSS_ORDER_ID1Changed()
    End Sub
    Partial Private Sub OnPROJECTED_ORDER_ID1Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPROJECTED_ORDER_ID1Changed()
    End Sub
    Partial Private Sub OnPROJECTED_ORDER_ID2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPROJECTED_ORDER_ID2Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ORDERS_FFA_SPREAD1 = CType(Nothing, EntityRef(Of ORDERS_FFA_SPREAD))
		Me._ORDERS_FFA_SPREADs = New EntitySet(Of ORDERS_FFA_SPREAD)(AddressOf Me.attach_ORDERS_FFA_SPREADs, AddressOf Me.detach_ORDERS_FFA_SPREADs)
		Me._ORDERS_FFA_SPREADs1 = New EntitySet(Of ORDERS_FFA_SPREAD)(AddressOf Me.attach_ORDERS_FFA_SPREADs1, AddressOf Me.detach_ORDERS_FFA_SPREADs1)
		Me._ORDERS_FFA_SPREADs2 = New EntitySet(Of ORDERS_FFA_SPREAD)(AddressOf Me.attach_ORDERS_FFA_SPREADs2, AddressOf Me.detach_ORDERS_FFA_SPREADs2)
		Me._ORDERS_FFA_SPREADs3 = New EntitySet(Of ORDERS_FFA_SPREAD)(AddressOf Me.attach_ORDERS_FFA_SPREADs3, AddressOf Me.detach_ORDERS_FFA_SPREADs3)
		Me._ORDERS_FFA_SPREADs4 = New EntitySet(Of ORDERS_FFA_SPREAD)(AddressOf Me.attach_ORDERS_FFA_SPREADs4, AddressOf Me.detach_ORDERS_FFA_SPREADs4)
		Me._ORDERS_FFA_SPREADs5 = New EntitySet(Of ORDERS_FFA_SPREAD)(AddressOf Me.attach_ORDERS_FFA_SPREADs5, AddressOf Me.detach_ORDERS_FFA_SPREADs5)
		Me._ORDERS_FFA_SPREAD = CType(Nothing, EntityRef(Of ORDERS_FFA_SPREAD))
		Me._ORDERS_FFA_SPREAD2 = CType(Nothing, EntityRef(Of ORDERS_FFA_SPREAD))
		Me._ORDERS_FFA_SPREAD3 = CType(Nothing, EntityRef(Of ORDERS_FFA_SPREAD))
		Me._ORDERS_FFA_SPREAD4 = CType(Nothing, EntityRef(Of ORDERS_FFA_SPREAD))
		Me._ORDERS_FFA_SPREAD5 = CType(Nothing, EntityRef(Of ORDERS_FFA_SPREAD))
		Me._ORDERS_FFA_SPREAD6 = CType(Nothing, EntityRef(Of ORDERS_FFA_SPREAD))
		Me._ORDERS_FFA_SPREAD7 = CType(Nothing, EntityRef(Of ORDERS_FFA_SPREAD))
		Me._ACCOUNT_DESK = CType(Nothing, EntityRef(Of ACCOUNT_DESK))
		Me._DESK_TRADER = CType(Nothing, EntityRef(Of DESK_TRADER))
		Me._DESK_TRADER1 = CType(Nothing, EntityRef(Of DESK_TRADER))
		Me._DESK_TRADER2 = CType(Nothing, EntityRef(Of DESK_TRADER))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SPREAD_ORDER_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SPREAD_ORDER_ID() As Integer
		Get
			Return Me._SPREAD_ORDER_ID
		End Get
		Set
			If ((Me._SPREAD_ORDER_ID = value)  _
						= false) Then
				If Me._ORDERS_FFA_SPREAD.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSPREAD_ORDER_IDChanging(value)
				Me.SendPropertyChanging
				Me._SPREAD_ORDER_ID = value
				Me.SendPropertyChanged("SPREAD_ORDER_ID")
				Me.OnSPREAD_ORDER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SPREAD_TYPE", DbType:="SmallInt NOT NULL")>  _
	Public Property SPREAD_TYPE() As Short
		Get
			Return Me._SPREAD_TYPE
		End Get
		Set
			If ((Me._SPREAD_TYPE = value)  _
						= false) Then
				Me.OnSPREAD_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._SPREAD_TYPE = value
				Me.SendPropertyChanged("SPREAD_TYPE")
				Me.OnSPREAD_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_ID1", DbType:="Int NOT NULL")>  _
	Public Property ORDER_ID1() As Integer
		Get
			Return Me._ORDER_ID1
		End Get
		Set
			If ((Me._ORDER_ID1 = value)  _
						= false) Then
				Me.OnORDER_ID1Changing(value)
				Me.SendPropertyChanging
				Me._ORDER_ID1 = value
				Me.SendPropertyChanged("ORDER_ID1")
				Me.OnORDER_ID1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_ID2", DbType:="Int NOT NULL")>  _
	Public Property ORDER_ID2() As Integer
		Get
			Return Me._ORDER_ID2
		End Get
		Set
			If ((Me._ORDER_ID2 = value)  _
						= false) Then
				Me.OnORDER_ID2Changing(value)
				Me.SendPropertyChanging
				Me._ORDER_ID2 = value
				Me.SendPropertyChanged("ORDER_ID2")
				Me.OnORDER_ID2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_DATETIME", DbType:="DateTime2 NOT NULL")>  _
	Public Property ORDER_DATETIME() As Date
		Get
			Return Me._ORDER_DATETIME
		End Get
		Set
			If ((Me._ORDER_DATETIME = value)  _
						= false) Then
				Me.OnORDER_DATETIMEChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_DATETIME = value
				Me.SendPropertyChanged("ORDER_DATETIME")
				Me.OnORDER_DATETIMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_TRADER_ID", DbType:="Int NOT NULL")>  _
	Public Property DESK_TRADER_ID() As Integer
		Get
			Return Me._DESK_TRADER_ID
		End Get
		Set
			If ((Me._DESK_TRADER_ID = value)  _
						= false) Then
				If Me._DESK_TRADER.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDESK_TRADER_IDChanging(value)
				Me.SendPropertyChanging
				Me._DESK_TRADER_ID = value
				Me.SendPropertyChanged("DESK_TRADER_ID")
				Me.OnDESK_TRADER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FOR_DESK_TRADER_ID", DbType:="Int NOT NULL")>  _
	Public Property FOR_DESK_TRADER_ID() As Integer
		Get
			Return Me._FOR_DESK_TRADER_ID
		End Get
		Set
			If ((Me._FOR_DESK_TRADER_ID = value)  _
						= false) Then
				If Me._DESK_TRADER1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFOR_DESK_TRADER_IDChanging(value)
				Me.SendPropertyChanging
				Me._FOR_DESK_TRADER_ID = value
				Me.SendPropertyChanged("FOR_DESK_TRADER_ID")
				Me.OnFOR_DESK_TRADER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDERED_BY_WHO", DbType:="Char(1) NOT NULL")>  _
	Public Property ORDERED_BY_WHO() As Char
		Get
			Return Me._ORDERED_BY_WHO
		End Get
		Set
			If ((Me._ORDERED_BY_WHO = value)  _
						= false) Then
				Me.OnORDERED_BY_WHOChanging(value)
				Me.SendPropertyChanging
				Me._ORDERED_BY_WHO = value
				Me.SendPropertyChanged("ORDERED_BY_WHO")
				Me.OnORDERED_BY_WHOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PREVIOUS_ORDER_ID", DbType:="Int")>  _
	Public Property PREVIOUS_ORDER_ID() As System.Nullable(Of Integer)
		Get
			Return Me._PREVIOUS_ORDER_ID
		End Get
		Set
			If (Me._PREVIOUS_ORDER_ID.Equals(value) = false) Then
				If Me._ORDERS_FFA_SPREAD2.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPREVIOUS_ORDER_IDChanging(value)
				Me.SendPropertyChanging
				Me._PREVIOUS_ORDER_ID = value
				Me.SendPropertyChanged("PREVIOUS_ORDER_ID")
				Me.OnPREVIOUS_ORDER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LIVE_STATUS", DbType:="Char(1) NOT NULL")>  _
	Public Property LIVE_STATUS() As Char
		Get
			Return Me._LIVE_STATUS
		End Get
		Set
			If ((Me._LIVE_STATUS = value)  _
						= false) Then
				Me.OnLIVE_STATUSChanging(value)
				Me.SendPropertyChanging
				Me._LIVE_STATUS = value
				Me.SendPropertyChanged("LIVE_STATUS")
				Me.OnLIVE_STATUSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_STATUS", DbType:="Char(1) NOT NULL")>  _
	Public Property ORDER_STATUS() As Char
		Get
			Return Me._ORDER_STATUS
		End Get
		Set
			If ((Me._ORDER_STATUS = value)  _
						= false) Then
				Me.OnORDER_STATUSChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_STATUS = value
				Me.SendPropertyChanged("ORDER_STATUS")
				Me.OnORDER_STATUSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_QUALIFIER", DbType:="Char(1) NOT NULL")>  _
	Public Property ORDER_QUALIFIER() As Char
		Get
			Return Me._ORDER_QUALIFIER
		End Get
		Set
			If ((Me._ORDER_QUALIFIER = value)  _
						= false) Then
				Me.OnORDER_QUALIFIERChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_QUALIFIER = value
				Me.SendPropertyChanged("ORDER_QUALIFIER")
				Me.OnORDER_QUALIFIERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_FILL_STATUS", DbType:="Char(1) NOT NULL")>  _
	Public Property ORDER_FILL_STATUS() As Char
		Get
			Return Me._ORDER_FILL_STATUS
		End Get
		Set
			If ((Me._ORDER_FILL_STATUS = value)  _
						= false) Then
				Me.OnORDER_FILL_STATUSChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_FILL_STATUS = value
				Me.SendPropertyChanged("ORDER_FILL_STATUS")
				Me.OnORDER_FILL_STATUSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UPDN_TICK", DbType:="TinyInt NOT NULL")>  _
	Public Property UPDN_TICK() As Byte
		Get
			Return Me._UPDN_TICK
		End Get
		Set
			If ((Me._UPDN_TICK = value)  _
						= false) Then
				Me.OnUPDN_TICKChanging(value)
				Me.SendPropertyChanging
				Me._UPDN_TICK = value
				Me.SendPropertyChanged("UPDN_TICK")
				Me.OnUPDN_TICKChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_BS", DbType:="Char(1) NOT NULL")>  _
	Public Property ORDER_BS() As Char
		Get
			Return Me._ORDER_BS
		End Get
		Set
			If ((Me._ORDER_BS = value)  _
						= false) Then
				Me.OnORDER_BSChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_BS = value
				Me.SendPropertyChanged("ORDER_BS")
				Me.OnORDER_BSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SHORTDES", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SHORTDES() As String
		Get
			Return Me._SHORTDES
		End Get
		Set
			If (String.Equals(Me._SHORTDES, value) = false) Then
				Me.OnSHORTDESChanging(value)
				Me.SendPropertyChanging
				Me._SHORTDES = value
				Me.SendPropertyChanged("SHORTDES")
				Me.OnSHORTDESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE_INDICATED", DbType:="Float NOT NULL")>  _
	Public Property PRICE_INDICATED() As Double
		Get
			Return Me._PRICE_INDICATED
		End Get
		Set
			If ((Me._PRICE_INDICATED = value)  _
						= false) Then
				Me.OnPRICE_INDICATEDChanging(value)
				Me.SendPropertyChanging
				Me._PRICE_INDICATED = value
				Me.SendPropertyChanged("PRICE_INDICATED")
				Me.OnPRICE_INDICATEDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE_TYPE", DbType:="Char(1) NOT NULL")>  _
	Public Property PRICE_TYPE() As Char
		Get
			Return Me._PRICE_TYPE
		End Get
		Set
			If ((Me._PRICE_TYPE = value)  _
						= false) Then
				Me.OnPRICE_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._PRICE_TYPE = value
				Me.SendPropertyChanged("PRICE_TYPE")
				Me.OnPRICE_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE_TRY_BETTER", DbType:="Bit NOT NULL")>  _
	Public Property PRICE_TRY_BETTER() As Boolean
		Get
			Return Me._PRICE_TRY_BETTER
		End Get
		Set
			If ((Me._PRICE_TRY_BETTER = value)  _
						= false) Then
				Me.OnPRICE_TRY_BETTERChanging(value)
				Me.SendPropertyChanging
				Me._PRICE_TRY_BETTER = value
				Me.SendPropertyChanged("PRICE_TRY_BETTER")
				Me.OnPRICE_TRY_BETTERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FLEXIBLE_QUANTITY", DbType:="SmallInt NOT NULL")>  _
	Public Property FLEXIBLE_QUANTITY() As Short
		Get
			Return Me._FLEXIBLE_QUANTITY
		End Get
		Set
			If ((Me._FLEXIBLE_QUANTITY = value)  _
						= false) Then
				Me.OnFLEXIBLE_QUANTITYChanging(value)
				Me.SendPropertyChanging
				Me._FLEXIBLE_QUANTITY = value
				Me.SendPropertyChanged("FLEXIBLE_QUANTITY")
				Me.OnFLEXIBLE_QUANTITYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_GOOD_TILL", DbType:="SmallInt NOT NULL")>  _
	Public Property ORDER_GOOD_TILL() As Short
		Get
			Return Me._ORDER_GOOD_TILL
		End Get
		Set
			If ((Me._ORDER_GOOD_TILL = value)  _
						= false) Then
				Me.OnORDER_GOOD_TILLChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_GOOD_TILL = value
				Me.SendPropertyChanged("ORDER_GOOD_TILL")
				Me.OnORDER_GOOD_TILLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_TIME_LIMIT", DbType:="Int NOT NULL")>  _
	Public Property ORDER_TIME_LIMIT() As Integer
		Get
			Return Me._ORDER_TIME_LIMIT
		End Get
		Set
			If ((Me._ORDER_TIME_LIMIT = value)  _
						= false) Then
				Me.OnORDER_TIME_LIMITChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_TIME_LIMIT = value
				Me.SendPropertyChanged("ORDER_TIME_LIMIT")
				Me.OnORDER_TIME_LIMITChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SHOW_MY_NAME", DbType:="Bit NOT NULL")>  _
	Public Property SHOW_MY_NAME() As Boolean
		Get
			Return Me._SHOW_MY_NAME
		End Get
		Set
			If ((Me._SHOW_MY_NAME = value)  _
						= false) Then
				Me.OnSHOW_MY_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._SHOW_MY_NAME = value
				Me.SendPropertyChanged("SHOW_MY_NAME")
				Me.OnSHOW_MY_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PNC_ORDER", DbType:="Bit NOT NULL")>  _
	Public Property PNC_ORDER() As Boolean
		Get
			Return Me._PNC_ORDER
		End Get
		Set
			If ((Me._PNC_ORDER = value)  _
						= false) Then
				Me.OnPNC_ORDERChanging(value)
				Me.SendPropertyChanging
				Me._PNC_ORDER = value
				Me.SendPropertyChanged("PNC_ORDER")
				Me.OnPNC_ORDERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COUNTER_PARTY_ORDER_ID", DbType:="Int")>  _
	Public Property COUNTER_PARTY_ORDER_ID() As System.Nullable(Of Integer)
		Get
			Return Me._COUNTER_PARTY_ORDER_ID
		End Get
		Set
			If (Me._COUNTER_PARTY_ORDER_ID.Equals(value) = false) Then
				If Me._ORDERS_FFA_SPREAD3.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCOUNTER_PARTY_ORDER_IDChanging(value)
				Me.SendPropertyChanging
				Me._COUNTER_PARTY_ORDER_ID = value
				Me.SendPropertyChanged("COUNTER_PARTY_ORDER_ID")
				Me.OnCOUNTER_PARTY_ORDER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOCK_DESK_TRADER_ID", DbType:="Int")>  _
	Public Property LOCK_DESK_TRADER_ID() As System.Nullable(Of Integer)
		Get
			Return Me._LOCK_DESK_TRADER_ID
		End Get
		Set
			If (Me._LOCK_DESK_TRADER_ID.Equals(value) = false) Then
				If Me._DESK_TRADER2.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLOCK_DESK_TRADER_IDChanging(value)
				Me.SendPropertyChanging
				Me._LOCK_DESK_TRADER_ID = value
				Me.SendPropertyChanged("LOCK_DESK_TRADER_ID")
				Me.OnLOCK_DESK_TRADER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOCK_ORDER_ID", DbType:="Int")>  _
	Public Property LOCK_ORDER_ID() As System.Nullable(Of Integer)
		Get
			Return Me._LOCK_ORDER_ID
		End Get
		Set
			If (Me._LOCK_ORDER_ID.Equals(value) = false) Then
				If Me._ORDERS_FFA_SPREAD4.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLOCK_ORDER_IDChanging(value)
				Me.SendPropertyChanging
				Me._LOCK_ORDER_ID = value
				Me.SendPropertyChanged("LOCK_ORDER_ID")
				Me.OnLOCK_ORDER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COMMIT_ORDER_ID", DbType:="Int")>  _
	Public Property COMMIT_ORDER_ID() As System.Nullable(Of Integer)
		Get
			Return Me._COMMIT_ORDER_ID
		End Get
		Set
			If (Me._COMMIT_ORDER_ID.Equals(value) = false) Then
				If Me._ORDERS_FFA_SPREAD5.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCOMMIT_ORDER_IDChanging(value)
				Me.SendPropertyChanging
				Me._COMMIT_ORDER_ID = value
				Me.SendPropertyChanged("COMMIT_ORDER_ID")
				Me.OnCOMMIT_ORDER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SINGLE_EXCHANGE_EXECUTION", DbType:="Bit NOT NULL")>  _
	Public Property SINGLE_EXCHANGE_EXECUTION() As Boolean
		Get
			Return Me._SINGLE_EXCHANGE_EXECUTION
		End Get
		Set
			If ((Me._SINGLE_EXCHANGE_EXECUTION = value)  _
						= false) Then
				Me.OnSINGLE_EXCHANGE_EXECUTIONChanging(value)
				Me.SendPropertyChanging
				Me._SINGLE_EXCHANGE_EXECUTION = value
				Me.SendPropertyChanged("SINGLE_EXCHANGE_EXECUTION")
				Me.OnSINGLE_EXCHANGE_EXECUTIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_INFORM_DESK_ID", DbType:="Int")>  _
	Public Property INFORM_DESK_ID() As System.Nullable(Of Integer)
		Get
			Return Me._INFORM_DESK_ID
		End Get
		Set
			If (Me._INFORM_DESK_ID.Equals(value) = false) Then
				If Me._ACCOUNT_DESK.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnINFORM_DESK_IDChanging(value)
				Me.SendPropertyChanging
				Me._INFORM_DESK_ID = value
				Me.SendPropertyChanged("INFORM_DESK_ID")
				Me.OnINFORM_DESK_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NEGOTIATION_ORDER_ID", DbType:="Int")>  _
	Public Property NEGOTIATION_ORDER_ID() As System.Nullable(Of Integer)
		Get
			Return Me._NEGOTIATION_ORDER_ID
		End Get
		Set
			If (Me._NEGOTIATION_ORDER_ID.Equals(value) = false) Then
				If Me._ORDERS_FFA_SPREAD6.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnNEGOTIATION_ORDER_IDChanging(value)
				Me.SendPropertyChanging
				Me._NEGOTIATION_ORDER_ID = value
				Me.SendPropertyChanged("NEGOTIATION_ORDER_ID")
				Me.OnNEGOTIATION_ORDER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOCKED_BY_ORDER_ID", DbType:="Int NOT NULL")>  _
	Public Property LOCKED_BY_ORDER_ID() As Integer
		Get
			Return Me._LOCKED_BY_ORDER_ID
		End Get
		Set
			If ((Me._LOCKED_BY_ORDER_ID = value)  _
						= false) Then
				If Me._ORDERS_FFA_SPREAD7.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLOCKED_BY_ORDER_IDChanging(value)
				Me.SendPropertyChanging
				Me._LOCKED_BY_ORDER_ID = value
				Me.SendPropertyChanged("LOCKED_BY_ORDER_ID")
				Me.OnLOCKED_BY_ORDER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CROSS_ORDER_ID2", DbType:="Int")>  _
	Public Property CROSS_ORDER_ID2() As System.Nullable(Of Integer)
		Get
			Return Me._CROSS_ORDER_ID2
		End Get
		Set
			If (Me._CROSS_ORDER_ID2.Equals(value) = false) Then
				Me.OnCROSS_ORDER_ID2Changing(value)
				Me.SendPropertyChanging
				Me._CROSS_ORDER_ID2 = value
				Me.SendPropertyChanged("CROSS_ORDER_ID2")
				Me.OnCROSS_ORDER_ID2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CROSS_ORDER_ID1", DbType:="Int")>  _
	Public Property CROSS_ORDER_ID1() As System.Nullable(Of Integer)
		Get
			Return Me._CROSS_ORDER_ID1
		End Get
		Set
			If (Me._CROSS_ORDER_ID1.Equals(value) = false) Then
				Me.OnCROSS_ORDER_ID1Changing(value)
				Me.SendPropertyChanging
				Me._CROSS_ORDER_ID1 = value
				Me.SendPropertyChanged("CROSS_ORDER_ID1")
				Me.OnCROSS_ORDER_ID1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROJECTED_ORDER_ID1", DbType:="Int")>  _
	Public Property PROJECTED_ORDER_ID1() As System.Nullable(Of Integer)
		Get
			Return Me._PROJECTED_ORDER_ID1
		End Get
		Set
			If (Me._PROJECTED_ORDER_ID1.Equals(value) = false) Then
				Me.OnPROJECTED_ORDER_ID1Changing(value)
				Me.SendPropertyChanging
				Me._PROJECTED_ORDER_ID1 = value
				Me.SendPropertyChanged("PROJECTED_ORDER_ID1")
				Me.OnPROJECTED_ORDER_ID1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROJECTED_ORDER_ID2", DbType:="Int")>  _
	Public Property PROJECTED_ORDER_ID2() As System.Nullable(Of Integer)
		Get
			Return Me._PROJECTED_ORDER_ID2
		End Get
		Set
			If (Me._PROJECTED_ORDER_ID2.Equals(value) = false) Then
				Me.OnPROJECTED_ORDER_ID2Changing(value)
				Me.SendPropertyChanging
				Me._PROJECTED_ORDER_ID2 = value
				Me.SendPropertyChanged("PROJECTED_ORDER_ID2")
				Me.OnPROJECTED_ORDER_ID2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_SPREAD_ORDERS_FFA_SPREAD", Storage:="_ORDERS_FFA_SPREAD1", ThisKey:="SPREAD_ORDER_ID", OtherKey:="SPREAD_ORDER_ID", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property ORDERS_FFA_SPREAD1() As ORDERS_FFA_SPREAD
		Get
			Return Me._ORDERS_FFA_SPREAD1.Entity
		End Get
		Set
			Dim previousValue As ORDERS_FFA_SPREAD = Me._ORDERS_FFA_SPREAD1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ORDERS_FFA_SPREAD1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ORDERS_FFA_SPREAD1.Entity = Nothing
					previousValue.ORDERS_FFA_SPREAD = Nothing
				End If
				Me._ORDERS_FFA_SPREAD1.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.ORDERS_FFA_SPREAD = Me
				End If
				Me.SendPropertyChanged("ORDERS_FFA_SPREAD1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_SPREAD_ORDERS_FFA_SPREAD1", Storage:="_ORDERS_FFA_SPREADs", ThisKey:="SPREAD_ORDER_ID", OtherKey:="PREVIOUS_ORDER_ID")>  _
	Public Property ORDERS_FFA_SPREADs() As EntitySet(Of ORDERS_FFA_SPREAD)
		Get
			Return Me._ORDERS_FFA_SPREADs
		End Get
		Set
			Me._ORDERS_FFA_SPREADs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_SPREAD_ORDERS_FFA_SPREAD2", Storage:="_ORDERS_FFA_SPREADs1", ThisKey:="SPREAD_ORDER_ID", OtherKey:="COUNTER_PARTY_ORDER_ID")>  _
	Public Property ORDERS_FFA_SPREADs1() As EntitySet(Of ORDERS_FFA_SPREAD)
		Get
			Return Me._ORDERS_FFA_SPREADs1
		End Get
		Set
			Me._ORDERS_FFA_SPREADs1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_SPREAD_ORDERS_FFA_SPREAD3", Storage:="_ORDERS_FFA_SPREADs2", ThisKey:="SPREAD_ORDER_ID", OtherKey:="LOCK_ORDER_ID")>  _
	Public Property ORDERS_FFA_SPREADs2() As EntitySet(Of ORDERS_FFA_SPREAD)
		Get
			Return Me._ORDERS_FFA_SPREADs2
		End Get
		Set
			Me._ORDERS_FFA_SPREADs2.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_SPREAD_ORDERS_FFA_SPREAD4", Storage:="_ORDERS_FFA_SPREADs3", ThisKey:="SPREAD_ORDER_ID", OtherKey:="COMMIT_ORDER_ID")>  _
	Public Property ORDERS_FFA_SPREADs3() As EntitySet(Of ORDERS_FFA_SPREAD)
		Get
			Return Me._ORDERS_FFA_SPREADs3
		End Get
		Set
			Me._ORDERS_FFA_SPREADs3.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_SPREAD_ORDERS_FFA_SPREAD5", Storage:="_ORDERS_FFA_SPREADs4", ThisKey:="SPREAD_ORDER_ID", OtherKey:="NEGOTIATION_ORDER_ID")>  _
	Public Property ORDERS_FFA_SPREADs4() As EntitySet(Of ORDERS_FFA_SPREAD)
		Get
			Return Me._ORDERS_FFA_SPREADs4
		End Get
		Set
			Me._ORDERS_FFA_SPREADs4.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_SPREAD_ORDERS_FFA_SPREAD6", Storage:="_ORDERS_FFA_SPREADs5", ThisKey:="SPREAD_ORDER_ID", OtherKey:="LOCKED_BY_ORDER_ID")>  _
	Public Property ORDERS_FFA_SPREADs5() As EntitySet(Of ORDERS_FFA_SPREAD)
		Get
			Return Me._ORDERS_FFA_SPREADs5
		End Get
		Set
			Me._ORDERS_FFA_SPREADs5.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_SPREAD_ORDERS_FFA_SPREAD", Storage:="_ORDERS_FFA_SPREAD", ThisKey:="SPREAD_ORDER_ID", OtherKey:="SPREAD_ORDER_ID", IsForeignKey:=true)>  _
	Public Property ORDERS_FFA_SPREAD() As ORDERS_FFA_SPREAD
		Get
			Return Me._ORDERS_FFA_SPREAD.Entity
		End Get
		Set
			Dim previousValue As ORDERS_FFA_SPREAD = Me._ORDERS_FFA_SPREAD.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ORDERS_FFA_SPREAD.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ORDERS_FFA_SPREAD.Entity = Nothing
					previousValue.ORDERS_FFA_SPREAD1 = Nothing
				End If
				Me._ORDERS_FFA_SPREAD.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA_SPREAD1 = Me
					Me._SPREAD_ORDER_ID = value.SPREAD_ORDER_ID
				Else
					Me._SPREAD_ORDER_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ORDERS_FFA_SPREAD")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_SPREAD_ORDERS_FFA_SPREAD1", Storage:="_ORDERS_FFA_SPREAD2", ThisKey:="PREVIOUS_ORDER_ID", OtherKey:="SPREAD_ORDER_ID", IsForeignKey:=true)>  _
	Public Property ORDERS_FFA_SPREAD2() As ORDERS_FFA_SPREAD
		Get
			Return Me._ORDERS_FFA_SPREAD2.Entity
		End Get
		Set
			Dim previousValue As ORDERS_FFA_SPREAD = Me._ORDERS_FFA_SPREAD2.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ORDERS_FFA_SPREAD2.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ORDERS_FFA_SPREAD2.Entity = Nothing
					previousValue.ORDERS_FFA_SPREADs.Remove(Me)
				End If
				Me._ORDERS_FFA_SPREAD2.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA_SPREADs.Add(Me)
					Me._PREVIOUS_ORDER_ID = value.SPREAD_ORDER_ID
				Else
					Me._PREVIOUS_ORDER_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ORDERS_FFA_SPREAD2")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_SPREAD_ORDERS_FFA_SPREAD2", Storage:="_ORDERS_FFA_SPREAD3", ThisKey:="COUNTER_PARTY_ORDER_ID", OtherKey:="SPREAD_ORDER_ID", IsForeignKey:=true)>  _
	Public Property ORDERS_FFA_SPREAD3() As ORDERS_FFA_SPREAD
		Get
			Return Me._ORDERS_FFA_SPREAD3.Entity
		End Get
		Set
			Dim previousValue As ORDERS_FFA_SPREAD = Me._ORDERS_FFA_SPREAD3.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ORDERS_FFA_SPREAD3.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ORDERS_FFA_SPREAD3.Entity = Nothing
					previousValue.ORDERS_FFA_SPREADs1.Remove(Me)
				End If
				Me._ORDERS_FFA_SPREAD3.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA_SPREADs1.Add(Me)
					Me._COUNTER_PARTY_ORDER_ID = value.SPREAD_ORDER_ID
				Else
					Me._COUNTER_PARTY_ORDER_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ORDERS_FFA_SPREAD3")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_SPREAD_ORDERS_FFA_SPREAD3", Storage:="_ORDERS_FFA_SPREAD4", ThisKey:="LOCK_ORDER_ID", OtherKey:="SPREAD_ORDER_ID", IsForeignKey:=true)>  _
	Public Property ORDERS_FFA_SPREAD4() As ORDERS_FFA_SPREAD
		Get
			Return Me._ORDERS_FFA_SPREAD4.Entity
		End Get
		Set
			Dim previousValue As ORDERS_FFA_SPREAD = Me._ORDERS_FFA_SPREAD4.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ORDERS_FFA_SPREAD4.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ORDERS_FFA_SPREAD4.Entity = Nothing
					previousValue.ORDERS_FFA_SPREADs2.Remove(Me)
				End If
				Me._ORDERS_FFA_SPREAD4.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA_SPREADs2.Add(Me)
					Me._LOCK_ORDER_ID = value.SPREAD_ORDER_ID
				Else
					Me._LOCK_ORDER_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ORDERS_FFA_SPREAD4")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_SPREAD_ORDERS_FFA_SPREAD4", Storage:="_ORDERS_FFA_SPREAD5", ThisKey:="COMMIT_ORDER_ID", OtherKey:="SPREAD_ORDER_ID", IsForeignKey:=true)>  _
	Public Property ORDERS_FFA_SPREAD5() As ORDERS_FFA_SPREAD
		Get
			Return Me._ORDERS_FFA_SPREAD5.Entity
		End Get
		Set
			Dim previousValue As ORDERS_FFA_SPREAD = Me._ORDERS_FFA_SPREAD5.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ORDERS_FFA_SPREAD5.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ORDERS_FFA_SPREAD5.Entity = Nothing
					previousValue.ORDERS_FFA_SPREADs3.Remove(Me)
				End If
				Me._ORDERS_FFA_SPREAD5.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA_SPREADs3.Add(Me)
					Me._COMMIT_ORDER_ID = value.SPREAD_ORDER_ID
				Else
					Me._COMMIT_ORDER_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ORDERS_FFA_SPREAD5")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_SPREAD_ORDERS_FFA_SPREAD5", Storage:="_ORDERS_FFA_SPREAD6", ThisKey:="NEGOTIATION_ORDER_ID", OtherKey:="SPREAD_ORDER_ID", IsForeignKey:=true)>  _
	Public Property ORDERS_FFA_SPREAD6() As ORDERS_FFA_SPREAD
		Get
			Return Me._ORDERS_FFA_SPREAD6.Entity
		End Get
		Set
			Dim previousValue As ORDERS_FFA_SPREAD = Me._ORDERS_FFA_SPREAD6.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ORDERS_FFA_SPREAD6.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ORDERS_FFA_SPREAD6.Entity = Nothing
					previousValue.ORDERS_FFA_SPREADs4.Remove(Me)
				End If
				Me._ORDERS_FFA_SPREAD6.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA_SPREADs4.Add(Me)
					Me._NEGOTIATION_ORDER_ID = value.SPREAD_ORDER_ID
				Else
					Me._NEGOTIATION_ORDER_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ORDERS_FFA_SPREAD6")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_SPREAD_ORDERS_FFA_SPREAD6", Storage:="_ORDERS_FFA_SPREAD7", ThisKey:="LOCKED_BY_ORDER_ID", OtherKey:="SPREAD_ORDER_ID", IsForeignKey:=true)>  _
	Public Property ORDERS_FFA_SPREAD7() As ORDERS_FFA_SPREAD
		Get
			Return Me._ORDERS_FFA_SPREAD7.Entity
		End Get
		Set
			Dim previousValue As ORDERS_FFA_SPREAD = Me._ORDERS_FFA_SPREAD7.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ORDERS_FFA_SPREAD7.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ORDERS_FFA_SPREAD7.Entity = Nothing
					previousValue.ORDERS_FFA_SPREADs5.Remove(Me)
				End If
				Me._ORDERS_FFA_SPREAD7.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA_SPREADs5.Add(Me)
					Me._LOCKED_BY_ORDER_ID = value.SPREAD_ORDER_ID
				Else
					Me._LOCKED_BY_ORDER_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ORDERS_FFA_SPREAD7")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESK_ORDERS_FFA_SPREAD", Storage:="_ACCOUNT_DESK", ThisKey:="INFORM_DESK_ID", OtherKey:="ACCOUNT_DESK_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT_DESK() As ACCOUNT_DESK
		Get
			Return Me._ACCOUNT_DESK.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT_DESK = Me._ACCOUNT_DESK.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT_DESK.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT_DESK.Entity = Nothing
					previousValue.ORDERS_FFA_SPREADs.Remove(Me)
				End If
				Me._ACCOUNT_DESK.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA_SPREADs.Add(Me)
					Me._INFORM_DESK_ID = value.ACCOUNT_DESK_ID
				Else
					Me._INFORM_DESK_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ACCOUNT_DESK")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADER_ORDERS_FFA_SPREAD", Storage:="_DESK_TRADER", ThisKey:="DESK_TRADER_ID", OtherKey:="DESK_TRADER_ID", IsForeignKey:=true)>  _
	Public Property DESK_TRADER() As DESK_TRADER
		Get
			Return Me._DESK_TRADER.Entity
		End Get
		Set
			Dim previousValue As DESK_TRADER = Me._DESK_TRADER.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DESK_TRADER.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DESK_TRADER.Entity = Nothing
					previousValue.ORDERS_FFA_SPREADs.Remove(Me)
				End If
				Me._DESK_TRADER.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA_SPREADs.Add(Me)
					Me._DESK_TRADER_ID = value.DESK_TRADER_ID
				Else
					Me._DESK_TRADER_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DESK_TRADER")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADER_ORDERS_FFA_SPREAD1", Storage:="_DESK_TRADER1", ThisKey:="FOR_DESK_TRADER_ID", OtherKey:="DESK_TRADER_ID", IsForeignKey:=true)>  _
	Public Property DESK_TRADER1() As DESK_TRADER
		Get
			Return Me._DESK_TRADER1.Entity
		End Get
		Set
			Dim previousValue As DESK_TRADER = Me._DESK_TRADER1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DESK_TRADER1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DESK_TRADER1.Entity = Nothing
					previousValue.ORDERS_FFA_SPREADs1.Remove(Me)
				End If
				Me._DESK_TRADER1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA_SPREADs1.Add(Me)
					Me._FOR_DESK_TRADER_ID = value.DESK_TRADER_ID
				Else
					Me._FOR_DESK_TRADER_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DESK_TRADER1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADER_ORDERS_FFA_SPREAD2", Storage:="_DESK_TRADER2", ThisKey:="LOCK_DESK_TRADER_ID", OtherKey:="DESK_TRADER_ID", IsForeignKey:=true)>  _
	Public Property DESK_TRADER2() As DESK_TRADER
		Get
			Return Me._DESK_TRADER2.Entity
		End Get
		Set
			Dim previousValue As DESK_TRADER = Me._DESK_TRADER2.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DESK_TRADER2.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DESK_TRADER2.Entity = Nothing
					previousValue.ORDERS_FFA_SPREADs2.Remove(Me)
				End If
				Me._DESK_TRADER2.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFA_SPREADs2.Add(Me)
					Me._LOCK_DESK_TRADER_ID = value.DESK_TRADER_ID
				Else
					Me._LOCK_DESK_TRADER_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("DESK_TRADER2")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ORDERS_FFA_SPREADs(ByVal entity As ORDERS_FFA_SPREAD)
		Me.SendPropertyChanging
		entity.ORDERS_FFA_SPREAD2 = Me
	End Sub
	
	Private Sub detach_ORDERS_FFA_SPREADs(ByVal entity As ORDERS_FFA_SPREAD)
		Me.SendPropertyChanging
		entity.ORDERS_FFA_SPREAD2 = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFA_SPREADs1(ByVal entity As ORDERS_FFA_SPREAD)
		Me.SendPropertyChanging
		entity.ORDERS_FFA_SPREAD3 = Me
	End Sub
	
	Private Sub detach_ORDERS_FFA_SPREADs1(ByVal entity As ORDERS_FFA_SPREAD)
		Me.SendPropertyChanging
		entity.ORDERS_FFA_SPREAD3 = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFA_SPREADs2(ByVal entity As ORDERS_FFA_SPREAD)
		Me.SendPropertyChanging
		entity.ORDERS_FFA_SPREAD4 = Me
	End Sub
	
	Private Sub detach_ORDERS_FFA_SPREADs2(ByVal entity As ORDERS_FFA_SPREAD)
		Me.SendPropertyChanging
		entity.ORDERS_FFA_SPREAD4 = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFA_SPREADs3(ByVal entity As ORDERS_FFA_SPREAD)
		Me.SendPropertyChanging
		entity.ORDERS_FFA_SPREAD5 = Me
	End Sub
	
	Private Sub detach_ORDERS_FFA_SPREADs3(ByVal entity As ORDERS_FFA_SPREAD)
		Me.SendPropertyChanging
		entity.ORDERS_FFA_SPREAD5 = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFA_SPREADs4(ByVal entity As ORDERS_FFA_SPREAD)
		Me.SendPropertyChanging
		entity.ORDERS_FFA_SPREAD6 = Me
	End Sub
	
	Private Sub detach_ORDERS_FFA_SPREADs4(ByVal entity As ORDERS_FFA_SPREAD)
		Me.SendPropertyChanging
		entity.ORDERS_FFA_SPREAD6 = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFA_SPREADs5(ByVal entity As ORDERS_FFA_SPREAD)
		Me.SendPropertyChanging
		entity.ORDERS_FFA_SPREAD7 = Me
	End Sub
	
	Private Sub detach_ORDERS_FFA_SPREADs5(ByVal entity As ORDERS_FFA_SPREAD)
		Me.SendPropertyChanging
		entity.ORDERS_FFA_SPREAD7 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PERIOD_LIMIT_DESCRS")>  _
Partial Public Class PERIOD_LIMIT_DESCR
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PERIOD_LIMIT As Integer
	
	Private _PERIOD_LIMIT_DESCR As String
	
	Private _COUNTERPARTY_LIMITs As EntitySet(Of COUNTERPARTY_LIMIT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPERIOD_LIMITChanging(value As Integer)
    End Sub
    Partial Private Sub OnPERIOD_LIMITChanged()
    End Sub
    Partial Private Sub OnPERIOD_LIMIT_DESCRChanging(value As String)
    End Sub
    Partial Private Sub OnPERIOD_LIMIT_DESCRChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._COUNTERPARTY_LIMITs = New EntitySet(Of COUNTERPARTY_LIMIT)(AddressOf Me.attach_COUNTERPARTY_LIMITs, AddressOf Me.detach_COUNTERPARTY_LIMITs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PERIOD_LIMIT", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property PERIOD_LIMIT() As Integer
		Get
			Return Me._PERIOD_LIMIT
		End Get
		Set
			If ((Me._PERIOD_LIMIT = value)  _
						= false) Then
				Me.OnPERIOD_LIMITChanging(value)
				Me.SendPropertyChanging
				Me._PERIOD_LIMIT = value
				Me.SendPropertyChanged("PERIOD_LIMIT")
				Me.OnPERIOD_LIMITChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PERIOD_LIMIT_DESCR", DbType:="VarChar(50)")>  _
	Public Property PERIOD_LIMIT_DESCR() As String
		Get
			Return Me._PERIOD_LIMIT_DESCR
		End Get
		Set
			If (String.Equals(Me._PERIOD_LIMIT_DESCR, value) = false) Then
				Me.OnPERIOD_LIMIT_DESCRChanging(value)
				Me.SendPropertyChanging
				Me._PERIOD_LIMIT_DESCR = value
				Me.SendPropertyChanged("PERIOD_LIMIT_DESCR")
				Me.OnPERIOD_LIMIT_DESCRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PERIOD_LIMIT_DESCR_COUNTERPARTY_LIMIT", Storage:="_COUNTERPARTY_LIMITs", ThisKey:="PERIOD_LIMIT", OtherKey:="PERIOD_LIMIT")>  _
	Public Property COUNTERPARTY_LIMITs() As EntitySet(Of COUNTERPARTY_LIMIT)
		Get
			Return Me._COUNTERPARTY_LIMITs
		End Get
		Set
			Me._COUNTERPARTY_LIMITs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_COUNTERPARTY_LIMITs(ByVal entity As COUNTERPARTY_LIMIT)
		Me.SendPropertyChanging
		entity.PERIOD_LIMIT_DESCR = Me
	End Sub
	
	Private Sub detach_COUNTERPARTY_LIMITs(ByVal entity As COUNTERPARTY_LIMIT)
		Me.SendPropertyChanging
		entity.PERIOD_LIMIT_DESCR = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.QUANTITY_QUALIFIERS")>  _
Partial Public Class QUANTITY_QUALIFIER
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _QUANTITY_QUALIFIER_ID As Short
	
	Private _QUANTITY_QUALIFIER_DESCR As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnQUANTITY_QUALIFIER_IDChanging(value As Short)
    End Sub
    Partial Private Sub OnQUANTITY_QUALIFIER_IDChanged()
    End Sub
    Partial Private Sub OnQUANTITY_QUALIFIER_DESCRChanging(value As String)
    End Sub
    Partial Private Sub OnQUANTITY_QUALIFIER_DESCRChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUANTITY_QUALIFIER_ID", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property QUANTITY_QUALIFIER_ID() As Short
		Get
			Return Me._QUANTITY_QUALIFIER_ID
		End Get
		Set
			If ((Me._QUANTITY_QUALIFIER_ID = value)  _
						= false) Then
				Me.OnQUANTITY_QUALIFIER_IDChanging(value)
				Me.SendPropertyChanging
				Me._QUANTITY_QUALIFIER_ID = value
				Me.SendPropertyChanged("QUANTITY_QUALIFIER_ID")
				Me.OnQUANTITY_QUALIFIER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUANTITY_QUALIFIER_DESCR", DbType:="VarChar(50)")>  _
	Public Property QUANTITY_QUALIFIER_DESCR() As String
		Get
			Return Me._QUANTITY_QUALIFIER_DESCR
		End Get
		Set
			If (String.Equals(Me._QUANTITY_QUALIFIER_DESCR, value) = false) Then
				Me.OnQUANTITY_QUALIFIER_DESCRChanging(value)
				Me.SendPropertyChanging
				Me._QUANTITY_QUALIFIER_DESCR = value
				Me.SendPropertyChanged("QUANTITY_QUALIFIER_DESCR")
				Me.OnQUANTITY_QUALIFIER_DESCRChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.QUANTITY_TYPES")>  _
Partial Public Class QUANTITY_TYPE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _QUANTITY_TYPE_ID As Short
	
	Private _QUANTITY_TYPE_DES As String
	
	Private _ROUTEs As EntitySet(Of ROUTE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnQUANTITY_TYPE_IDChanging(value As Short)
    End Sub
    Partial Private Sub OnQUANTITY_TYPE_IDChanged()
    End Sub
    Partial Private Sub OnQUANTITY_TYPE_DESChanging(value As String)
    End Sub
    Partial Private Sub OnQUANTITY_TYPE_DESChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ROUTEs = New EntitySet(Of ROUTE)(AddressOf Me.attach_ROUTEs, AddressOf Me.detach_ROUTEs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUANTITY_TYPE_ID", AutoSync:=AutoSync.OnInsert, DbType:="SmallInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property QUANTITY_TYPE_ID() As Short
		Get
			Return Me._QUANTITY_TYPE_ID
		End Get
		Set
			If ((Me._QUANTITY_TYPE_ID = value)  _
						= false) Then
				Me.OnQUANTITY_TYPE_IDChanging(value)
				Me.SendPropertyChanging
				Me._QUANTITY_TYPE_ID = value
				Me.SendPropertyChanged("QUANTITY_TYPE_ID")
				Me.OnQUANTITY_TYPE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUANTITY_TYPE_DES", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property QUANTITY_TYPE_DES() As String
		Get
			Return Me._QUANTITY_TYPE_DES
		End Get
		Set
			If (String.Equals(Me._QUANTITY_TYPE_DES, value) = false) Then
				Me.OnQUANTITY_TYPE_DESChanging(value)
				Me.SendPropertyChanging
				Me._QUANTITY_TYPE_DES = value
				Me.SendPropertyChanged("QUANTITY_TYPE_DES")
				Me.OnQUANTITY_TYPE_DESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="QUANTITY_TYPE_ROUTE", Storage:="_ROUTEs", ThisKey:="QUANTITY_TYPE_ID", OtherKey:="QUANTITY_TYPE")>  _
	Public Property ROUTEs() As EntitySet(Of ROUTE)
		Get
			Return Me._ROUTEs
		End Get
		Set
			Me._ROUTEs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ROUTEs(ByVal entity As ROUTE)
		Me.SendPropertyChanging
		entity.QUANTITY_TYPE1 = Me
	End Sub
	
	Private Sub detach_ROUTEs(ByVal entity As ROUTE)
		Me.SendPropertyChanging
		entity.QUANTITY_TYPE1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.QUOTE_TYPES")>  _
Partial Public Class QUOTE_TYPE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _QUOTE_TYPE_ID As Short
	
	Private _QUOTE_TYPE_DES As String
	
	Private _ROUTEs As EntitySet(Of ROUTE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnQUOTE_TYPE_IDChanging(value As Short)
    End Sub
    Partial Private Sub OnQUOTE_TYPE_IDChanged()
    End Sub
    Partial Private Sub OnQUOTE_TYPE_DESChanging(value As String)
    End Sub
    Partial Private Sub OnQUOTE_TYPE_DESChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ROUTEs = New EntitySet(Of ROUTE)(AddressOf Me.attach_ROUTEs, AddressOf Me.detach_ROUTEs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUOTE_TYPE_ID", AutoSync:=AutoSync.OnInsert, DbType:="SmallInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property QUOTE_TYPE_ID() As Short
		Get
			Return Me._QUOTE_TYPE_ID
		End Get
		Set
			If ((Me._QUOTE_TYPE_ID = value)  _
						= false) Then
				Me.OnQUOTE_TYPE_IDChanging(value)
				Me.SendPropertyChanging
				Me._QUOTE_TYPE_ID = value
				Me.SendPropertyChanged("QUOTE_TYPE_ID")
				Me.OnQUOTE_TYPE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUOTE_TYPE_DES", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property QUOTE_TYPE_DES() As String
		Get
			Return Me._QUOTE_TYPE_DES
		End Get
		Set
			If (String.Equals(Me._QUOTE_TYPE_DES, value) = false) Then
				Me.OnQUOTE_TYPE_DESChanging(value)
				Me.SendPropertyChanging
				Me._QUOTE_TYPE_DES = value
				Me.SendPropertyChanged("QUOTE_TYPE_DES")
				Me.OnQUOTE_TYPE_DESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="QUOTE_TYPE_ROUTE", Storage:="_ROUTEs", ThisKey:="QUOTE_TYPE_ID", OtherKey:="QUOTE_TYPE")>  _
	Public Property ROUTEs() As EntitySet(Of ROUTE)
		Get
			Return Me._ROUTEs
		End Get
		Set
			Me._ROUTEs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ROUTEs(ByVal entity As ROUTE)
		Me.SendPropertyChanging
		entity.QUOTE_TYPE1 = Me
	End Sub
	
	Private Sub detach_ROUTEs(ByVal entity As ROUTE)
		Me.SendPropertyChanging
		entity.QUOTE_TYPE1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ROUTES")>  _
Partial Public Class ROUTE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ROUTE_ID As Integer
	
	Private _VESSEL_CLASS_ID As Integer
	
	Private _QUOTE_TYPE As Short
	
	Private _QUANTITY_TYPE As Short
	
	Private _CCY_ID As System.Nullable(Of Integer)
	
	Private _ROUTE_SHORT As String
	
	Private _ROUTE_DESCR As String
	
	Private _BALTIC_ABRV As String
	
	Private _BALTIC_ABRV_FFA As String
	
	Private _SETTLEMENT_TYPE As Short
	
	Private _LOT_SIZE As Integer
	
	Private _SETTLEMENT_TICK As Double
	
	Private _PRICING_TICK As Double
	
	Private _FULL_LOT_SIZE As Integer
	
	Private _FFA_TRADED As Boolean
	
	Private _LAST_DAY_RULE_ID As Integer
	
	Private _DEFAULT_QUANTITY As Double
	
	Private _SETTL_ROUTE_ID As Integer
	
	Private _OPTIONS_TRADED As Boolean
	
	Private _WET_FLAT_RATEs As EntitySet(Of WET_FLAT_RATE)
	
	Private _BALTIC_FORWARD_RATEs As EntitySet(Of BALTIC_FORWARD_RATE)
	
	Private _BALTIC_FTPs As EntitySet(Of BALTIC_FTP)
	
	Private _BALTIC_FTP_SETTLEMENTs As EntitySet(Of BALTIC_FTP_SETTLEMENT)
	
	Private _BALTIC_OPTION_VOLATILITies As EntitySet(Of BALTIC_OPTION_VOLATILITy)
	
	Private _BALTIC_SPOT_RATEs As EntitySet(Of BALTIC_SPOT_RATE)
	
	Private _CONTRACT_SERies As EntitySet(Of CONTRACT_SERy)
	
	Private _DESK_TRADER_VOICEs As EntitySet(Of DESK_TRADER_VOICE)
	
	Private _DESK_TRADERS_IM_SUBSCRIPTIONs As EntitySet(Of DESK_TRADERS_IM_SUBSCRIPTION)
	
	Private _EXCHANGE_ROUTEs As EntitySet(Of EXCHANGE_ROUTE)
	
	Private _TRADE_CLASS_RATIO_SPREADs As EntitySet(Of TRADE_CLASS_RATIO_SPREAD)
	
	Private _TRADE_CLASS_RATIO_SPREADs1 As EntitySet(Of TRADE_CLASS_RATIO_SPREAD)
	
	Private _TRADES_FFAs As EntitySet(Of TRADES_FFA)
	
	Private _TRADES_FFAs1 As EntitySet(Of TRADES_FFA)
	
	Private _VESSEL_CLASSes As EntitySet(Of VESSEL_CLASS)
	
	Private _VESSEL_CLASS_SPREAD_MARGINs As EntitySet(Of VESSEL_CLASS_SPREAD_MARGIN)
	
	Private _ORDERS_FFAs As EntitySet(Of ORDERS_FFA)
	
	Private _ORDERS_FFAs1 As EntitySet(Of ORDERS_FFA)
	
	Private _BALTIC_MONTHLY_SETTLEMENTs As EntitySet(Of BALTIC_MONTHLY_SETTLEMENT)
	
	Private _CCY As EntityRef(Of CCY)
	
	Private _LAST_DAY_RULE As EntityRef(Of LAST_DAY_RULE)
	
	Private _QUANTITY_TYPE1 As EntityRef(Of QUANTITY_TYPE)
	
	Private _QUOTE_TYPE1 As EntityRef(Of QUOTE_TYPE)
	
	Private _VESSEL_CLASS As EntityRef(Of VESSEL_CLASS)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnVESSEL_CLASS_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnVESSEL_CLASS_IDChanged()
    End Sub
    Partial Private Sub OnQUOTE_TYPEChanging(value As Short)
    End Sub
    Partial Private Sub OnQUOTE_TYPEChanged()
    End Sub
    Partial Private Sub OnQUANTITY_TYPEChanging(value As Short)
    End Sub
    Partial Private Sub OnQUANTITY_TYPEChanged()
    End Sub
    Partial Private Sub OnCCY_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCCY_IDChanged()
    End Sub
    Partial Private Sub OnROUTE_SHORTChanging(value As String)
    End Sub
    Partial Private Sub OnROUTE_SHORTChanged()
    End Sub
    Partial Private Sub OnROUTE_DESCRChanging(value As String)
    End Sub
    Partial Private Sub OnROUTE_DESCRChanged()
    End Sub
    Partial Private Sub OnBALTIC_ABRVChanging(value As String)
    End Sub
    Partial Private Sub OnBALTIC_ABRVChanged()
    End Sub
    Partial Private Sub OnBALTIC_ABRV_FFAChanging(value As String)
    End Sub
    Partial Private Sub OnBALTIC_ABRV_FFAChanged()
    End Sub
    Partial Private Sub OnSETTLEMENT_TYPEChanging(value As Short)
    End Sub
    Partial Private Sub OnSETTLEMENT_TYPEChanged()
    End Sub
    Partial Private Sub OnLOT_SIZEChanging(value As Integer)
    End Sub
    Partial Private Sub OnLOT_SIZEChanged()
    End Sub
    Partial Private Sub OnSETTLEMENT_TICKChanging(value As Double)
    End Sub
    Partial Private Sub OnSETTLEMENT_TICKChanged()
    End Sub
    Partial Private Sub OnPRICING_TICKChanging(value As Double)
    End Sub
    Partial Private Sub OnPRICING_TICKChanged()
    End Sub
    Partial Private Sub OnFULL_LOT_SIZEChanging(value As Integer)
    End Sub
    Partial Private Sub OnFULL_LOT_SIZEChanged()
    End Sub
    Partial Private Sub OnFFA_TRADEDChanging(value As Boolean)
    End Sub
    Partial Private Sub OnFFA_TRADEDChanged()
    End Sub
    Partial Private Sub OnLAST_DAY_RULE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnLAST_DAY_RULE_IDChanged()
    End Sub
    Partial Private Sub OnDEFAULT_QUANTITYChanging(value As Double)
    End Sub
    Partial Private Sub OnDEFAULT_QUANTITYChanged()
    End Sub
    Partial Private Sub OnSETTL_ROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSETTL_ROUTE_IDChanged()
    End Sub
    Partial Private Sub OnOPTIONS_TRADEDChanging(value As Boolean)
    End Sub
    Partial Private Sub OnOPTIONS_TRADEDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._WET_FLAT_RATEs = New EntitySet(Of WET_FLAT_RATE)(AddressOf Me.attach_WET_FLAT_RATEs, AddressOf Me.detach_WET_FLAT_RATEs)
		Me._BALTIC_FORWARD_RATEs = New EntitySet(Of BALTIC_FORWARD_RATE)(AddressOf Me.attach_BALTIC_FORWARD_RATEs, AddressOf Me.detach_BALTIC_FORWARD_RATEs)
		Me._BALTIC_FTPs = New EntitySet(Of BALTIC_FTP)(AddressOf Me.attach_BALTIC_FTPs, AddressOf Me.detach_BALTIC_FTPs)
		Me._BALTIC_FTP_SETTLEMENTs = New EntitySet(Of BALTIC_FTP_SETTLEMENT)(AddressOf Me.attach_BALTIC_FTP_SETTLEMENTs, AddressOf Me.detach_BALTIC_FTP_SETTLEMENTs)
		Me._BALTIC_OPTION_VOLATILITies = New EntitySet(Of BALTIC_OPTION_VOLATILITy)(AddressOf Me.attach_BALTIC_OPTION_VOLATILITies, AddressOf Me.detach_BALTIC_OPTION_VOLATILITies)
		Me._BALTIC_SPOT_RATEs = New EntitySet(Of BALTIC_SPOT_RATE)(AddressOf Me.attach_BALTIC_SPOT_RATEs, AddressOf Me.detach_BALTIC_SPOT_RATEs)
		Me._CONTRACT_SERies = New EntitySet(Of CONTRACT_SERy)(AddressOf Me.attach_CONTRACT_SERies, AddressOf Me.detach_CONTRACT_SERies)
		Me._DESK_TRADER_VOICEs = New EntitySet(Of DESK_TRADER_VOICE)(AddressOf Me.attach_DESK_TRADER_VOICEs, AddressOf Me.detach_DESK_TRADER_VOICEs)
		Me._DESK_TRADERS_IM_SUBSCRIPTIONs = New EntitySet(Of DESK_TRADERS_IM_SUBSCRIPTION)(AddressOf Me.attach_DESK_TRADERS_IM_SUBSCRIPTIONs, AddressOf Me.detach_DESK_TRADERS_IM_SUBSCRIPTIONs)
		Me._EXCHANGE_ROUTEs = New EntitySet(Of EXCHANGE_ROUTE)(AddressOf Me.attach_EXCHANGE_ROUTEs, AddressOf Me.detach_EXCHANGE_ROUTEs)
		Me._TRADE_CLASS_RATIO_SPREADs = New EntitySet(Of TRADE_CLASS_RATIO_SPREAD)(AddressOf Me.attach_TRADE_CLASS_RATIO_SPREADs, AddressOf Me.detach_TRADE_CLASS_RATIO_SPREADs)
		Me._TRADE_CLASS_RATIO_SPREADs1 = New EntitySet(Of TRADE_CLASS_RATIO_SPREAD)(AddressOf Me.attach_TRADE_CLASS_RATIO_SPREADs1, AddressOf Me.detach_TRADE_CLASS_RATIO_SPREADs1)
		Me._TRADES_FFAs = New EntitySet(Of TRADES_FFA)(AddressOf Me.attach_TRADES_FFAs, AddressOf Me.detach_TRADES_FFAs)
		Me._TRADES_FFAs1 = New EntitySet(Of TRADES_FFA)(AddressOf Me.attach_TRADES_FFAs1, AddressOf Me.detach_TRADES_FFAs1)
		Me._VESSEL_CLASSes = New EntitySet(Of VESSEL_CLASS)(AddressOf Me.attach_VESSEL_CLASSes, AddressOf Me.detach_VESSEL_CLASSes)
		Me._VESSEL_CLASS_SPREAD_MARGINs = New EntitySet(Of VESSEL_CLASS_SPREAD_MARGIN)(AddressOf Me.attach_VESSEL_CLASS_SPREAD_MARGINs, AddressOf Me.detach_VESSEL_CLASS_SPREAD_MARGINs)
		Me._ORDERS_FFAs = New EntitySet(Of ORDERS_FFA)(AddressOf Me.attach_ORDERS_FFAs, AddressOf Me.detach_ORDERS_FFAs)
		Me._ORDERS_FFAs1 = New EntitySet(Of ORDERS_FFA)(AddressOf Me.attach_ORDERS_FFAs1, AddressOf Me.detach_ORDERS_FFAs1)
		Me._BALTIC_MONTHLY_SETTLEMENTs = New EntitySet(Of BALTIC_MONTHLY_SETTLEMENT)(AddressOf Me.attach_BALTIC_MONTHLY_SETTLEMENTs, AddressOf Me.detach_BALTIC_MONTHLY_SETTLEMENTs)
		Me._CCY = CType(Nothing, EntityRef(Of CCY))
		Me._LAST_DAY_RULE = CType(Nothing, EntityRef(Of LAST_DAY_RULE))
		Me._QUANTITY_TYPE1 = CType(Nothing, EntityRef(Of QUANTITY_TYPE))
		Me._QUOTE_TYPE1 = CType(Nothing, EntityRef(Of QUOTE_TYPE))
		Me._VESSEL_CLASS = CType(Nothing, EntityRef(Of VESSEL_CLASS))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VESSEL_CLASS_ID", DbType:="Int NOT NULL")>  _
	Public Property VESSEL_CLASS_ID() As Integer
		Get
			Return Me._VESSEL_CLASS_ID
		End Get
		Set
			If ((Me._VESSEL_CLASS_ID = value)  _
						= false) Then
				If Me._VESSEL_CLASS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnVESSEL_CLASS_IDChanging(value)
				Me.SendPropertyChanging
				Me._VESSEL_CLASS_ID = value
				Me.SendPropertyChanged("VESSEL_CLASS_ID")
				Me.OnVESSEL_CLASS_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUOTE_TYPE", DbType:="SmallInt NOT NULL")>  _
	Public Property QUOTE_TYPE() As Short
		Get
			Return Me._QUOTE_TYPE
		End Get
		Set
			If ((Me._QUOTE_TYPE = value)  _
						= false) Then
				If Me._QUOTE_TYPE1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnQUOTE_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._QUOTE_TYPE = value
				Me.SendPropertyChanged("QUOTE_TYPE")
				Me.OnQUOTE_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUANTITY_TYPE", DbType:="SmallInt NOT NULL")>  _
	Public Property QUANTITY_TYPE() As Short
		Get
			Return Me._QUANTITY_TYPE
		End Get
		Set
			If ((Me._QUANTITY_TYPE = value)  _
						= false) Then
				If Me._QUANTITY_TYPE1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnQUANTITY_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._QUANTITY_TYPE = value
				Me.SendPropertyChanged("QUANTITY_TYPE")
				Me.OnQUANTITY_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCY_ID", DbType:="Int")>  _
	Public Property CCY_ID() As System.Nullable(Of Integer)
		Get
			Return Me._CCY_ID
		End Get
		Set
			If (Me._CCY_ID.Equals(value) = false) Then
				If Me._CCY.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCCY_IDChanging(value)
				Me.SendPropertyChanging
				Me._CCY_ID = value
				Me.SendPropertyChanged("CCY_ID")
				Me.OnCCY_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_SHORT", DbType:="NVarChar(20)")>  _
	Public Property ROUTE_SHORT() As String
		Get
			Return Me._ROUTE_SHORT
		End Get
		Set
			If (String.Equals(Me._ROUTE_SHORT, value) = false) Then
				Me.OnROUTE_SHORTChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_SHORT = value
				Me.SendPropertyChanged("ROUTE_SHORT")
				Me.OnROUTE_SHORTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_DESCR", DbType:="NVarChar(255)")>  _
	Public Property ROUTE_DESCR() As String
		Get
			Return Me._ROUTE_DESCR
		End Get
		Set
			If (String.Equals(Me._ROUTE_DESCR, value) = false) Then
				Me.OnROUTE_DESCRChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_DESCR = value
				Me.SendPropertyChanged("ROUTE_DESCR")
				Me.OnROUTE_DESCRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BALTIC_ABRV", DbType:="NVarChar(20)")>  _
	Public Property BALTIC_ABRV() As String
		Get
			Return Me._BALTIC_ABRV
		End Get
		Set
			If (String.Equals(Me._BALTIC_ABRV, value) = false) Then
				Me.OnBALTIC_ABRVChanging(value)
				Me.SendPropertyChanging
				Me._BALTIC_ABRV = value
				Me.SendPropertyChanged("BALTIC_ABRV")
				Me.OnBALTIC_ABRVChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BALTIC_ABRV_FFA", DbType:="NVarChar(20)")>  _
	Public Property BALTIC_ABRV_FFA() As String
		Get
			Return Me._BALTIC_ABRV_FFA
		End Get
		Set
			If (String.Equals(Me._BALTIC_ABRV_FFA, value) = false) Then
				Me.OnBALTIC_ABRV_FFAChanging(value)
				Me.SendPropertyChanging
				Me._BALTIC_ABRV_FFA = value
				Me.SendPropertyChanged("BALTIC_ABRV_FFA")
				Me.OnBALTIC_ABRV_FFAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SETTLEMENT_TYPE", DbType:="SmallInt NOT NULL")>  _
	Public Property SETTLEMENT_TYPE() As Short
		Get
			Return Me._SETTLEMENT_TYPE
		End Get
		Set
			If ((Me._SETTLEMENT_TYPE = value)  _
						= false) Then
				Me.OnSETTLEMENT_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._SETTLEMENT_TYPE = value
				Me.SendPropertyChanged("SETTLEMENT_TYPE")
				Me.OnSETTLEMENT_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOT_SIZE", DbType:="Int NOT NULL")>  _
	Public Property LOT_SIZE() As Integer
		Get
			Return Me._LOT_SIZE
		End Get
		Set
			If ((Me._LOT_SIZE = value)  _
						= false) Then
				Me.OnLOT_SIZEChanging(value)
				Me.SendPropertyChanging
				Me._LOT_SIZE = value
				Me.SendPropertyChanged("LOT_SIZE")
				Me.OnLOT_SIZEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SETTLEMENT_TICK", DbType:="Float NOT NULL")>  _
	Public Property SETTLEMENT_TICK() As Double
		Get
			Return Me._SETTLEMENT_TICK
		End Get
		Set
			If ((Me._SETTLEMENT_TICK = value)  _
						= false) Then
				Me.OnSETTLEMENT_TICKChanging(value)
				Me.SendPropertyChanging
				Me._SETTLEMENT_TICK = value
				Me.SendPropertyChanged("SETTLEMENT_TICK")
				Me.OnSETTLEMENT_TICKChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICING_TICK", DbType:="Float NOT NULL")>  _
	Public Property PRICING_TICK() As Double
		Get
			Return Me._PRICING_TICK
		End Get
		Set
			If ((Me._PRICING_TICK = value)  _
						= false) Then
				Me.OnPRICING_TICKChanging(value)
				Me.SendPropertyChanging
				Me._PRICING_TICK = value
				Me.SendPropertyChanged("PRICING_TICK")
				Me.OnPRICING_TICKChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FULL_LOT_SIZE", DbType:="Int NOT NULL")>  _
	Public Property FULL_LOT_SIZE() As Integer
		Get
			Return Me._FULL_LOT_SIZE
		End Get
		Set
			If ((Me._FULL_LOT_SIZE = value)  _
						= false) Then
				Me.OnFULL_LOT_SIZEChanging(value)
				Me.SendPropertyChanging
				Me._FULL_LOT_SIZE = value
				Me.SendPropertyChanged("FULL_LOT_SIZE")
				Me.OnFULL_LOT_SIZEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FFA_TRADED", DbType:="Bit NOT NULL")>  _
	Public Property FFA_TRADED() As Boolean
		Get
			Return Me._FFA_TRADED
		End Get
		Set
			If ((Me._FFA_TRADED = value)  _
						= false) Then
				Me.OnFFA_TRADEDChanging(value)
				Me.SendPropertyChanging
				Me._FFA_TRADED = value
				Me.SendPropertyChanged("FFA_TRADED")
				Me.OnFFA_TRADEDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LAST_DAY_RULE_ID", DbType:="Int NOT NULL")>  _
	Public Property LAST_DAY_RULE_ID() As Integer
		Get
			Return Me._LAST_DAY_RULE_ID
		End Get
		Set
			If ((Me._LAST_DAY_RULE_ID = value)  _
						= false) Then
				If Me._LAST_DAY_RULE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLAST_DAY_RULE_IDChanging(value)
				Me.SendPropertyChanging
				Me._LAST_DAY_RULE_ID = value
				Me.SendPropertyChanged("LAST_DAY_RULE_ID")
				Me.OnLAST_DAY_RULE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEFAULT_QUANTITY", DbType:="Float NOT NULL")>  _
	Public Property DEFAULT_QUANTITY() As Double
		Get
			Return Me._DEFAULT_QUANTITY
		End Get
		Set
			If ((Me._DEFAULT_QUANTITY = value)  _
						= false) Then
				Me.OnDEFAULT_QUANTITYChanging(value)
				Me.SendPropertyChanging
				Me._DEFAULT_QUANTITY = value
				Me.SendPropertyChanged("DEFAULT_QUANTITY")
				Me.OnDEFAULT_QUANTITYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SETTL_ROUTE_ID", DbType:="Int NOT NULL")>  _
	Public Property SETTL_ROUTE_ID() As Integer
		Get
			Return Me._SETTL_ROUTE_ID
		End Get
		Set
			If ((Me._SETTL_ROUTE_ID = value)  _
						= false) Then
				Me.OnSETTL_ROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._SETTL_ROUTE_ID = value
				Me.SendPropertyChanged("SETTL_ROUTE_ID")
				Me.OnSETTL_ROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OPTIONS_TRADED", DbType:="Bit NOT NULL")>  _
	Public Property OPTIONS_TRADED() As Boolean
		Get
			Return Me._OPTIONS_TRADED
		End Get
		Set
			If ((Me._OPTIONS_TRADED = value)  _
						= false) Then
				Me.OnOPTIONS_TRADEDChanging(value)
				Me.SendPropertyChanging
				Me._OPTIONS_TRADED = value
				Me.SendPropertyChanged("OPTIONS_TRADED")
				Me.OnOPTIONS_TRADEDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_WET_FLAT_RATE", Storage:="_WET_FLAT_RATEs", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID")>  _
	Public Property WET_FLAT_RATEs() As EntitySet(Of WET_FLAT_RATE)
		Get
			Return Me._WET_FLAT_RATEs
		End Get
		Set
			Me._WET_FLAT_RATEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_BALTIC_FORWARD_RATE", Storage:="_BALTIC_FORWARD_RATEs", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID")>  _
	Public Property BALTIC_FORWARD_RATEs() As EntitySet(Of BALTIC_FORWARD_RATE)
		Get
			Return Me._BALTIC_FORWARD_RATEs
		End Get
		Set
			Me._BALTIC_FORWARD_RATEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_BALTIC_FTP", Storage:="_BALTIC_FTPs", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID")>  _
	Public Property BALTIC_FTPs() As EntitySet(Of BALTIC_FTP)
		Get
			Return Me._BALTIC_FTPs
		End Get
		Set
			Me._BALTIC_FTPs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_BALTIC_FTP_SETTLEMENT", Storage:="_BALTIC_FTP_SETTLEMENTs", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID")>  _
	Public Property BALTIC_FTP_SETTLEMENTs() As EntitySet(Of BALTIC_FTP_SETTLEMENT)
		Get
			Return Me._BALTIC_FTP_SETTLEMENTs
		End Get
		Set
			Me._BALTIC_FTP_SETTLEMENTs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_BALTIC_OPTION_VOLATILITy", Storage:="_BALTIC_OPTION_VOLATILITies", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID")>  _
	Public Property BALTIC_OPTION_VOLATILITies() As EntitySet(Of BALTIC_OPTION_VOLATILITy)
		Get
			Return Me._BALTIC_OPTION_VOLATILITies
		End Get
		Set
			Me._BALTIC_OPTION_VOLATILITies.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_BALTIC_SPOT_RATE", Storage:="_BALTIC_SPOT_RATEs", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID")>  _
	Public Property BALTIC_SPOT_RATEs() As EntitySet(Of BALTIC_SPOT_RATE)
		Get
			Return Me._BALTIC_SPOT_RATEs
		End Get
		Set
			Me._BALTIC_SPOT_RATEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_CONTRACT_SERy", Storage:="_CONTRACT_SERies", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID")>  _
	Public Property CONTRACT_SERies() As EntitySet(Of CONTRACT_SERy)
		Get
			Return Me._CONTRACT_SERies
		End Get
		Set
			Me._CONTRACT_SERies.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_DESK_TRADER_VOICE", Storage:="_DESK_TRADER_VOICEs", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID")>  _
	Public Property DESK_TRADER_VOICEs() As EntitySet(Of DESK_TRADER_VOICE)
		Get
			Return Me._DESK_TRADER_VOICEs
		End Get
		Set
			Me._DESK_TRADER_VOICEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_DESK_TRADERS_IM_SUBSCRIPTION", Storage:="_DESK_TRADERS_IM_SUBSCRIPTIONs", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID")>  _
	Public Property DESK_TRADERS_IM_SUBSCRIPTIONs() As EntitySet(Of DESK_TRADERS_IM_SUBSCRIPTION)
		Get
			Return Me._DESK_TRADERS_IM_SUBSCRIPTIONs
		End Get
		Set
			Me._DESK_TRADERS_IM_SUBSCRIPTIONs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_EXCHANGE_ROUTE", Storage:="_EXCHANGE_ROUTEs", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID")>  _
	Public Property EXCHANGE_ROUTEs() As EntitySet(Of EXCHANGE_ROUTE)
		Get
			Return Me._EXCHANGE_ROUTEs
		End Get
		Set
			Me._EXCHANGE_ROUTEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_TRADE_CLASS_RATIO_SPREAD", Storage:="_TRADE_CLASS_RATIO_SPREADs", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID1")>  _
	Public Property TRADE_CLASS_RATIO_SPREADs() As EntitySet(Of TRADE_CLASS_RATIO_SPREAD)
		Get
			Return Me._TRADE_CLASS_RATIO_SPREADs
		End Get
		Set
			Me._TRADE_CLASS_RATIO_SPREADs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_TRADE_CLASS_RATIO_SPREAD1", Storage:="_TRADE_CLASS_RATIO_SPREADs1", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID2")>  _
	Public Property TRADE_CLASS_RATIO_SPREADs1() As EntitySet(Of TRADE_CLASS_RATIO_SPREAD)
		Get
			Return Me._TRADE_CLASS_RATIO_SPREADs1
		End Get
		Set
			Me._TRADE_CLASS_RATIO_SPREADs1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_TRADES_FFA", Storage:="_TRADES_FFAs", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID")>  _
	Public Property TRADES_FFAs() As EntitySet(Of TRADES_FFA)
		Get
			Return Me._TRADES_FFAs
		End Get
		Set
			Me._TRADES_FFAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_TRADES_FFA1", Storage:="_TRADES_FFAs1", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID2")>  _
	Public Property TRADES_FFAs1() As EntitySet(Of TRADES_FFA)
		Get
			Return Me._TRADES_FFAs1
		End Get
		Set
			Me._TRADES_FFAs1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_VESSEL_CLASS", Storage:="_VESSEL_CLASSes", ThisKey:="ROUTE_ID", OtherKey:="DEFAULT_ROUTE_ID")>  _
	Public Property VESSEL_CLASSes() As EntitySet(Of VESSEL_CLASS)
		Get
			Return Me._VESSEL_CLASSes
		End Get
		Set
			Me._VESSEL_CLASSes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_VESSEL_CLASS_SPREAD_MARGIN", Storage:="_VESSEL_CLASS_SPREAD_MARGINs", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID")>  _
	Public Property VESSEL_CLASS_SPREAD_MARGINs() As EntitySet(Of VESSEL_CLASS_SPREAD_MARGIN)
		Get
			Return Me._VESSEL_CLASS_SPREAD_MARGINs
		End Get
		Set
			Me._VESSEL_CLASS_SPREAD_MARGINs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_ORDERS_FFA", Storage:="_ORDERS_FFAs", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID2")>  _
	Public Property ORDERS_FFAs() As EntitySet(Of ORDERS_FFA)
		Get
			Return Me._ORDERS_FFAs
		End Get
		Set
			Me._ORDERS_FFAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_ORDERS_FFA1", Storage:="_ORDERS_FFAs1", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID")>  _
	Public Property ORDERS_FFAs1() As EntitySet(Of ORDERS_FFA)
		Get
			Return Me._ORDERS_FFAs1
		End Get
		Set
			Me._ORDERS_FFAs1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_BALTIC_MONTHLY_SETTLEMENT", Storage:="_BALTIC_MONTHLY_SETTLEMENTs", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID")>  _
	Public Property BALTIC_MONTHLY_SETTLEMENTs() As EntitySet(Of BALTIC_MONTHLY_SETTLEMENT)
		Get
			Return Me._BALTIC_MONTHLY_SETTLEMENTs
		End Get
		Set
			Me._BALTIC_MONTHLY_SETTLEMENTs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CCY_ROUTE", Storage:="_CCY", ThisKey:="CCY_ID", OtherKey:="CCY_ID", IsForeignKey:=true)>  _
	Public Property CCY() As CCY
		Get
			Return Me._CCY.Entity
		End Get
		Set
			Dim previousValue As CCY = Me._CCY.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CCY.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CCY.Entity = Nothing
					previousValue.ROUTEs.Remove(Me)
				End If
				Me._CCY.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ROUTEs.Add(Me)
					Me._CCY_ID = value.CCY_ID
				Else
					Me._CCY_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("CCY")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LAST_DAY_RULE_ROUTE", Storage:="_LAST_DAY_RULE", ThisKey:="LAST_DAY_RULE_ID", OtherKey:="LAST_DAY_RULE_ID", IsForeignKey:=true)>  _
	Public Property LAST_DAY_RULE() As LAST_DAY_RULE
		Get
			Return Me._LAST_DAY_RULE.Entity
		End Get
		Set
			Dim previousValue As LAST_DAY_RULE = Me._LAST_DAY_RULE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._LAST_DAY_RULE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._LAST_DAY_RULE.Entity = Nothing
					previousValue.ROUTEs.Remove(Me)
				End If
				Me._LAST_DAY_RULE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ROUTEs.Add(Me)
					Me._LAST_DAY_RULE_ID = value.LAST_DAY_RULE_ID
				Else
					Me._LAST_DAY_RULE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("LAST_DAY_RULE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="QUANTITY_TYPE_ROUTE", Storage:="_QUANTITY_TYPE1", ThisKey:="QUANTITY_TYPE", OtherKey:="QUANTITY_TYPE_ID", IsForeignKey:=true)>  _
	Public Property QUANTITY_TYPE1() As QUANTITY_TYPE
		Get
			Return Me._QUANTITY_TYPE1.Entity
		End Get
		Set
			Dim previousValue As QUANTITY_TYPE = Me._QUANTITY_TYPE1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._QUANTITY_TYPE1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._QUANTITY_TYPE1.Entity = Nothing
					previousValue.ROUTEs.Remove(Me)
				End If
				Me._QUANTITY_TYPE1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ROUTEs.Add(Me)
					Me._QUANTITY_TYPE = value.QUANTITY_TYPE_ID
				Else
					Me._QUANTITY_TYPE = CType(Nothing, Short)
				End If
				Me.SendPropertyChanged("QUANTITY_TYPE1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="QUOTE_TYPE_ROUTE", Storage:="_QUOTE_TYPE1", ThisKey:="QUOTE_TYPE", OtherKey:="QUOTE_TYPE_ID", IsForeignKey:=true)>  _
	Public Property QUOTE_TYPE1() As QUOTE_TYPE
		Get
			Return Me._QUOTE_TYPE1.Entity
		End Get
		Set
			Dim previousValue As QUOTE_TYPE = Me._QUOTE_TYPE1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._QUOTE_TYPE1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._QUOTE_TYPE1.Entity = Nothing
					previousValue.ROUTEs.Remove(Me)
				End If
				Me._QUOTE_TYPE1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ROUTEs.Add(Me)
					Me._QUOTE_TYPE = value.QUOTE_TYPE_ID
				Else
					Me._QUOTE_TYPE = CType(Nothing, Short)
				End If
				Me.SendPropertyChanged("QUOTE_TYPE1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="VESSEL_CLASS_ROUTE", Storage:="_VESSEL_CLASS", ThisKey:="VESSEL_CLASS_ID", OtherKey:="VESSEL_CLASS_ID", IsForeignKey:=true)>  _
	Public Property VESSEL_CLASS() As VESSEL_CLASS
		Get
			Return Me._VESSEL_CLASS.Entity
		End Get
		Set
			Dim previousValue As VESSEL_CLASS = Me._VESSEL_CLASS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._VESSEL_CLASS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._VESSEL_CLASS.Entity = Nothing
					previousValue.ROUTEs.Remove(Me)
				End If
				Me._VESSEL_CLASS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ROUTEs.Add(Me)
					Me._VESSEL_CLASS_ID = value.VESSEL_CLASS_ID
				Else
					Me._VESSEL_CLASS_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("VESSEL_CLASS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_WET_FLAT_RATEs(ByVal entity As WET_FLAT_RATE)
		Me.SendPropertyChanging
		entity.ROUTE = Me
	End Sub
	
	Private Sub detach_WET_FLAT_RATEs(ByVal entity As WET_FLAT_RATE)
		Me.SendPropertyChanging
		entity.ROUTE = Nothing
	End Sub
	
	Private Sub attach_BALTIC_FORWARD_RATEs(ByVal entity As BALTIC_FORWARD_RATE)
		Me.SendPropertyChanging
		entity.ROUTE = Me
	End Sub
	
	Private Sub detach_BALTIC_FORWARD_RATEs(ByVal entity As BALTIC_FORWARD_RATE)
		Me.SendPropertyChanging
		entity.ROUTE = Nothing
	End Sub
	
	Private Sub attach_BALTIC_FTPs(ByVal entity As BALTIC_FTP)
		Me.SendPropertyChanging
		entity.ROUTE = Me
	End Sub
	
	Private Sub detach_BALTIC_FTPs(ByVal entity As BALTIC_FTP)
		Me.SendPropertyChanging
		entity.ROUTE = Nothing
	End Sub
	
	Private Sub attach_BALTIC_FTP_SETTLEMENTs(ByVal entity As BALTIC_FTP_SETTLEMENT)
		Me.SendPropertyChanging
		entity.ROUTE = Me
	End Sub
	
	Private Sub detach_BALTIC_FTP_SETTLEMENTs(ByVal entity As BALTIC_FTP_SETTLEMENT)
		Me.SendPropertyChanging
		entity.ROUTE = Nothing
	End Sub
	
	Private Sub attach_BALTIC_OPTION_VOLATILITies(ByVal entity As BALTIC_OPTION_VOLATILITy)
		Me.SendPropertyChanging
		entity.ROUTE = Me
	End Sub
	
	Private Sub detach_BALTIC_OPTION_VOLATILITies(ByVal entity As BALTIC_OPTION_VOLATILITy)
		Me.SendPropertyChanging
		entity.ROUTE = Nothing
	End Sub
	
	Private Sub attach_BALTIC_SPOT_RATEs(ByVal entity As BALTIC_SPOT_RATE)
		Me.SendPropertyChanging
		entity.ROUTE = Me
	End Sub
	
	Private Sub detach_BALTIC_SPOT_RATEs(ByVal entity As BALTIC_SPOT_RATE)
		Me.SendPropertyChanging
		entity.ROUTE = Nothing
	End Sub
	
	Private Sub attach_CONTRACT_SERies(ByVal entity As CONTRACT_SERy)
		Me.SendPropertyChanging
		entity.ROUTE = Me
	End Sub
	
	Private Sub detach_CONTRACT_SERies(ByVal entity As CONTRACT_SERy)
		Me.SendPropertyChanging
		entity.ROUTE = Nothing
	End Sub
	
	Private Sub attach_DESK_TRADER_VOICEs(ByVal entity As DESK_TRADER_VOICE)
		Me.SendPropertyChanging
		entity.ROUTE = Me
	End Sub
	
	Private Sub detach_DESK_TRADER_VOICEs(ByVal entity As DESK_TRADER_VOICE)
		Me.SendPropertyChanging
		entity.ROUTE = Nothing
	End Sub
	
	Private Sub attach_DESK_TRADERS_IM_SUBSCRIPTIONs(ByVal entity As DESK_TRADERS_IM_SUBSCRIPTION)
		Me.SendPropertyChanging
		entity.ROUTE = Me
	End Sub
	
	Private Sub detach_DESK_TRADERS_IM_SUBSCRIPTIONs(ByVal entity As DESK_TRADERS_IM_SUBSCRIPTION)
		Me.SendPropertyChanging
		entity.ROUTE = Nothing
	End Sub
	
	Private Sub attach_EXCHANGE_ROUTEs(ByVal entity As EXCHANGE_ROUTE)
		Me.SendPropertyChanging
		entity.ROUTE = Me
	End Sub
	
	Private Sub detach_EXCHANGE_ROUTEs(ByVal entity As EXCHANGE_ROUTE)
		Me.SendPropertyChanging
		entity.ROUTE = Nothing
	End Sub
	
	Private Sub attach_TRADE_CLASS_RATIO_SPREADs(ByVal entity As TRADE_CLASS_RATIO_SPREAD)
		Me.SendPropertyChanging
		entity.ROUTE = Me
	End Sub
	
	Private Sub detach_TRADE_CLASS_RATIO_SPREADs(ByVal entity As TRADE_CLASS_RATIO_SPREAD)
		Me.SendPropertyChanging
		entity.ROUTE = Nothing
	End Sub
	
	Private Sub attach_TRADE_CLASS_RATIO_SPREADs1(ByVal entity As TRADE_CLASS_RATIO_SPREAD)
		Me.SendPropertyChanging
		entity.ROUTE1 = Me
	End Sub
	
	Private Sub detach_TRADE_CLASS_RATIO_SPREADs1(ByVal entity As TRADE_CLASS_RATIO_SPREAD)
		Me.SendPropertyChanging
		entity.ROUTE1 = Nothing
	End Sub
	
	Private Sub attach_TRADES_FFAs(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ROUTE = Me
	End Sub
	
	Private Sub detach_TRADES_FFAs(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ROUTE = Nothing
	End Sub
	
	Private Sub attach_TRADES_FFAs1(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ROUTE1 = Me
	End Sub
	
	Private Sub detach_TRADES_FFAs1(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ROUTE1 = Nothing
	End Sub
	
	Private Sub attach_VESSEL_CLASSes(ByVal entity As VESSEL_CLASS)
		Me.SendPropertyChanging
		entity.ROUTE = Me
	End Sub
	
	Private Sub detach_VESSEL_CLASSes(ByVal entity As VESSEL_CLASS)
		Me.SendPropertyChanging
		entity.ROUTE = Nothing
	End Sub
	
	Private Sub attach_VESSEL_CLASS_SPREAD_MARGINs(ByVal entity As VESSEL_CLASS_SPREAD_MARGIN)
		Me.SendPropertyChanging
		entity.ROUTE = Me
	End Sub
	
	Private Sub detach_VESSEL_CLASS_SPREAD_MARGINs(ByVal entity As VESSEL_CLASS_SPREAD_MARGIN)
		Me.SendPropertyChanging
		entity.ROUTE = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFAs(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ROUTE = Me
	End Sub
	
	Private Sub detach_ORDERS_FFAs(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ROUTE = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFAs1(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ROUTE1 = Me
	End Sub
	
	Private Sub detach_ORDERS_FFAs1(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ROUTE1 = Nothing
	End Sub
	
	Private Sub attach_BALTIC_MONTHLY_SETTLEMENTs(ByVal entity As BALTIC_MONTHLY_SETTLEMENT)
		Me.SendPropertyChanging
		entity.ROUTE = Me
	End Sub
	
	Private Sub detach_BALTIC_MONTHLY_SETTLEMENTs(ByVal entity As BALTIC_MONTHLY_SETTLEMENT)
		Me.SendPropertyChanging
		entity.ROUTE = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SHOW_NAME_TYPES")>  _
Partial Public Class SHOW_NAME_TYPE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SHOW_NAME_ID As Short
	
	Private _SHOW_NAME As String
	
	Private _COUNTERPARTY_LIMITs As EntitySet(Of COUNTERPARTY_LIMIT)
	
	Private _COUNTERPARTY_LIMITs1 As EntitySet(Of COUNTERPARTY_LIMIT)
	
	Private _ACCOUNT_DESKs As EntitySet(Of ACCOUNT_DESK)
	
	Private _ACCOUNT_DESKs1 As EntitySet(Of ACCOUNT_DESK)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSHOW_NAME_IDChanging(value As Short)
    End Sub
    Partial Private Sub OnSHOW_NAME_IDChanged()
    End Sub
    Partial Private Sub OnSHOW_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnSHOW_NAMEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._COUNTERPARTY_LIMITs = New EntitySet(Of COUNTERPARTY_LIMIT)(AddressOf Me.attach_COUNTERPARTY_LIMITs, AddressOf Me.detach_COUNTERPARTY_LIMITs)
		Me._COUNTERPARTY_LIMITs1 = New EntitySet(Of COUNTERPARTY_LIMIT)(AddressOf Me.attach_COUNTERPARTY_LIMITs1, AddressOf Me.detach_COUNTERPARTY_LIMITs1)
		Me._ACCOUNT_DESKs = New EntitySet(Of ACCOUNT_DESK)(AddressOf Me.attach_ACCOUNT_DESKs, AddressOf Me.detach_ACCOUNT_DESKs)
		Me._ACCOUNT_DESKs1 = New EntitySet(Of ACCOUNT_DESK)(AddressOf Me.attach_ACCOUNT_DESKs1, AddressOf Me.detach_ACCOUNT_DESKs1)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SHOW_NAME_ID", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SHOW_NAME_ID() As Short
		Get
			Return Me._SHOW_NAME_ID
		End Get
		Set
			If ((Me._SHOW_NAME_ID = value)  _
						= false) Then
				Me.OnSHOW_NAME_IDChanging(value)
				Me.SendPropertyChanging
				Me._SHOW_NAME_ID = value
				Me.SendPropertyChanged("SHOW_NAME_ID")
				Me.OnSHOW_NAME_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SHOW_NAME", DbType:="VarChar(50)")>  _
	Public Property SHOW_NAME() As String
		Get
			Return Me._SHOW_NAME
		End Get
		Set
			If (String.Equals(Me._SHOW_NAME, value) = false) Then
				Me.OnSHOW_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._SHOW_NAME = value
				Me.SendPropertyChanged("SHOW_NAME")
				Me.OnSHOW_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SHOW_NAME_TYPE_COUNTERPARTY_LIMIT", Storage:="_COUNTERPARTY_LIMITs", ThisKey:="SHOW_NAME_ID", OtherKey:="CLEARED_SHOW_NAME")>  _
	Public Property COUNTERPARTY_LIMITs() As EntitySet(Of COUNTERPARTY_LIMIT)
		Get
			Return Me._COUNTERPARTY_LIMITs
		End Get
		Set
			Me._COUNTERPARTY_LIMITs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SHOW_NAME_TYPE_COUNTERPARTY_LIMIT1", Storage:="_COUNTERPARTY_LIMITs1", ThisKey:="SHOW_NAME_ID", OtherKey:="OTC_SHOW_NAME")>  _
	Public Property COUNTERPARTY_LIMITs1() As EntitySet(Of COUNTERPARTY_LIMIT)
		Get
			Return Me._COUNTERPARTY_LIMITs1
		End Get
		Set
			Me._COUNTERPARTY_LIMITs1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SHOW_NAME_TYPE_ACCOUNT_DESK", Storage:="_ACCOUNT_DESKs", ThisKey:="SHOW_NAME_ID", OtherKey:="CLEARED_SHOW_NAME")>  _
	Public Property ACCOUNT_DESKs() As EntitySet(Of ACCOUNT_DESK)
		Get
			Return Me._ACCOUNT_DESKs
		End Get
		Set
			Me._ACCOUNT_DESKs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SHOW_NAME_TYPE_ACCOUNT_DESK1", Storage:="_ACCOUNT_DESKs1", ThisKey:="SHOW_NAME_ID", OtherKey:="OTC_SHOW_NAME")>  _
	Public Property ACCOUNT_DESKs1() As EntitySet(Of ACCOUNT_DESK)
		Get
			Return Me._ACCOUNT_DESKs1
		End Get
		Set
			Me._ACCOUNT_DESKs1.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_COUNTERPARTY_LIMITs(ByVal entity As COUNTERPARTY_LIMIT)
		Me.SendPropertyChanging
		entity.SHOW_NAME_TYPE = Me
	End Sub
	
	Private Sub detach_COUNTERPARTY_LIMITs(ByVal entity As COUNTERPARTY_LIMIT)
		Me.SendPropertyChanging
		entity.SHOW_NAME_TYPE = Nothing
	End Sub
	
	Private Sub attach_COUNTERPARTY_LIMITs1(ByVal entity As COUNTERPARTY_LIMIT)
		Me.SendPropertyChanging
		entity.SHOW_NAME_TYPE1 = Me
	End Sub
	
	Private Sub detach_COUNTERPARTY_LIMITs1(ByVal entity As COUNTERPARTY_LIMIT)
		Me.SendPropertyChanging
		entity.SHOW_NAME_TYPE1 = Nothing
	End Sub
	
	Private Sub attach_ACCOUNT_DESKs(ByVal entity As ACCOUNT_DESK)
		Me.SendPropertyChanging
		entity.SHOW_NAME_TYPE = Me
	End Sub
	
	Private Sub detach_ACCOUNT_DESKs(ByVal entity As ACCOUNT_DESK)
		Me.SendPropertyChanging
		entity.SHOW_NAME_TYPE = Nothing
	End Sub
	
	Private Sub attach_ACCOUNT_DESKs1(ByVal entity As ACCOUNT_DESK)
		Me.SendPropertyChanging
		entity.SHOW_NAME_TYPE1 = Me
	End Sub
	
	Private Sub detach_ACCOUNT_DESKs1(ByVal entity As ACCOUNT_DESK)
		Me.SendPropertyChanging
		entity.SHOW_NAME_TYPE1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SMSINDEX")>  _
Partial Public Class SMSINDEX
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _COMPANY As String
	
	Private _FIRST_NAME As String
	
	Private _LAST_NAME As String
	
	Private _MOBILE As String
	
	Private _CAPES As System.Nullable(Of Boolean)
	
	Private _PMX As System.Nullable(Of Boolean)
	
	Private _SMX As System.Nullable(Of Boolean)
	
	Private _HSZ As System.Nullable(Of Boolean)
	
	Private _RESPONSE As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnCOMPANYChanging(value As String)
    End Sub
    Partial Private Sub OnCOMPANYChanged()
    End Sub
    Partial Private Sub OnFIRST_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnFIRST_NAMEChanged()
    End Sub
    Partial Private Sub OnLAST_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnLAST_NAMEChanged()
    End Sub
    Partial Private Sub OnMOBILEChanging(value As String)
    End Sub
    Partial Private Sub OnMOBILEChanged()
    End Sub
    Partial Private Sub OnCAPESChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnCAPESChanged()
    End Sub
    Partial Private Sub OnPMXChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPMXChanged()
    End Sub
    Partial Private Sub OnSMXChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSMXChanged()
    End Sub
    Partial Private Sub OnHSZChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnHSZChanged()
    End Sub
    Partial Private Sub OnRESPONSEChanging(value As String)
    End Sub
    Partial Private Sub OnRESPONSEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COMPANY", DbType:="NVarChar(50)")>  _
	Public Property COMPANY() As String
		Get
			Return Me._COMPANY
		End Get
		Set
			If (String.Equals(Me._COMPANY, value) = false) Then
				Me.OnCOMPANYChanging(value)
				Me.SendPropertyChanging
				Me._COMPANY = value
				Me.SendPropertyChanged("COMPANY")
				Me.OnCOMPANYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIRST_NAME", DbType:="NVarChar(50)")>  _
	Public Property FIRST_NAME() As String
		Get
			Return Me._FIRST_NAME
		End Get
		Set
			If (String.Equals(Me._FIRST_NAME, value) = false) Then
				Me.OnFIRST_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._FIRST_NAME = value
				Me.SendPropertyChanged("FIRST_NAME")
				Me.OnFIRST_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LAST_NAME", DbType:="NVarChar(50)")>  _
	Public Property LAST_NAME() As String
		Get
			Return Me._LAST_NAME
		End Get
		Set
			If (String.Equals(Me._LAST_NAME, value) = false) Then
				Me.OnLAST_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._LAST_NAME = value
				Me.SendPropertyChanged("LAST_NAME")
				Me.OnLAST_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MOBILE", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property MOBILE() As String
		Get
			Return Me._MOBILE
		End Get
		Set
			If (String.Equals(Me._MOBILE, value) = false) Then
				Me.OnMOBILEChanging(value)
				Me.SendPropertyChanging
				Me._MOBILE = value
				Me.SendPropertyChanged("MOBILE")
				Me.OnMOBILEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CAPES", DbType:="Bit")>  _
	Public Property CAPES() As System.Nullable(Of Boolean)
		Get
			Return Me._CAPES
		End Get
		Set
			If (Me._CAPES.Equals(value) = false) Then
				Me.OnCAPESChanging(value)
				Me.SendPropertyChanging
				Me._CAPES = value
				Me.SendPropertyChanged("CAPES")
				Me.OnCAPESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PMX", DbType:="Bit")>  _
	Public Property PMX() As System.Nullable(Of Boolean)
		Get
			Return Me._PMX
		End Get
		Set
			If (Me._PMX.Equals(value) = false) Then
				Me.OnPMXChanging(value)
				Me.SendPropertyChanging
				Me._PMX = value
				Me.SendPropertyChanged("PMX")
				Me.OnPMXChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SMX", DbType:="Bit")>  _
	Public Property SMX() As System.Nullable(Of Boolean)
		Get
			Return Me._SMX
		End Get
		Set
			If (Me._SMX.Equals(value) = false) Then
				Me.OnSMXChanging(value)
				Me.SendPropertyChanging
				Me._SMX = value
				Me.SendPropertyChanged("SMX")
				Me.OnSMXChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HSZ", DbType:="Bit")>  _
	Public Property HSZ() As System.Nullable(Of Boolean)
		Get
			Return Me._HSZ
		End Get
		Set
			If (Me._HSZ.Equals(value) = false) Then
				Me.OnHSZChanging(value)
				Me.SendPropertyChanging
				Me._HSZ = value
				Me.SendPropertyChanged("HSZ")
				Me.OnHSZChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RESPONSE", DbType:="NVarChar(MAX)")>  _
	Public Property RESPONSE() As String
		Get
			Return Me._RESPONSE
		End Get
		Set
			If (String.Equals(Me._RESPONSE, value) = false) Then
				Me.OnRESPONSEChanging(value)
				Me.SendPropertyChanging
				Me._RESPONSE = value
				Me.SendPropertyChanged("RESPONSE")
				Me.OnRESPONSEChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SPOTFIXINGS")>  _
Partial Public Class SPOTFIXING
	
	Private _ID As Integer
	
	Private _FIXDATE As Date
	
	Private _ROUTE_ID As Integer
	
	Private _FIXING As System.Nullable(Of Double)
	
	Private _upsize_ts As System.Data.Linq.Binary
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me._ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXDATE", DbType:="DateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FIXDATE() As Date
		Get
			Return Me._FIXDATE
		End Get
		Set
			If ((Me._FIXDATE = value)  _
						= false) Then
				Me._FIXDATE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				Me._ROUTE_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FIXING() As System.Nullable(Of Double)
		Get
			Return Me._FIXING
		End Get
		Set
			If (Me._FIXING.Equals(value) = false) Then
				Me._FIXING = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_upsize_ts", AutoSync:=AutoSync.Always, DbType:="rowversion NOT NULL", CanBeNull:=false, IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property upsize_ts() As System.Data.Linq.Binary
		Get
			Return Me._upsize_ts
		End Get
		Set
			If (Object.Equals(Me._upsize_ts, value) = false) Then
				Me._upsize_ts = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TEST")>  _
Partial Public Class TEST
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ACCOUNT_ID As Integer
	
	Private _DES As String
	
	Private _DES2 As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnACCOUNT_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_IDChanged()
    End Sub
    Partial Private Sub OnDESChanging(value As String)
    End Sub
    Partial Private Sub OnDESChanged()
    End Sub
    Partial Private Sub OnDES2Changing(value As String)
    End Sub
    Partial Private Sub OnDES2Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ACCOUNT_ID() As Integer
		Get
			Return Me._ACCOUNT_ID
		End Get
		Set
			If ((Me._ACCOUNT_ID = value)  _
						= false) Then
				Me.OnACCOUNT_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_ID = value
				Me.SendPropertyChanged("ACCOUNT_ID")
				Me.OnACCOUNT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DES", DbType:="VarChar(50)")>  _
	Public Property DES() As String
		Get
			Return Me._DES
		End Get
		Set
			If (String.Equals(Me._DES, value) = false) Then
				Me.OnDESChanging(value)
				Me.SendPropertyChanging
				Me._DES = value
				Me.SendPropertyChanged("DES")
				Me.OnDESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DES2", DbType:="VarChar(50)")>  _
	Public Property DES2() As String
		Get
			Return Me._DES2
		End Get
		Set
			If (String.Equals(Me._DES2, value) = false) Then
				Me.OnDES2Changing(value)
				Me.SendPropertyChanging
				Me._DES2 = value
				Me.SendPropertyChanged("DES2")
				Me.OnDES2Changed
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TRADE_AUTHORITIES")>  _
Partial Public Class TRADE_AUTHORITy
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TRADE_AUTHORITY As Short
	
	Private _TRADE_AUTHORITY_DESCR As String
	
	Private _DESK_TRADERs As EntitySet(Of DESK_TRADER)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTRADE_AUTHORITYChanging(value As Short)
    End Sub
    Partial Private Sub OnTRADE_AUTHORITYChanged()
    End Sub
    Partial Private Sub OnTRADE_AUTHORITY_DESCRChanging(value As String)
    End Sub
    Partial Private Sub OnTRADE_AUTHORITY_DESCRChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DESK_TRADERs = New EntitySet(Of DESK_TRADER)(AddressOf Me.attach_DESK_TRADERs, AddressOf Me.detach_DESK_TRADERs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_AUTHORITY", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TRADE_AUTHORITY() As Short
		Get
			Return Me._TRADE_AUTHORITY
		End Get
		Set
			If ((Me._TRADE_AUTHORITY = value)  _
						= false) Then
				Me.OnTRADE_AUTHORITYChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_AUTHORITY = value
				Me.SendPropertyChanged("TRADE_AUTHORITY")
				Me.OnTRADE_AUTHORITYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_AUTHORITY_DESCR", DbType:="NVarChar(50)")>  _
	Public Property TRADE_AUTHORITY_DESCR() As String
		Get
			Return Me._TRADE_AUTHORITY_DESCR
		End Get
		Set
			If (String.Equals(Me._TRADE_AUTHORITY_DESCR, value) = false) Then
				Me.OnTRADE_AUTHORITY_DESCRChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_AUTHORITY_DESCR = value
				Me.SendPropertyChanged("TRADE_AUTHORITY_DESCR")
				Me.OnTRADE_AUTHORITY_DESCRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_AUTHORITy_DESK_TRADER", Storage:="_DESK_TRADERs", ThisKey:="TRADE_AUTHORITY", OtherKey:="TRADE_AUTHORITY")>  _
	Public Property DESK_TRADERs() As EntitySet(Of DESK_TRADER)
		Get
			Return Me._DESK_TRADERs
		End Get
		Set
			Me._DESK_TRADERs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DESK_TRADERs(ByVal entity As DESK_TRADER)
		Me.SendPropertyChanging
		entity.TRADE_AUTHORITy1 = Me
	End Sub
	
	Private Sub detach_DESK_TRADERs(ByVal entity As DESK_TRADER)
		Me.SendPropertyChanging
		entity.TRADE_AUTHORITy1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TRADE_CLASS_EXCHANGES")>  _
Partial Public Class TRADE_CLASS_EXCHANGE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TRADE_CLASS_SHORT As Char
	
	Private _EXCHANGE_ID As Integer
	
	Private _RANKING_ORDER As System.Nullable(Of Integer)
	
	Private _EXCHANGE As EntityRef(Of EXCHANGE)
	
	Private _TRADE_CLASS As EntityRef(Of TRADE_CLASS)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanging(value As Char)
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanged()
    End Sub
    Partial Private Sub OnEXCHANGE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEXCHANGE_IDChanged()
    End Sub
    Partial Private Sub OnRANKING_ORDERChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRANKING_ORDERChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._EXCHANGE = CType(Nothing, EntityRef(Of EXCHANGE))
		Me._TRADE_CLASS = CType(Nothing, EntityRef(Of TRADE_CLASS))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_CLASS_SHORT", DbType:="Char(1) NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TRADE_CLASS_SHORT() As Char
		Get
			Return Me._TRADE_CLASS_SHORT
		End Get
		Set
			If ((Me._TRADE_CLASS_SHORT = value)  _
						= false) Then
				If Me._TRADE_CLASS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTRADE_CLASS_SHORTChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_CLASS_SHORT = value
				Me.SendPropertyChanged("TRADE_CLASS_SHORT")
				Me.OnTRADE_CLASS_SHORTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property EXCHANGE_ID() As Integer
		Get
			Return Me._EXCHANGE_ID
		End Get
		Set
			If ((Me._EXCHANGE_ID = value)  _
						= false) Then
				If Me._EXCHANGE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEXCHANGE_IDChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_ID = value
				Me.SendPropertyChanged("EXCHANGE_ID")
				Me.OnEXCHANGE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RANKING_ORDER", DbType:="Int")>  _
	Public Property RANKING_ORDER() As System.Nullable(Of Integer)
		Get
			Return Me._RANKING_ORDER
		End Get
		Set
			If (Me._RANKING_ORDER.Equals(value) = false) Then
				Me.OnRANKING_ORDERChanging(value)
				Me.SendPropertyChanging
				Me._RANKING_ORDER = value
				Me.SendPropertyChanged("RANKING_ORDER")
				Me.OnRANKING_ORDERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EXCHANGE_TRADE_CLASS_EXCHANGE", Storage:="_EXCHANGE", ThisKey:="EXCHANGE_ID", OtherKey:="EXCHANGE_ID", IsForeignKey:=true)>  _
	Public Property EXCHANGE() As EXCHANGE
		Get
			Return Me._EXCHANGE.Entity
		End Get
		Set
			Dim previousValue As EXCHANGE = Me._EXCHANGE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EXCHANGE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EXCHANGE.Entity = Nothing
					previousValue.TRADE_CLASS_EXCHANGEs.Remove(Me)
				End If
				Me._EXCHANGE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADE_CLASS_EXCHANGEs.Add(Me)
					Me._EXCHANGE_ID = value.EXCHANGE_ID
				Else
					Me._EXCHANGE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("EXCHANGE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASS_TRADE_CLASS_EXCHANGE", Storage:="_TRADE_CLASS", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="TRADE_CLASS_SHORT", IsForeignKey:=true)>  _
	Public Property TRADE_CLASS() As TRADE_CLASS
		Get
			Return Me._TRADE_CLASS.Entity
		End Get
		Set
			Dim previousValue As TRADE_CLASS = Me._TRADE_CLASS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TRADE_CLASS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TRADE_CLASS.Entity = Nothing
					previousValue.TRADE_CLASS_EXCHANGEs.Remove(Me)
				End If
				Me._TRADE_CLASS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADE_CLASS_EXCHANGEs.Add(Me)
					Me._TRADE_CLASS_SHORT = value.TRADE_CLASS_SHORT
				Else
					Me._TRADE_CLASS_SHORT = CType(Nothing, Char)
				End If
				Me.SendPropertyChanged("TRADE_CLASS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TRADE_CLASS_RATIO_SPREADS")>  _
Partial Public Class TRADE_CLASS_RATIO_SPREAD
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TRADE_CLASS_SHORT As Char
	
	Private _ROUTE_ID1 As Integer
	
	Private _ROUTE_ID2 As Integer
	
	Private _PRICING_TICK As Double
	
	Private _PRECISION_TICK As Double
	
	Private _DEFAULT_MULTIPLIER As Integer
	
	Private _ROUTE As EntityRef(Of ROUTE)
	
	Private _ROUTE1 As EntityRef(Of ROUTE)
	
	Private _TRADE_CLASS As EntityRef(Of TRADE_CLASS)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanging(value As Char)
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanged()
    End Sub
    Partial Private Sub OnROUTE_ID1Changing(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_ID1Changed()
    End Sub
    Partial Private Sub OnROUTE_ID2Changing(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_ID2Changed()
    End Sub
    Partial Private Sub OnPRICING_TICKChanging(value As Double)
    End Sub
    Partial Private Sub OnPRICING_TICKChanged()
    End Sub
    Partial Private Sub OnPRECISION_TICKChanging(value As Double)
    End Sub
    Partial Private Sub OnPRECISION_TICKChanged()
    End Sub
    Partial Private Sub OnDEFAULT_MULTIPLIERChanging(value As Integer)
    End Sub
    Partial Private Sub OnDEFAULT_MULTIPLIERChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ROUTE = CType(Nothing, EntityRef(Of ROUTE))
		Me._ROUTE1 = CType(Nothing, EntityRef(Of ROUTE))
		Me._TRADE_CLASS = CType(Nothing, EntityRef(Of TRADE_CLASS))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_CLASS_SHORT", DbType:="Char(1) NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TRADE_CLASS_SHORT() As Char
		Get
			Return Me._TRADE_CLASS_SHORT
		End Get
		Set
			If ((Me._TRADE_CLASS_SHORT = value)  _
						= false) Then
				If Me._TRADE_CLASS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTRADE_CLASS_SHORTChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_CLASS_SHORT = value
				Me.SendPropertyChanged("TRADE_CLASS_SHORT")
				Me.OnTRADE_CLASS_SHORTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID1", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ROUTE_ID1() As Integer
		Get
			Return Me._ROUTE_ID1
		End Get
		Set
			If ((Me._ROUTE_ID1 = value)  _
						= false) Then
				If Me._ROUTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_ID1Changing(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID1 = value
				Me.SendPropertyChanged("ROUTE_ID1")
				Me.OnROUTE_ID1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID2", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ROUTE_ID2() As Integer
		Get
			Return Me._ROUTE_ID2
		End Get
		Set
			If ((Me._ROUTE_ID2 = value)  _
						= false) Then
				If Me._ROUTE1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_ID2Changing(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID2 = value
				Me.SendPropertyChanged("ROUTE_ID2")
				Me.OnROUTE_ID2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICING_TICK", DbType:="Float NOT NULL")>  _
	Public Property PRICING_TICK() As Double
		Get
			Return Me._PRICING_TICK
		End Get
		Set
			If ((Me._PRICING_TICK = value)  _
						= false) Then
				Me.OnPRICING_TICKChanging(value)
				Me.SendPropertyChanging
				Me._PRICING_TICK = value
				Me.SendPropertyChanged("PRICING_TICK")
				Me.OnPRICING_TICKChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRECISION_TICK", DbType:="Float NOT NULL")>  _
	Public Property PRECISION_TICK() As Double
		Get
			Return Me._PRECISION_TICK
		End Get
		Set
			If ((Me._PRECISION_TICK = value)  _
						= false) Then
				Me.OnPRECISION_TICKChanging(value)
				Me.SendPropertyChanging
				Me._PRECISION_TICK = value
				Me.SendPropertyChanged("PRECISION_TICK")
				Me.OnPRECISION_TICKChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEFAULT_MULTIPLIER", DbType:="Int NOT NULL")>  _
	Public Property DEFAULT_MULTIPLIER() As Integer
		Get
			Return Me._DEFAULT_MULTIPLIER
		End Get
		Set
			If ((Me._DEFAULT_MULTIPLIER = value)  _
						= false) Then
				Me.OnDEFAULT_MULTIPLIERChanging(value)
				Me.SendPropertyChanging
				Me._DEFAULT_MULTIPLIER = value
				Me.SendPropertyChanged("DEFAULT_MULTIPLIER")
				Me.OnDEFAULT_MULTIPLIERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_TRADE_CLASS_RATIO_SPREAD", Storage:="_ROUTE", ThisKey:="ROUTE_ID1", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTE() As ROUTE
		Get
			Return Me._ROUTE.Entity
		End Get
		Set
			Dim previousValue As ROUTE = Me._ROUTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTE.Entity = Nothing
					previousValue.TRADE_CLASS_RATIO_SPREADs.Remove(Me)
				End If
				Me._ROUTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADE_CLASS_RATIO_SPREADs.Add(Me)
					Me._ROUTE_ID1 = value.ROUTE_ID
				Else
					Me._ROUTE_ID1 = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_TRADE_CLASS_RATIO_SPREAD1", Storage:="_ROUTE1", ThisKey:="ROUTE_ID2", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTE1() As ROUTE
		Get
			Return Me._ROUTE1.Entity
		End Get
		Set
			Dim previousValue As ROUTE = Me._ROUTE1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTE1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTE1.Entity = Nothing
					previousValue.TRADE_CLASS_RATIO_SPREADs1.Remove(Me)
				End If
				Me._ROUTE1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADE_CLASS_RATIO_SPREADs1.Add(Me)
					Me._ROUTE_ID2 = value.ROUTE_ID
				Else
					Me._ROUTE_ID2 = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTE1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASS_TRADE_CLASS_RATIO_SPREAD", Storage:="_TRADE_CLASS", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="TRADE_CLASS_SHORT", IsForeignKey:=true)>  _
	Public Property TRADE_CLASS() As TRADE_CLASS
		Get
			Return Me._TRADE_CLASS.Entity
		End Get
		Set
			Dim previousValue As TRADE_CLASS = Me._TRADE_CLASS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TRADE_CLASS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TRADE_CLASS.Entity = Nothing
					previousValue.TRADE_CLASS_RATIO_SPREADs.Remove(Me)
				End If
				Me._TRADE_CLASS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADE_CLASS_RATIO_SPREADs.Add(Me)
					Me._TRADE_CLASS_SHORT = value.TRADE_CLASS_SHORT
				Else
					Me._TRADE_CLASS_SHORT = CType(Nothing, Char)
				End If
				Me.SendPropertyChanged("TRADE_CLASS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TRADE_CLASSES")>  _
Partial Public Class TRADE_CLASS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TRADE_CLASS_SHORT As Char
	
	Private _TRADE_CLASS As String
	
	Private _TRADE_CLASS_DES As String
	
	Private _BROKER_DESK_TRADE_CLASSes As EntitySet(Of BROKER_DESK_TRADE_CLASS)
	
	Private _DESK_TRADER_VOICEs As EntitySet(Of DESK_TRADER_VOICE)
	
	Private _DESK_TRADERS_IM_SUBSCRIPTIONs As EntitySet(Of DESK_TRADERS_IM_SUBSCRIPTION)
	
	Private _IM_CLIENTs As EntitySet(Of IM_CLIENT)
	
	Private _IM_SERVERs As EntitySet(Of IM_SERVER)
	
	Private _TRADE_CLASS_EXCHANGEs As EntitySet(Of TRADE_CLASS_EXCHANGE)
	
	Private _TRADE_CLASS_RATIO_SPREADs As EntitySet(Of TRADE_CLASS_RATIO_SPREAD)
	
	Private _VESSEL_CLASSes As EntitySet(Of VESSEL_CLASS)
	
	Private _DESK_TRADERs As EntitySet(Of DESK_TRADER)
	
	Private _DESK_TRADE_CLASSes As EntitySet(Of DESK_TRADE_CLASS)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanging(value As Char)
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanged()
    End Sub
    Partial Private Sub OnTRADE_CLASSChanging(value As String)
    End Sub
    Partial Private Sub OnTRADE_CLASSChanged()
    End Sub
    Partial Private Sub OnTRADE_CLASS_DESChanging(value As String)
    End Sub
    Partial Private Sub OnTRADE_CLASS_DESChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BROKER_DESK_TRADE_CLASSes = New EntitySet(Of BROKER_DESK_TRADE_CLASS)(AddressOf Me.attach_BROKER_DESK_TRADE_CLASSes, AddressOf Me.detach_BROKER_DESK_TRADE_CLASSes)
		Me._DESK_TRADER_VOICEs = New EntitySet(Of DESK_TRADER_VOICE)(AddressOf Me.attach_DESK_TRADER_VOICEs, AddressOf Me.detach_DESK_TRADER_VOICEs)
		Me._DESK_TRADERS_IM_SUBSCRIPTIONs = New EntitySet(Of DESK_TRADERS_IM_SUBSCRIPTION)(AddressOf Me.attach_DESK_TRADERS_IM_SUBSCRIPTIONs, AddressOf Me.detach_DESK_TRADERS_IM_SUBSCRIPTIONs)
		Me._IM_CLIENTs = New EntitySet(Of IM_CLIENT)(AddressOf Me.attach_IM_CLIENTs, AddressOf Me.detach_IM_CLIENTs)
		Me._IM_SERVERs = New EntitySet(Of IM_SERVER)(AddressOf Me.attach_IM_SERVERs, AddressOf Me.detach_IM_SERVERs)
		Me._TRADE_CLASS_EXCHANGEs = New EntitySet(Of TRADE_CLASS_EXCHANGE)(AddressOf Me.attach_TRADE_CLASS_EXCHANGEs, AddressOf Me.detach_TRADE_CLASS_EXCHANGEs)
		Me._TRADE_CLASS_RATIO_SPREADs = New EntitySet(Of TRADE_CLASS_RATIO_SPREAD)(AddressOf Me.attach_TRADE_CLASS_RATIO_SPREADs, AddressOf Me.detach_TRADE_CLASS_RATIO_SPREADs)
		Me._VESSEL_CLASSes = New EntitySet(Of VESSEL_CLASS)(AddressOf Me.attach_VESSEL_CLASSes, AddressOf Me.detach_VESSEL_CLASSes)
		Me._DESK_TRADERs = New EntitySet(Of DESK_TRADER)(AddressOf Me.attach_DESK_TRADERs, AddressOf Me.detach_DESK_TRADERs)
		Me._DESK_TRADE_CLASSes = New EntitySet(Of DESK_TRADE_CLASS)(AddressOf Me.attach_DESK_TRADE_CLASSes, AddressOf Me.detach_DESK_TRADE_CLASSes)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_CLASS_SHORT", DbType:="Char(1) NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TRADE_CLASS_SHORT() As Char
		Get
			Return Me._TRADE_CLASS_SHORT
		End Get
		Set
			If ((Me._TRADE_CLASS_SHORT = value)  _
						= false) Then
				Me.OnTRADE_CLASS_SHORTChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_CLASS_SHORT = value
				Me.SendPropertyChanged("TRADE_CLASS_SHORT")
				Me.OnTRADE_CLASS_SHORTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_CLASS", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property TRADE_CLASS() As String
		Get
			Return Me._TRADE_CLASS
		End Get
		Set
			If (String.Equals(Me._TRADE_CLASS, value) = false) Then
				Me.OnTRADE_CLASSChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_CLASS = value
				Me.SendPropertyChanged("TRADE_CLASS")
				Me.OnTRADE_CLASSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_CLASS_DES", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TRADE_CLASS_DES() As String
		Get
			Return Me._TRADE_CLASS_DES
		End Get
		Set
			If (String.Equals(Me._TRADE_CLASS_DES, value) = false) Then
				Me.OnTRADE_CLASS_DESChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_CLASS_DES = value
				Me.SendPropertyChanged("TRADE_CLASS_DES")
				Me.OnTRADE_CLASS_DESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASS_BROKER_DESK_TRADE_CLASS", Storage:="_BROKER_DESK_TRADE_CLASSes", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="TRADE_CLASS_SHORT")>  _
	Public Property BROKER_DESK_TRADE_CLASSes() As EntitySet(Of BROKER_DESK_TRADE_CLASS)
		Get
			Return Me._BROKER_DESK_TRADE_CLASSes
		End Get
		Set
			Me._BROKER_DESK_TRADE_CLASSes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASS_DESK_TRADER_VOICE", Storage:="_DESK_TRADER_VOICEs", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="TRADE_CLASS_SHORT")>  _
	Public Property DESK_TRADER_VOICEs() As EntitySet(Of DESK_TRADER_VOICE)
		Get
			Return Me._DESK_TRADER_VOICEs
		End Get
		Set
			Me._DESK_TRADER_VOICEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASS_DESK_TRADERS_IM_SUBSCRIPTION", Storage:="_DESK_TRADERS_IM_SUBSCRIPTIONs", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="TRADE_CLASS_SHORT")>  _
	Public Property DESK_TRADERS_IM_SUBSCRIPTIONs() As EntitySet(Of DESK_TRADERS_IM_SUBSCRIPTION)
		Get
			Return Me._DESK_TRADERS_IM_SUBSCRIPTIONs
		End Get
		Set
			Me._DESK_TRADERS_IM_SUBSCRIPTIONs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASS_IM_CLIENT", Storage:="_IM_CLIENTs", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="TRADE_CLASS_SHORT")>  _
	Public Property IM_CLIENTs() As EntitySet(Of IM_CLIENT)
		Get
			Return Me._IM_CLIENTs
		End Get
		Set
			Me._IM_CLIENTs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASS_IM_SERVER", Storage:="_IM_SERVERs", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="TRADE_CLASS_SHORT")>  _
	Public Property IM_SERVERs() As EntitySet(Of IM_SERVER)
		Get
			Return Me._IM_SERVERs
		End Get
		Set
			Me._IM_SERVERs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASS_TRADE_CLASS_EXCHANGE", Storage:="_TRADE_CLASS_EXCHANGEs", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="TRADE_CLASS_SHORT")>  _
	Public Property TRADE_CLASS_EXCHANGEs() As EntitySet(Of TRADE_CLASS_EXCHANGE)
		Get
			Return Me._TRADE_CLASS_EXCHANGEs
		End Get
		Set
			Me._TRADE_CLASS_EXCHANGEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASS_TRADE_CLASS_RATIO_SPREAD", Storage:="_TRADE_CLASS_RATIO_SPREADs", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="TRADE_CLASS_SHORT")>  _
	Public Property TRADE_CLASS_RATIO_SPREADs() As EntitySet(Of TRADE_CLASS_RATIO_SPREAD)
		Get
			Return Me._TRADE_CLASS_RATIO_SPREADs
		End Get
		Set
			Me._TRADE_CLASS_RATIO_SPREADs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASS_VESSEL_CLASS", Storage:="_VESSEL_CLASSes", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="DRYWET")>  _
	Public Property VESSEL_CLASSes() As EntitySet(Of VESSEL_CLASS)
		Get
			Return Me._VESSEL_CLASSes
		End Get
		Set
			Me._VESSEL_CLASSes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASS_DESK_TRADER", Storage:="_DESK_TRADERs", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="DEFAULT_MARKET")>  _
	Public Property DESK_TRADERs() As EntitySet(Of DESK_TRADER)
		Get
			Return Me._DESK_TRADERs
		End Get
		Set
			Me._DESK_TRADERs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASS_DESK_TRADE_CLASS", Storage:="_DESK_TRADE_CLASSes", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="TRADE_CLASS_SHORT")>  _
	Public Property DESK_TRADE_CLASSes() As EntitySet(Of DESK_TRADE_CLASS)
		Get
			Return Me._DESK_TRADE_CLASSes
		End Get
		Set
			Me._DESK_TRADE_CLASSes.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BROKER_DESK_TRADE_CLASSes(ByVal entity As BROKER_DESK_TRADE_CLASS)
		Me.SendPropertyChanging
		entity.TRADE_CLASS = Me
	End Sub
	
	Private Sub detach_BROKER_DESK_TRADE_CLASSes(ByVal entity As BROKER_DESK_TRADE_CLASS)
		Me.SendPropertyChanging
		entity.TRADE_CLASS = Nothing
	End Sub
	
	Private Sub attach_DESK_TRADER_VOICEs(ByVal entity As DESK_TRADER_VOICE)
		Me.SendPropertyChanging
		entity.TRADE_CLASS = Me
	End Sub
	
	Private Sub detach_DESK_TRADER_VOICEs(ByVal entity As DESK_TRADER_VOICE)
		Me.SendPropertyChanging
		entity.TRADE_CLASS = Nothing
	End Sub
	
	Private Sub attach_DESK_TRADERS_IM_SUBSCRIPTIONs(ByVal entity As DESK_TRADERS_IM_SUBSCRIPTION)
		Me.SendPropertyChanging
		entity.TRADE_CLASS = Me
	End Sub
	
	Private Sub detach_DESK_TRADERS_IM_SUBSCRIPTIONs(ByVal entity As DESK_TRADERS_IM_SUBSCRIPTION)
		Me.SendPropertyChanging
		entity.TRADE_CLASS = Nothing
	End Sub
	
	Private Sub attach_IM_CLIENTs(ByVal entity As IM_CLIENT)
		Me.SendPropertyChanging
		entity.TRADE_CLASS = Me
	End Sub
	
	Private Sub detach_IM_CLIENTs(ByVal entity As IM_CLIENT)
		Me.SendPropertyChanging
		entity.TRADE_CLASS = Nothing
	End Sub
	
	Private Sub attach_IM_SERVERs(ByVal entity As IM_SERVER)
		Me.SendPropertyChanging
		entity.TRADE_CLASS = Me
	End Sub
	
	Private Sub detach_IM_SERVERs(ByVal entity As IM_SERVER)
		Me.SendPropertyChanging
		entity.TRADE_CLASS = Nothing
	End Sub
	
	Private Sub attach_TRADE_CLASS_EXCHANGEs(ByVal entity As TRADE_CLASS_EXCHANGE)
		Me.SendPropertyChanging
		entity.TRADE_CLASS = Me
	End Sub
	
	Private Sub detach_TRADE_CLASS_EXCHANGEs(ByVal entity As TRADE_CLASS_EXCHANGE)
		Me.SendPropertyChanging
		entity.TRADE_CLASS = Nothing
	End Sub
	
	Private Sub attach_TRADE_CLASS_RATIO_SPREADs(ByVal entity As TRADE_CLASS_RATIO_SPREAD)
		Me.SendPropertyChanging
		entity.TRADE_CLASS = Me
	End Sub
	
	Private Sub detach_TRADE_CLASS_RATIO_SPREADs(ByVal entity As TRADE_CLASS_RATIO_SPREAD)
		Me.SendPropertyChanging
		entity.TRADE_CLASS = Nothing
	End Sub
	
	Private Sub attach_VESSEL_CLASSes(ByVal entity As VESSEL_CLASS)
		Me.SendPropertyChanging
		entity.TRADE_CLASS = Me
	End Sub
	
	Private Sub detach_VESSEL_CLASSes(ByVal entity As VESSEL_CLASS)
		Me.SendPropertyChanging
		entity.TRADE_CLASS = Nothing
	End Sub
	
	Private Sub attach_DESK_TRADERs(ByVal entity As DESK_TRADER)
		Me.SendPropertyChanging
		entity.TRADE_CLASS = Me
	End Sub
	
	Private Sub detach_DESK_TRADERs(ByVal entity As DESK_TRADER)
		Me.SendPropertyChanging
		entity.TRADE_CLASS = Nothing
	End Sub
	
	Private Sub attach_DESK_TRADE_CLASSes(ByVal entity As DESK_TRADE_CLASS)
		Me.SendPropertyChanging
		entity.TRADE_CLASS = Me
	End Sub
	
	Private Sub detach_DESK_TRADE_CLASSes(ByVal entity As DESK_TRADE_CLASS)
		Me.SendPropertyChanging
		entity.TRADE_CLASS = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TRADES_FFA")>  _
Partial Public Class TRADES_FFA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TRADE_ID As Integer
	
	Private _ORDER_DATETIME As Date
	
	Private _TRADE_BOOKED_DATETIME As System.Nullable(Of Date)
	
	Private _TRADE_TYPE As Short
	
	Private _ORDER_QUALIFIER As System.Nullable(Of Char)
	
	Private _ORDER_ID1 As System.Nullable(Of Integer)
	
	Private _ORDER_ID2 As System.Nullable(Of Integer)
	
	Private _TRADE_BS1 As Char
	
	Private _TRADE_BS2 As Char
	
	Private _DESK_TRADER_ID1 As Integer
	
	Private _DESK_TRADER_ID2 As Integer
	
	Private _ROUTE_ID As Integer
	
	Private _MM1 As System.Nullable(Of Short)
	
	Private _YY1 As System.Nullable(Of Short)
	
	Private _MM2 As System.Nullable(Of Short)
	
	Private _YY2 As System.Nullable(Of Short)
	
	Private _SHORTDES As String
	
	Private _PRICE_TRADED As Double
	
	Private _AMMENDED_PRICE As Double
	
	Private _UPDATE_STATUS As Byte
	
	Private _DAY_QUALIFIER As Byte
	
	Private _QUANTITY As Integer
	
	Private _ROUTE_ID2 As System.Nullable(Of Integer)
	
	Private _MM21 As System.Nullable(Of Short)
	
	Private _YY21 As System.Nullable(Of Short)
	
	Private _MM22 As System.Nullable(Of Short)
	
	Private _YY22 As System.Nullable(Of Short)
	
	Private _PRICE_TRADED2 As System.Nullable(Of Double)
	
	Private _DAY_QUALIFIER2 As System.Nullable(Of Byte)
	
	Private _QUANTITY2 As System.Nullable(Of Integer)
	
	Private _EXCHANGE_ID As System.Nullable(Of Integer)
	
	Private _DEAL_CONFIRMATION_SENT As Boolean
	
	Private _SENT_TO_CLEARING As Boolean
	
	Private _CLEARING_ACCEPTED As Boolean
	
	Private _DEAL_CONFIRMATION_SENT2 As Boolean
	
	Private _SENT_TO_CLEARING2 As Boolean
	
	Private _CLEARING_ACCEPTED2 As Boolean
	
	Private _CLEARING_ID1 As System.Nullable(Of Integer)
	
	Private _CLEARING_ID2 As System.Nullable(Of Integer)
	
	Private _PNC As Boolean
	
	Private _INFORM_DESK_ID1 As System.Nullable(Of Integer)
	
	Private _INFORM_DESK_ID2 As System.Nullable(Of Integer)
	
	Private _IS_SYNTHETIC As Boolean
	
	Private _SPREAD_TRADE_ID1 As System.Nullable(Of Integer)
	
	Private _BROKER_ID1 As System.Nullable(Of Integer)
	
	Private _BROKER_ID2 As System.Nullable(Of Integer)
	
	Private _SPREAD_TRADE_ID2 As System.Nullable(Of Integer)
	
	Private _TRADES_FFAs As EntitySet(Of TRADES_FFA)
	
	Private _TRADES_FFAs1 As EntitySet(Of TRADES_FFA)
	
	Private _EXCHANGE As EntityRef(Of EXCHANGE)
	
	Private _ROUTE As EntityRef(Of ROUTE)
	
	Private _ROUTE1 As EntityRef(Of ROUTE)
	
	Private _TRADES_FFA As EntityRef(Of TRADES_FFA)
	
	Private _TRADES_FFA1 As EntityRef(Of TRADES_FFA)
	
	Private _ORDERS_FFA As EntityRef(Of ORDERS_FFA)
	
	Private _ORDERS_FFA1 As EntityRef(Of ORDERS_FFA)
	
	Private _ACCOUNT_DESK As EntityRef(Of ACCOUNT_DESK)
	
	Private _ACCOUNT_DESK1 As EntityRef(Of ACCOUNT_DESK)
	
	Private _DESK_TRADER As EntityRef(Of DESK_TRADER)
	
	Private _DESK_TRADER1 As EntityRef(Of DESK_TRADER)
	
	Private _ACCOUNT As EntityRef(Of ACCOUNT)
	
	Private _ACCOUNT1 As EntityRef(Of ACCOUNT)
	
	Private _ACCOUNT2 As EntityRef(Of ACCOUNT)
	
	Private _ACCOUNT3 As EntityRef(Of ACCOUNT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTRADE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTRADE_IDChanged()
    End Sub
    Partial Private Sub OnORDER_DATETIMEChanging(value As Date)
    End Sub
    Partial Private Sub OnORDER_DATETIMEChanged()
    End Sub
    Partial Private Sub OnTRADE_BOOKED_DATETIMEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTRADE_BOOKED_DATETIMEChanged()
    End Sub
    Partial Private Sub OnTRADE_TYPEChanging(value As Short)
    End Sub
    Partial Private Sub OnTRADE_TYPEChanged()
    End Sub
    Partial Private Sub OnORDER_QUALIFIERChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnORDER_QUALIFIERChanged()
    End Sub
    Partial Private Sub OnORDER_ID1Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnORDER_ID1Changed()
    End Sub
    Partial Private Sub OnORDER_ID2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnORDER_ID2Changed()
    End Sub
    Partial Private Sub OnTRADE_BS1Changing(value As Char)
    End Sub
    Partial Private Sub OnTRADE_BS1Changed()
    End Sub
    Partial Private Sub OnTRADE_BS2Changing(value As Char)
    End Sub
    Partial Private Sub OnTRADE_BS2Changed()
    End Sub
    Partial Private Sub OnDESK_TRADER_ID1Changing(value As Integer)
    End Sub
    Partial Private Sub OnDESK_TRADER_ID1Changed()
    End Sub
    Partial Private Sub OnDESK_TRADER_ID2Changing(value As Integer)
    End Sub
    Partial Private Sub OnDESK_TRADER_ID2Changed()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnMM1Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMM1Changed()
    End Sub
    Partial Private Sub OnYY1Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnYY1Changed()
    End Sub
    Partial Private Sub OnMM2Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMM2Changed()
    End Sub
    Partial Private Sub OnYY2Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnYY2Changed()
    End Sub
    Partial Private Sub OnSHORTDESChanging(value As String)
    End Sub
    Partial Private Sub OnSHORTDESChanged()
    End Sub
    Partial Private Sub OnPRICE_TRADEDChanging(value As Double)
    End Sub
    Partial Private Sub OnPRICE_TRADEDChanged()
    End Sub
    Partial Private Sub OnAMMENDED_PRICEChanging(value As Double)
    End Sub
    Partial Private Sub OnAMMENDED_PRICEChanged()
    End Sub
    Partial Private Sub OnUPDATE_STATUSChanging(value As Byte)
    End Sub
    Partial Private Sub OnUPDATE_STATUSChanged()
    End Sub
    Partial Private Sub OnDAY_QUALIFIERChanging(value As Byte)
    End Sub
    Partial Private Sub OnDAY_QUALIFIERChanged()
    End Sub
    Partial Private Sub OnQUANTITYChanging(value As Integer)
    End Sub
    Partial Private Sub OnQUANTITYChanged()
    End Sub
    Partial Private Sub OnROUTE_ID2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnROUTE_ID2Changed()
    End Sub
    Partial Private Sub OnMM21Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMM21Changed()
    End Sub
    Partial Private Sub OnYY21Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnYY21Changed()
    End Sub
    Partial Private Sub OnMM22Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMM22Changed()
    End Sub
    Partial Private Sub OnYY22Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnYY22Changed()
    End Sub
    Partial Private Sub OnPRICE_TRADED2Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPRICE_TRADED2Changed()
    End Sub
    Partial Private Sub OnDAY_QUALIFIER2Changing(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnDAY_QUALIFIER2Changed()
    End Sub
    Partial Private Sub OnQUANTITY2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnQUANTITY2Changed()
    End Sub
    Partial Private Sub OnEXCHANGE_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEXCHANGE_IDChanged()
    End Sub
    Partial Private Sub OnDEAL_CONFIRMATION_SENTChanging(value As Boolean)
    End Sub
    Partial Private Sub OnDEAL_CONFIRMATION_SENTChanged()
    End Sub
    Partial Private Sub OnSENT_TO_CLEARINGChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSENT_TO_CLEARINGChanged()
    End Sub
    Partial Private Sub OnCLEARING_ACCEPTEDChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCLEARING_ACCEPTEDChanged()
    End Sub
    Partial Private Sub OnDEAL_CONFIRMATION_SENT2Changing(value As Boolean)
    End Sub
    Partial Private Sub OnDEAL_CONFIRMATION_SENT2Changed()
    End Sub
    Partial Private Sub OnSENT_TO_CLEARING2Changing(value As Boolean)
    End Sub
    Partial Private Sub OnSENT_TO_CLEARING2Changed()
    End Sub
    Partial Private Sub OnCLEARING_ACCEPTED2Changing(value As Boolean)
    End Sub
    Partial Private Sub OnCLEARING_ACCEPTED2Changed()
    End Sub
    Partial Private Sub OnCLEARING_ID1Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCLEARING_ID1Changed()
    End Sub
    Partial Private Sub OnCLEARING_ID2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCLEARING_ID2Changed()
    End Sub
    Partial Private Sub OnPNCChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPNCChanged()
    End Sub
    Partial Private Sub OnINFORM_DESK_ID1Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnINFORM_DESK_ID1Changed()
    End Sub
    Partial Private Sub OnINFORM_DESK_ID2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnINFORM_DESK_ID2Changed()
    End Sub
    Partial Private Sub OnIS_SYNTHETICChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIS_SYNTHETICChanged()
    End Sub
    Partial Private Sub OnSPREAD_TRADE_ID1Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSPREAD_TRADE_ID1Changed()
    End Sub
    Partial Private Sub OnBROKER_ID1Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBROKER_ID1Changed()
    End Sub
    Partial Private Sub OnBROKER_ID2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBROKER_ID2Changed()
    End Sub
    Partial Private Sub OnSPREAD_TRADE_ID2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSPREAD_TRADE_ID2Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TRADES_FFAs = New EntitySet(Of TRADES_FFA)(AddressOf Me.attach_TRADES_FFAs, AddressOf Me.detach_TRADES_FFAs)
		Me._TRADES_FFAs1 = New EntitySet(Of TRADES_FFA)(AddressOf Me.attach_TRADES_FFAs1, AddressOf Me.detach_TRADES_FFAs1)
		Me._EXCHANGE = CType(Nothing, EntityRef(Of EXCHANGE))
		Me._ROUTE = CType(Nothing, EntityRef(Of ROUTE))
		Me._ROUTE1 = CType(Nothing, EntityRef(Of ROUTE))
		Me._TRADES_FFA = CType(Nothing, EntityRef(Of TRADES_FFA))
		Me._TRADES_FFA1 = CType(Nothing, EntityRef(Of TRADES_FFA))
		Me._ORDERS_FFA = CType(Nothing, EntityRef(Of ORDERS_FFA))
		Me._ORDERS_FFA1 = CType(Nothing, EntityRef(Of ORDERS_FFA))
		Me._ACCOUNT_DESK = CType(Nothing, EntityRef(Of ACCOUNT_DESK))
		Me._ACCOUNT_DESK1 = CType(Nothing, EntityRef(Of ACCOUNT_DESK))
		Me._DESK_TRADER = CType(Nothing, EntityRef(Of DESK_TRADER))
		Me._DESK_TRADER1 = CType(Nothing, EntityRef(Of DESK_TRADER))
		Me._ACCOUNT = CType(Nothing, EntityRef(Of ACCOUNT))
		Me._ACCOUNT1 = CType(Nothing, EntityRef(Of ACCOUNT))
		Me._ACCOUNT2 = CType(Nothing, EntityRef(Of ACCOUNT))
		Me._ACCOUNT3 = CType(Nothing, EntityRef(Of ACCOUNT))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property TRADE_ID() As Integer
		Get
			Return Me._TRADE_ID
		End Get
		Set
			If ((Me._TRADE_ID = value)  _
						= false) Then
				Me.OnTRADE_IDChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_ID = value
				Me.SendPropertyChanged("TRADE_ID")
				Me.OnTRADE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_DATETIME", DbType:="DateTime2 NOT NULL")>  _
	Public Property ORDER_DATETIME() As Date
		Get
			Return Me._ORDER_DATETIME
		End Get
		Set
			If ((Me._ORDER_DATETIME = value)  _
						= false) Then
				Me.OnORDER_DATETIMEChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_DATETIME = value
				Me.SendPropertyChanged("ORDER_DATETIME")
				Me.OnORDER_DATETIMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_BOOKED_DATETIME", DbType:="DateTime2")>  _
	Public Property TRADE_BOOKED_DATETIME() As System.Nullable(Of Date)
		Get
			Return Me._TRADE_BOOKED_DATETIME
		End Get
		Set
			If (Me._TRADE_BOOKED_DATETIME.Equals(value) = false) Then
				Me.OnTRADE_BOOKED_DATETIMEChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_BOOKED_DATETIME = value
				Me.SendPropertyChanged("TRADE_BOOKED_DATETIME")
				Me.OnTRADE_BOOKED_DATETIMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_TYPE", DbType:="SmallInt NOT NULL")>  _
	Public Property TRADE_TYPE() As Short
		Get
			Return Me._TRADE_TYPE
		End Get
		Set
			If ((Me._TRADE_TYPE = value)  _
						= false) Then
				Me.OnTRADE_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_TYPE = value
				Me.SendPropertyChanged("TRADE_TYPE")
				Me.OnTRADE_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_QUALIFIER", DbType:="Char(1)")>  _
	Public Property ORDER_QUALIFIER() As System.Nullable(Of Char)
		Get
			Return Me._ORDER_QUALIFIER
		End Get
		Set
			If (Me._ORDER_QUALIFIER.Equals(value) = false) Then
				Me.OnORDER_QUALIFIERChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_QUALIFIER = value
				Me.SendPropertyChanged("ORDER_QUALIFIER")
				Me.OnORDER_QUALIFIERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_ID1", DbType:="Int")>  _
	Public Property ORDER_ID1() As System.Nullable(Of Integer)
		Get
			Return Me._ORDER_ID1
		End Get
		Set
			If (Me._ORDER_ID1.Equals(value) = false) Then
				If Me._ORDERS_FFA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnORDER_ID1Changing(value)
				Me.SendPropertyChanging
				Me._ORDER_ID1 = value
				Me.SendPropertyChanged("ORDER_ID1")
				Me.OnORDER_ID1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_ID2", DbType:="Int")>  _
	Public Property ORDER_ID2() As System.Nullable(Of Integer)
		Get
			Return Me._ORDER_ID2
		End Get
		Set
			If (Me._ORDER_ID2.Equals(value) = false) Then
				If Me._ORDERS_FFA1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnORDER_ID2Changing(value)
				Me.SendPropertyChanging
				Me._ORDER_ID2 = value
				Me.SendPropertyChanged("ORDER_ID2")
				Me.OnORDER_ID2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_BS1", DbType:="Char(1) NOT NULL")>  _
	Public Property TRADE_BS1() As Char
		Get
			Return Me._TRADE_BS1
		End Get
		Set
			If ((Me._TRADE_BS1 = value)  _
						= false) Then
				Me.OnTRADE_BS1Changing(value)
				Me.SendPropertyChanging
				Me._TRADE_BS1 = value
				Me.SendPropertyChanged("TRADE_BS1")
				Me.OnTRADE_BS1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_BS2", DbType:="Char(1) NOT NULL")>  _
	Public Property TRADE_BS2() As Char
		Get
			Return Me._TRADE_BS2
		End Get
		Set
			If ((Me._TRADE_BS2 = value)  _
						= false) Then
				Me.OnTRADE_BS2Changing(value)
				Me.SendPropertyChanging
				Me._TRADE_BS2 = value
				Me.SendPropertyChanged("TRADE_BS2")
				Me.OnTRADE_BS2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_TRADER_ID1", DbType:="Int NOT NULL")>  _
	Public Property DESK_TRADER_ID1() As Integer
		Get
			Return Me._DESK_TRADER_ID1
		End Get
		Set
			If ((Me._DESK_TRADER_ID1 = value)  _
						= false) Then
				If Me._DESK_TRADER.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDESK_TRADER_ID1Changing(value)
				Me.SendPropertyChanging
				Me._DESK_TRADER_ID1 = value
				Me.SendPropertyChanged("DESK_TRADER_ID1")
				Me.OnDESK_TRADER_ID1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_TRADER_ID2", DbType:="Int NOT NULL")>  _
	Public Property DESK_TRADER_ID2() As Integer
		Get
			Return Me._DESK_TRADER_ID2
		End Get
		Set
			If ((Me._DESK_TRADER_ID2 = value)  _
						= false) Then
				If Me._DESK_TRADER1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDESK_TRADER_ID2Changing(value)
				Me.SendPropertyChanging
				Me._DESK_TRADER_ID2 = value
				Me.SendPropertyChanged("DESK_TRADER_ID2")
				Me.OnDESK_TRADER_ID2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL")>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If Me._ROUTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM1", DbType:="SmallInt")>  _
	Public Property MM1() As System.Nullable(Of Short)
		Get
			Return Me._MM1
		End Get
		Set
			If (Me._MM1.Equals(value) = false) Then
				Me.OnMM1Changing(value)
				Me.SendPropertyChanging
				Me._MM1 = value
				Me.SendPropertyChanged("MM1")
				Me.OnMM1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY1", DbType:="SmallInt")>  _
	Public Property YY1() As System.Nullable(Of Short)
		Get
			Return Me._YY1
		End Get
		Set
			If (Me._YY1.Equals(value) = false) Then
				Me.OnYY1Changing(value)
				Me.SendPropertyChanging
				Me._YY1 = value
				Me.SendPropertyChanged("YY1")
				Me.OnYY1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM2", DbType:="SmallInt")>  _
	Public Property MM2() As System.Nullable(Of Short)
		Get
			Return Me._MM2
		End Get
		Set
			If (Me._MM2.Equals(value) = false) Then
				Me.OnMM2Changing(value)
				Me.SendPropertyChanging
				Me._MM2 = value
				Me.SendPropertyChanged("MM2")
				Me.OnMM2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY2", DbType:="SmallInt")>  _
	Public Property YY2() As System.Nullable(Of Short)
		Get
			Return Me._YY2
		End Get
		Set
			If (Me._YY2.Equals(value) = false) Then
				Me.OnYY2Changing(value)
				Me.SendPropertyChanging
				Me._YY2 = value
				Me.SendPropertyChanged("YY2")
				Me.OnYY2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SHORTDES", DbType:="NVarChar(50)")>  _
	Public Property SHORTDES() As String
		Get
			Return Me._SHORTDES
		End Get
		Set
			If (String.Equals(Me._SHORTDES, value) = false) Then
				Me.OnSHORTDESChanging(value)
				Me.SendPropertyChanging
				Me._SHORTDES = value
				Me.SendPropertyChanged("SHORTDES")
				Me.OnSHORTDESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE_TRADED", DbType:="Float NOT NULL")>  _
	Public Property PRICE_TRADED() As Double
		Get
			Return Me._PRICE_TRADED
		End Get
		Set
			If ((Me._PRICE_TRADED = value)  _
						= false) Then
				Me.OnPRICE_TRADEDChanging(value)
				Me.SendPropertyChanging
				Me._PRICE_TRADED = value
				Me.SendPropertyChanged("PRICE_TRADED")
				Me.OnPRICE_TRADEDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AMMENDED_PRICE", DbType:="Float NOT NULL")>  _
	Public Property AMMENDED_PRICE() As Double
		Get
			Return Me._AMMENDED_PRICE
		End Get
		Set
			If ((Me._AMMENDED_PRICE = value)  _
						= false) Then
				Me.OnAMMENDED_PRICEChanging(value)
				Me.SendPropertyChanging
				Me._AMMENDED_PRICE = value
				Me.SendPropertyChanged("AMMENDED_PRICE")
				Me.OnAMMENDED_PRICEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UPDATE_STATUS", DbType:="TinyInt NOT NULL")>  _
	Public Property UPDATE_STATUS() As Byte
		Get
			Return Me._UPDATE_STATUS
		End Get
		Set
			If ((Me._UPDATE_STATUS = value)  _
						= false) Then
				Me.OnUPDATE_STATUSChanging(value)
				Me.SendPropertyChanging
				Me._UPDATE_STATUS = value
				Me.SendPropertyChanged("UPDATE_STATUS")
				Me.OnUPDATE_STATUSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DAY_QUALIFIER", DbType:="TinyInt NOT NULL")>  _
	Public Property DAY_QUALIFIER() As Byte
		Get
			Return Me._DAY_QUALIFIER
		End Get
		Set
			If ((Me._DAY_QUALIFIER = value)  _
						= false) Then
				Me.OnDAY_QUALIFIERChanging(value)
				Me.SendPropertyChanging
				Me._DAY_QUALIFIER = value
				Me.SendPropertyChanged("DAY_QUALIFIER")
				Me.OnDAY_QUALIFIERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUANTITY", DbType:="Int NOT NULL")>  _
	Public Property QUANTITY() As Integer
		Get
			Return Me._QUANTITY
		End Get
		Set
			If ((Me._QUANTITY = value)  _
						= false) Then
				Me.OnQUANTITYChanging(value)
				Me.SendPropertyChanging
				Me._QUANTITY = value
				Me.SendPropertyChanged("QUANTITY")
				Me.OnQUANTITYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID2", DbType:="Int")>  _
	Public Property ROUTE_ID2() As System.Nullable(Of Integer)
		Get
			Return Me._ROUTE_ID2
		End Get
		Set
			If (Me._ROUTE_ID2.Equals(value) = false) Then
				If Me._ROUTE1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_ID2Changing(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID2 = value
				Me.SendPropertyChanged("ROUTE_ID2")
				Me.OnROUTE_ID2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM21", DbType:="SmallInt")>  _
	Public Property MM21() As System.Nullable(Of Short)
		Get
			Return Me._MM21
		End Get
		Set
			If (Me._MM21.Equals(value) = false) Then
				Me.OnMM21Changing(value)
				Me.SendPropertyChanging
				Me._MM21 = value
				Me.SendPropertyChanged("MM21")
				Me.OnMM21Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY21", DbType:="SmallInt")>  _
	Public Property YY21() As System.Nullable(Of Short)
		Get
			Return Me._YY21
		End Get
		Set
			If (Me._YY21.Equals(value) = false) Then
				Me.OnYY21Changing(value)
				Me.SendPropertyChanging
				Me._YY21 = value
				Me.SendPropertyChanged("YY21")
				Me.OnYY21Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM22", DbType:="SmallInt")>  _
	Public Property MM22() As System.Nullable(Of Short)
		Get
			Return Me._MM22
		End Get
		Set
			If (Me._MM22.Equals(value) = false) Then
				Me.OnMM22Changing(value)
				Me.SendPropertyChanging
				Me._MM22 = value
				Me.SendPropertyChanged("MM22")
				Me.OnMM22Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY22", DbType:="SmallInt")>  _
	Public Property YY22() As System.Nullable(Of Short)
		Get
			Return Me._YY22
		End Get
		Set
			If (Me._YY22.Equals(value) = false) Then
				Me.OnYY22Changing(value)
				Me.SendPropertyChanging
				Me._YY22 = value
				Me.SendPropertyChanged("YY22")
				Me.OnYY22Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE_TRADED2", DbType:="Float")>  _
	Public Property PRICE_TRADED2() As System.Nullable(Of Double)
		Get
			Return Me._PRICE_TRADED2
		End Get
		Set
			If (Me._PRICE_TRADED2.Equals(value) = false) Then
				Me.OnPRICE_TRADED2Changing(value)
				Me.SendPropertyChanging
				Me._PRICE_TRADED2 = value
				Me.SendPropertyChanged("PRICE_TRADED2")
				Me.OnPRICE_TRADED2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DAY_QUALIFIER2", DbType:="TinyInt")>  _
	Public Property DAY_QUALIFIER2() As System.Nullable(Of Byte)
		Get
			Return Me._DAY_QUALIFIER2
		End Get
		Set
			If (Me._DAY_QUALIFIER2.Equals(value) = false) Then
				Me.OnDAY_QUALIFIER2Changing(value)
				Me.SendPropertyChanging
				Me._DAY_QUALIFIER2 = value
				Me.SendPropertyChanged("DAY_QUALIFIER2")
				Me.OnDAY_QUALIFIER2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUANTITY2", DbType:="Int")>  _
	Public Property QUANTITY2() As System.Nullable(Of Integer)
		Get
			Return Me._QUANTITY2
		End Get
		Set
			If (Me._QUANTITY2.Equals(value) = false) Then
				Me.OnQUANTITY2Changing(value)
				Me.SendPropertyChanging
				Me._QUANTITY2 = value
				Me.SendPropertyChanged("QUANTITY2")
				Me.OnQUANTITY2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_ID", DbType:="Int")>  _
	Public Property EXCHANGE_ID() As System.Nullable(Of Integer)
		Get
			Return Me._EXCHANGE_ID
		End Get
		Set
			If (Me._EXCHANGE_ID.Equals(value) = false) Then
				If Me._EXCHANGE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEXCHANGE_IDChanging(value)
				Me.SendPropertyChanging
				Me._EXCHANGE_ID = value
				Me.SendPropertyChanged("EXCHANGE_ID")
				Me.OnEXCHANGE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEAL_CONFIRMATION_SENT", DbType:="Bit NOT NULL")>  _
	Public Property DEAL_CONFIRMATION_SENT() As Boolean
		Get
			Return Me._DEAL_CONFIRMATION_SENT
		End Get
		Set
			If ((Me._DEAL_CONFIRMATION_SENT = value)  _
						= false) Then
				Me.OnDEAL_CONFIRMATION_SENTChanging(value)
				Me.SendPropertyChanging
				Me._DEAL_CONFIRMATION_SENT = value
				Me.SendPropertyChanged("DEAL_CONFIRMATION_SENT")
				Me.OnDEAL_CONFIRMATION_SENTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SENT_TO_CLEARING", DbType:="Bit NOT NULL")>  _
	Public Property SENT_TO_CLEARING() As Boolean
		Get
			Return Me._SENT_TO_CLEARING
		End Get
		Set
			If ((Me._SENT_TO_CLEARING = value)  _
						= false) Then
				Me.OnSENT_TO_CLEARINGChanging(value)
				Me.SendPropertyChanging
				Me._SENT_TO_CLEARING = value
				Me.SendPropertyChanged("SENT_TO_CLEARING")
				Me.OnSENT_TO_CLEARINGChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLEARING_ACCEPTED", DbType:="Bit NOT NULL")>  _
	Public Property CLEARING_ACCEPTED() As Boolean
		Get
			Return Me._CLEARING_ACCEPTED
		End Get
		Set
			If ((Me._CLEARING_ACCEPTED = value)  _
						= false) Then
				Me.OnCLEARING_ACCEPTEDChanging(value)
				Me.SendPropertyChanging
				Me._CLEARING_ACCEPTED = value
				Me.SendPropertyChanged("CLEARING_ACCEPTED")
				Me.OnCLEARING_ACCEPTEDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEAL_CONFIRMATION_SENT2", DbType:="Bit NOT NULL")>  _
	Public Property DEAL_CONFIRMATION_SENT2() As Boolean
		Get
			Return Me._DEAL_CONFIRMATION_SENT2
		End Get
		Set
			If ((Me._DEAL_CONFIRMATION_SENT2 = value)  _
						= false) Then
				Me.OnDEAL_CONFIRMATION_SENT2Changing(value)
				Me.SendPropertyChanging
				Me._DEAL_CONFIRMATION_SENT2 = value
				Me.SendPropertyChanged("DEAL_CONFIRMATION_SENT2")
				Me.OnDEAL_CONFIRMATION_SENT2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SENT_TO_CLEARING2", DbType:="Bit NOT NULL")>  _
	Public Property SENT_TO_CLEARING2() As Boolean
		Get
			Return Me._SENT_TO_CLEARING2
		End Get
		Set
			If ((Me._SENT_TO_CLEARING2 = value)  _
						= false) Then
				Me.OnSENT_TO_CLEARING2Changing(value)
				Me.SendPropertyChanging
				Me._SENT_TO_CLEARING2 = value
				Me.SendPropertyChanged("SENT_TO_CLEARING2")
				Me.OnSENT_TO_CLEARING2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLEARING_ACCEPTED2", DbType:="Bit NOT NULL")>  _
	Public Property CLEARING_ACCEPTED2() As Boolean
		Get
			Return Me._CLEARING_ACCEPTED2
		End Get
		Set
			If ((Me._CLEARING_ACCEPTED2 = value)  _
						= false) Then
				Me.OnCLEARING_ACCEPTED2Changing(value)
				Me.SendPropertyChanging
				Me._CLEARING_ACCEPTED2 = value
				Me.SendPropertyChanged("CLEARING_ACCEPTED2")
				Me.OnCLEARING_ACCEPTED2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLEARING_ID1", DbType:="Int")>  _
	Public Property CLEARING_ID1() As System.Nullable(Of Integer)
		Get
			Return Me._CLEARING_ID1
		End Get
		Set
			If (Me._CLEARING_ID1.Equals(value) = false) Then
				If Me._ACCOUNT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCLEARING_ID1Changing(value)
				Me.SendPropertyChanging
				Me._CLEARING_ID1 = value
				Me.SendPropertyChanged("CLEARING_ID1")
				Me.OnCLEARING_ID1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLEARING_ID2", DbType:="Int")>  _
	Public Property CLEARING_ID2() As System.Nullable(Of Integer)
		Get
			Return Me._CLEARING_ID2
		End Get
		Set
			If (Me._CLEARING_ID2.Equals(value) = false) Then
				If Me._ACCOUNT1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCLEARING_ID2Changing(value)
				Me.SendPropertyChanging
				Me._CLEARING_ID2 = value
				Me.SendPropertyChanged("CLEARING_ID2")
				Me.OnCLEARING_ID2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PNC", DbType:="Bit NOT NULL")>  _
	Public Property PNC() As Boolean
		Get
			Return Me._PNC
		End Get
		Set
			If ((Me._PNC = value)  _
						= false) Then
				Me.OnPNCChanging(value)
				Me.SendPropertyChanging
				Me._PNC = value
				Me.SendPropertyChanged("PNC")
				Me.OnPNCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_INFORM_DESK_ID1", DbType:="Int")>  _
	Public Property INFORM_DESK_ID1() As System.Nullable(Of Integer)
		Get
			Return Me._INFORM_DESK_ID1
		End Get
		Set
			If (Me._INFORM_DESK_ID1.Equals(value) = false) Then
				If Me._ACCOUNT_DESK.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnINFORM_DESK_ID1Changing(value)
				Me.SendPropertyChanging
				Me._INFORM_DESK_ID1 = value
				Me.SendPropertyChanged("INFORM_DESK_ID1")
				Me.OnINFORM_DESK_ID1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_INFORM_DESK_ID2", DbType:="Int")>  _
	Public Property INFORM_DESK_ID2() As System.Nullable(Of Integer)
		Get
			Return Me._INFORM_DESK_ID2
		End Get
		Set
			If (Me._INFORM_DESK_ID2.Equals(value) = false) Then
				If Me._ACCOUNT_DESK1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnINFORM_DESK_ID2Changing(value)
				Me.SendPropertyChanging
				Me._INFORM_DESK_ID2 = value
				Me.SendPropertyChanged("INFORM_DESK_ID2")
				Me.OnINFORM_DESK_ID2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IS_SYNTHETIC", DbType:="Bit NOT NULL")>  _
	Public Property IS_SYNTHETIC() As Boolean
		Get
			Return Me._IS_SYNTHETIC
		End Get
		Set
			If ((Me._IS_SYNTHETIC = value)  _
						= false) Then
				Me.OnIS_SYNTHETICChanging(value)
				Me.SendPropertyChanging
				Me._IS_SYNTHETIC = value
				Me.SendPropertyChanged("IS_SYNTHETIC")
				Me.OnIS_SYNTHETICChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SPREAD_TRADE_ID1", DbType:="Int")>  _
	Public Property SPREAD_TRADE_ID1() As System.Nullable(Of Integer)
		Get
			Return Me._SPREAD_TRADE_ID1
		End Get
		Set
			If (Me._SPREAD_TRADE_ID1.Equals(value) = false) Then
				If Me._TRADES_FFA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSPREAD_TRADE_ID1Changing(value)
				Me.SendPropertyChanging
				Me._SPREAD_TRADE_ID1 = value
				Me.SendPropertyChanged("SPREAD_TRADE_ID1")
				Me.OnSPREAD_TRADE_ID1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BROKER_ID1", DbType:="Int")>  _
	Public Property BROKER_ID1() As System.Nullable(Of Integer)
		Get
			Return Me._BROKER_ID1
		End Get
		Set
			If (Me._BROKER_ID1.Equals(value) = false) Then
				If Me._ACCOUNT2.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBROKER_ID1Changing(value)
				Me.SendPropertyChanging
				Me._BROKER_ID1 = value
				Me.SendPropertyChanged("BROKER_ID1")
				Me.OnBROKER_ID1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BROKER_ID2", DbType:="Int")>  _
	Public Property BROKER_ID2() As System.Nullable(Of Integer)
		Get
			Return Me._BROKER_ID2
		End Get
		Set
			If (Me._BROKER_ID2.Equals(value) = false) Then
				If Me._ACCOUNT3.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBROKER_ID2Changing(value)
				Me.SendPropertyChanging
				Me._BROKER_ID2 = value
				Me.SendPropertyChanged("BROKER_ID2")
				Me.OnBROKER_ID2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SPREAD_TRADE_ID2", DbType:="Int")>  _
	Public Property SPREAD_TRADE_ID2() As System.Nullable(Of Integer)
		Get
			Return Me._SPREAD_TRADE_ID2
		End Get
		Set
			If (Me._SPREAD_TRADE_ID2.Equals(value) = false) Then
				If Me._TRADES_FFA1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSPREAD_TRADE_ID2Changing(value)
				Me.SendPropertyChanging
				Me._SPREAD_TRADE_ID2 = value
				Me.SendPropertyChanged("SPREAD_TRADE_ID2")
				Me.OnSPREAD_TRADE_ID2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADES_FFA_TRADES_FFA", Storage:="_TRADES_FFAs", ThisKey:="TRADE_ID", OtherKey:="SPREAD_TRADE_ID1")>  _
	Public Property TRADES_FFAs() As EntitySet(Of TRADES_FFA)
		Get
			Return Me._TRADES_FFAs
		End Get
		Set
			Me._TRADES_FFAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADES_FFA_TRADES_FFA1", Storage:="_TRADES_FFAs1", ThisKey:="TRADE_ID", OtherKey:="SPREAD_TRADE_ID2")>  _
	Public Property TRADES_FFAs1() As EntitySet(Of TRADES_FFA)
		Get
			Return Me._TRADES_FFAs1
		End Get
		Set
			Me._TRADES_FFAs1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EXCHANGE_TRADES_FFA", Storage:="_EXCHANGE", ThisKey:="EXCHANGE_ID", OtherKey:="EXCHANGE_ID", IsForeignKey:=true)>  _
	Public Property EXCHANGE() As EXCHANGE
		Get
			Return Me._EXCHANGE.Entity
		End Get
		Set
			Dim previousValue As EXCHANGE = Me._EXCHANGE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EXCHANGE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EXCHANGE.Entity = Nothing
					previousValue.TRADES_FFAs.Remove(Me)
				End If
				Me._EXCHANGE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADES_FFAs.Add(Me)
					Me._EXCHANGE_ID = value.EXCHANGE_ID
				Else
					Me._EXCHANGE_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("EXCHANGE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_TRADES_FFA", Storage:="_ROUTE", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTE() As ROUTE
		Get
			Return Me._ROUTE.Entity
		End Get
		Set
			Dim previousValue As ROUTE = Me._ROUTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTE.Entity = Nothing
					previousValue.TRADES_FFAs.Remove(Me)
				End If
				Me._ROUTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADES_FFAs.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_TRADES_FFA1", Storage:="_ROUTE1", ThisKey:="ROUTE_ID2", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTE1() As ROUTE
		Get
			Return Me._ROUTE1.Entity
		End Get
		Set
			Dim previousValue As ROUTE = Me._ROUTE1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTE1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTE1.Entity = Nothing
					previousValue.TRADES_FFAs1.Remove(Me)
				End If
				Me._ROUTE1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADES_FFAs1.Add(Me)
					Me._ROUTE_ID2 = value.ROUTE_ID
				Else
					Me._ROUTE_ID2 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ROUTE1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADES_FFA_TRADES_FFA", Storage:="_TRADES_FFA", ThisKey:="SPREAD_TRADE_ID1", OtherKey:="TRADE_ID", IsForeignKey:=true)>  _
	Public Property TRADES_FFA() As TRADES_FFA
		Get
			Return Me._TRADES_FFA.Entity
		End Get
		Set
			Dim previousValue As TRADES_FFA = Me._TRADES_FFA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TRADES_FFA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TRADES_FFA.Entity = Nothing
					previousValue.TRADES_FFAs.Remove(Me)
				End If
				Me._TRADES_FFA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADES_FFAs.Add(Me)
					Me._SPREAD_TRADE_ID1 = value.TRADE_ID
				Else
					Me._SPREAD_TRADE_ID1 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TRADES_FFA")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADES_FFA_TRADES_FFA1", Storage:="_TRADES_FFA1", ThisKey:="SPREAD_TRADE_ID2", OtherKey:="TRADE_ID", IsForeignKey:=true)>  _
	Public Property TRADES_FFA1() As TRADES_FFA
		Get
			Return Me._TRADES_FFA1.Entity
		End Get
		Set
			Dim previousValue As TRADES_FFA = Me._TRADES_FFA1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TRADES_FFA1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TRADES_FFA1.Entity = Nothing
					previousValue.TRADES_FFAs1.Remove(Me)
				End If
				Me._TRADES_FFA1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADES_FFAs1.Add(Me)
					Me._SPREAD_TRADE_ID2 = value.TRADE_ID
				Else
					Me._SPREAD_TRADE_ID2 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TRADES_FFA1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_TRADES_FFA", Storage:="_ORDERS_FFA", ThisKey:="ORDER_ID1", OtherKey:="ORDER_ID", IsForeignKey:=true)>  _
	Public Property ORDERS_FFA() As ORDERS_FFA
		Get
			Return Me._ORDERS_FFA.Entity
		End Get
		Set
			Dim previousValue As ORDERS_FFA = Me._ORDERS_FFA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ORDERS_FFA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ORDERS_FFA.Entity = Nothing
					previousValue.TRADES_FFAs.Remove(Me)
				End If
				Me._ORDERS_FFA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADES_FFAs.Add(Me)
					Me._ORDER_ID1 = value.ORDER_ID
				Else
					Me._ORDER_ID1 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ORDERS_FFA")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_TRADES_FFA1", Storage:="_ORDERS_FFA1", ThisKey:="ORDER_ID2", OtherKey:="ORDER_ID", IsForeignKey:=true)>  _
	Public Property ORDERS_FFA1() As ORDERS_FFA
		Get
			Return Me._ORDERS_FFA1.Entity
		End Get
		Set
			Dim previousValue As ORDERS_FFA = Me._ORDERS_FFA1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ORDERS_FFA1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ORDERS_FFA1.Entity = Nothing
					previousValue.TRADES_FFAs1.Remove(Me)
				End If
				Me._ORDERS_FFA1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADES_FFAs1.Add(Me)
					Me._ORDER_ID2 = value.ORDER_ID
				Else
					Me._ORDER_ID2 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ORDERS_FFA1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESK_TRADES_FFA", Storage:="_ACCOUNT_DESK", ThisKey:="INFORM_DESK_ID1", OtherKey:="ACCOUNT_DESK_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT_DESK() As ACCOUNT_DESK
		Get
			Return Me._ACCOUNT_DESK.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT_DESK = Me._ACCOUNT_DESK.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT_DESK.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT_DESK.Entity = Nothing
					previousValue.TRADES_FFAs.Remove(Me)
				End If
				Me._ACCOUNT_DESK.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADES_FFAs.Add(Me)
					Me._INFORM_DESK_ID1 = value.ACCOUNT_DESK_ID
				Else
					Me._INFORM_DESK_ID1 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ACCOUNT_DESK")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESK_TRADES_FFA1", Storage:="_ACCOUNT_DESK1", ThisKey:="INFORM_DESK_ID2", OtherKey:="ACCOUNT_DESK_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT_DESK1() As ACCOUNT_DESK
		Get
			Return Me._ACCOUNT_DESK1.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT_DESK = Me._ACCOUNT_DESK1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT_DESK1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT_DESK1.Entity = Nothing
					previousValue.TRADES_FFAs1.Remove(Me)
				End If
				Me._ACCOUNT_DESK1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADES_FFAs1.Add(Me)
					Me._INFORM_DESK_ID2 = value.ACCOUNT_DESK_ID
				Else
					Me._INFORM_DESK_ID2 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ACCOUNT_DESK1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADER_TRADES_FFA", Storage:="_DESK_TRADER", ThisKey:="DESK_TRADER_ID1", OtherKey:="DESK_TRADER_ID", IsForeignKey:=true)>  _
	Public Property DESK_TRADER() As DESK_TRADER
		Get
			Return Me._DESK_TRADER.Entity
		End Get
		Set
			Dim previousValue As DESK_TRADER = Me._DESK_TRADER.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DESK_TRADER.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DESK_TRADER.Entity = Nothing
					previousValue.TRADES_FFAs.Remove(Me)
				End If
				Me._DESK_TRADER.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADES_FFAs.Add(Me)
					Me._DESK_TRADER_ID1 = value.DESK_TRADER_ID
				Else
					Me._DESK_TRADER_ID1 = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DESK_TRADER")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADER_TRADES_FFA1", Storage:="_DESK_TRADER1", ThisKey:="DESK_TRADER_ID2", OtherKey:="DESK_TRADER_ID", IsForeignKey:=true)>  _
	Public Property DESK_TRADER1() As DESK_TRADER
		Get
			Return Me._DESK_TRADER1.Entity
		End Get
		Set
			Dim previousValue As DESK_TRADER = Me._DESK_TRADER1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DESK_TRADER1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DESK_TRADER1.Entity = Nothing
					previousValue.TRADES_FFAs1.Remove(Me)
				End If
				Me._DESK_TRADER1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADES_FFAs1.Add(Me)
					Me._DESK_TRADER_ID2 = value.DESK_TRADER_ID
				Else
					Me._DESK_TRADER_ID2 = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DESK_TRADER1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_TRADES_FFA", Storage:="_ACCOUNT", ThisKey:="CLEARING_ID1", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT() As ACCOUNT
		Get
			Return Me._ACCOUNT.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT = Me._ACCOUNT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT.Entity = Nothing
					previousValue.TRADES_FFAs.Remove(Me)
				End If
				Me._ACCOUNT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADES_FFAs.Add(Me)
					Me._CLEARING_ID1 = value.ACCOUNT_ID
				Else
					Me._CLEARING_ID1 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ACCOUNT")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_TRADES_FFA1", Storage:="_ACCOUNT1", ThisKey:="CLEARING_ID2", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT1() As ACCOUNT
		Get
			Return Me._ACCOUNT1.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT = Me._ACCOUNT1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT1.Entity = Nothing
					previousValue.TRADES_FFAs1.Remove(Me)
				End If
				Me._ACCOUNT1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADES_FFAs1.Add(Me)
					Me._CLEARING_ID2 = value.ACCOUNT_ID
				Else
					Me._CLEARING_ID2 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ACCOUNT1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_TRADES_FFA2", Storage:="_ACCOUNT2", ThisKey:="BROKER_ID1", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT2() As ACCOUNT
		Get
			Return Me._ACCOUNT2.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT = Me._ACCOUNT2.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT2.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT2.Entity = Nothing
					previousValue.TRADES_FFAs2.Remove(Me)
				End If
				Me._ACCOUNT2.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADES_FFAs2.Add(Me)
					Me._BROKER_ID1 = value.ACCOUNT_ID
				Else
					Me._BROKER_ID1 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ACCOUNT2")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_TRADES_FFA3", Storage:="_ACCOUNT3", ThisKey:="BROKER_ID2", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT3() As ACCOUNT
		Get
			Return Me._ACCOUNT3.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT = Me._ACCOUNT3.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT3.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT3.Entity = Nothing
					previousValue.TRADES_FFAs3.Remove(Me)
				End If
				Me._ACCOUNT3.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRADES_FFAs3.Add(Me)
					Me._BROKER_ID2 = value.ACCOUNT_ID
				Else
					Me._BROKER_ID2 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ACCOUNT3")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TRADES_FFAs(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.TRADES_FFA = Me
	End Sub
	
	Private Sub detach_TRADES_FFAs(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.TRADES_FFA = Nothing
	End Sub
	
	Private Sub attach_TRADES_FFAs1(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.TRADES_FFA1 = Me
	End Sub
	
	Private Sub detach_TRADES_FFAs1(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.TRADES_FFA1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TRADES_FFA_OPTIONS")>  _
Partial Public Class TRADES_FFA_OPTION
	
	Private _TRADE_ID As Integer
	
	Private _TRADE_BOOKED_DATE As System.Nullable(Of Date)
	
	Private _ORDER_ID1 As System.Nullable(Of Integer)
	
	Private _ORDER_ID2 As System.Nullable(Of Integer)
	
	Private _TRADE_BS1 As System.Nullable(Of Char)
	
	Private _TRADE_BS2 As System.Nullable(Of Char)
	
	Private _DESK_TRADER_ID1 As System.Nullable(Of Integer)
	
	Private _DESK_TRADER_ID2 As System.Nullable(Of Integer)
	
	Private _ROUTE_ID As System.Nullable(Of Integer)
	
	Private _MM1 As System.Nullable(Of Short)
	
	Private _YY1 As System.Nullable(Of Short)
	
	Private _MM2 As System.Nullable(Of Short)
	
	Private _YY2 As Boolean
	
	Private _SHORTDES As String
	
	Private _OPTION_TYPE As System.Nullable(Of Short)
	
	Private _STRIKE_PRICE1 As System.Nullable(Of Double)
	
	Private _STRIKE_PRICE2 As String
	
	Private _PRICE_TRADED As System.Nullable(Of Double)
	
	Private _PRICE_TRADED1 As System.Nullable(Of Double)
	
	Private _PRICE_TRADED2 As System.Nullable(Of Double)
	
	Private _SPOT_PRICE_REF As System.Nullable(Of Double)
	
	Private _PRICE_VOLATILITY As System.Nullable(Of Double)
	
	Private _TRADE_DAYS As System.Nullable(Of Integer)
	
	Private _LCH As Boolean
	
	Private _SGX As Boolean
	
	Private _NOS As Boolean
	
	Private _OTC As Boolean
	
	Private _DEAL_CONFIRMATION_SENT As Boolean
	
	Private _DEAL_CONFIRMATION_TEXT As System.Data.Linq.Binary
	
	Private _NEEDS_SENT_TO_CLEARING As Boolean
	
	Private _SENT_TO_CLEARING As Boolean
	
	Private _SENT_WHEN As System.Nullable(Of Date)
	
	Private _CLEARING_RESPONDED As Boolean
	
	Private _CLEARING_ID As System.Nullable(Of Integer)
	
	Private _TRADE_STATUS As System.Nullable(Of Short)
	
	Private _DELTA_TRADED As Boolean
	
	Private _DELTA_DAYS As System.Nullable(Of Double)
	
	Private _FFA_TRADE_ID As System.Nullable(Of Integer)
	
	Private _SHOW_MY_TRADES_A As System.Nullable(Of Short)
	
	Private _SHOW_MY_TRADES_B As System.Nullable(Of Short)
	
	Private _upsize_ts As System.Data.Linq.Binary
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_ID", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TRADE_ID() As Integer
		Get
			Return Me._TRADE_ID
		End Get
		Set
			If ((Me._TRADE_ID = value)  _
						= false) Then
				Me._TRADE_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_BOOKED_DATE", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TRADE_BOOKED_DATE() As System.Nullable(Of Date)
		Get
			Return Me._TRADE_BOOKED_DATE
		End Get
		Set
			If (Me._TRADE_BOOKED_DATE.Equals(value) = false) Then
				Me._TRADE_BOOKED_DATE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_ID1", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ORDER_ID1() As System.Nullable(Of Integer)
		Get
			Return Me._ORDER_ID1
		End Get
		Set
			If (Me._ORDER_ID1.Equals(value) = false) Then
				Me._ORDER_ID1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_ID2", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ORDER_ID2() As System.Nullable(Of Integer)
		Get
			Return Me._ORDER_ID2
		End Get
		Set
			If (Me._ORDER_ID2.Equals(value) = false) Then
				Me._ORDER_ID2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_BS1", DbType:="NVarChar(1)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TRADE_BS1() As System.Nullable(Of Char)
		Get
			Return Me._TRADE_BS1
		End Get
		Set
			If (Me._TRADE_BS1.Equals(value) = false) Then
				Me._TRADE_BS1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_BS2", DbType:="NVarChar(1)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TRADE_BS2() As System.Nullable(Of Char)
		Get
			Return Me._TRADE_BS2
		End Get
		Set
			If (Me._TRADE_BS2.Equals(value) = false) Then
				Me._TRADE_BS2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_TRADER_ID1", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DESK_TRADER_ID1() As System.Nullable(Of Integer)
		Get
			Return Me._DESK_TRADER_ID1
		End Get
		Set
			If (Me._DESK_TRADER_ID1.Equals(value) = false) Then
				Me._DESK_TRADER_ID1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_TRADER_ID2", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DESK_TRADER_ID2() As System.Nullable(Of Integer)
		Get
			Return Me._DESK_TRADER_ID2
		End Get
		Set
			If (Me._DESK_TRADER_ID2.Equals(value) = false) Then
				Me._DESK_TRADER_ID2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ROUTE_ID() As System.Nullable(Of Integer)
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If (Me._ROUTE_ID.Equals(value) = false) Then
				Me._ROUTE_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM1", DbType:="SmallInt", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MM1() As System.Nullable(Of Short)
		Get
			Return Me._MM1
		End Get
		Set
			If (Me._MM1.Equals(value) = false) Then
				Me._MM1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY1", DbType:="SmallInt", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property YY1() As System.Nullable(Of Short)
		Get
			Return Me._YY1
		End Get
		Set
			If (Me._YY1.Equals(value) = false) Then
				Me._YY1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM2", DbType:="SmallInt", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MM2() As System.Nullable(Of Short)
		Get
			Return Me._MM2
		End Get
		Set
			If (Me._MM2.Equals(value) = false) Then
				Me._MM2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY2", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property YY2() As Boolean
		Get
			Return Me._YY2
		End Get
		Set
			If ((Me._YY2 = value)  _
						= false) Then
				Me._YY2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SHORTDES", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SHORTDES() As String
		Get
			Return Me._SHORTDES
		End Get
		Set
			If (String.Equals(Me._SHORTDES, value) = false) Then
				Me._SHORTDES = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OPTION_TYPE", DbType:="SmallInt", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property OPTION_TYPE() As System.Nullable(Of Short)
		Get
			Return Me._OPTION_TYPE
		End Get
		Set
			If (Me._OPTION_TYPE.Equals(value) = false) Then
				Me._OPTION_TYPE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_STRIKE_PRICE1", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property STRIKE_PRICE1() As System.Nullable(Of Double)
		Get
			Return Me._STRIKE_PRICE1
		End Get
		Set
			If (Me._STRIKE_PRICE1.Equals(value) = false) Then
				Me._STRIKE_PRICE1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_STRIKE_PRICE2", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property STRIKE_PRICE2() As String
		Get
			Return Me._STRIKE_PRICE2
		End Get
		Set
			If (String.Equals(Me._STRIKE_PRICE2, value) = false) Then
				Me._STRIKE_PRICE2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE_TRADED", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PRICE_TRADED() As System.Nullable(Of Double)
		Get
			Return Me._PRICE_TRADED
		End Get
		Set
			If (Me._PRICE_TRADED.Equals(value) = false) Then
				Me._PRICE_TRADED = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE_TRADED1", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PRICE_TRADED1() As System.Nullable(Of Double)
		Get
			Return Me._PRICE_TRADED1
		End Get
		Set
			If (Me._PRICE_TRADED1.Equals(value) = false) Then
				Me._PRICE_TRADED1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE_TRADED2", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PRICE_TRADED2() As System.Nullable(Of Double)
		Get
			Return Me._PRICE_TRADED2
		End Get
		Set
			If (Me._PRICE_TRADED2.Equals(value) = false) Then
				Me._PRICE_TRADED2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SPOT_PRICE_REF", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SPOT_PRICE_REF() As System.Nullable(Of Double)
		Get
			Return Me._SPOT_PRICE_REF
		End Get
		Set
			If (Me._SPOT_PRICE_REF.Equals(value) = false) Then
				Me._SPOT_PRICE_REF = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE_VOLATILITY", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PRICE_VOLATILITY() As System.Nullable(Of Double)
		Get
			Return Me._PRICE_VOLATILITY
		End Get
		Set
			If (Me._PRICE_VOLATILITY.Equals(value) = false) Then
				Me._PRICE_VOLATILITY = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_DAYS", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TRADE_DAYS() As System.Nullable(Of Integer)
		Get
			Return Me._TRADE_DAYS
		End Get
		Set
			If (Me._TRADE_DAYS.Equals(value) = false) Then
				Me._TRADE_DAYS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LCH", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property LCH() As Boolean
		Get
			Return Me._LCH
		End Get
		Set
			If ((Me._LCH = value)  _
						= false) Then
				Me._LCH = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SGX", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SGX() As Boolean
		Get
			Return Me._SGX
		End Get
		Set
			If ((Me._SGX = value)  _
						= false) Then
				Me._SGX = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOS", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NOS() As Boolean
		Get
			Return Me._NOS
		End Get
		Set
			If ((Me._NOS = value)  _
						= false) Then
				Me._NOS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OTC", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property OTC() As Boolean
		Get
			Return Me._OTC
		End Get
		Set
			If ((Me._OTC = value)  _
						= false) Then
				Me._OTC = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEAL_CONFIRMATION_SENT", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DEAL_CONFIRMATION_SENT() As Boolean
		Get
			Return Me._DEAL_CONFIRMATION_SENT
		End Get
		Set
			If ((Me._DEAL_CONFIRMATION_SENT = value)  _
						= false) Then
				Me._DEAL_CONFIRMATION_SENT = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEAL_CONFIRMATION_TEXT", DbType:="Image", CanBeNull:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DEAL_CONFIRMATION_TEXT() As System.Data.Linq.Binary
		Get
			Return Me._DEAL_CONFIRMATION_TEXT
		End Get
		Set
			If (Object.Equals(Me._DEAL_CONFIRMATION_TEXT, value) = false) Then
				Me._DEAL_CONFIRMATION_TEXT = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NEEDS_SENT_TO_CLEARING", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NEEDS_SENT_TO_CLEARING() As Boolean
		Get
			Return Me._NEEDS_SENT_TO_CLEARING
		End Get
		Set
			If ((Me._NEEDS_SENT_TO_CLEARING = value)  _
						= false) Then
				Me._NEEDS_SENT_TO_CLEARING = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SENT_TO_CLEARING", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SENT_TO_CLEARING() As Boolean
		Get
			Return Me._SENT_TO_CLEARING
		End Get
		Set
			If ((Me._SENT_TO_CLEARING = value)  _
						= false) Then
				Me._SENT_TO_CLEARING = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SENT_WHEN", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SENT_WHEN() As System.Nullable(Of Date)
		Get
			Return Me._SENT_WHEN
		End Get
		Set
			If (Me._SENT_WHEN.Equals(value) = false) Then
				Me._SENT_WHEN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLEARING_RESPONDED", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CLEARING_RESPONDED() As Boolean
		Get
			Return Me._CLEARING_RESPONDED
		End Get
		Set
			If ((Me._CLEARING_RESPONDED = value)  _
						= false) Then
				Me._CLEARING_RESPONDED = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLEARING_ID", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CLEARING_ID() As System.Nullable(Of Integer)
		Get
			Return Me._CLEARING_ID
		End Get
		Set
			If (Me._CLEARING_ID.Equals(value) = false) Then
				Me._CLEARING_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_STATUS", DbType:="SmallInt", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TRADE_STATUS() As System.Nullable(Of Short)
		Get
			Return Me._TRADE_STATUS
		End Get
		Set
			If (Me._TRADE_STATUS.Equals(value) = false) Then
				Me._TRADE_STATUS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DELTA_TRADED", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DELTA_TRADED() As Boolean
		Get
			Return Me._DELTA_TRADED
		End Get
		Set
			If ((Me._DELTA_TRADED = value)  _
						= false) Then
				Me._DELTA_TRADED = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DELTA_DAYS", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DELTA_DAYS() As System.Nullable(Of Double)
		Get
			Return Me._DELTA_DAYS
		End Get
		Set
			If (Me._DELTA_DAYS.Equals(value) = false) Then
				Me._DELTA_DAYS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FFA_TRADE_ID", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FFA_TRADE_ID() As System.Nullable(Of Integer)
		Get
			Return Me._FFA_TRADE_ID
		End Get
		Set
			If (Me._FFA_TRADE_ID.Equals(value) = false) Then
				Me._FFA_TRADE_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SHOW_MY_TRADES_A", DbType:="SmallInt", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SHOW_MY_TRADES_A() As System.Nullable(Of Short)
		Get
			Return Me._SHOW_MY_TRADES_A
		End Get
		Set
			If (Me._SHOW_MY_TRADES_A.Equals(value) = false) Then
				Me._SHOW_MY_TRADES_A = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SHOW_MY_TRADES_B", DbType:="SmallInt", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SHOW_MY_TRADES_B() As System.Nullable(Of Short)
		Get
			Return Me._SHOW_MY_TRADES_B
		End Get
		Set
			If (Me._SHOW_MY_TRADES_B.Equals(value) = false) Then
				Me._SHOW_MY_TRADES_B = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_upsize_ts", AutoSync:=AutoSync.Always, DbType:="rowversion NOT NULL", CanBeNull:=false, IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property upsize_ts() As System.Data.Linq.Binary
		Get
			Return Me._upsize_ts
		End Get
		Set
			If (Object.Equals(Me._upsize_ts, value) = false) Then
				Me._upsize_ts = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TRADES_FFA_SPREADS")>  _
Partial Public Class TRADES_FFA_SPREAD
	
	Private _TRADE_ID As Integer
	
	Private _TRADE_BOOKED_DATE As System.Nullable(Of Date)
	
	Private _ORDER_ID1 As System.Nullable(Of Integer)
	
	Private _ORDER_ID2 As System.Nullable(Of Integer)
	
	Private _TRADE_BS1 As System.Nullable(Of Char)
	
	Private _TRADE_BS2 As System.Nullable(Of Char)
	
	Private _DESK_TRADER_ID1 As System.Nullable(Of Integer)
	
	Private _DESK_TRADER_ID2 As System.Nullable(Of Integer)
	
	Private _ROUTE_ID_A As System.Nullable(Of Integer)
	
	Private _MM_A1 As System.Nullable(Of Short)
	
	Private _YY_A1 As System.Nullable(Of Short)
	
	Private _MM_A2 As System.Nullable(Of Short)
	
	Private _YY_A2 As Boolean
	
	Private _SHORTDES_A As String
	
	Private _ROUTE_ID_B As System.Nullable(Of Integer)
	
	Private _MM_B1 As System.Nullable(Of Short)
	
	Private _YY_B1 As System.Nullable(Of Short)
	
	Private _MM_B2 As System.Nullable(Of Short)
	
	Private _YY_B2 As Boolean
	
	Private _SHORTDES_B As String
	
	Private _SHORTDES As String
	
	Private _PRICE_TRADED As System.Nullable(Of Double)
	
	Private _PRICE_TRADED_A As System.Nullable(Of Double)
	
	Private _FFA_TRADE_ID1 As System.Nullable(Of Integer)
	
	Private _PRICE_TRADED_B As System.Nullable(Of Double)
	
	Private _FFA_TRADE_ID2 As System.Nullable(Of Integer)
	
	Private _PRICE_TYPE As System.Nullable(Of Char)
	
	Private _TRADE_DAYS_A As System.Nullable(Of Double)
	
	Private _TRADE_DAYS_B As System.Nullable(Of Double)
	
	Private _LCH As Boolean
	
	Private _SGX As Boolean
	
	Private _NOS As Boolean
	
	Private _OTC As Boolean
	
	Private _DEAL_CONFIRMATION_SENT As Boolean
	
	Private _DEAL_CONFIRMATION_TEXT As System.Data.Linq.Binary
	
	Private _NEEDS_SENT_TO_CLEARING As Boolean
	
	Private _SENT_TO_CLEARING As Boolean
	
	Private _SENT_WHEN As System.Nullable(Of Date)
	
	Private _CLEARING_RESPONDED As Boolean
	
	Private _CLEARING_ID As System.Nullable(Of Integer)
	
	Private _TRADE_STATUS As System.Nullable(Of Short)
	
	Private _SHOW_MY_TRADES_A As System.Nullable(Of Short)
	
	Private _SHOW_MY_TRADES_B As System.Nullable(Of Short)
	
	Private _upsize_ts As System.Data.Linq.Binary
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_ID", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TRADE_ID() As Integer
		Get
			Return Me._TRADE_ID
		End Get
		Set
			If ((Me._TRADE_ID = value)  _
						= false) Then
				Me._TRADE_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_BOOKED_DATE", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TRADE_BOOKED_DATE() As System.Nullable(Of Date)
		Get
			Return Me._TRADE_BOOKED_DATE
		End Get
		Set
			If (Me._TRADE_BOOKED_DATE.Equals(value) = false) Then
				Me._TRADE_BOOKED_DATE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_ID1", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ORDER_ID1() As System.Nullable(Of Integer)
		Get
			Return Me._ORDER_ID1
		End Get
		Set
			If (Me._ORDER_ID1.Equals(value) = false) Then
				Me._ORDER_ID1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_ID2", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ORDER_ID2() As System.Nullable(Of Integer)
		Get
			Return Me._ORDER_ID2
		End Get
		Set
			If (Me._ORDER_ID2.Equals(value) = false) Then
				Me._ORDER_ID2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_BS1", DbType:="NVarChar(1)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TRADE_BS1() As System.Nullable(Of Char)
		Get
			Return Me._TRADE_BS1
		End Get
		Set
			If (Me._TRADE_BS1.Equals(value) = false) Then
				Me._TRADE_BS1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_BS2", DbType:="NVarChar(1)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TRADE_BS2() As System.Nullable(Of Char)
		Get
			Return Me._TRADE_BS2
		End Get
		Set
			If (Me._TRADE_BS2.Equals(value) = false) Then
				Me._TRADE_BS2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_TRADER_ID1", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DESK_TRADER_ID1() As System.Nullable(Of Integer)
		Get
			Return Me._DESK_TRADER_ID1
		End Get
		Set
			If (Me._DESK_TRADER_ID1.Equals(value) = false) Then
				Me._DESK_TRADER_ID1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_TRADER_ID2", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DESK_TRADER_ID2() As System.Nullable(Of Integer)
		Get
			Return Me._DESK_TRADER_ID2
		End Get
		Set
			If (Me._DESK_TRADER_ID2.Equals(value) = false) Then
				Me._DESK_TRADER_ID2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID_A", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ROUTE_ID_A() As System.Nullable(Of Integer)
		Get
			Return Me._ROUTE_ID_A
		End Get
		Set
			If (Me._ROUTE_ID_A.Equals(value) = false) Then
				Me._ROUTE_ID_A = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM_A1", DbType:="SmallInt", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MM_A1() As System.Nullable(Of Short)
		Get
			Return Me._MM_A1
		End Get
		Set
			If (Me._MM_A1.Equals(value) = false) Then
				Me._MM_A1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY_A1", DbType:="SmallInt", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property YY_A1() As System.Nullable(Of Short)
		Get
			Return Me._YY_A1
		End Get
		Set
			If (Me._YY_A1.Equals(value) = false) Then
				Me._YY_A1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM_A2", DbType:="SmallInt", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MM_A2() As System.Nullable(Of Short)
		Get
			Return Me._MM_A2
		End Get
		Set
			If (Me._MM_A2.Equals(value) = false) Then
				Me._MM_A2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY_A2", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property YY_A2() As Boolean
		Get
			Return Me._YY_A2
		End Get
		Set
			If ((Me._YY_A2 = value)  _
						= false) Then
				Me._YY_A2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SHORTDES_A", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SHORTDES_A() As String
		Get
			Return Me._SHORTDES_A
		End Get
		Set
			If (String.Equals(Me._SHORTDES_A, value) = false) Then
				Me._SHORTDES_A = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID_B", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ROUTE_ID_B() As System.Nullable(Of Integer)
		Get
			Return Me._ROUTE_ID_B
		End Get
		Set
			If (Me._ROUTE_ID_B.Equals(value) = false) Then
				Me._ROUTE_ID_B = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM_B1", DbType:="SmallInt", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MM_B1() As System.Nullable(Of Short)
		Get
			Return Me._MM_B1
		End Get
		Set
			If (Me._MM_B1.Equals(value) = false) Then
				Me._MM_B1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY_B1", DbType:="SmallInt", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property YY_B1() As System.Nullable(Of Short)
		Get
			Return Me._YY_B1
		End Get
		Set
			If (Me._YY_B1.Equals(value) = false) Then
				Me._YY_B1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM_B2", DbType:="SmallInt", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MM_B2() As System.Nullable(Of Short)
		Get
			Return Me._MM_B2
		End Get
		Set
			If (Me._MM_B2.Equals(value) = false) Then
				Me._MM_B2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY_B2", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property YY_B2() As Boolean
		Get
			Return Me._YY_B2
		End Get
		Set
			If ((Me._YY_B2 = value)  _
						= false) Then
				Me._YY_B2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SHORTDES_B", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SHORTDES_B() As String
		Get
			Return Me._SHORTDES_B
		End Get
		Set
			If (String.Equals(Me._SHORTDES_B, value) = false) Then
				Me._SHORTDES_B = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SHORTDES", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SHORTDES() As String
		Get
			Return Me._SHORTDES
		End Get
		Set
			If (String.Equals(Me._SHORTDES, value) = false) Then
				Me._SHORTDES = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE_TRADED", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PRICE_TRADED() As System.Nullable(Of Double)
		Get
			Return Me._PRICE_TRADED
		End Get
		Set
			If (Me._PRICE_TRADED.Equals(value) = false) Then
				Me._PRICE_TRADED = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE_TRADED_A", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PRICE_TRADED_A() As System.Nullable(Of Double)
		Get
			Return Me._PRICE_TRADED_A
		End Get
		Set
			If (Me._PRICE_TRADED_A.Equals(value) = false) Then
				Me._PRICE_TRADED_A = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FFA_TRADE_ID1", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FFA_TRADE_ID1() As System.Nullable(Of Integer)
		Get
			Return Me._FFA_TRADE_ID1
		End Get
		Set
			If (Me._FFA_TRADE_ID1.Equals(value) = false) Then
				Me._FFA_TRADE_ID1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE_TRADED_B", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PRICE_TRADED_B() As System.Nullable(Of Double)
		Get
			Return Me._PRICE_TRADED_B
		End Get
		Set
			If (Me._PRICE_TRADED_B.Equals(value) = false) Then
				Me._PRICE_TRADED_B = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FFA_TRADE_ID2", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FFA_TRADE_ID2() As System.Nullable(Of Integer)
		Get
			Return Me._FFA_TRADE_ID2
		End Get
		Set
			If (Me._FFA_TRADE_ID2.Equals(value) = false) Then
				Me._FFA_TRADE_ID2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE_TYPE", DbType:="NVarChar(1)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PRICE_TYPE() As System.Nullable(Of Char)
		Get
			Return Me._PRICE_TYPE
		End Get
		Set
			If (Me._PRICE_TYPE.Equals(value) = false) Then
				Me._PRICE_TYPE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_DAYS_A", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TRADE_DAYS_A() As System.Nullable(Of Double)
		Get
			Return Me._TRADE_DAYS_A
		End Get
		Set
			If (Me._TRADE_DAYS_A.Equals(value) = false) Then
				Me._TRADE_DAYS_A = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_DAYS_B", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TRADE_DAYS_B() As System.Nullable(Of Double)
		Get
			Return Me._TRADE_DAYS_B
		End Get
		Set
			If (Me._TRADE_DAYS_B.Equals(value) = false) Then
				Me._TRADE_DAYS_B = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LCH", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property LCH() As Boolean
		Get
			Return Me._LCH
		End Get
		Set
			If ((Me._LCH = value)  _
						= false) Then
				Me._LCH = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SGX", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SGX() As Boolean
		Get
			Return Me._SGX
		End Get
		Set
			If ((Me._SGX = value)  _
						= false) Then
				Me._SGX = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOS", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NOS() As Boolean
		Get
			Return Me._NOS
		End Get
		Set
			If ((Me._NOS = value)  _
						= false) Then
				Me._NOS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OTC", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property OTC() As Boolean
		Get
			Return Me._OTC
		End Get
		Set
			If ((Me._OTC = value)  _
						= false) Then
				Me._OTC = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEAL_CONFIRMATION_SENT", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DEAL_CONFIRMATION_SENT() As Boolean
		Get
			Return Me._DEAL_CONFIRMATION_SENT
		End Get
		Set
			If ((Me._DEAL_CONFIRMATION_SENT = value)  _
						= false) Then
				Me._DEAL_CONFIRMATION_SENT = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEAL_CONFIRMATION_TEXT", DbType:="Image", CanBeNull:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DEAL_CONFIRMATION_TEXT() As System.Data.Linq.Binary
		Get
			Return Me._DEAL_CONFIRMATION_TEXT
		End Get
		Set
			If (Object.Equals(Me._DEAL_CONFIRMATION_TEXT, value) = false) Then
				Me._DEAL_CONFIRMATION_TEXT = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NEEDS_SENT_TO_CLEARING", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NEEDS_SENT_TO_CLEARING() As Boolean
		Get
			Return Me._NEEDS_SENT_TO_CLEARING
		End Get
		Set
			If ((Me._NEEDS_SENT_TO_CLEARING = value)  _
						= false) Then
				Me._NEEDS_SENT_TO_CLEARING = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SENT_TO_CLEARING", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SENT_TO_CLEARING() As Boolean
		Get
			Return Me._SENT_TO_CLEARING
		End Get
		Set
			If ((Me._SENT_TO_CLEARING = value)  _
						= false) Then
				Me._SENT_TO_CLEARING = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SENT_WHEN", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SENT_WHEN() As System.Nullable(Of Date)
		Get
			Return Me._SENT_WHEN
		End Get
		Set
			If (Me._SENT_WHEN.Equals(value) = false) Then
				Me._SENT_WHEN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLEARING_RESPONDED", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CLEARING_RESPONDED() As Boolean
		Get
			Return Me._CLEARING_RESPONDED
		End Get
		Set
			If ((Me._CLEARING_RESPONDED = value)  _
						= false) Then
				Me._CLEARING_RESPONDED = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLEARING_ID", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CLEARING_ID() As System.Nullable(Of Integer)
		Get
			Return Me._CLEARING_ID
		End Get
		Set
			If (Me._CLEARING_ID.Equals(value) = false) Then
				Me._CLEARING_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_STATUS", DbType:="SmallInt", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TRADE_STATUS() As System.Nullable(Of Short)
		Get
			Return Me._TRADE_STATUS
		End Get
		Set
			If (Me._TRADE_STATUS.Equals(value) = false) Then
				Me._TRADE_STATUS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SHOW_MY_TRADES_A", DbType:="SmallInt", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SHOW_MY_TRADES_A() As System.Nullable(Of Short)
		Get
			Return Me._SHOW_MY_TRADES_A
		End Get
		Set
			If (Me._SHOW_MY_TRADES_A.Equals(value) = false) Then
				Me._SHOW_MY_TRADES_A = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SHOW_MY_TRADES_B", DbType:="SmallInt", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SHOW_MY_TRADES_B() As System.Nullable(Of Short)
		Get
			Return Me._SHOW_MY_TRADES_B
		End Get
		Set
			If (Me._SHOW_MY_TRADES_B.Equals(value) = false) Then
				Me._SHOW_MY_TRADES_B = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_upsize_ts", AutoSync:=AutoSync.Always, DbType:="rowversion NOT NULL", CanBeNull:=false, IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property upsize_ts() As System.Data.Linq.Binary
		Get
			Return Me._upsize_ts
		End Get
		Set
			If (Object.Equals(Me._upsize_ts, value) = false) Then
				Me._upsize_ts = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.VESSEL_CLASS")>  _
Partial Public Class VESSEL_CLASS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _VESSEL_CLASS_ID As Integer
	
	Private _VESSEL_CLASS As String
	
	Private _DRYWET As Char
	
	Private _WETSECTOR As System.Nullable(Of Char)
	
	Private _DESCRIPTION As String
	
	Private _DEFAULT_ROUTE_ID As System.Nullable(Of Integer)
	
	Private _DESK_TRADER_VOICEs As EntitySet(Of DESK_TRADER_VOICE)
	
	Private _DESK_TRADERS_IM_SUBSCRIPTIONs As EntitySet(Of DESK_TRADERS_IM_SUBSCRIPTION)
	
	Private _EXCHANGE_ROUTEs As EntitySet(Of EXCHANGE_ROUTE)
	
	Private _ROUTEs As EntitySet(Of ROUTE)
	
	Private _VESSEL_CLASS_SPREAD_MARGINs As EntitySet(Of VESSEL_CLASS_SPREAD_MARGIN)
	
	Private _ROUTE As EntityRef(Of ROUTE)
	
	Private _TRADE_CLASS As EntityRef(Of TRADE_CLASS)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnVESSEL_CLASS_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnVESSEL_CLASS_IDChanged()
    End Sub
    Partial Private Sub OnVESSEL_CLASSChanging(value As String)
    End Sub
    Partial Private Sub OnVESSEL_CLASSChanged()
    End Sub
    Partial Private Sub OnDRYWETChanging(value As Char)
    End Sub
    Partial Private Sub OnDRYWETChanged()
    End Sub
    Partial Private Sub OnWETSECTORChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnWETSECTORChanged()
    End Sub
    Partial Private Sub OnDESCRIPTIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPTIONChanged()
    End Sub
    Partial Private Sub OnDEFAULT_ROUTE_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDEFAULT_ROUTE_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DESK_TRADER_VOICEs = New EntitySet(Of DESK_TRADER_VOICE)(AddressOf Me.attach_DESK_TRADER_VOICEs, AddressOf Me.detach_DESK_TRADER_VOICEs)
		Me._DESK_TRADERS_IM_SUBSCRIPTIONs = New EntitySet(Of DESK_TRADERS_IM_SUBSCRIPTION)(AddressOf Me.attach_DESK_TRADERS_IM_SUBSCRIPTIONs, AddressOf Me.detach_DESK_TRADERS_IM_SUBSCRIPTIONs)
		Me._EXCHANGE_ROUTEs = New EntitySet(Of EXCHANGE_ROUTE)(AddressOf Me.attach_EXCHANGE_ROUTEs, AddressOf Me.detach_EXCHANGE_ROUTEs)
		Me._ROUTEs = New EntitySet(Of ROUTE)(AddressOf Me.attach_ROUTEs, AddressOf Me.detach_ROUTEs)
		Me._VESSEL_CLASS_SPREAD_MARGINs = New EntitySet(Of VESSEL_CLASS_SPREAD_MARGIN)(AddressOf Me.attach_VESSEL_CLASS_SPREAD_MARGINs, AddressOf Me.detach_VESSEL_CLASS_SPREAD_MARGINs)
		Me._ROUTE = CType(Nothing, EntityRef(Of ROUTE))
		Me._TRADE_CLASS = CType(Nothing, EntityRef(Of TRADE_CLASS))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VESSEL_CLASS_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property VESSEL_CLASS_ID() As Integer
		Get
			Return Me._VESSEL_CLASS_ID
		End Get
		Set
			If ((Me._VESSEL_CLASS_ID = value)  _
						= false) Then
				Me.OnVESSEL_CLASS_IDChanging(value)
				Me.SendPropertyChanging
				Me._VESSEL_CLASS_ID = value
				Me.SendPropertyChanged("VESSEL_CLASS_ID")
				Me.OnVESSEL_CLASS_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VESSEL_CLASS", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property VESSEL_CLASS() As String
		Get
			Return Me._VESSEL_CLASS
		End Get
		Set
			If (String.Equals(Me._VESSEL_CLASS, value) = false) Then
				Me.OnVESSEL_CLASSChanging(value)
				Me.SendPropertyChanging
				Me._VESSEL_CLASS = value
				Me.SendPropertyChanged("VESSEL_CLASS")
				Me.OnVESSEL_CLASSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DRYWET", DbType:="Char(1) NOT NULL")>  _
	Public Property DRYWET() As Char
		Get
			Return Me._DRYWET
		End Get
		Set
			If ((Me._DRYWET = value)  _
						= false) Then
				If Me._TRADE_CLASS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDRYWETChanging(value)
				Me.SendPropertyChanging
				Me._DRYWET = value
				Me.SendPropertyChanged("DRYWET")
				Me.OnDRYWETChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WETSECTOR", DbType:="Char(1)")>  _
	Public Property WETSECTOR() As System.Nullable(Of Char)
		Get
			Return Me._WETSECTOR
		End Get
		Set
			If (Me._WETSECTOR.Equals(value) = false) Then
				Me.OnWETSECTORChanging(value)
				Me.SendPropertyChanging
				Me._WETSECTOR = value
				Me.SendPropertyChanged("WETSECTOR")
				Me.OnWETSECTORChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPTION", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property DESCRIPTION() As String
		Get
			Return Me._DESCRIPTION
		End Get
		Set
			If (String.Equals(Me._DESCRIPTION, value) = false) Then
				Me.OnDESCRIPTIONChanging(value)
				Me.SendPropertyChanging
				Me._DESCRIPTION = value
				Me.SendPropertyChanged("DESCRIPTION")
				Me.OnDESCRIPTIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEFAULT_ROUTE_ID", DbType:="Int")>  _
	Public Property DEFAULT_ROUTE_ID() As System.Nullable(Of Integer)
		Get
			Return Me._DEFAULT_ROUTE_ID
		End Get
		Set
			If (Me._DEFAULT_ROUTE_ID.Equals(value) = false) Then
				If Me._ROUTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDEFAULT_ROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._DEFAULT_ROUTE_ID = value
				Me.SendPropertyChanged("DEFAULT_ROUTE_ID")
				Me.OnDEFAULT_ROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="VESSEL_CLASS_DESK_TRADER_VOICE", Storage:="_DESK_TRADER_VOICEs", ThisKey:="VESSEL_CLASS_ID", OtherKey:="VESSEL_CLASS_ID")>  _
	Public Property DESK_TRADER_VOICEs() As EntitySet(Of DESK_TRADER_VOICE)
		Get
			Return Me._DESK_TRADER_VOICEs
		End Get
		Set
			Me._DESK_TRADER_VOICEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="VESSEL_CLASS_DESK_TRADERS_IM_SUBSCRIPTION", Storage:="_DESK_TRADERS_IM_SUBSCRIPTIONs", ThisKey:="VESSEL_CLASS_ID", OtherKey:="VESSEL_CLASS_ID")>  _
	Public Property DESK_TRADERS_IM_SUBSCRIPTIONs() As EntitySet(Of DESK_TRADERS_IM_SUBSCRIPTION)
		Get
			Return Me._DESK_TRADERS_IM_SUBSCRIPTIONs
		End Get
		Set
			Me._DESK_TRADERS_IM_SUBSCRIPTIONs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="VESSEL_CLASS_EXCHANGE_ROUTE", Storage:="_EXCHANGE_ROUTEs", ThisKey:="VESSEL_CLASS_ID", OtherKey:="VESSEL_CLASS_ID")>  _
	Public Property EXCHANGE_ROUTEs() As EntitySet(Of EXCHANGE_ROUTE)
		Get
			Return Me._EXCHANGE_ROUTEs
		End Get
		Set
			Me._EXCHANGE_ROUTEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="VESSEL_CLASS_ROUTE", Storage:="_ROUTEs", ThisKey:="VESSEL_CLASS_ID", OtherKey:="VESSEL_CLASS_ID")>  _
	Public Property ROUTEs() As EntitySet(Of ROUTE)
		Get
			Return Me._ROUTEs
		End Get
		Set
			Me._ROUTEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="VESSEL_CLASS_VESSEL_CLASS_SPREAD_MARGIN", Storage:="_VESSEL_CLASS_SPREAD_MARGINs", ThisKey:="VESSEL_CLASS_ID", OtherKey:="VESSEL_CLASS_ID")>  _
	Public Property VESSEL_CLASS_SPREAD_MARGINs() As EntitySet(Of VESSEL_CLASS_SPREAD_MARGIN)
		Get
			Return Me._VESSEL_CLASS_SPREAD_MARGINs
		End Get
		Set
			Me._VESSEL_CLASS_SPREAD_MARGINs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_VESSEL_CLASS", Storage:="_ROUTE", ThisKey:="DEFAULT_ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTE() As ROUTE
		Get
			Return Me._ROUTE.Entity
		End Get
		Set
			Dim previousValue As ROUTE = Me._ROUTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTE.Entity = Nothing
					previousValue.VESSEL_CLASSes.Remove(Me)
				End If
				Me._ROUTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.VESSEL_CLASSes.Add(Me)
					Me._DEFAULT_ROUTE_ID = value.ROUTE_ID
				Else
					Me._DEFAULT_ROUTE_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ROUTE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASS_VESSEL_CLASS", Storage:="_TRADE_CLASS", ThisKey:="DRYWET", OtherKey:="TRADE_CLASS_SHORT", IsForeignKey:=true)>  _
	Public Property TRADE_CLASS() As TRADE_CLASS
		Get
			Return Me._TRADE_CLASS.Entity
		End Get
		Set
			Dim previousValue As TRADE_CLASS = Me._TRADE_CLASS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TRADE_CLASS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TRADE_CLASS.Entity = Nothing
					previousValue.VESSEL_CLASSes.Remove(Me)
				End If
				Me._TRADE_CLASS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.VESSEL_CLASSes.Add(Me)
					Me._DRYWET = value.TRADE_CLASS_SHORT
				Else
					Me._DRYWET = CType(Nothing, Char)
				End If
				Me.SendPropertyChanged("TRADE_CLASS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DESK_TRADER_VOICEs(ByVal entity As DESK_TRADER_VOICE)
		Me.SendPropertyChanging
		entity.VESSEL_CLASS = Me
	End Sub
	
	Private Sub detach_DESK_TRADER_VOICEs(ByVal entity As DESK_TRADER_VOICE)
		Me.SendPropertyChanging
		entity.VESSEL_CLASS = Nothing
	End Sub
	
	Private Sub attach_DESK_TRADERS_IM_SUBSCRIPTIONs(ByVal entity As DESK_TRADERS_IM_SUBSCRIPTION)
		Me.SendPropertyChanging
		entity.VESSEL_CLASS = Me
	End Sub
	
	Private Sub detach_DESK_TRADERS_IM_SUBSCRIPTIONs(ByVal entity As DESK_TRADERS_IM_SUBSCRIPTION)
		Me.SendPropertyChanging
		entity.VESSEL_CLASS = Nothing
	End Sub
	
	Private Sub attach_EXCHANGE_ROUTEs(ByVal entity As EXCHANGE_ROUTE)
		Me.SendPropertyChanging
		entity.VESSEL_CLASS = Me
	End Sub
	
	Private Sub detach_EXCHANGE_ROUTEs(ByVal entity As EXCHANGE_ROUTE)
		Me.SendPropertyChanging
		entity.VESSEL_CLASS = Nothing
	End Sub
	
	Private Sub attach_ROUTEs(ByVal entity As ROUTE)
		Me.SendPropertyChanging
		entity.VESSEL_CLASS = Me
	End Sub
	
	Private Sub detach_ROUTEs(ByVal entity As ROUTE)
		Me.SendPropertyChanging
		entity.VESSEL_CLASS = Nothing
	End Sub
	
	Private Sub attach_VESSEL_CLASS_SPREAD_MARGINs(ByVal entity As VESSEL_CLASS_SPREAD_MARGIN)
		Me.SendPropertyChanging
		entity.VESSEL_CLASS = Me
	End Sub
	
	Private Sub detach_VESSEL_CLASS_SPREAD_MARGINs(ByVal entity As VESSEL_CLASS_SPREAD_MARGIN)
		Me.SendPropertyChanging
		entity.VESSEL_CLASS = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BALTIC_FORWARD_RATES_VIEW")>  _
Partial Public Class BALTIC_FORWARD_RATES_VIEW
	
	Private _ROUTE_ID As Integer
	
	Private _CMSROUTE_ID As String
	
	Private _FIXING_DATE As Date
	
	Private _NEXT_ROLLOVER_DATE As Date
	
	Private _FIXING As Double
	
	Private _REPORTDESC As String
	
	Private _MM1 As System.Nullable(Of Short)
	
	Private _YY1 As System.Nullable(Of Short)
	
	Private _MM2 As System.Nullable(Of Short)
	
	Private _YY2 As System.Nullable(Of Short)
	
	Private _PERIOD As String
	
	Private _YY As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL")>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				Me._ROUTE_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CMSROUTE_ID", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property CMSROUTE_ID() As String
		Get
			Return Me._CMSROUTE_ID
		End Get
		Set
			If (String.Equals(Me._CMSROUTE_ID, value) = false) Then
				Me._CMSROUTE_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING_DATE", DbType:="Date NOT NULL")>  _
	Public Property FIXING_DATE() As Date
		Get
			Return Me._FIXING_DATE
		End Get
		Set
			If ((Me._FIXING_DATE = value)  _
						= false) Then
				Me._FIXING_DATE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NEXT_ROLLOVER_DATE", DbType:="Date NOT NULL")>  _
	Public Property NEXT_ROLLOVER_DATE() As Date
		Get
			Return Me._NEXT_ROLLOVER_DATE
		End Get
		Set
			If ((Me._NEXT_ROLLOVER_DATE = value)  _
						= false) Then
				Me._NEXT_ROLLOVER_DATE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING", DbType:="Float NOT NULL")>  _
	Public Property FIXING() As Double
		Get
			Return Me._FIXING
		End Get
		Set
			If ((Me._FIXING = value)  _
						= false) Then
				Me._FIXING = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REPORTDESC", DbType:="VarChar(15)")>  _
	Public Property REPORTDESC() As String
		Get
			Return Me._REPORTDESC
		End Get
		Set
			If (String.Equals(Me._REPORTDESC, value) = false) Then
				Me._REPORTDESC = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM1", DbType:="SmallInt")>  _
	Public Property MM1() As System.Nullable(Of Short)
		Get
			Return Me._MM1
		End Get
		Set
			If (Me._MM1.Equals(value) = false) Then
				Me._MM1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY1", DbType:="SmallInt")>  _
	Public Property YY1() As System.Nullable(Of Short)
		Get
			Return Me._YY1
		End Get
		Set
			If (Me._YY1.Equals(value) = false) Then
				Me._YY1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM2", DbType:="SmallInt")>  _
	Public Property MM2() As System.Nullable(Of Short)
		Get
			Return Me._MM2
		End Get
		Set
			If (Me._MM2.Equals(value) = false) Then
				Me._MM2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY2", DbType:="SmallInt")>  _
	Public Property YY2() As System.Nullable(Of Short)
		Get
			Return Me._YY2
		End Get
		Set
			If (Me._YY2.Equals(value) = false) Then
				Me._YY2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PERIOD", DbType:="VarChar(15)")>  _
	Public Property PERIOD() As String
		Get
			Return Me._PERIOD
		End Get
		Set
			If (String.Equals(Me._PERIOD, value) = false) Then
				Me._PERIOD = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY", DbType:="Int")>  _
	Public Property YY() As System.Nullable(Of Integer)
		Get
			Return Me._YY
		End Get
		Set
			If (Me._YY.Equals(value) = false) Then
				Me._YY = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BALTIC_SPOT_RATES_DIFF")>  _
Partial Public Class BALTIC_SPOT_RATES_DIFF
	
	Private _ROUTE_ID As Integer
	
	Private _FIXING_DATE As Date
	
	Private _FIXING As Double
	
	Private _PDATE As System.Nullable(Of Date)
	
	Private _PREV_FIXING As System.Nullable(Of Double)
	
	Private _FIXING_DIFF As System.Nullable(Of Double)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL")>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				Me._ROUTE_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING_DATE", DbType:="Date NOT NULL")>  _
	Public Property FIXING_DATE() As Date
		Get
			Return Me._FIXING_DATE
		End Get
		Set
			If ((Me._FIXING_DATE = value)  _
						= false) Then
				Me._FIXING_DATE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING", DbType:="Float NOT NULL")>  _
	Public Property FIXING() As Double
		Get
			Return Me._FIXING
		End Get
		Set
			If ((Me._FIXING = value)  _
						= false) Then
				Me._FIXING = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PDATE", DbType:="Date")>  _
	Public Property PDATE() As System.Nullable(Of Date)
		Get
			Return Me._PDATE
		End Get
		Set
			If (Me._PDATE.Equals(value) = false) Then
				Me._PDATE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PREV_FIXING", DbType:="Float")>  _
	Public Property PREV_FIXING() As System.Nullable(Of Double)
		Get
			Return Me._PREV_FIXING
		End Get
		Set
			If (Me._PREV_FIXING.Equals(value) = false) Then
				Me._PREV_FIXING = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING_DIFF", DbType:="Float")>  _
	Public Property FIXING_DIFF() As System.Nullable(Of Double)
		Get
			Return Me._FIXING_DIFF
		End Get
		Set
			If (Me._FIXING_DIFF.Equals(value) = false) Then
				Me._FIXING_DIFF = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.VIEW_DESK_ACTIVE_FUTURE_ORDERS")>  _
Partial Public Class VIEW_DESK_ACTIVE_FUTURE_ORDER
	
	Private _ACCOUNT_DESK_ID As Integer
	
	Private _FOR_DESK_TRADER_ID As Integer
	
	Private _FIRSTNAME As String
	
	Private _LASTNAME As String
	
	Private _ORDER_ID As Integer
	
	Private _ORDER_DATETIME As System.Nullable(Of Date)
	
	Private _TRADE_CLASS_SHORT As Char
	
	Private _LIVE_STATUS As Char
	
	Private _ORDER_STATUS As Char
	
	Private _ORDER_BS As Char
	
	Private _SHORTDES As String
	
	Private _ROUTE_SHORT As String
	
	Private _VESSEL_CLASS As String
	
	Private _PRICE_INDICATED As Double
	
	Private _ORDER_QUANTITY As Integer
	
	Private _QUANTITY_TYPE_DES As String
	
	Private _DESK_TRADER_ID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_DESK_ID", DbType:="Int NOT NULL")>  _
	Public Property ACCOUNT_DESK_ID() As Integer
		Get
			Return Me._ACCOUNT_DESK_ID
		End Get
		Set
			If ((Me._ACCOUNT_DESK_ID = value)  _
						= false) Then
				Me._ACCOUNT_DESK_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FOR_DESK_TRADER_ID", DbType:="Int NOT NULL")>  _
	Public Property FOR_DESK_TRADER_ID() As Integer
		Get
			Return Me._FOR_DESK_TRADER_ID
		End Get
		Set
			If ((Me._FOR_DESK_TRADER_ID = value)  _
						= false) Then
				Me._FOR_DESK_TRADER_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIRSTNAME", DbType:="NVarChar(50)")>  _
	Public Property FIRSTNAME() As String
		Get
			Return Me._FIRSTNAME
		End Get
		Set
			If (String.Equals(Me._FIRSTNAME, value) = false) Then
				Me._FIRSTNAME = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LASTNAME", DbType:="NVarChar(50)")>  _
	Public Property LASTNAME() As String
		Get
			Return Me._LASTNAME
		End Get
		Set
			If (String.Equals(Me._LASTNAME, value) = false) Then
				Me._LASTNAME = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_ID", DbType:="Int NOT NULL")>  _
	Public Property ORDER_ID() As Integer
		Get
			Return Me._ORDER_ID
		End Get
		Set
			If ((Me._ORDER_ID = value)  _
						= false) Then
				Me._ORDER_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_DATETIME", DbType:="DateTime2")>  _
	Public Property ORDER_DATETIME() As System.Nullable(Of Date)
		Get
			Return Me._ORDER_DATETIME
		End Get
		Set
			If (Me._ORDER_DATETIME.Equals(value) = false) Then
				Me._ORDER_DATETIME = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_CLASS_SHORT", DbType:="Char(1) NOT NULL")>  _
	Public Property TRADE_CLASS_SHORT() As Char
		Get
			Return Me._TRADE_CLASS_SHORT
		End Get
		Set
			If ((Me._TRADE_CLASS_SHORT = value)  _
						= false) Then
				Me._TRADE_CLASS_SHORT = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LIVE_STATUS", DbType:="Char(1) NOT NULL")>  _
	Public Property LIVE_STATUS() As Char
		Get
			Return Me._LIVE_STATUS
		End Get
		Set
			If ((Me._LIVE_STATUS = value)  _
						= false) Then
				Me._LIVE_STATUS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_STATUS", DbType:="Char(1) NOT NULL")>  _
	Public Property ORDER_STATUS() As Char
		Get
			Return Me._ORDER_STATUS
		End Get
		Set
			If ((Me._ORDER_STATUS = value)  _
						= false) Then
				Me._ORDER_STATUS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_BS", DbType:="Char(1) NOT NULL")>  _
	Public Property ORDER_BS() As Char
		Get
			Return Me._ORDER_BS
		End Get
		Set
			If ((Me._ORDER_BS = value)  _
						= false) Then
				Me._ORDER_BS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SHORTDES", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SHORTDES() As String
		Get
			Return Me._SHORTDES
		End Get
		Set
			If (String.Equals(Me._SHORTDES, value) = false) Then
				Me._SHORTDES = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_SHORT", DbType:="NVarChar(10)")>  _
	Public Property ROUTE_SHORT() As String
		Get
			Return Me._ROUTE_SHORT
		End Get
		Set
			If (String.Equals(Me._ROUTE_SHORT, value) = false) Then
				Me._ROUTE_SHORT = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VESSEL_CLASS", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property VESSEL_CLASS() As String
		Get
			Return Me._VESSEL_CLASS
		End Get
		Set
			If (String.Equals(Me._VESSEL_CLASS, value) = false) Then
				Me._VESSEL_CLASS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE_INDICATED", DbType:="Float NOT NULL")>  _
	Public Property PRICE_INDICATED() As Double
		Get
			Return Me._PRICE_INDICATED
		End Get
		Set
			If ((Me._PRICE_INDICATED = value)  _
						= false) Then
				Me._PRICE_INDICATED = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_QUANTITY", DbType:="Int NOT NULL")>  _
	Public Property ORDER_QUANTITY() As Integer
		Get
			Return Me._ORDER_QUANTITY
		End Get
		Set
			If ((Me._ORDER_QUANTITY = value)  _
						= false) Then
				Me._ORDER_QUANTITY = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUANTITY_TYPE_DES", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property QUANTITY_TYPE_DES() As String
		Get
			Return Me._QUANTITY_TYPE_DES
		End Get
		Set
			If (String.Equals(Me._QUANTITY_TYPE_DES, value) = false) Then
				Me._QUANTITY_TYPE_DES = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_TRADER_ID", DbType:="Int NOT NULL")>  _
	Public Property DESK_TRADER_ID() As Integer
		Get
			Return Me._DESK_TRADER_ID
		End Get
		Set
			If ((Me._DESK_TRADER_ID = value)  _
						= false) Then
				Me._DESK_TRADER_ID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.VIEW_DESK_ACTIVE_TRADE_CLASSES")>  _
Partial Public Class VIEW_DESK_ACTIVE_TRADE_CLASS
	
	Private _ACCOUNT_DESK_ID As Integer
	
	Private _TRADE_CLASS_SHORT As Char
	
	Private _TRADE_CLASS As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_DESK_ID", DbType:="Int NOT NULL")>  _
	Public Property ACCOUNT_DESK_ID() As Integer
		Get
			Return Me._ACCOUNT_DESK_ID
		End Get
		Set
			If ((Me._ACCOUNT_DESK_ID = value)  _
						= false) Then
				Me._ACCOUNT_DESK_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_CLASS_SHORT", DbType:="Char(1) NOT NULL")>  _
	Public Property TRADE_CLASS_SHORT() As Char
		Get
			Return Me._TRADE_CLASS_SHORT
		End Get
		Set
			If ((Me._TRADE_CLASS_SHORT = value)  _
						= false) Then
				Me._TRADE_CLASS_SHORT = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_CLASS", DbType:="NChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property TRADE_CLASS() As String
		Get
			Return Me._TRADE_CLASS
		End Get
		Set
			If (String.Equals(Me._TRADE_CLASS, value) = false) Then
				Me._TRADE_CLASS = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.VIEW_TRADES_FFA_DAILY")>  _
Partial Public Class VIEW_TRADES_FFA_DAILY
	
	Private _ROUTE_ID As Integer
	
	Private _ROUTE_ID2 As System.Nullable(Of Integer)
	
	Private _TRADE_TYPE As Short
	
	Private _YY1 As System.Nullable(Of Short)
	
	Private _MM1 As System.Nullable(Of Short)
	
	Private _YY2 As System.Nullable(Of Short)
	
	Private _MM2 As System.Nullable(Of Short)
	
	Private _YY21 As System.Nullable(Of Short)
	
	Private _MM21 As System.Nullable(Of Short)
	
	Private _YY22 As System.Nullable(Of Short)
	
	Private _MM22 As System.Nullable(Of Short)
	
	Private _YD As System.Nullable(Of Integer)
	
	Private _MD As System.Nullable(Of Integer)
	
	Private _DD As System.Nullable(Of Integer)
	
	Private _MINP As System.Nullable(Of Double)
	
	Private _MAXP As System.Nullable(Of Double)
	
	Private _OPENP As Double
	
	Private _CLOSEP As Double
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL")>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				Me._ROUTE_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID2", DbType:="Int")>  _
	Public Property ROUTE_ID2() As System.Nullable(Of Integer)
		Get
			Return Me._ROUTE_ID2
		End Get
		Set
			If (Me._ROUTE_ID2.Equals(value) = false) Then
				Me._ROUTE_ID2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_TYPE", DbType:="SmallInt NOT NULL")>  _
	Public Property TRADE_TYPE() As Short
		Get
			Return Me._TRADE_TYPE
		End Get
		Set
			If ((Me._TRADE_TYPE = value)  _
						= false) Then
				Me._TRADE_TYPE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY1", DbType:="SmallInt")>  _
	Public Property YY1() As System.Nullable(Of Short)
		Get
			Return Me._YY1
		End Get
		Set
			If (Me._YY1.Equals(value) = false) Then
				Me._YY1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM1", DbType:="SmallInt")>  _
	Public Property MM1() As System.Nullable(Of Short)
		Get
			Return Me._MM1
		End Get
		Set
			If (Me._MM1.Equals(value) = false) Then
				Me._MM1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY2", DbType:="SmallInt")>  _
	Public Property YY2() As System.Nullable(Of Short)
		Get
			Return Me._YY2
		End Get
		Set
			If (Me._YY2.Equals(value) = false) Then
				Me._YY2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM2", DbType:="SmallInt")>  _
	Public Property MM2() As System.Nullable(Of Short)
		Get
			Return Me._MM2
		End Get
		Set
			If (Me._MM2.Equals(value) = false) Then
				Me._MM2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY21", DbType:="SmallInt")>  _
	Public Property YY21() As System.Nullable(Of Short)
		Get
			Return Me._YY21
		End Get
		Set
			If (Me._YY21.Equals(value) = false) Then
				Me._YY21 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM21", DbType:="SmallInt")>  _
	Public Property MM21() As System.Nullable(Of Short)
		Get
			Return Me._MM21
		End Get
		Set
			If (Me._MM21.Equals(value) = false) Then
				Me._MM21 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY22", DbType:="SmallInt")>  _
	Public Property YY22() As System.Nullable(Of Short)
		Get
			Return Me._YY22
		End Get
		Set
			If (Me._YY22.Equals(value) = false) Then
				Me._YY22 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM22", DbType:="SmallInt")>  _
	Public Property MM22() As System.Nullable(Of Short)
		Get
			Return Me._MM22
		End Get
		Set
			If (Me._MM22.Equals(value) = false) Then
				Me._MM22 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YD", DbType:="Int")>  _
	Public Property YD() As System.Nullable(Of Integer)
		Get
			Return Me._YD
		End Get
		Set
			If (Me._YD.Equals(value) = false) Then
				Me._YD = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MD", DbType:="Int")>  _
	Public Property MD() As System.Nullable(Of Integer)
		Get
			Return Me._MD
		End Get
		Set
			If (Me._MD.Equals(value) = false) Then
				Me._MD = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DD", DbType:="Int")>  _
	Public Property DD() As System.Nullable(Of Integer)
		Get
			Return Me._DD
		End Get
		Set
			If (Me._DD.Equals(value) = false) Then
				Me._DD = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MINP", DbType:="Float")>  _
	Public Property MINP() As System.Nullable(Of Double)
		Get
			Return Me._MINP
		End Get
		Set
			If (Me._MINP.Equals(value) = false) Then
				Me._MINP = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MAXP", DbType:="Float")>  _
	Public Property MAXP() As System.Nullable(Of Double)
		Get
			Return Me._MAXP
		End Get
		Set
			If (Me._MAXP.Equals(value) = false) Then
				Me._MAXP = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OPENP", DbType:="Float NOT NULL")>  _
	Public Property OPENP() As Double
		Get
			Return Me._OPENP
		End Get
		Set
			If ((Me._OPENP = value)  _
						= false) Then
				Me._OPENP = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLOSEP", DbType:="Float NOT NULL")>  _
	Public Property CLOSEP() As Double
		Get
			Return Me._CLOSEP
		End Get
		Set
			If ((Me._CLOSEP = value)  _
						= false) Then
				Me._CLOSEP = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.VIEW_TRADES_FFA_HOURLY")>  _
Partial Public Class VIEW_TRADES_FFA_HOURLY
	
	Private _ROUTE_ID As Integer
	
	Private _TRADE_TYPE As Short
	
	Private _YY1 As System.Nullable(Of Short)
	
	Private _MM1 As System.Nullable(Of Short)
	
	Private _YY2 As System.Nullable(Of Short)
	
	Private _MM2 As System.Nullable(Of Short)
	
	Private _YY21 As System.Nullable(Of Short)
	
	Private _MM21 As System.Nullable(Of Short)
	
	Private _YY22 As System.Nullable(Of Short)
	
	Private _MM22 As System.Nullable(Of Short)
	
	Private _YD As System.Nullable(Of Integer)
	
	Private _MD As System.Nullable(Of Integer)
	
	Private _DD As System.Nullable(Of Integer)
	
	Private _HD As System.Nullable(Of Integer)
	
	Private _MINP As System.Nullable(Of Double)
	
	Private _MAXP As System.Nullable(Of Double)
	
	Private _OPENP As Double
	
	Private _CLOSEP As Double
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL")>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				Me._ROUTE_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_TYPE", DbType:="SmallInt NOT NULL")>  _
	Public Property TRADE_TYPE() As Short
		Get
			Return Me._TRADE_TYPE
		End Get
		Set
			If ((Me._TRADE_TYPE = value)  _
						= false) Then
				Me._TRADE_TYPE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY1", DbType:="SmallInt")>  _
	Public Property YY1() As System.Nullable(Of Short)
		Get
			Return Me._YY1
		End Get
		Set
			If (Me._YY1.Equals(value) = false) Then
				Me._YY1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM1", DbType:="SmallInt")>  _
	Public Property MM1() As System.Nullable(Of Short)
		Get
			Return Me._MM1
		End Get
		Set
			If (Me._MM1.Equals(value) = false) Then
				Me._MM1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY2", DbType:="SmallInt")>  _
	Public Property YY2() As System.Nullable(Of Short)
		Get
			Return Me._YY2
		End Get
		Set
			If (Me._YY2.Equals(value) = false) Then
				Me._YY2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM2", DbType:="SmallInt")>  _
	Public Property MM2() As System.Nullable(Of Short)
		Get
			Return Me._MM2
		End Get
		Set
			If (Me._MM2.Equals(value) = false) Then
				Me._MM2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY21", DbType:="SmallInt")>  _
	Public Property YY21() As System.Nullable(Of Short)
		Get
			Return Me._YY21
		End Get
		Set
			If (Me._YY21.Equals(value) = false) Then
				Me._YY21 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM21", DbType:="SmallInt")>  _
	Public Property MM21() As System.Nullable(Of Short)
		Get
			Return Me._MM21
		End Get
		Set
			If (Me._MM21.Equals(value) = false) Then
				Me._MM21 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY22", DbType:="SmallInt")>  _
	Public Property YY22() As System.Nullable(Of Short)
		Get
			Return Me._YY22
		End Get
		Set
			If (Me._YY22.Equals(value) = false) Then
				Me._YY22 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM22", DbType:="SmallInt")>  _
	Public Property MM22() As System.Nullable(Of Short)
		Get
			Return Me._MM22
		End Get
		Set
			If (Me._MM22.Equals(value) = false) Then
				Me._MM22 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YD", DbType:="Int")>  _
	Public Property YD() As System.Nullable(Of Integer)
		Get
			Return Me._YD
		End Get
		Set
			If (Me._YD.Equals(value) = false) Then
				Me._YD = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MD", DbType:="Int")>  _
	Public Property MD() As System.Nullable(Of Integer)
		Get
			Return Me._MD
		End Get
		Set
			If (Me._MD.Equals(value) = false) Then
				Me._MD = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DD", DbType:="Int")>  _
	Public Property DD() As System.Nullable(Of Integer)
		Get
			Return Me._DD
		End Get
		Set
			If (Me._DD.Equals(value) = false) Then
				Me._DD = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HD", DbType:="Int")>  _
	Public Property HD() As System.Nullable(Of Integer)
		Get
			Return Me._HD
		End Get
		Set
			If (Me._HD.Equals(value) = false) Then
				Me._HD = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MINP", DbType:="Float")>  _
	Public Property MINP() As System.Nullable(Of Double)
		Get
			Return Me._MINP
		End Get
		Set
			If (Me._MINP.Equals(value) = false) Then
				Me._MINP = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MAXP", DbType:="Float")>  _
	Public Property MAXP() As System.Nullable(Of Double)
		Get
			Return Me._MAXP
		End Get
		Set
			If (Me._MAXP.Equals(value) = false) Then
				Me._MAXP = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OPENP", DbType:="Float NOT NULL")>  _
	Public Property OPENP() As Double
		Get
			Return Me._OPENP
		End Get
		Set
			If ((Me._OPENP = value)  _
						= false) Then
				Me._OPENP = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLOSEP", DbType:="Float NOT NULL")>  _
	Public Property CLOSEP() As Double
		Get
			Return Me._CLOSEP
		End Get
		Set
			If ((Me._CLOSEP = value)  _
						= false) Then
				Me._CLOSEP = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.VESSEL_CLASS_SPREAD_MARGINS")>  _
Partial Public Class VESSEL_CLASS_SPREAD_MARGIN
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _VESSEL_CLASS_ID As Integer
	
	Private _ROUTE_ID As Integer
	
	Private _CMSROUTE_ID As String
	
	Private _MM1 As Short
	
	Private _YY1 As Short
	
	Private _MM2 As Short
	
	Private _YY2 As Short
	
	Private _PERIOD As String
	
	Private _YY As Integer
	
	Private _MARGIN As Double
	
	Private _ROUTE As EntityRef(Of ROUTE)
	
	Private _VESSEL_CLASS As EntityRef(Of VESSEL_CLASS)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnVESSEL_CLASS_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnVESSEL_CLASS_IDChanged()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnCMSROUTE_IDChanging(value As String)
    End Sub
    Partial Private Sub OnCMSROUTE_IDChanged()
    End Sub
    Partial Private Sub OnMM1Changing(value As Short)
    End Sub
    Partial Private Sub OnMM1Changed()
    End Sub
    Partial Private Sub OnYY1Changing(value As Short)
    End Sub
    Partial Private Sub OnYY1Changed()
    End Sub
    Partial Private Sub OnMM2Changing(value As Short)
    End Sub
    Partial Private Sub OnMM2Changed()
    End Sub
    Partial Private Sub OnYY2Changing(value As Short)
    End Sub
    Partial Private Sub OnYY2Changed()
    End Sub
    Partial Private Sub OnPERIODChanging(value As String)
    End Sub
    Partial Private Sub OnPERIODChanged()
    End Sub
    Partial Private Sub OnYYChanging(value As Integer)
    End Sub
    Partial Private Sub OnYYChanged()
    End Sub
    Partial Private Sub OnMARGINChanging(value As Double)
    End Sub
    Partial Private Sub OnMARGINChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ROUTE = CType(Nothing, EntityRef(Of ROUTE))
		Me._VESSEL_CLASS = CType(Nothing, EntityRef(Of VESSEL_CLASS))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VESSEL_CLASS_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property VESSEL_CLASS_ID() As Integer
		Get
			Return Me._VESSEL_CLASS_ID
		End Get
		Set
			If ((Me._VESSEL_CLASS_ID = value)  _
						= false) Then
				If Me._VESSEL_CLASS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnVESSEL_CLASS_IDChanging(value)
				Me.SendPropertyChanging
				Me._VESSEL_CLASS_ID = value
				Me.SendPropertyChanged("VESSEL_CLASS_ID")
				Me.OnVESSEL_CLASS_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If Me._ROUTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CMSROUTE_ID", DbType:="VarChar(15) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CMSROUTE_ID() As String
		Get
			Return Me._CMSROUTE_ID
		End Get
		Set
			If (String.Equals(Me._CMSROUTE_ID, value) = false) Then
				Me.OnCMSROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._CMSROUTE_ID = value
				Me.SendPropertyChanged("CMSROUTE_ID")
				Me.OnCMSROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM1", DbType:="SmallInt NOT NULL")>  _
	Public Property MM1() As Short
		Get
			Return Me._MM1
		End Get
		Set
			If ((Me._MM1 = value)  _
						= false) Then
				Me.OnMM1Changing(value)
				Me.SendPropertyChanging
				Me._MM1 = value
				Me.SendPropertyChanged("MM1")
				Me.OnMM1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY1", DbType:="SmallInt NOT NULL")>  _
	Public Property YY1() As Short
		Get
			Return Me._YY1
		End Get
		Set
			If ((Me._YY1 = value)  _
						= false) Then
				Me.OnYY1Changing(value)
				Me.SendPropertyChanging
				Me._YY1 = value
				Me.SendPropertyChanged("YY1")
				Me.OnYY1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM2", DbType:="SmallInt NOT NULL")>  _
	Public Property MM2() As Short
		Get
			Return Me._MM2
		End Get
		Set
			If ((Me._MM2 = value)  _
						= false) Then
				Me.OnMM2Changing(value)
				Me.SendPropertyChanging
				Me._MM2 = value
				Me.SendPropertyChanged("MM2")
				Me.OnMM2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY2", DbType:="SmallInt NOT NULL")>  _
	Public Property YY2() As Short
		Get
			Return Me._YY2
		End Get
		Set
			If ((Me._YY2 = value)  _
						= false) Then
				Me.OnYY2Changing(value)
				Me.SendPropertyChanging
				Me._YY2 = value
				Me.SendPropertyChanged("YY2")
				Me.OnYY2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PERIOD", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property PERIOD() As String
		Get
			Return Me._PERIOD
		End Get
		Set
			If (String.Equals(Me._PERIOD, value) = false) Then
				Me.OnPERIODChanging(value)
				Me.SendPropertyChanging
				Me._PERIOD = value
				Me.SendPropertyChanged("PERIOD")
				Me.OnPERIODChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY", DbType:="Int NOT NULL")>  _
	Public Property YY() As Integer
		Get
			Return Me._YY
		End Get
		Set
			If ((Me._YY = value)  _
						= false) Then
				Me.OnYYChanging(value)
				Me.SendPropertyChanging
				Me._YY = value
				Me.SendPropertyChanged("YY")
				Me.OnYYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MARGIN", DbType:="Float NOT NULL")>  _
	Public Property MARGIN() As Double
		Get
			Return Me._MARGIN
		End Get
		Set
			If ((Me._MARGIN = value)  _
						= false) Then
				Me.OnMARGINChanging(value)
				Me.SendPropertyChanging
				Me._MARGIN = value
				Me.SendPropertyChanged("MARGIN")
				Me.OnMARGINChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_VESSEL_CLASS_SPREAD_MARGIN", Storage:="_ROUTE", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTE() As ROUTE
		Get
			Return Me._ROUTE.Entity
		End Get
		Set
			Dim previousValue As ROUTE = Me._ROUTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTE.Entity = Nothing
					previousValue.VESSEL_CLASS_SPREAD_MARGINs.Remove(Me)
				End If
				Me._ROUTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.VESSEL_CLASS_SPREAD_MARGINs.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="VESSEL_CLASS_VESSEL_CLASS_SPREAD_MARGIN", Storage:="_VESSEL_CLASS", ThisKey:="VESSEL_CLASS_ID", OtherKey:="VESSEL_CLASS_ID", IsForeignKey:=true)>  _
	Public Property VESSEL_CLASS() As VESSEL_CLASS
		Get
			Return Me._VESSEL_CLASS.Entity
		End Get
		Set
			Dim previousValue As VESSEL_CLASS = Me._VESSEL_CLASS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._VESSEL_CLASS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._VESSEL_CLASS.Entity = Nothing
					previousValue.VESSEL_CLASS_SPREAD_MARGINs.Remove(Me)
				End If
				Me._VESSEL_CLASS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.VESSEL_CLASS_SPREAD_MARGINs.Add(Me)
					Me._VESSEL_CLASS_ID = value.VESSEL_CLASS_ID
				Else
					Me._VESSEL_CLASS_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("VESSEL_CLASS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ORDERS_FFA")>  _
Partial Public Class ORDERS_FFA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ORDER_ID As Integer
	
	Private _ORDER_TYPE As Short
	
	Private _ORDER_DATETIME As Date
	
	Private _DESK_TRADER_ID As Integer
	
	Private _FOR_DESK_TRADER_ID As Integer
	
	Private _ORDERED_BY_WHO As Char
	
	Private _PREVIOUS_ORDER_ID As Integer
	
	Private _LIVE_STATUS As Char
	
	Private _ORDER_QUALIFIER As Char
	
	Private _ORDER_BS As Char
	
	Private _ROUTE_ID As Integer
	
	Private _MM1 As Short
	
	Private _YY1 As Short
	
	Private _MM2 As Short
	
	Private _YY2 As Short
	
	Private _SHORTDES As String
	
	Private _PRICE_INDICATED As Double
	
	Private _PRICE_TYPE As Char
	
	Private _PRICE_TRY_BETTER As Boolean
	
	Private _ORDER_QUANTITY As Integer
	
	Private _DAY_QUALIFIER As Byte
	
	Private _FLEXIBLE_QUANTITY As Short
	
	Private _QUANTITY_STEP As Integer
	
	Private _ORDER_GOOD_TILL As Short
	
	Private _ORDER_TIME_LIMIT As Integer
	
	Private _SHOW_MY_NAME As Boolean
	
	Private _PNC_ORDER As Boolean
	
	Private _SINGLE_EXCHANGE_EXECUTION As Short
	
	Private _ORDER_TRADED_ON_EXCHANGE As System.Nullable(Of Integer)
	
	Private _CLEARER_ID As System.Nullable(Of Integer)
	
	Private _ORDER_EXCHANGES As String
	
	Private _THREAD As Integer
	
	Private _COUNTER_PARTY_ORDER_ID As System.Nullable(Of Integer)
	
	Private _LOCK_DESK_TRADER_ID As System.Nullable(Of Integer)
	
	Private _LOCK_ORDER_ID As System.Nullable(Of Integer)
	
	Private _COMMIT_ORDER_ID As System.Nullable(Of Integer)
	
	Private _INFORM_DESK_ID As System.Nullable(Of Integer)
	
	Private _NEGOTIATION_ORDER_ID As System.Nullable(Of Integer)
	
	Private _LOCKED_BY_ORDER_ID As System.Nullable(Of Integer)
	
	Private _SPREAD_LEG_TYPE As System.Nullable(Of Short)
	
	Private _SPREAD_ORDER_ID As System.Nullable(Of Integer)
	
	Private _CROSS_ORDER_ID1 As System.Nullable(Of Integer)
	
	Private _CROSS_ORDER_ID2 As System.Nullable(Of Integer)
	
	Private _ROUTE_ID2 As System.Nullable(Of Integer)
	
	Private _MM21 As System.Nullable(Of Short)
	
	Private _YY21 As System.Nullable(Of Short)
	
	Private _MM22 As System.Nullable(Of Short)
	
	Private _YY22 As System.Nullable(Of Short)
	
	Private _SHORTDES2 As String
	
	Private _PRICE_INDICATED2 As System.Nullable(Of Double)
	
	Private _PRICE_TYPE2 As System.Nullable(Of Char)
	
	Private _PRICE_TRY_BETTER2 As System.Nullable(Of Boolean)
	
	Private _ORDER_QUANTITY2 As System.Nullable(Of Integer)
	
	Private _DAY_QUALIFIER2 As System.Nullable(Of Byte)
	
	Private _FLEXIBLE_QUANTITY2 As System.Nullable(Of Short)
	
	Private _ORDER_EXCHANGES2 As String
	
	Private _STRIKE_PRICE As System.Nullable(Of Double)
	
	Private _ICEBERG As System.Nullable(Of Boolean)
	
	Private _BROKER_INVISIBLE As System.Nullable(Of Boolean)
	
	Private _ORDERS_FFA_EXCHANGEs As EntitySet(Of ORDERS_FFA_EXCHANGE)
	
	Private _TRADES_FFAs As EntitySet(Of TRADES_FFA)
	
	Private _TRADES_FFAs1 As EntitySet(Of TRADES_FFA)
	
	Private _ORDERS_FFAs As EntitySet(Of ORDERS_FFA)
	
	Private _ORDERS_FFAs1 As EntitySet(Of ORDERS_FFA)
	
	Private _ORDERS_FFAs2 As EntitySet(Of ORDERS_FFA)
	
	Private _ORDERS_FFAs3 As EntitySet(Of ORDERS_FFA)
	
	Private _ORDERS_FFAs4 As EntitySet(Of ORDERS_FFA)
	
	Private _ORDERS_FFAs5 As EntitySet(Of ORDERS_FFA)
	
	Private _ORDERS_FFAs6 As EntitySet(Of ORDERS_FFA)
	
	Private _ORDERS_FFAs7 As EntitySet(Of ORDERS_FFA)
	
	Private _ORDERS_FFA As EntityRef(Of ORDERS_FFA)
	
	Private _ORDERS_FFA1 As EntityRef(Of ORDERS_FFA)
	
	Private _ORDERS_FFA2 As EntityRef(Of ORDERS_FFA)
	
	Private _ORDERS_FFA3 As EntityRef(Of ORDERS_FFA)
	
	Private _ORDERS_FFA4 As EntityRef(Of ORDERS_FFA)
	
	Private _ORDERS_FFA5 As EntityRef(Of ORDERS_FFA)
	
	Private _ORDERS_FFA6 As EntityRef(Of ORDERS_FFA)
	
	Private _ORDERS_FFA7 As EntityRef(Of ORDERS_FFA)
	
	Private _ROUTE As EntityRef(Of ROUTE)
	
	Private _ROUTE1 As EntityRef(Of ROUTE)
	
	Private _ACCOUNT_DESK As EntityRef(Of ACCOUNT_DESK)
	
	Private _DESK_TRADER As EntityRef(Of DESK_TRADER)
	
	Private _DESK_TRADER1 As EntityRef(Of DESK_TRADER)
	
	Private _DESK_TRADER2 As EntityRef(Of DESK_TRADER)
	
	Private _ACCOUNT As EntityRef(Of ACCOUNT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnORDER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnORDER_IDChanged()
    End Sub
    Partial Private Sub OnORDER_TYPEChanging(value As Short)
    End Sub
    Partial Private Sub OnORDER_TYPEChanged()
    End Sub
    Partial Private Sub OnORDER_DATETIMEChanging(value As Date)
    End Sub
    Partial Private Sub OnORDER_DATETIMEChanged()
    End Sub
    Partial Private Sub OnDESK_TRADER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDESK_TRADER_IDChanged()
    End Sub
    Partial Private Sub OnFOR_DESK_TRADER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFOR_DESK_TRADER_IDChanged()
    End Sub
    Partial Private Sub OnORDERED_BY_WHOChanging(value As Char)
    End Sub
    Partial Private Sub OnORDERED_BY_WHOChanged()
    End Sub
    Partial Private Sub OnPREVIOUS_ORDER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPREVIOUS_ORDER_IDChanged()
    End Sub
    Partial Private Sub OnLIVE_STATUSChanging(value As Char)
    End Sub
    Partial Private Sub OnLIVE_STATUSChanged()
    End Sub
    Partial Private Sub OnORDER_QUALIFIERChanging(value As Char)
    End Sub
    Partial Private Sub OnORDER_QUALIFIERChanged()
    End Sub
    Partial Private Sub OnORDER_BSChanging(value As Char)
    End Sub
    Partial Private Sub OnORDER_BSChanged()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnMM1Changing(value As Short)
    End Sub
    Partial Private Sub OnMM1Changed()
    End Sub
    Partial Private Sub OnYY1Changing(value As Short)
    End Sub
    Partial Private Sub OnYY1Changed()
    End Sub
    Partial Private Sub OnMM2Changing(value As Short)
    End Sub
    Partial Private Sub OnMM2Changed()
    End Sub
    Partial Private Sub OnYY2Changing(value As Short)
    End Sub
    Partial Private Sub OnYY2Changed()
    End Sub
    Partial Private Sub OnSHORTDESChanging(value As String)
    End Sub
    Partial Private Sub OnSHORTDESChanged()
    End Sub
    Partial Private Sub OnPRICE_INDICATEDChanging(value As Double)
    End Sub
    Partial Private Sub OnPRICE_INDICATEDChanged()
    End Sub
    Partial Private Sub OnPRICE_TYPEChanging(value As Char)
    End Sub
    Partial Private Sub OnPRICE_TYPEChanged()
    End Sub
    Partial Private Sub OnPRICE_TRY_BETTERChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPRICE_TRY_BETTERChanged()
    End Sub
    Partial Private Sub OnORDER_QUANTITYChanging(value As Integer)
    End Sub
    Partial Private Sub OnORDER_QUANTITYChanged()
    End Sub
    Partial Private Sub OnDAY_QUALIFIERChanging(value As Byte)
    End Sub
    Partial Private Sub OnDAY_QUALIFIERChanged()
    End Sub
    Partial Private Sub OnFLEXIBLE_QUANTITYChanging(value As Short)
    End Sub
    Partial Private Sub OnFLEXIBLE_QUANTITYChanged()
    End Sub
    Partial Private Sub OnQUANTITY_STEPChanging(value As Integer)
    End Sub
    Partial Private Sub OnQUANTITY_STEPChanged()
    End Sub
    Partial Private Sub OnORDER_GOOD_TILLChanging(value As Short)
    End Sub
    Partial Private Sub OnORDER_GOOD_TILLChanged()
    End Sub
    Partial Private Sub OnORDER_TIME_LIMITChanging(value As Integer)
    End Sub
    Partial Private Sub OnORDER_TIME_LIMITChanged()
    End Sub
    Partial Private Sub OnSHOW_MY_NAMEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSHOW_MY_NAMEChanged()
    End Sub
    Partial Private Sub OnPNC_ORDERChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPNC_ORDERChanged()
    End Sub
    Partial Private Sub OnSINGLE_EXCHANGE_EXECUTIONChanging(value As Short)
    End Sub
    Partial Private Sub OnSINGLE_EXCHANGE_EXECUTIONChanged()
    End Sub
    Partial Private Sub OnORDER_TRADED_ON_EXCHANGEChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnORDER_TRADED_ON_EXCHANGEChanged()
    End Sub
    Partial Private Sub OnCLEARER_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCLEARER_IDChanged()
    End Sub
    Partial Private Sub OnORDER_EXCHANGESChanging(value As String)
    End Sub
    Partial Private Sub OnORDER_EXCHANGESChanged()
    End Sub
    Partial Private Sub OnTHREADChanging(value As Integer)
    End Sub
    Partial Private Sub OnTHREADChanged()
    End Sub
    Partial Private Sub OnCOUNTER_PARTY_ORDER_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCOUNTER_PARTY_ORDER_IDChanged()
    End Sub
    Partial Private Sub OnLOCK_DESK_TRADER_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLOCK_DESK_TRADER_IDChanged()
    End Sub
    Partial Private Sub OnLOCK_ORDER_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLOCK_ORDER_IDChanged()
    End Sub
    Partial Private Sub OnCOMMIT_ORDER_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCOMMIT_ORDER_IDChanged()
    End Sub
    Partial Private Sub OnINFORM_DESK_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnINFORM_DESK_IDChanged()
    End Sub
    Partial Private Sub OnNEGOTIATION_ORDER_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNEGOTIATION_ORDER_IDChanged()
    End Sub
    Partial Private Sub OnLOCKED_BY_ORDER_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLOCKED_BY_ORDER_IDChanged()
    End Sub
    Partial Private Sub OnSPREAD_LEG_TYPEChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnSPREAD_LEG_TYPEChanged()
    End Sub
    Partial Private Sub OnSPREAD_ORDER_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSPREAD_ORDER_IDChanged()
    End Sub
    Partial Private Sub OnCROSS_ORDER_ID1Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCROSS_ORDER_ID1Changed()
    End Sub
    Partial Private Sub OnCROSS_ORDER_ID2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCROSS_ORDER_ID2Changed()
    End Sub
    Partial Private Sub OnROUTE_ID2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnROUTE_ID2Changed()
    End Sub
    Partial Private Sub OnMM21Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMM21Changed()
    End Sub
    Partial Private Sub OnYY21Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnYY21Changed()
    End Sub
    Partial Private Sub OnMM22Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMM22Changed()
    End Sub
    Partial Private Sub OnYY22Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnYY22Changed()
    End Sub
    Partial Private Sub OnSHORTDES2Changing(value As String)
    End Sub
    Partial Private Sub OnSHORTDES2Changed()
    End Sub
    Partial Private Sub OnPRICE_INDICATED2Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPRICE_INDICATED2Changed()
    End Sub
    Partial Private Sub OnPRICE_TYPE2Changing(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnPRICE_TYPE2Changed()
    End Sub
    Partial Private Sub OnPRICE_TRY_BETTER2Changing(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPRICE_TRY_BETTER2Changed()
    End Sub
    Partial Private Sub OnORDER_QUANTITY2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnORDER_QUANTITY2Changed()
    End Sub
    Partial Private Sub OnDAY_QUALIFIER2Changing(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnDAY_QUALIFIER2Changed()
    End Sub
    Partial Private Sub OnFLEXIBLE_QUANTITY2Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnFLEXIBLE_QUANTITY2Changed()
    End Sub
    Partial Private Sub OnORDER_EXCHANGES2Changing(value As String)
    End Sub
    Partial Private Sub OnORDER_EXCHANGES2Changed()
    End Sub
    Partial Private Sub OnSTRIKE_PRICEChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnSTRIKE_PRICEChanged()
    End Sub
    Partial Private Sub OnICEBERGChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnICEBERGChanged()
    End Sub
    Partial Private Sub OnBROKER_INVISIBLEChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnBROKER_INVISIBLEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ORDERS_FFA_EXCHANGEs = New EntitySet(Of ORDERS_FFA_EXCHANGE)(AddressOf Me.attach_ORDERS_FFA_EXCHANGEs, AddressOf Me.detach_ORDERS_FFA_EXCHANGEs)
		Me._TRADES_FFAs = New EntitySet(Of TRADES_FFA)(AddressOf Me.attach_TRADES_FFAs, AddressOf Me.detach_TRADES_FFAs)
		Me._TRADES_FFAs1 = New EntitySet(Of TRADES_FFA)(AddressOf Me.attach_TRADES_FFAs1, AddressOf Me.detach_TRADES_FFAs1)
		Me._ORDERS_FFAs = New EntitySet(Of ORDERS_FFA)(AddressOf Me.attach_ORDERS_FFAs, AddressOf Me.detach_ORDERS_FFAs)
		Me._ORDERS_FFAs1 = New EntitySet(Of ORDERS_FFA)(AddressOf Me.attach_ORDERS_FFAs1, AddressOf Me.detach_ORDERS_FFAs1)
		Me._ORDERS_FFAs2 = New EntitySet(Of ORDERS_FFA)(AddressOf Me.attach_ORDERS_FFAs2, AddressOf Me.detach_ORDERS_FFAs2)
		Me._ORDERS_FFAs3 = New EntitySet(Of ORDERS_FFA)(AddressOf Me.attach_ORDERS_FFAs3, AddressOf Me.detach_ORDERS_FFAs3)
		Me._ORDERS_FFAs4 = New EntitySet(Of ORDERS_FFA)(AddressOf Me.attach_ORDERS_FFAs4, AddressOf Me.detach_ORDERS_FFAs4)
		Me._ORDERS_FFAs5 = New EntitySet(Of ORDERS_FFA)(AddressOf Me.attach_ORDERS_FFAs5, AddressOf Me.detach_ORDERS_FFAs5)
		Me._ORDERS_FFAs6 = New EntitySet(Of ORDERS_FFA)(AddressOf Me.attach_ORDERS_FFAs6, AddressOf Me.detach_ORDERS_FFAs6)
		Me._ORDERS_FFAs7 = New EntitySet(Of ORDERS_FFA)(AddressOf Me.attach_ORDERS_FFAs7, AddressOf Me.detach_ORDERS_FFAs7)
		Me._ORDERS_FFA = CType(Nothing, EntityRef(Of ORDERS_FFA))
		Me._ORDERS_FFA1 = CType(Nothing, EntityRef(Of ORDERS_FFA))
		Me._ORDERS_FFA2 = CType(Nothing, EntityRef(Of ORDERS_FFA))
		Me._ORDERS_FFA3 = CType(Nothing, EntityRef(Of ORDERS_FFA))
		Me._ORDERS_FFA4 = CType(Nothing, EntityRef(Of ORDERS_FFA))
		Me._ORDERS_FFA5 = CType(Nothing, EntityRef(Of ORDERS_FFA))
		Me._ORDERS_FFA6 = CType(Nothing, EntityRef(Of ORDERS_FFA))
		Me._ORDERS_FFA7 = CType(Nothing, EntityRef(Of ORDERS_FFA))
		Me._ROUTE = CType(Nothing, EntityRef(Of ROUTE))
		Me._ROUTE1 = CType(Nothing, EntityRef(Of ROUTE))
		Me._ACCOUNT_DESK = CType(Nothing, EntityRef(Of ACCOUNT_DESK))
		Me._DESK_TRADER = CType(Nothing, EntityRef(Of DESK_TRADER))
		Me._DESK_TRADER1 = CType(Nothing, EntityRef(Of DESK_TRADER))
		Me._DESK_TRADER2 = CType(Nothing, EntityRef(Of DESK_TRADER))
		Me._ACCOUNT = CType(Nothing, EntityRef(Of ACCOUNT))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ORDER_ID() As Integer
		Get
			Return Me._ORDER_ID
		End Get
		Set
			If ((Me._ORDER_ID = value)  _
						= false) Then
				Me.OnORDER_IDChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_ID = value
				Me.SendPropertyChanged("ORDER_ID")
				Me.OnORDER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_TYPE", DbType:="SmallInt NOT NULL")>  _
	Public Property ORDER_TYPE() As Short
		Get
			Return Me._ORDER_TYPE
		End Get
		Set
			If ((Me._ORDER_TYPE = value)  _
						= false) Then
				Me.OnORDER_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_TYPE = value
				Me.SendPropertyChanged("ORDER_TYPE")
				Me.OnORDER_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_DATETIME", DbType:="DateTime2 NOT NULL")>  _
	Public Property ORDER_DATETIME() As Date
		Get
			Return Me._ORDER_DATETIME
		End Get
		Set
			If ((Me._ORDER_DATETIME = value)  _
						= false) Then
				Me.OnORDER_DATETIMEChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_DATETIME = value
				Me.SendPropertyChanged("ORDER_DATETIME")
				Me.OnORDER_DATETIMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_TRADER_ID", DbType:="Int NOT NULL")>  _
	Public Property DESK_TRADER_ID() As Integer
		Get
			Return Me._DESK_TRADER_ID
		End Get
		Set
			If ((Me._DESK_TRADER_ID = value)  _
						= false) Then
				If Me._DESK_TRADER1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDESK_TRADER_IDChanging(value)
				Me.SendPropertyChanging
				Me._DESK_TRADER_ID = value
				Me.SendPropertyChanged("DESK_TRADER_ID")
				Me.OnDESK_TRADER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FOR_DESK_TRADER_ID", DbType:="Int NOT NULL")>  _
	Public Property FOR_DESK_TRADER_ID() As Integer
		Get
			Return Me._FOR_DESK_TRADER_ID
		End Get
		Set
			If ((Me._FOR_DESK_TRADER_ID = value)  _
						= false) Then
				If Me._DESK_TRADER2.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFOR_DESK_TRADER_IDChanging(value)
				Me.SendPropertyChanging
				Me._FOR_DESK_TRADER_ID = value
				Me.SendPropertyChanged("FOR_DESK_TRADER_ID")
				Me.OnFOR_DESK_TRADER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDERED_BY_WHO", DbType:="Char(1) NOT NULL")>  _
	Public Property ORDERED_BY_WHO() As Char
		Get
			Return Me._ORDERED_BY_WHO
		End Get
		Set
			If ((Me._ORDERED_BY_WHO = value)  _
						= false) Then
				Me.OnORDERED_BY_WHOChanging(value)
				Me.SendPropertyChanging
				Me._ORDERED_BY_WHO = value
				Me.SendPropertyChanged("ORDERED_BY_WHO")
				Me.OnORDERED_BY_WHOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PREVIOUS_ORDER_ID", DbType:="Int NOT NULL")>  _
	Public Property PREVIOUS_ORDER_ID() As Integer
		Get
			Return Me._PREVIOUS_ORDER_ID
		End Get
		Set
			If ((Me._PREVIOUS_ORDER_ID = value)  _
						= false) Then
				Me.OnPREVIOUS_ORDER_IDChanging(value)
				Me.SendPropertyChanging
				Me._PREVIOUS_ORDER_ID = value
				Me.SendPropertyChanged("PREVIOUS_ORDER_ID")
				Me.OnPREVIOUS_ORDER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LIVE_STATUS", DbType:="Char(1) NOT NULL")>  _
	Public Property LIVE_STATUS() As Char
		Get
			Return Me._LIVE_STATUS
		End Get
		Set
			If ((Me._LIVE_STATUS = value)  _
						= false) Then
				Me.OnLIVE_STATUSChanging(value)
				Me.SendPropertyChanging
				Me._LIVE_STATUS = value
				Me.SendPropertyChanged("LIVE_STATUS")
				Me.OnLIVE_STATUSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_QUALIFIER", DbType:="Char(1) NOT NULL")>  _
	Public Property ORDER_QUALIFIER() As Char
		Get
			Return Me._ORDER_QUALIFIER
		End Get
		Set
			If ((Me._ORDER_QUALIFIER = value)  _
						= false) Then
				Me.OnORDER_QUALIFIERChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_QUALIFIER = value
				Me.SendPropertyChanged("ORDER_QUALIFIER")
				Me.OnORDER_QUALIFIERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_BS", DbType:="Char(1) NOT NULL")>  _
	Public Property ORDER_BS() As Char
		Get
			Return Me._ORDER_BS
		End Get
		Set
			If ((Me._ORDER_BS = value)  _
						= false) Then
				Me.OnORDER_BSChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_BS = value
				Me.SendPropertyChanged("ORDER_BS")
				Me.OnORDER_BSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL")>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If Me._ROUTE1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM1", DbType:="SmallInt NOT NULL")>  _
	Public Property MM1() As Short
		Get
			Return Me._MM1
		End Get
		Set
			If ((Me._MM1 = value)  _
						= false) Then
				Me.OnMM1Changing(value)
				Me.SendPropertyChanging
				Me._MM1 = value
				Me.SendPropertyChanged("MM1")
				Me.OnMM1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY1", DbType:="SmallInt NOT NULL")>  _
	Public Property YY1() As Short
		Get
			Return Me._YY1
		End Get
		Set
			If ((Me._YY1 = value)  _
						= false) Then
				Me.OnYY1Changing(value)
				Me.SendPropertyChanging
				Me._YY1 = value
				Me.SendPropertyChanged("YY1")
				Me.OnYY1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM2", DbType:="SmallInt NOT NULL")>  _
	Public Property MM2() As Short
		Get
			Return Me._MM2
		End Get
		Set
			If ((Me._MM2 = value)  _
						= false) Then
				Me.OnMM2Changing(value)
				Me.SendPropertyChanging
				Me._MM2 = value
				Me.SendPropertyChanged("MM2")
				Me.OnMM2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY2", DbType:="SmallInt NOT NULL")>  _
	Public Property YY2() As Short
		Get
			Return Me._YY2
		End Get
		Set
			If ((Me._YY2 = value)  _
						= false) Then
				Me.OnYY2Changing(value)
				Me.SendPropertyChanging
				Me._YY2 = value
				Me.SendPropertyChanged("YY2")
				Me.OnYY2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SHORTDES", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SHORTDES() As String
		Get
			Return Me._SHORTDES
		End Get
		Set
			If (String.Equals(Me._SHORTDES, value) = false) Then
				Me.OnSHORTDESChanging(value)
				Me.SendPropertyChanging
				Me._SHORTDES = value
				Me.SendPropertyChanged("SHORTDES")
				Me.OnSHORTDESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE_INDICATED", DbType:="Float NOT NULL")>  _
	Public Property PRICE_INDICATED() As Double
		Get
			Return Me._PRICE_INDICATED
		End Get
		Set
			If ((Me._PRICE_INDICATED = value)  _
						= false) Then
				Me.OnPRICE_INDICATEDChanging(value)
				Me.SendPropertyChanging
				Me._PRICE_INDICATED = value
				Me.SendPropertyChanged("PRICE_INDICATED")
				Me.OnPRICE_INDICATEDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE_TYPE", DbType:="Char(1) NOT NULL")>  _
	Public Property PRICE_TYPE() As Char
		Get
			Return Me._PRICE_TYPE
		End Get
		Set
			If ((Me._PRICE_TYPE = value)  _
						= false) Then
				Me.OnPRICE_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._PRICE_TYPE = value
				Me.SendPropertyChanged("PRICE_TYPE")
				Me.OnPRICE_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE_TRY_BETTER", DbType:="Bit NOT NULL")>  _
	Public Property PRICE_TRY_BETTER() As Boolean
		Get
			Return Me._PRICE_TRY_BETTER
		End Get
		Set
			If ((Me._PRICE_TRY_BETTER = value)  _
						= false) Then
				Me.OnPRICE_TRY_BETTERChanging(value)
				Me.SendPropertyChanging
				Me._PRICE_TRY_BETTER = value
				Me.SendPropertyChanged("PRICE_TRY_BETTER")
				Me.OnPRICE_TRY_BETTERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_QUANTITY", DbType:="Int NOT NULL")>  _
	Public Property ORDER_QUANTITY() As Integer
		Get
			Return Me._ORDER_QUANTITY
		End Get
		Set
			If ((Me._ORDER_QUANTITY = value)  _
						= false) Then
				Me.OnORDER_QUANTITYChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_QUANTITY = value
				Me.SendPropertyChanged("ORDER_QUANTITY")
				Me.OnORDER_QUANTITYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DAY_QUALIFIER", DbType:="TinyInt NOT NULL")>  _
	Public Property DAY_QUALIFIER() As Byte
		Get
			Return Me._DAY_QUALIFIER
		End Get
		Set
			If ((Me._DAY_QUALIFIER = value)  _
						= false) Then
				Me.OnDAY_QUALIFIERChanging(value)
				Me.SendPropertyChanging
				Me._DAY_QUALIFIER = value
				Me.SendPropertyChanged("DAY_QUALIFIER")
				Me.OnDAY_QUALIFIERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FLEXIBLE_QUANTITY", DbType:="SmallInt NOT NULL")>  _
	Public Property FLEXIBLE_QUANTITY() As Short
		Get
			Return Me._FLEXIBLE_QUANTITY
		End Get
		Set
			If ((Me._FLEXIBLE_QUANTITY = value)  _
						= false) Then
				Me.OnFLEXIBLE_QUANTITYChanging(value)
				Me.SendPropertyChanging
				Me._FLEXIBLE_QUANTITY = value
				Me.SendPropertyChanged("FLEXIBLE_QUANTITY")
				Me.OnFLEXIBLE_QUANTITYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUANTITY_STEP", DbType:="Int NOT NULL")>  _
	Public Property QUANTITY_STEP() As Integer
		Get
			Return Me._QUANTITY_STEP
		End Get
		Set
			If ((Me._QUANTITY_STEP = value)  _
						= false) Then
				Me.OnQUANTITY_STEPChanging(value)
				Me.SendPropertyChanging
				Me._QUANTITY_STEP = value
				Me.SendPropertyChanged("QUANTITY_STEP")
				Me.OnQUANTITY_STEPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_GOOD_TILL", DbType:="SmallInt NOT NULL")>  _
	Public Property ORDER_GOOD_TILL() As Short
		Get
			Return Me._ORDER_GOOD_TILL
		End Get
		Set
			If ((Me._ORDER_GOOD_TILL = value)  _
						= false) Then
				Me.OnORDER_GOOD_TILLChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_GOOD_TILL = value
				Me.SendPropertyChanged("ORDER_GOOD_TILL")
				Me.OnORDER_GOOD_TILLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_TIME_LIMIT", DbType:="Int NOT NULL")>  _
	Public Property ORDER_TIME_LIMIT() As Integer
		Get
			Return Me._ORDER_TIME_LIMIT
		End Get
		Set
			If ((Me._ORDER_TIME_LIMIT = value)  _
						= false) Then
				Me.OnORDER_TIME_LIMITChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_TIME_LIMIT = value
				Me.SendPropertyChanged("ORDER_TIME_LIMIT")
				Me.OnORDER_TIME_LIMITChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SHOW_MY_NAME", DbType:="Bit NOT NULL")>  _
	Public Property SHOW_MY_NAME() As Boolean
		Get
			Return Me._SHOW_MY_NAME
		End Get
		Set
			If ((Me._SHOW_MY_NAME = value)  _
						= false) Then
				Me.OnSHOW_MY_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._SHOW_MY_NAME = value
				Me.SendPropertyChanged("SHOW_MY_NAME")
				Me.OnSHOW_MY_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PNC_ORDER", DbType:="Bit NOT NULL")>  _
	Public Property PNC_ORDER() As Boolean
		Get
			Return Me._PNC_ORDER
		End Get
		Set
			If ((Me._PNC_ORDER = value)  _
						= false) Then
				Me.OnPNC_ORDERChanging(value)
				Me.SendPropertyChanging
				Me._PNC_ORDER = value
				Me.SendPropertyChanged("PNC_ORDER")
				Me.OnPNC_ORDERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SINGLE_EXCHANGE_EXECUTION", DbType:="SmallInt NOT NULL")>  _
	Public Property SINGLE_EXCHANGE_EXECUTION() As Short
		Get
			Return Me._SINGLE_EXCHANGE_EXECUTION
		End Get
		Set
			If ((Me._SINGLE_EXCHANGE_EXECUTION = value)  _
						= false) Then
				Me.OnSINGLE_EXCHANGE_EXECUTIONChanging(value)
				Me.SendPropertyChanging
				Me._SINGLE_EXCHANGE_EXECUTION = value
				Me.SendPropertyChanged("SINGLE_EXCHANGE_EXECUTION")
				Me.OnSINGLE_EXCHANGE_EXECUTIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_TRADED_ON_EXCHANGE", DbType:="Int")>  _
	Public Property ORDER_TRADED_ON_EXCHANGE() As System.Nullable(Of Integer)
		Get
			Return Me._ORDER_TRADED_ON_EXCHANGE
		End Get
		Set
			If (Me._ORDER_TRADED_ON_EXCHANGE.Equals(value) = false) Then
				Me.OnORDER_TRADED_ON_EXCHANGEChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_TRADED_ON_EXCHANGE = value
				Me.SendPropertyChanged("ORDER_TRADED_ON_EXCHANGE")
				Me.OnORDER_TRADED_ON_EXCHANGEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLEARER_ID", DbType:="Int")>  _
	Public Property CLEARER_ID() As System.Nullable(Of Integer)
		Get
			Return Me._CLEARER_ID
		End Get
		Set
			If (Me._CLEARER_ID.Equals(value) = false) Then
				If Me._ACCOUNT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCLEARER_IDChanging(value)
				Me.SendPropertyChanging
				Me._CLEARER_ID = value
				Me.SendPropertyChanged("CLEARER_ID")
				Me.OnCLEARER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_EXCHANGES", DbType:="VarChar(100)")>  _
	Public Property ORDER_EXCHANGES() As String
		Get
			Return Me._ORDER_EXCHANGES
		End Get
		Set
			If (String.Equals(Me._ORDER_EXCHANGES, value) = false) Then
				Me.OnORDER_EXCHANGESChanging(value)
				Me.SendPropertyChanging
				Me._ORDER_EXCHANGES = value
				Me.SendPropertyChanged("ORDER_EXCHANGES")
				Me.OnORDER_EXCHANGESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_THREAD", DbType:="Int NOT NULL")>  _
	Public Property THREAD() As Integer
		Get
			Return Me._THREAD
		End Get
		Set
			If ((Me._THREAD = value)  _
						= false) Then
				Me.OnTHREADChanging(value)
				Me.SendPropertyChanging
				Me._THREAD = value
				Me.SendPropertyChanged("THREAD")
				Me.OnTHREADChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COUNTER_PARTY_ORDER_ID", DbType:="Int")>  _
	Public Property COUNTER_PARTY_ORDER_ID() As System.Nullable(Of Integer)
		Get
			Return Me._COUNTER_PARTY_ORDER_ID
		End Get
		Set
			If (Me._COUNTER_PARTY_ORDER_ID.Equals(value) = false) Then
				If Me._ORDERS_FFA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCOUNTER_PARTY_ORDER_IDChanging(value)
				Me.SendPropertyChanging
				Me._COUNTER_PARTY_ORDER_ID = value
				Me.SendPropertyChanged("COUNTER_PARTY_ORDER_ID")
				Me.OnCOUNTER_PARTY_ORDER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOCK_DESK_TRADER_ID", DbType:="Int")>  _
	Public Property LOCK_DESK_TRADER_ID() As System.Nullable(Of Integer)
		Get
			Return Me._LOCK_DESK_TRADER_ID
		End Get
		Set
			If (Me._LOCK_DESK_TRADER_ID.Equals(value) = false) Then
				If Me._DESK_TRADER.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLOCK_DESK_TRADER_IDChanging(value)
				Me.SendPropertyChanging
				Me._LOCK_DESK_TRADER_ID = value
				Me.SendPropertyChanged("LOCK_DESK_TRADER_ID")
				Me.OnLOCK_DESK_TRADER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOCK_ORDER_ID", DbType:="Int")>  _
	Public Property LOCK_ORDER_ID() As System.Nullable(Of Integer)
		Get
			Return Me._LOCK_ORDER_ID
		End Get
		Set
			If (Me._LOCK_ORDER_ID.Equals(value) = false) Then
				If Me._ORDERS_FFA3.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLOCK_ORDER_IDChanging(value)
				Me.SendPropertyChanging
				Me._LOCK_ORDER_ID = value
				Me.SendPropertyChanged("LOCK_ORDER_ID")
				Me.OnLOCK_ORDER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COMMIT_ORDER_ID", DbType:="Int")>  _
	Public Property COMMIT_ORDER_ID() As System.Nullable(Of Integer)
		Get
			Return Me._COMMIT_ORDER_ID
		End Get
		Set
			If (Me._COMMIT_ORDER_ID.Equals(value) = false) Then
				If Me._ORDERS_FFA4.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCOMMIT_ORDER_IDChanging(value)
				Me.SendPropertyChanging
				Me._COMMIT_ORDER_ID = value
				Me.SendPropertyChanged("COMMIT_ORDER_ID")
				Me.OnCOMMIT_ORDER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_INFORM_DESK_ID", DbType:="Int")>  _
	Public Property INFORM_DESK_ID() As System.Nullable(Of Integer)
		Get
			Return Me._INFORM_DESK_ID
		End Get
		Set
			If (Me._INFORM_DESK_ID.Equals(value) = false) Then
				If Me._ACCOUNT_DESK.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnINFORM_DESK_IDChanging(value)
				Me.SendPropertyChanging
				Me._INFORM_DESK_ID = value
				Me.SendPropertyChanged("INFORM_DESK_ID")
				Me.OnINFORM_DESK_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NEGOTIATION_ORDER_ID", DbType:="Int")>  _
	Public Property NEGOTIATION_ORDER_ID() As System.Nullable(Of Integer)
		Get
			Return Me._NEGOTIATION_ORDER_ID
		End Get
		Set
			If (Me._NEGOTIATION_ORDER_ID.Equals(value) = false) Then
				If Me._ORDERS_FFA5.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnNEGOTIATION_ORDER_IDChanging(value)
				Me.SendPropertyChanging
				Me._NEGOTIATION_ORDER_ID = value
				Me.SendPropertyChanged("NEGOTIATION_ORDER_ID")
				Me.OnNEGOTIATION_ORDER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOCKED_BY_ORDER_ID", DbType:="Int")>  _
	Public Property LOCKED_BY_ORDER_ID() As System.Nullable(Of Integer)
		Get
			Return Me._LOCKED_BY_ORDER_ID
		End Get
		Set
			If (Me._LOCKED_BY_ORDER_ID.Equals(value) = false) Then
				If Me._ORDERS_FFA1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLOCKED_BY_ORDER_IDChanging(value)
				Me.SendPropertyChanging
				Me._LOCKED_BY_ORDER_ID = value
				Me.SendPropertyChanged("LOCKED_BY_ORDER_ID")
				Me.OnLOCKED_BY_ORDER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SPREAD_LEG_TYPE", DbType:="SmallInt")>  _
	Public Property SPREAD_LEG_TYPE() As System.Nullable(Of Short)
		Get
			Return Me._SPREAD_LEG_TYPE
		End Get
		Set
			If (Me._SPREAD_LEG_TYPE.Equals(value) = false) Then
				Me.OnSPREAD_LEG_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._SPREAD_LEG_TYPE = value
				Me.SendPropertyChanged("SPREAD_LEG_TYPE")
				Me.OnSPREAD_LEG_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SPREAD_ORDER_ID", DbType:="Int")>  _
	Public Property SPREAD_ORDER_ID() As System.Nullable(Of Integer)
		Get
			Return Me._SPREAD_ORDER_ID
		End Get
		Set
			If (Me._SPREAD_ORDER_ID.Equals(value) = false) Then
				If Me._ORDERS_FFA2.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSPREAD_ORDER_IDChanging(value)
				Me.SendPropertyChanging
				Me._SPREAD_ORDER_ID = value
				Me.SendPropertyChanged("SPREAD_ORDER_ID")
				Me.OnSPREAD_ORDER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CROSS_ORDER_ID1", DbType:="Int")>  _
	Public Property CROSS_ORDER_ID1() As System.Nullable(Of Integer)
		Get
			Return Me._CROSS_ORDER_ID1
		End Get
		Set
			If (Me._CROSS_ORDER_ID1.Equals(value) = false) Then
				If Me._ORDERS_FFA6.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCROSS_ORDER_ID1Changing(value)
				Me.SendPropertyChanging
				Me._CROSS_ORDER_ID1 = value
				Me.SendPropertyChanged("CROSS_ORDER_ID1")
				Me.OnCROSS_ORDER_ID1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CROSS_ORDER_ID2", DbType:="Int")>  _
	Public Property CROSS_ORDER_ID2() As System.Nullable(Of Integer)
		Get
			Return Me._CROSS_ORDER_ID2
		End Get
		Set
			If (Me._CROSS_ORDER_ID2.Equals(value) = false) Then
				If Me._ORDERS_FFA7.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCROSS_ORDER_ID2Changing(value)
				Me.SendPropertyChanging
				Me._CROSS_ORDER_ID2 = value
				Me.SendPropertyChanged("CROSS_ORDER_ID2")
				Me.OnCROSS_ORDER_ID2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID2", DbType:="Int")>  _
	Public Property ROUTE_ID2() As System.Nullable(Of Integer)
		Get
			Return Me._ROUTE_ID2
		End Get
		Set
			If (Me._ROUTE_ID2.Equals(value) = false) Then
				If Me._ROUTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_ID2Changing(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID2 = value
				Me.SendPropertyChanged("ROUTE_ID2")
				Me.OnROUTE_ID2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM21", DbType:="SmallInt")>  _
	Public Property MM21() As System.Nullable(Of Short)
		Get
			Return Me._MM21
		End Get
		Set
			If (Me._MM21.Equals(value) = false) Then
				Me.OnMM21Changing(value)
				Me.SendPropertyChanging
				Me._MM21 = value
				Me.SendPropertyChanged("MM21")
				Me.OnMM21Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY21", DbType:="SmallInt")>  _
	Public Property YY21() As System.Nullable(Of Short)
		Get
			Return Me._YY21
		End Get
		Set
			If (Me._YY21.Equals(value) = false) Then
				Me.OnYY21Changing(value)
				Me.SendPropertyChanging
				Me._YY21 = value
				Me.SendPropertyChanged("YY21")
				Me.OnYY21Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MM22", DbType:="SmallInt")>  _
	Public Property MM22() As System.Nullable(Of Short)
		Get
			Return Me._MM22
		End Get
		Set
			If (Me._MM22.Equals(value) = false) Then
				Me.OnMM22Changing(value)
				Me.SendPropertyChanging
				Me._MM22 = value
				Me.SendPropertyChanged("MM22")
				Me.OnMM22Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YY22", DbType:="SmallInt")>  _
	Public Property YY22() As System.Nullable(Of Short)
		Get
			Return Me._YY22
		End Get
		Set
			If (Me._YY22.Equals(value) = false) Then
				Me.OnYY22Changing(value)
				Me.SendPropertyChanging
				Me._YY22 = value
				Me.SendPropertyChanged("YY22")
				Me.OnYY22Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SHORTDES2", DbType:="NVarChar(50)")>  _
	Public Property SHORTDES2() As String
		Get
			Return Me._SHORTDES2
		End Get
		Set
			If (String.Equals(Me._SHORTDES2, value) = false) Then
				Me.OnSHORTDES2Changing(value)
				Me.SendPropertyChanging
				Me._SHORTDES2 = value
				Me.SendPropertyChanged("SHORTDES2")
				Me.OnSHORTDES2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE_INDICATED2", DbType:="Float")>  _
	Public Property PRICE_INDICATED2() As System.Nullable(Of Double)
		Get
			Return Me._PRICE_INDICATED2
		End Get
		Set
			If (Me._PRICE_INDICATED2.Equals(value) = false) Then
				Me.OnPRICE_INDICATED2Changing(value)
				Me.SendPropertyChanging
				Me._PRICE_INDICATED2 = value
				Me.SendPropertyChanged("PRICE_INDICATED2")
				Me.OnPRICE_INDICATED2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE_TYPE2", DbType:="Char(1)")>  _
	Public Property PRICE_TYPE2() As System.Nullable(Of Char)
		Get
			Return Me._PRICE_TYPE2
		End Get
		Set
			If (Me._PRICE_TYPE2.Equals(value) = false) Then
				Me.OnPRICE_TYPE2Changing(value)
				Me.SendPropertyChanging
				Me._PRICE_TYPE2 = value
				Me.SendPropertyChanged("PRICE_TYPE2")
				Me.OnPRICE_TYPE2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE_TRY_BETTER2", DbType:="Bit")>  _
	Public Property PRICE_TRY_BETTER2() As System.Nullable(Of Boolean)
		Get
			Return Me._PRICE_TRY_BETTER2
		End Get
		Set
			If (Me._PRICE_TRY_BETTER2.Equals(value) = false) Then
				Me.OnPRICE_TRY_BETTER2Changing(value)
				Me.SendPropertyChanging
				Me._PRICE_TRY_BETTER2 = value
				Me.SendPropertyChanged("PRICE_TRY_BETTER2")
				Me.OnPRICE_TRY_BETTER2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_QUANTITY2", DbType:="Int")>  _
	Public Property ORDER_QUANTITY2() As System.Nullable(Of Integer)
		Get
			Return Me._ORDER_QUANTITY2
		End Get
		Set
			If (Me._ORDER_QUANTITY2.Equals(value) = false) Then
				Me.OnORDER_QUANTITY2Changing(value)
				Me.SendPropertyChanging
				Me._ORDER_QUANTITY2 = value
				Me.SendPropertyChanged("ORDER_QUANTITY2")
				Me.OnORDER_QUANTITY2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DAY_QUALIFIER2", DbType:="TinyInt")>  _
	Public Property DAY_QUALIFIER2() As System.Nullable(Of Byte)
		Get
			Return Me._DAY_QUALIFIER2
		End Get
		Set
			If (Me._DAY_QUALIFIER2.Equals(value) = false) Then
				Me.OnDAY_QUALIFIER2Changing(value)
				Me.SendPropertyChanging
				Me._DAY_QUALIFIER2 = value
				Me.SendPropertyChanged("DAY_QUALIFIER2")
				Me.OnDAY_QUALIFIER2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FLEXIBLE_QUANTITY2", DbType:="SmallInt")>  _
	Public Property FLEXIBLE_QUANTITY2() As System.Nullable(Of Short)
		Get
			Return Me._FLEXIBLE_QUANTITY2
		End Get
		Set
			If (Me._FLEXIBLE_QUANTITY2.Equals(value) = false) Then
				Me.OnFLEXIBLE_QUANTITY2Changing(value)
				Me.SendPropertyChanging
				Me._FLEXIBLE_QUANTITY2 = value
				Me.SendPropertyChanged("FLEXIBLE_QUANTITY2")
				Me.OnFLEXIBLE_QUANTITY2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDER_EXCHANGES2", DbType:="VarChar(100)")>  _
	Public Property ORDER_EXCHANGES2() As String
		Get
			Return Me._ORDER_EXCHANGES2
		End Get
		Set
			If (String.Equals(Me._ORDER_EXCHANGES2, value) = false) Then
				Me.OnORDER_EXCHANGES2Changing(value)
				Me.SendPropertyChanging
				Me._ORDER_EXCHANGES2 = value
				Me.SendPropertyChanged("ORDER_EXCHANGES2")
				Me.OnORDER_EXCHANGES2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_STRIKE_PRICE", DbType:="Float")>  _
	Public Property STRIKE_PRICE() As System.Nullable(Of Double)
		Get
			Return Me._STRIKE_PRICE
		End Get
		Set
			If (Me._STRIKE_PRICE.Equals(value) = false) Then
				Me.OnSTRIKE_PRICEChanging(value)
				Me.SendPropertyChanging
				Me._STRIKE_PRICE = value
				Me.SendPropertyChanged("STRIKE_PRICE")
				Me.OnSTRIKE_PRICEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ICEBERG", DbType:="Bit")>  _
	Public Property ICEBERG() As System.Nullable(Of Boolean)
		Get
			Return Me._ICEBERG
		End Get
		Set
			If (Me._ICEBERG.Equals(value) = false) Then
				Me.OnICEBERGChanging(value)
				Me.SendPropertyChanging
				Me._ICEBERG = value
				Me.SendPropertyChanged("ICEBERG")
				Me.OnICEBERGChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BROKER_INVISIBLE", DbType:="Bit")>  _
	Public Property BROKER_INVISIBLE() As System.Nullable(Of Boolean)
		Get
			Return Me._BROKER_INVISIBLE
		End Get
		Set
			If (Me._BROKER_INVISIBLE.Equals(value) = false) Then
				Me.OnBROKER_INVISIBLEChanging(value)
				Me.SendPropertyChanging
				Me._BROKER_INVISIBLE = value
				Me.SendPropertyChanged("BROKER_INVISIBLE")
				Me.OnBROKER_INVISIBLEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA_EXCHANGE", Storage:="_ORDERS_FFA_EXCHANGEs", ThisKey:="ORDER_ID", OtherKey:="ORDER_ID")>  _
	Public Property ORDERS_FFA_EXCHANGEs() As EntitySet(Of ORDERS_FFA_EXCHANGE)
		Get
			Return Me._ORDERS_FFA_EXCHANGEs
		End Get
		Set
			Me._ORDERS_FFA_EXCHANGEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_TRADES_FFA", Storage:="_TRADES_FFAs", ThisKey:="ORDER_ID", OtherKey:="ORDER_ID1")>  _
	Public Property TRADES_FFAs() As EntitySet(Of TRADES_FFA)
		Get
			Return Me._TRADES_FFAs
		End Get
		Set
			Me._TRADES_FFAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_TRADES_FFA1", Storage:="_TRADES_FFAs1", ThisKey:="ORDER_ID", OtherKey:="ORDER_ID2")>  _
	Public Property TRADES_FFAs1() As EntitySet(Of TRADES_FFA)
		Get
			Return Me._TRADES_FFAs1
		End Get
		Set
			Me._TRADES_FFAs1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA", Storage:="_ORDERS_FFAs", ThisKey:="ORDER_ID", OtherKey:="COUNTER_PARTY_ORDER_ID")>  _
	Public Property ORDERS_FFAs() As EntitySet(Of ORDERS_FFA)
		Get
			Return Me._ORDERS_FFAs
		End Get
		Set
			Me._ORDERS_FFAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA1", Storage:="_ORDERS_FFAs1", ThisKey:="ORDER_ID", OtherKey:="LOCKED_BY_ORDER_ID")>  _
	Public Property ORDERS_FFAs1() As EntitySet(Of ORDERS_FFA)
		Get
			Return Me._ORDERS_FFAs1
		End Get
		Set
			Me._ORDERS_FFAs1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA2", Storage:="_ORDERS_FFAs2", ThisKey:="ORDER_ID", OtherKey:="SPREAD_ORDER_ID")>  _
	Public Property ORDERS_FFAs2() As EntitySet(Of ORDERS_FFA)
		Get
			Return Me._ORDERS_FFAs2
		End Get
		Set
			Me._ORDERS_FFAs2.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA3", Storage:="_ORDERS_FFAs3", ThisKey:="ORDER_ID", OtherKey:="LOCK_ORDER_ID")>  _
	Public Property ORDERS_FFAs3() As EntitySet(Of ORDERS_FFA)
		Get
			Return Me._ORDERS_FFAs3
		End Get
		Set
			Me._ORDERS_FFAs3.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA4", Storage:="_ORDERS_FFAs4", ThisKey:="ORDER_ID", OtherKey:="COMMIT_ORDER_ID")>  _
	Public Property ORDERS_FFAs4() As EntitySet(Of ORDERS_FFA)
		Get
			Return Me._ORDERS_FFAs4
		End Get
		Set
			Me._ORDERS_FFAs4.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA5", Storage:="_ORDERS_FFAs5", ThisKey:="ORDER_ID", OtherKey:="NEGOTIATION_ORDER_ID")>  _
	Public Property ORDERS_FFAs5() As EntitySet(Of ORDERS_FFA)
		Get
			Return Me._ORDERS_FFAs5
		End Get
		Set
			Me._ORDERS_FFAs5.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA6", Storage:="_ORDERS_FFAs6", ThisKey:="ORDER_ID", OtherKey:="CROSS_ORDER_ID1")>  _
	Public Property ORDERS_FFAs6() As EntitySet(Of ORDERS_FFA)
		Get
			Return Me._ORDERS_FFAs6
		End Get
		Set
			Me._ORDERS_FFAs6.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA7", Storage:="_ORDERS_FFAs7", ThisKey:="ORDER_ID", OtherKey:="CROSS_ORDER_ID2")>  _
	Public Property ORDERS_FFAs7() As EntitySet(Of ORDERS_FFA)
		Get
			Return Me._ORDERS_FFAs7
		End Get
		Set
			Me._ORDERS_FFAs7.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA", Storage:="_ORDERS_FFA", ThisKey:="COUNTER_PARTY_ORDER_ID", OtherKey:="ORDER_ID", IsForeignKey:=true)>  _
	Public Property ORDERS_FFA() As ORDERS_FFA
		Get
			Return Me._ORDERS_FFA.Entity
		End Get
		Set
			Dim previousValue As ORDERS_FFA = Me._ORDERS_FFA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ORDERS_FFA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ORDERS_FFA.Entity = Nothing
					previousValue.ORDERS_FFAs.Remove(Me)
				End If
				Me._ORDERS_FFA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFAs.Add(Me)
					Me._COUNTER_PARTY_ORDER_ID = value.ORDER_ID
				Else
					Me._COUNTER_PARTY_ORDER_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ORDERS_FFA")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA1", Storage:="_ORDERS_FFA1", ThisKey:="LOCKED_BY_ORDER_ID", OtherKey:="ORDER_ID", IsForeignKey:=true)>  _
	Public Property ORDERS_FFA1() As ORDERS_FFA
		Get
			Return Me._ORDERS_FFA1.Entity
		End Get
		Set
			Dim previousValue As ORDERS_FFA = Me._ORDERS_FFA1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ORDERS_FFA1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ORDERS_FFA1.Entity = Nothing
					previousValue.ORDERS_FFAs1.Remove(Me)
				End If
				Me._ORDERS_FFA1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFAs1.Add(Me)
					Me._LOCKED_BY_ORDER_ID = value.ORDER_ID
				Else
					Me._LOCKED_BY_ORDER_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ORDERS_FFA1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA2", Storage:="_ORDERS_FFA2", ThisKey:="SPREAD_ORDER_ID", OtherKey:="ORDER_ID", IsForeignKey:=true)>  _
	Public Property ORDERS_FFA2() As ORDERS_FFA
		Get
			Return Me._ORDERS_FFA2.Entity
		End Get
		Set
			Dim previousValue As ORDERS_FFA = Me._ORDERS_FFA2.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ORDERS_FFA2.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ORDERS_FFA2.Entity = Nothing
					previousValue.ORDERS_FFAs2.Remove(Me)
				End If
				Me._ORDERS_FFA2.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFAs2.Add(Me)
					Me._SPREAD_ORDER_ID = value.ORDER_ID
				Else
					Me._SPREAD_ORDER_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ORDERS_FFA2")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA3", Storage:="_ORDERS_FFA3", ThisKey:="LOCK_ORDER_ID", OtherKey:="ORDER_ID", IsForeignKey:=true)>  _
	Public Property ORDERS_FFA3() As ORDERS_FFA
		Get
			Return Me._ORDERS_FFA3.Entity
		End Get
		Set
			Dim previousValue As ORDERS_FFA = Me._ORDERS_FFA3.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ORDERS_FFA3.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ORDERS_FFA3.Entity = Nothing
					previousValue.ORDERS_FFAs3.Remove(Me)
				End If
				Me._ORDERS_FFA3.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFAs3.Add(Me)
					Me._LOCK_ORDER_ID = value.ORDER_ID
				Else
					Me._LOCK_ORDER_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ORDERS_FFA3")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA4", Storage:="_ORDERS_FFA4", ThisKey:="COMMIT_ORDER_ID", OtherKey:="ORDER_ID", IsForeignKey:=true)>  _
	Public Property ORDERS_FFA4() As ORDERS_FFA
		Get
			Return Me._ORDERS_FFA4.Entity
		End Get
		Set
			Dim previousValue As ORDERS_FFA = Me._ORDERS_FFA4.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ORDERS_FFA4.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ORDERS_FFA4.Entity = Nothing
					previousValue.ORDERS_FFAs4.Remove(Me)
				End If
				Me._ORDERS_FFA4.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFAs4.Add(Me)
					Me._COMMIT_ORDER_ID = value.ORDER_ID
				Else
					Me._COMMIT_ORDER_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ORDERS_FFA4")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA5", Storage:="_ORDERS_FFA5", ThisKey:="NEGOTIATION_ORDER_ID", OtherKey:="ORDER_ID", IsForeignKey:=true)>  _
	Public Property ORDERS_FFA5() As ORDERS_FFA
		Get
			Return Me._ORDERS_FFA5.Entity
		End Get
		Set
			Dim previousValue As ORDERS_FFA = Me._ORDERS_FFA5.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ORDERS_FFA5.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ORDERS_FFA5.Entity = Nothing
					previousValue.ORDERS_FFAs5.Remove(Me)
				End If
				Me._ORDERS_FFA5.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFAs5.Add(Me)
					Me._NEGOTIATION_ORDER_ID = value.ORDER_ID
				Else
					Me._NEGOTIATION_ORDER_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ORDERS_FFA5")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA6", Storage:="_ORDERS_FFA6", ThisKey:="CROSS_ORDER_ID1", OtherKey:="ORDER_ID", IsForeignKey:=true)>  _
	Public Property ORDERS_FFA6() As ORDERS_FFA
		Get
			Return Me._ORDERS_FFA6.Entity
		End Get
		Set
			Dim previousValue As ORDERS_FFA = Me._ORDERS_FFA6.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ORDERS_FFA6.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ORDERS_FFA6.Entity = Nothing
					previousValue.ORDERS_FFAs6.Remove(Me)
				End If
				Me._ORDERS_FFA6.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFAs6.Add(Me)
					Me._CROSS_ORDER_ID1 = value.ORDER_ID
				Else
					Me._CROSS_ORDER_ID1 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ORDERS_FFA6")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDERS_FFA_ORDERS_FFA7", Storage:="_ORDERS_FFA7", ThisKey:="CROSS_ORDER_ID2", OtherKey:="ORDER_ID", IsForeignKey:=true)>  _
	Public Property ORDERS_FFA7() As ORDERS_FFA
		Get
			Return Me._ORDERS_FFA7.Entity
		End Get
		Set
			Dim previousValue As ORDERS_FFA = Me._ORDERS_FFA7.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ORDERS_FFA7.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ORDERS_FFA7.Entity = Nothing
					previousValue.ORDERS_FFAs7.Remove(Me)
				End If
				Me._ORDERS_FFA7.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFAs7.Add(Me)
					Me._CROSS_ORDER_ID2 = value.ORDER_ID
				Else
					Me._CROSS_ORDER_ID2 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ORDERS_FFA7")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_ORDERS_FFA", Storage:="_ROUTE", ThisKey:="ROUTE_ID2", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTE() As ROUTE
		Get
			Return Me._ROUTE.Entity
		End Get
		Set
			Dim previousValue As ROUTE = Me._ROUTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTE.Entity = Nothing
					previousValue.ORDERS_FFAs.Remove(Me)
				End If
				Me._ROUTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFAs.Add(Me)
					Me._ROUTE_ID2 = value.ROUTE_ID
				Else
					Me._ROUTE_ID2 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ROUTE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_ORDERS_FFA1", Storage:="_ROUTE1", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTE1() As ROUTE
		Get
			Return Me._ROUTE1.Entity
		End Get
		Set
			Dim previousValue As ROUTE = Me._ROUTE1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTE1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTE1.Entity = Nothing
					previousValue.ORDERS_FFAs1.Remove(Me)
				End If
				Me._ROUTE1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFAs1.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTE1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESK_ORDERS_FFA", Storage:="_ACCOUNT_DESK", ThisKey:="INFORM_DESK_ID", OtherKey:="ACCOUNT_DESK_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT_DESK() As ACCOUNT_DESK
		Get
			Return Me._ACCOUNT_DESK.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT_DESK = Me._ACCOUNT_DESK.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT_DESK.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT_DESK.Entity = Nothing
					previousValue.ORDERS_FFAs.Remove(Me)
				End If
				Me._ACCOUNT_DESK.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFAs.Add(Me)
					Me._INFORM_DESK_ID = value.ACCOUNT_DESK_ID
				Else
					Me._INFORM_DESK_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ACCOUNT_DESK")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADER_ORDERS_FFA", Storage:="_DESK_TRADER", ThisKey:="LOCK_DESK_TRADER_ID", OtherKey:="DESK_TRADER_ID", IsForeignKey:=true)>  _
	Public Property DESK_TRADER() As DESK_TRADER
		Get
			Return Me._DESK_TRADER.Entity
		End Get
		Set
			Dim previousValue As DESK_TRADER = Me._DESK_TRADER.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DESK_TRADER.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DESK_TRADER.Entity = Nothing
					previousValue.ORDERS_FFAs.Remove(Me)
				End If
				Me._DESK_TRADER.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFAs.Add(Me)
					Me._LOCK_DESK_TRADER_ID = value.DESK_TRADER_ID
				Else
					Me._LOCK_DESK_TRADER_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("DESK_TRADER")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADER_ORDERS_FFA1", Storage:="_DESK_TRADER1", ThisKey:="DESK_TRADER_ID", OtherKey:="DESK_TRADER_ID", IsForeignKey:=true)>  _
	Public Property DESK_TRADER1() As DESK_TRADER
		Get
			Return Me._DESK_TRADER1.Entity
		End Get
		Set
			Dim previousValue As DESK_TRADER = Me._DESK_TRADER1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DESK_TRADER1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DESK_TRADER1.Entity = Nothing
					previousValue.ORDERS_FFAs1.Remove(Me)
				End If
				Me._DESK_TRADER1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFAs1.Add(Me)
					Me._DESK_TRADER_ID = value.DESK_TRADER_ID
				Else
					Me._DESK_TRADER_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DESK_TRADER1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADER_ORDERS_FFA2", Storage:="_DESK_TRADER2", ThisKey:="FOR_DESK_TRADER_ID", OtherKey:="DESK_TRADER_ID", IsForeignKey:=true)>  _
	Public Property DESK_TRADER2() As DESK_TRADER
		Get
			Return Me._DESK_TRADER2.Entity
		End Get
		Set
			Dim previousValue As DESK_TRADER = Me._DESK_TRADER2.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DESK_TRADER2.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DESK_TRADER2.Entity = Nothing
					previousValue.ORDERS_FFAs2.Remove(Me)
				End If
				Me._DESK_TRADER2.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFAs2.Add(Me)
					Me._FOR_DESK_TRADER_ID = value.DESK_TRADER_ID
				Else
					Me._FOR_DESK_TRADER_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DESK_TRADER2")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_ORDERS_FFA", Storage:="_ACCOUNT", ThisKey:="CLEARER_ID", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT() As ACCOUNT
		Get
			Return Me._ACCOUNT.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT = Me._ACCOUNT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT.Entity = Nothing
					previousValue.ORDERS_FFAs.Remove(Me)
				End If
				Me._ACCOUNT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDERS_FFAs.Add(Me)
					Me._CLEARER_ID = value.ACCOUNT_ID
				Else
					Me._CLEARER_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ACCOUNT")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ORDERS_FFA_EXCHANGEs(ByVal entity As ORDERS_FFA_EXCHANGE)
		Me.SendPropertyChanging
		entity.ORDERS_FFA = Me
	End Sub
	
	Private Sub detach_ORDERS_FFA_EXCHANGEs(ByVal entity As ORDERS_FFA_EXCHANGE)
		Me.SendPropertyChanging
		entity.ORDERS_FFA = Nothing
	End Sub
	
	Private Sub attach_TRADES_FFAs(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA = Me
	End Sub
	
	Private Sub detach_TRADES_FFAs(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA = Nothing
	End Sub
	
	Private Sub attach_TRADES_FFAs1(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA1 = Me
	End Sub
	
	Private Sub detach_TRADES_FFAs1(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA1 = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFAs(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA = Me
	End Sub
	
	Private Sub detach_ORDERS_FFAs(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFAs1(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA1 = Me
	End Sub
	
	Private Sub detach_ORDERS_FFAs1(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA1 = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFAs2(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA2 = Me
	End Sub
	
	Private Sub detach_ORDERS_FFAs2(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA2 = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFAs3(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA3 = Me
	End Sub
	
	Private Sub detach_ORDERS_FFAs3(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA3 = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFAs4(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA4 = Me
	End Sub
	
	Private Sub detach_ORDERS_FFAs4(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA4 = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFAs5(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA5 = Me
	End Sub
	
	Private Sub detach_ORDERS_FFAs5(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA5 = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFAs6(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA6 = Me
	End Sub
	
	Private Sub detach_ORDERS_FFAs6(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA6 = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFAs7(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA7 = Me
	End Sub
	
	Private Sub detach_ORDERS_FFAs7(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ORDERS_FFA7 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ACCOUNT_DESKS")>  _
Partial Public Class ACCOUNT_DESK
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ACCOUNT_DESK_ID As Integer
	
	Private _ACCOUNT_ID As Integer
	
	Private _DESK_DESCR As String
	
	Private _DESK_QUALIFIER As Short
	
	Private _DESK_ACTIVE As Boolean
	
	Private _SEE_OTHER_DESKS As Boolean
	
	Private _AMMEND_OTHER_DESKS As Boolean
	
	Private _CLEARED_SHOW_NAME As Short
	
	Private _OTC_SHOW_NAME As Short
	
	Private _SUSPENDED As Boolean
	
	Private _LOST_CONNECTION As Short
	
	Private _WAIT_CONNECTION As Short
	
	Private _DEFAULT_NUKE As Short
	
	Private _DEFAULT_SEE As Boolean
	
	Private _DEFAULT_BI As Boolean
	
	Private _BROKER_DESK_TRADE_CLASSes As EntitySet(Of BROKER_DESK_TRADE_CLASS)
	
	Private _COUNTERPARTY_LIMITs As EntitySet(Of COUNTERPARTY_LIMIT)
	
	Private _COUNTERPARTY_LIMITs1 As EntitySet(Of COUNTERPARTY_LIMIT)
	
	Private _DESK_TRADE_CONFOs As EntitySet(Of DESK_TRADE_CONFO)
	
	Private _ORDERS_FFA_SPREADs As EntitySet(Of ORDERS_FFA_SPREAD)
	
	Private _TRADES_FFAs As EntitySet(Of TRADES_FFA)
	
	Private _TRADES_FFAs1 As EntitySet(Of TRADES_FFA)
	
	Private _ORDERS_FFAs As EntitySet(Of ORDERS_FFA)
	
	Private _DESK_TRADERs As EntitySet(Of DESK_TRADER)
	
	Private _DESK_TRADE_CLASSes As EntitySet(Of DESK_TRADE_CLASS)
	
	Private _DESK_QUALIFIER1 As EntityRef(Of DESK_QUALIFIER)
	
	Private _SHOW_NAME_TYPE As EntityRef(Of SHOW_NAME_TYPE)
	
	Private _SHOW_NAME_TYPE1 As EntityRef(Of SHOW_NAME_TYPE)
	
	Private _ACCOUNT As EntityRef(Of ACCOUNT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnACCOUNT_DESK_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_DESK_IDChanged()
    End Sub
    Partial Private Sub OnACCOUNT_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_IDChanged()
    End Sub
    Partial Private Sub OnDESK_DESCRChanging(value As String)
    End Sub
    Partial Private Sub OnDESK_DESCRChanged()
    End Sub
    Partial Private Sub OnDESK_QUALIFIERChanging(value As Short)
    End Sub
    Partial Private Sub OnDESK_QUALIFIERChanged()
    End Sub
    Partial Private Sub OnDESK_ACTIVEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnDESK_ACTIVEChanged()
    End Sub
    Partial Private Sub OnSEE_OTHER_DESKSChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSEE_OTHER_DESKSChanged()
    End Sub
    Partial Private Sub OnAMMEND_OTHER_DESKSChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAMMEND_OTHER_DESKSChanged()
    End Sub
    Partial Private Sub OnCLEARED_SHOW_NAMEChanging(value As Short)
    End Sub
    Partial Private Sub OnCLEARED_SHOW_NAMEChanged()
    End Sub
    Partial Private Sub OnOTC_SHOW_NAMEChanging(value As Short)
    End Sub
    Partial Private Sub OnOTC_SHOW_NAMEChanged()
    End Sub
    Partial Private Sub OnSUSPENDEDChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSUSPENDEDChanged()
    End Sub
    Partial Private Sub OnLOST_CONNECTIONChanging(value As Short)
    End Sub
    Partial Private Sub OnLOST_CONNECTIONChanged()
    End Sub
    Partial Private Sub OnWAIT_CONNECTIONChanging(value As Short)
    End Sub
    Partial Private Sub OnWAIT_CONNECTIONChanged()
    End Sub
    Partial Private Sub OnDEFAULT_NUKEChanging(value As Short)
    End Sub
    Partial Private Sub OnDEFAULT_NUKEChanged()
    End Sub
    Partial Private Sub OnDEFAULT_SEEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnDEFAULT_SEEChanged()
    End Sub
    Partial Private Sub OnDEFAULT_BIChanging(value As Boolean)
    End Sub
    Partial Private Sub OnDEFAULT_BIChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BROKER_DESK_TRADE_CLASSes = New EntitySet(Of BROKER_DESK_TRADE_CLASS)(AddressOf Me.attach_BROKER_DESK_TRADE_CLASSes, AddressOf Me.detach_BROKER_DESK_TRADE_CLASSes)
		Me._COUNTERPARTY_LIMITs = New EntitySet(Of COUNTERPARTY_LIMIT)(AddressOf Me.attach_COUNTERPARTY_LIMITs, AddressOf Me.detach_COUNTERPARTY_LIMITs)
		Me._COUNTERPARTY_LIMITs1 = New EntitySet(Of COUNTERPARTY_LIMIT)(AddressOf Me.attach_COUNTERPARTY_LIMITs1, AddressOf Me.detach_COUNTERPARTY_LIMITs1)
		Me._DESK_TRADE_CONFOs = New EntitySet(Of DESK_TRADE_CONFO)(AddressOf Me.attach_DESK_TRADE_CONFOs, AddressOf Me.detach_DESK_TRADE_CONFOs)
		Me._ORDERS_FFA_SPREADs = New EntitySet(Of ORDERS_FFA_SPREAD)(AddressOf Me.attach_ORDERS_FFA_SPREADs, AddressOf Me.detach_ORDERS_FFA_SPREADs)
		Me._TRADES_FFAs = New EntitySet(Of TRADES_FFA)(AddressOf Me.attach_TRADES_FFAs, AddressOf Me.detach_TRADES_FFAs)
		Me._TRADES_FFAs1 = New EntitySet(Of TRADES_FFA)(AddressOf Me.attach_TRADES_FFAs1, AddressOf Me.detach_TRADES_FFAs1)
		Me._ORDERS_FFAs = New EntitySet(Of ORDERS_FFA)(AddressOf Me.attach_ORDERS_FFAs, AddressOf Me.detach_ORDERS_FFAs)
		Me._DESK_TRADERs = New EntitySet(Of DESK_TRADER)(AddressOf Me.attach_DESK_TRADERs, AddressOf Me.detach_DESK_TRADERs)
		Me._DESK_TRADE_CLASSes = New EntitySet(Of DESK_TRADE_CLASS)(AddressOf Me.attach_DESK_TRADE_CLASSes, AddressOf Me.detach_DESK_TRADE_CLASSes)
		Me._DESK_QUALIFIER1 = CType(Nothing, EntityRef(Of DESK_QUALIFIER))
		Me._SHOW_NAME_TYPE = CType(Nothing, EntityRef(Of SHOW_NAME_TYPE))
		Me._SHOW_NAME_TYPE1 = CType(Nothing, EntityRef(Of SHOW_NAME_TYPE))
		Me._ACCOUNT = CType(Nothing, EntityRef(Of ACCOUNT))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_DESK_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ACCOUNT_DESK_ID() As Integer
		Get
			Return Me._ACCOUNT_DESK_ID
		End Get
		Set
			If ((Me._ACCOUNT_DESK_ID = value)  _
						= false) Then
				Me.OnACCOUNT_DESK_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_DESK_ID = value
				Me.SendPropertyChanged("ACCOUNT_DESK_ID")
				Me.OnACCOUNT_DESK_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_ID", DbType:="Int NOT NULL")>  _
	Public Property ACCOUNT_ID() As Integer
		Get
			Return Me._ACCOUNT_ID
		End Get
		Set
			If ((Me._ACCOUNT_ID = value)  _
						= false) Then
				If Me._ACCOUNT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACCOUNT_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_ID = value
				Me.SendPropertyChanged("ACCOUNT_ID")
				Me.OnACCOUNT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_DESCR", DbType:="NVarChar(50)")>  _
	Public Property DESK_DESCR() As String
		Get
			Return Me._DESK_DESCR
		End Get
		Set
			If (String.Equals(Me._DESK_DESCR, value) = false) Then
				Me.OnDESK_DESCRChanging(value)
				Me.SendPropertyChanging
				Me._DESK_DESCR = value
				Me.SendPropertyChanged("DESK_DESCR")
				Me.OnDESK_DESCRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_QUALIFIER", DbType:="SmallInt NOT NULL")>  _
	Public Property DESK_QUALIFIER() As Short
		Get
			Return Me._DESK_QUALIFIER
		End Get
		Set
			If ((Me._DESK_QUALIFIER = value)  _
						= false) Then
				If Me._DESK_QUALIFIER1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDESK_QUALIFIERChanging(value)
				Me.SendPropertyChanging
				Me._DESK_QUALIFIER = value
				Me.SendPropertyChanged("DESK_QUALIFIER")
				Me.OnDESK_QUALIFIERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_ACTIVE", DbType:="Bit NOT NULL")>  _
	Public Property DESK_ACTIVE() As Boolean
		Get
			Return Me._DESK_ACTIVE
		End Get
		Set
			If ((Me._DESK_ACTIVE = value)  _
						= false) Then
				Me.OnDESK_ACTIVEChanging(value)
				Me.SendPropertyChanging
				Me._DESK_ACTIVE = value
				Me.SendPropertyChanged("DESK_ACTIVE")
				Me.OnDESK_ACTIVEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SEE_OTHER_DESKS", DbType:="Bit NOT NULL")>  _
	Public Property SEE_OTHER_DESKS() As Boolean
		Get
			Return Me._SEE_OTHER_DESKS
		End Get
		Set
			If ((Me._SEE_OTHER_DESKS = value)  _
						= false) Then
				Me.OnSEE_OTHER_DESKSChanging(value)
				Me.SendPropertyChanging
				Me._SEE_OTHER_DESKS = value
				Me.SendPropertyChanged("SEE_OTHER_DESKS")
				Me.OnSEE_OTHER_DESKSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AMMEND_OTHER_DESKS", DbType:="Bit NOT NULL")>  _
	Public Property AMMEND_OTHER_DESKS() As Boolean
		Get
			Return Me._AMMEND_OTHER_DESKS
		End Get
		Set
			If ((Me._AMMEND_OTHER_DESKS = value)  _
						= false) Then
				Me.OnAMMEND_OTHER_DESKSChanging(value)
				Me.SendPropertyChanging
				Me._AMMEND_OTHER_DESKS = value
				Me.SendPropertyChanged("AMMEND_OTHER_DESKS")
				Me.OnAMMEND_OTHER_DESKSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLEARED_SHOW_NAME", DbType:="SmallInt NOT NULL")>  _
	Public Property CLEARED_SHOW_NAME() As Short
		Get
			Return Me._CLEARED_SHOW_NAME
		End Get
		Set
			If ((Me._CLEARED_SHOW_NAME = value)  _
						= false) Then
				If Me._SHOW_NAME_TYPE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCLEARED_SHOW_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._CLEARED_SHOW_NAME = value
				Me.SendPropertyChanged("CLEARED_SHOW_NAME")
				Me.OnCLEARED_SHOW_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OTC_SHOW_NAME", DbType:="SmallInt NOT NULL")>  _
	Public Property OTC_SHOW_NAME() As Short
		Get
			Return Me._OTC_SHOW_NAME
		End Get
		Set
			If ((Me._OTC_SHOW_NAME = value)  _
						= false) Then
				If Me._SHOW_NAME_TYPE1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnOTC_SHOW_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._OTC_SHOW_NAME = value
				Me.SendPropertyChanged("OTC_SHOW_NAME")
				Me.OnOTC_SHOW_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SUSPENDED", DbType:="Bit NOT NULL")>  _
	Public Property SUSPENDED() As Boolean
		Get
			Return Me._SUSPENDED
		End Get
		Set
			If ((Me._SUSPENDED = value)  _
						= false) Then
				Me.OnSUSPENDEDChanging(value)
				Me.SendPropertyChanging
				Me._SUSPENDED = value
				Me.SendPropertyChanged("SUSPENDED")
				Me.OnSUSPENDEDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOST_CONNECTION", DbType:="SmallInt NOT NULL")>  _
	Public Property LOST_CONNECTION() As Short
		Get
			Return Me._LOST_CONNECTION
		End Get
		Set
			If ((Me._LOST_CONNECTION = value)  _
						= false) Then
				Me.OnLOST_CONNECTIONChanging(value)
				Me.SendPropertyChanging
				Me._LOST_CONNECTION = value
				Me.SendPropertyChanged("LOST_CONNECTION")
				Me.OnLOST_CONNECTIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WAIT_CONNECTION", DbType:="SmallInt NOT NULL")>  _
	Public Property WAIT_CONNECTION() As Short
		Get
			Return Me._WAIT_CONNECTION
		End Get
		Set
			If ((Me._WAIT_CONNECTION = value)  _
						= false) Then
				Me.OnWAIT_CONNECTIONChanging(value)
				Me.SendPropertyChanging
				Me._WAIT_CONNECTION = value
				Me.SendPropertyChanged("WAIT_CONNECTION")
				Me.OnWAIT_CONNECTIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEFAULT_NUKE", DbType:="SmallInt NOT NULL")>  _
	Public Property DEFAULT_NUKE() As Short
		Get
			Return Me._DEFAULT_NUKE
		End Get
		Set
			If ((Me._DEFAULT_NUKE = value)  _
						= false) Then
				Me.OnDEFAULT_NUKEChanging(value)
				Me.SendPropertyChanging
				Me._DEFAULT_NUKE = value
				Me.SendPropertyChanged("DEFAULT_NUKE")
				Me.OnDEFAULT_NUKEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEFAULT_SEE", DbType:="Bit NOT NULL")>  _
	Public Property DEFAULT_SEE() As Boolean
		Get
			Return Me._DEFAULT_SEE
		End Get
		Set
			If ((Me._DEFAULT_SEE = value)  _
						= false) Then
				Me.OnDEFAULT_SEEChanging(value)
				Me.SendPropertyChanging
				Me._DEFAULT_SEE = value
				Me.SendPropertyChanged("DEFAULT_SEE")
				Me.OnDEFAULT_SEEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEFAULT_BI", DbType:="Bit NOT NULL")>  _
	Public Property DEFAULT_BI() As Boolean
		Get
			Return Me._DEFAULT_BI
		End Get
		Set
			If ((Me._DEFAULT_BI = value)  _
						= false) Then
				Me.OnDEFAULT_BIChanging(value)
				Me.SendPropertyChanging
				Me._DEFAULT_BI = value
				Me.SendPropertyChanged("DEFAULT_BI")
				Me.OnDEFAULT_BIChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESK_BROKER_DESK_TRADE_CLASS", Storage:="_BROKER_DESK_TRADE_CLASSes", ThisKey:="ACCOUNT_DESK_ID", OtherKey:="ACCOUNT_DESK_ID")>  _
	Public Property BROKER_DESK_TRADE_CLASSes() As EntitySet(Of BROKER_DESK_TRADE_CLASS)
		Get
			Return Me._BROKER_DESK_TRADE_CLASSes
		End Get
		Set
			Me._BROKER_DESK_TRADE_CLASSes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESK_COUNTERPARTY_LIMIT", Storage:="_COUNTERPARTY_LIMITs", ThisKey:="ACCOUNT_DESK_ID", OtherKey:="PRI_ACCOUNT_DESK_ID")>  _
	Public Property COUNTERPARTY_LIMITs() As EntitySet(Of COUNTERPARTY_LIMIT)
		Get
			Return Me._COUNTERPARTY_LIMITs
		End Get
		Set
			Me._COUNTERPARTY_LIMITs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESK_COUNTERPARTY_LIMIT1", Storage:="_COUNTERPARTY_LIMITs1", ThisKey:="ACCOUNT_DESK_ID", OtherKey:="SEC_ACCOUNT_DESK_ID")>  _
	Public Property COUNTERPARTY_LIMITs1() As EntitySet(Of COUNTERPARTY_LIMIT)
		Get
			Return Me._COUNTERPARTY_LIMITs1
		End Get
		Set
			Me._COUNTERPARTY_LIMITs1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESK_DESK_TRADE_CONFO", Storage:="_DESK_TRADE_CONFOs", ThisKey:="ACCOUNT_DESK_ID", OtherKey:="ACCOUNT_DESK_ID")>  _
	Public Property DESK_TRADE_CONFOs() As EntitySet(Of DESK_TRADE_CONFO)
		Get
			Return Me._DESK_TRADE_CONFOs
		End Get
		Set
			Me._DESK_TRADE_CONFOs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESK_ORDERS_FFA_SPREAD", Storage:="_ORDERS_FFA_SPREADs", ThisKey:="ACCOUNT_DESK_ID", OtherKey:="INFORM_DESK_ID")>  _
	Public Property ORDERS_FFA_SPREADs() As EntitySet(Of ORDERS_FFA_SPREAD)
		Get
			Return Me._ORDERS_FFA_SPREADs
		End Get
		Set
			Me._ORDERS_FFA_SPREADs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESK_TRADES_FFA", Storage:="_TRADES_FFAs", ThisKey:="ACCOUNT_DESK_ID", OtherKey:="INFORM_DESK_ID1")>  _
	Public Property TRADES_FFAs() As EntitySet(Of TRADES_FFA)
		Get
			Return Me._TRADES_FFAs
		End Get
		Set
			Me._TRADES_FFAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESK_TRADES_FFA1", Storage:="_TRADES_FFAs1", ThisKey:="ACCOUNT_DESK_ID", OtherKey:="INFORM_DESK_ID2")>  _
	Public Property TRADES_FFAs1() As EntitySet(Of TRADES_FFA)
		Get
			Return Me._TRADES_FFAs1
		End Get
		Set
			Me._TRADES_FFAs1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESK_ORDERS_FFA", Storage:="_ORDERS_FFAs", ThisKey:="ACCOUNT_DESK_ID", OtherKey:="INFORM_DESK_ID")>  _
	Public Property ORDERS_FFAs() As EntitySet(Of ORDERS_FFA)
		Get
			Return Me._ORDERS_FFAs
		End Get
		Set
			Me._ORDERS_FFAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESK_DESK_TRADER", Storage:="_DESK_TRADERs", ThisKey:="ACCOUNT_DESK_ID", OtherKey:="ACCOUNT_DESK_ID")>  _
	Public Property DESK_TRADERs() As EntitySet(Of DESK_TRADER)
		Get
			Return Me._DESK_TRADERs
		End Get
		Set
			Me._DESK_TRADERs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESK_DESK_TRADE_CLASS", Storage:="_DESK_TRADE_CLASSes", ThisKey:="ACCOUNT_DESK_ID", OtherKey:="ACCOUNT_DESK_ID")>  _
	Public Property DESK_TRADE_CLASSes() As EntitySet(Of DESK_TRADE_CLASS)
		Get
			Return Me._DESK_TRADE_CLASSes
		End Get
		Set
			Me._DESK_TRADE_CLASSes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_QUALIFIER_ACCOUNT_DESK", Storage:="_DESK_QUALIFIER1", ThisKey:="DESK_QUALIFIER", OtherKey:="DESK_QUALIFIER", IsForeignKey:=true)>  _
	Public Property DESK_QUALIFIER1() As DESK_QUALIFIER
		Get
			Return Me._DESK_QUALIFIER1.Entity
		End Get
		Set
			Dim previousValue As DESK_QUALIFIER = Me._DESK_QUALIFIER1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DESK_QUALIFIER1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DESK_QUALIFIER1.Entity = Nothing
					previousValue.ACCOUNT_DESKs.Remove(Me)
				End If
				Me._DESK_QUALIFIER1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ACCOUNT_DESKs.Add(Me)
					Me._DESK_QUALIFIER = value.DESK_QUALIFIER
				Else
					Me._DESK_QUALIFIER = CType(Nothing, Short)
				End If
				Me.SendPropertyChanged("DESK_QUALIFIER1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SHOW_NAME_TYPE_ACCOUNT_DESK", Storage:="_SHOW_NAME_TYPE", ThisKey:="CLEARED_SHOW_NAME", OtherKey:="SHOW_NAME_ID", IsForeignKey:=true)>  _
	Public Property SHOW_NAME_TYPE() As SHOW_NAME_TYPE
		Get
			Return Me._SHOW_NAME_TYPE.Entity
		End Get
		Set
			Dim previousValue As SHOW_NAME_TYPE = Me._SHOW_NAME_TYPE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SHOW_NAME_TYPE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SHOW_NAME_TYPE.Entity = Nothing
					previousValue.ACCOUNT_DESKs.Remove(Me)
				End If
				Me._SHOW_NAME_TYPE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ACCOUNT_DESKs.Add(Me)
					Me._CLEARED_SHOW_NAME = value.SHOW_NAME_ID
				Else
					Me._CLEARED_SHOW_NAME = CType(Nothing, Short)
				End If
				Me.SendPropertyChanged("SHOW_NAME_TYPE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SHOW_NAME_TYPE_ACCOUNT_DESK1", Storage:="_SHOW_NAME_TYPE1", ThisKey:="OTC_SHOW_NAME", OtherKey:="SHOW_NAME_ID", IsForeignKey:=true)>  _
	Public Property SHOW_NAME_TYPE1() As SHOW_NAME_TYPE
		Get
			Return Me._SHOW_NAME_TYPE1.Entity
		End Get
		Set
			Dim previousValue As SHOW_NAME_TYPE = Me._SHOW_NAME_TYPE1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SHOW_NAME_TYPE1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SHOW_NAME_TYPE1.Entity = Nothing
					previousValue.ACCOUNT_DESKs1.Remove(Me)
				End If
				Me._SHOW_NAME_TYPE1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ACCOUNT_DESKs1.Add(Me)
					Me._OTC_SHOW_NAME = value.SHOW_NAME_ID
				Else
					Me._OTC_SHOW_NAME = CType(Nothing, Short)
				End If
				Me.SendPropertyChanged("SHOW_NAME_TYPE1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_ACCOUNT_DESK", Storage:="_ACCOUNT", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT() As ACCOUNT
		Get
			Return Me._ACCOUNT.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT = Me._ACCOUNT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT.Entity = Nothing
					previousValue.ACCOUNT_DESKs.Remove(Me)
				End If
				Me._ACCOUNT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ACCOUNT_DESKs.Add(Me)
					Me._ACCOUNT_ID = value.ACCOUNT_ID
				Else
					Me._ACCOUNT_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNT")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BROKER_DESK_TRADE_CLASSes(ByVal entity As BROKER_DESK_TRADE_CLASS)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESK = Me
	End Sub
	
	Private Sub detach_BROKER_DESK_TRADE_CLASSes(ByVal entity As BROKER_DESK_TRADE_CLASS)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESK = Nothing
	End Sub
	
	Private Sub attach_COUNTERPARTY_LIMITs(ByVal entity As COUNTERPARTY_LIMIT)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESK = Me
	End Sub
	
	Private Sub detach_COUNTERPARTY_LIMITs(ByVal entity As COUNTERPARTY_LIMIT)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESK = Nothing
	End Sub
	
	Private Sub attach_COUNTERPARTY_LIMITs1(ByVal entity As COUNTERPARTY_LIMIT)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESK1 = Me
	End Sub
	
	Private Sub detach_COUNTERPARTY_LIMITs1(ByVal entity As COUNTERPARTY_LIMIT)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESK1 = Nothing
	End Sub
	
	Private Sub attach_DESK_TRADE_CONFOs(ByVal entity As DESK_TRADE_CONFO)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESK = Me
	End Sub
	
	Private Sub detach_DESK_TRADE_CONFOs(ByVal entity As DESK_TRADE_CONFO)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESK = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFA_SPREADs(ByVal entity As ORDERS_FFA_SPREAD)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESK = Me
	End Sub
	
	Private Sub detach_ORDERS_FFA_SPREADs(ByVal entity As ORDERS_FFA_SPREAD)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESK = Nothing
	End Sub
	
	Private Sub attach_TRADES_FFAs(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESK = Me
	End Sub
	
	Private Sub detach_TRADES_FFAs(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESK = Nothing
	End Sub
	
	Private Sub attach_TRADES_FFAs1(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESK1 = Me
	End Sub
	
	Private Sub detach_TRADES_FFAs1(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESK1 = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFAs(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESK = Me
	End Sub
	
	Private Sub detach_ORDERS_FFAs(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESK = Nothing
	End Sub
	
	Private Sub attach_DESK_TRADERs(ByVal entity As DESK_TRADER)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESK = Me
	End Sub
	
	Private Sub detach_DESK_TRADERs(ByVal entity As DESK_TRADER)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESK = Nothing
	End Sub
	
	Private Sub attach_DESK_TRADE_CLASSes(ByVal entity As DESK_TRADE_CLASS)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESK = Me
	End Sub
	
	Private Sub detach_DESK_TRADE_CLASSes(ByVal entity As DESK_TRADE_CLASS)
		Me.SendPropertyChanging
		entity.ACCOUNT_DESK = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SERVER_INFO")>  _
Partial Public Class SERVER_INFO
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SERVER_ID As Integer
	
	Private _SERVER_ACTIVE As Boolean
	
	Private _LAST_CONNECTION_TIME As System.Nullable(Of Date)
	
	Private _SERVICE_ON As Boolean
	
	Private _SERVICE_OF_CONNECTED As Boolean
	
	Private _SERVICE_START_HOUR As Integer
	
	Private _SERVICE_END_HOUR As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSERVER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSERVER_IDChanged()
    End Sub
    Partial Private Sub OnSERVER_ACTIVEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSERVER_ACTIVEChanged()
    End Sub
    Partial Private Sub OnLAST_CONNECTION_TIMEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLAST_CONNECTION_TIMEChanged()
    End Sub
    Partial Private Sub OnSERVICE_ONChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSERVICE_ONChanged()
    End Sub
    Partial Private Sub OnSERVICE_OF_CONNECTEDChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSERVICE_OF_CONNECTEDChanged()
    End Sub
    Partial Private Sub OnSERVICE_START_HOURChanging(value As Integer)
    End Sub
    Partial Private Sub OnSERVICE_START_HOURChanged()
    End Sub
    Partial Private Sub OnSERVICE_END_HOURChanging(value As Integer)
    End Sub
    Partial Private Sub OnSERVICE_END_HOURChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SERVER_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SERVER_ID() As Integer
		Get
			Return Me._SERVER_ID
		End Get
		Set
			If ((Me._SERVER_ID = value)  _
						= false) Then
				Me.OnSERVER_IDChanging(value)
				Me.SendPropertyChanging
				Me._SERVER_ID = value
				Me.SendPropertyChanged("SERVER_ID")
				Me.OnSERVER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SERVER_ACTIVE", DbType:="Bit NOT NULL")>  _
	Public Property SERVER_ACTIVE() As Boolean
		Get
			Return Me._SERVER_ACTIVE
		End Get
		Set
			If ((Me._SERVER_ACTIVE = value)  _
						= false) Then
				Me.OnSERVER_ACTIVEChanging(value)
				Me.SendPropertyChanging
				Me._SERVER_ACTIVE = value
				Me.SendPropertyChanged("SERVER_ACTIVE")
				Me.OnSERVER_ACTIVEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LAST_CONNECTION_TIME", DbType:="DateTime2")>  _
	Public Property LAST_CONNECTION_TIME() As System.Nullable(Of Date)
		Get
			Return Me._LAST_CONNECTION_TIME
		End Get
		Set
			If (Me._LAST_CONNECTION_TIME.Equals(value) = false) Then
				Me.OnLAST_CONNECTION_TIMEChanging(value)
				Me.SendPropertyChanging
				Me._LAST_CONNECTION_TIME = value
				Me.SendPropertyChanged("LAST_CONNECTION_TIME")
				Me.OnLAST_CONNECTION_TIMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SERVICE_ON", DbType:="Bit NOT NULL")>  _
	Public Property SERVICE_ON() As Boolean
		Get
			Return Me._SERVICE_ON
		End Get
		Set
			If ((Me._SERVICE_ON = value)  _
						= false) Then
				Me.OnSERVICE_ONChanging(value)
				Me.SendPropertyChanging
				Me._SERVICE_ON = value
				Me.SendPropertyChanged("SERVICE_ON")
				Me.OnSERVICE_ONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SERVICE_OF_CONNECTED", DbType:="Bit NOT NULL")>  _
	Public Property SERVICE_OF_CONNECTED() As Boolean
		Get
			Return Me._SERVICE_OF_CONNECTED
		End Get
		Set
			If ((Me._SERVICE_OF_CONNECTED = value)  _
						= false) Then
				Me.OnSERVICE_OF_CONNECTEDChanging(value)
				Me.SendPropertyChanging
				Me._SERVICE_OF_CONNECTED = value
				Me.SendPropertyChanged("SERVICE_OF_CONNECTED")
				Me.OnSERVICE_OF_CONNECTEDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SERVICE_START_HOUR", DbType:="Int NOT NULL")>  _
	Public Property SERVICE_START_HOUR() As Integer
		Get
			Return Me._SERVICE_START_HOUR
		End Get
		Set
			If ((Me._SERVICE_START_HOUR = value)  _
						= false) Then
				Me.OnSERVICE_START_HOURChanging(value)
				Me.SendPropertyChanging
				Me._SERVICE_START_HOUR = value
				Me.SendPropertyChanged("SERVICE_START_HOUR")
				Me.OnSERVICE_START_HOURChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SERVICE_END_HOUR", DbType:="Int NOT NULL")>  _
	Public Property SERVICE_END_HOUR() As Integer
		Get
			Return Me._SERVICE_END_HOUR
		End Get
		Set
			If ((Me._SERVICE_END_HOUR = value)  _
						= false) Then
				Me.OnSERVICE_END_HOURChanging(value)
				Me.SendPropertyChanging
				Me._SERVICE_END_HOUR = value
				Me.SendPropertyChanged("SERVICE_END_HOUR")
				Me.OnSERVICE_END_HOURChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DESK_TRADERS")>  _
Partial Public Class DESK_TRADER
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DESK_TRADER_ID As Integer
	
	Private _ACCOUNT_DESK_ID As Integer
	
	Private _ACCOUNT_ID As Integer
	
	Private _CONTACT_ID As Integer
	
	Private _AUTHORISED As Boolean
	
	Private _AUTHORISATION_RECEIVED As Boolean
	
	Private _RECEIVED_WHEN As System.Nullable(Of Date)
	
	Private _EXPIRES_WHEN As System.Nullable(Of Date)
	
	Private _TRADE_AUTHORITY As Short
	
	Private _USERNAME As String
	
	Private _PASSWORD As String
	
	Private _EXPIRED As Boolean
	
	Private _OF_ID As String
	
	Private _OF_PASSWORD As String
	
	Private _IS_DESK_ADMIN As Boolean
	
	Private _SUSPENDED As Boolean
	
	Private _TOOLBAR_SHOW As Boolean
	
	Private _DEFAULT_MARKET As Char
	
	Private _DEFAULT_SHOW_NAMES As Boolean
	
	Private _GRID_MARKET_DEPTH As Integer
	
	Private _BID_COLOR As Integer
	
	Private _OFFER_COLOR As Integer
	
	Private _FONT_TYPE As Short
	
	Private _CHANGE_PSW As Boolean
	
	Private _AGREES_TO_STATEMENT As Boolean
	
	Private _INDICATIVES_VISIBLE As Boolean
	
	Private _ONE_CLICK_HIT As Boolean
	
	Private _DESK_TRADER_VOICEs As EntitySet(Of DESK_TRADER_VOICE)
	
	Private _DESK_TRADERS_IM_SUBSCRIPTIONs As EntitySet(Of DESK_TRADERS_IM_SUBSCRIPTION)
	
	Private _IM_CLIENTs As EntitySet(Of IM_CLIENT)
	
	Private _LAYOUTs As EntitySet(Of LAYOUT)
	
	Private _ORDERS_FFA_SPREADs As EntitySet(Of ORDERS_FFA_SPREAD)
	
	Private _ORDERS_FFA_SPREADs1 As EntitySet(Of ORDERS_FFA_SPREAD)
	
	Private _ORDERS_FFA_SPREADs2 As EntitySet(Of ORDERS_FFA_SPREAD)
	
	Private _TRADES_FFAs As EntitySet(Of TRADES_FFA)
	
	Private _TRADES_FFAs1 As EntitySet(Of TRADES_FFA)
	
	Private _ORDERS_FFAs As EntitySet(Of ORDERS_FFA)
	
	Private _ORDERS_FFAs1 As EntitySet(Of ORDERS_FFA)
	
	Private _ORDERS_FFAs2 As EntitySet(Of ORDERS_FFA)
	
	Private _ACCOUNT_DESK As EntityRef(Of ACCOUNT_DESK)
	
	Private _CONTACT As EntityRef(Of CONTACT)
	
	Private _TRADE_AUTHORITy1 As EntityRef(Of TRADE_AUTHORITy)
	
	Private _TRADE_CLASS As EntityRef(Of TRADE_CLASS)
	
	Private _ACCOUNT As EntityRef(Of ACCOUNT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDESK_TRADER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDESK_TRADER_IDChanged()
    End Sub
    Partial Private Sub OnACCOUNT_DESK_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_DESK_IDChanged()
    End Sub
    Partial Private Sub OnACCOUNT_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_IDChanged()
    End Sub
    Partial Private Sub OnCONTACT_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCONTACT_IDChanged()
    End Sub
    Partial Private Sub OnAUTHORISEDChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAUTHORISEDChanged()
    End Sub
    Partial Private Sub OnAUTHORISATION_RECEIVEDChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAUTHORISATION_RECEIVEDChanged()
    End Sub
    Partial Private Sub OnRECEIVED_WHENChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnRECEIVED_WHENChanged()
    End Sub
    Partial Private Sub OnEXPIRES_WHENChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEXPIRES_WHENChanged()
    End Sub
    Partial Private Sub OnTRADE_AUTHORITYChanging(value As Short)
    End Sub
    Partial Private Sub OnTRADE_AUTHORITYChanged()
    End Sub
    Partial Private Sub OnUSERNAMEChanging(value As String)
    End Sub
    Partial Private Sub OnUSERNAMEChanged()
    End Sub
    Partial Private Sub OnPASSWORDChanging(value As String)
    End Sub
    Partial Private Sub OnPASSWORDChanged()
    End Sub
    Partial Private Sub OnEXPIREDChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEXPIREDChanged()
    End Sub
    Partial Private Sub OnOF_IDChanging(value As String)
    End Sub
    Partial Private Sub OnOF_IDChanged()
    End Sub
    Partial Private Sub OnOF_PASSWORDChanging(value As String)
    End Sub
    Partial Private Sub OnOF_PASSWORDChanged()
    End Sub
    Partial Private Sub OnIS_DESK_ADMINChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIS_DESK_ADMINChanged()
    End Sub
    Partial Private Sub OnSUSPENDEDChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSUSPENDEDChanged()
    End Sub
    Partial Private Sub OnTOOLBAR_SHOWChanging(value As Boolean)
    End Sub
    Partial Private Sub OnTOOLBAR_SHOWChanged()
    End Sub
    Partial Private Sub OnDEFAULT_MARKETChanging(value As Char)
    End Sub
    Partial Private Sub OnDEFAULT_MARKETChanged()
    End Sub
    Partial Private Sub OnDEFAULT_SHOW_NAMESChanging(value As Boolean)
    End Sub
    Partial Private Sub OnDEFAULT_SHOW_NAMESChanged()
    End Sub
    Partial Private Sub OnGRID_MARKET_DEPTHChanging(value As Integer)
    End Sub
    Partial Private Sub OnGRID_MARKET_DEPTHChanged()
    End Sub
    Partial Private Sub OnBID_COLORChanging(value As Integer)
    End Sub
    Partial Private Sub OnBID_COLORChanged()
    End Sub
    Partial Private Sub OnOFFER_COLORChanging(value As Integer)
    End Sub
    Partial Private Sub OnOFFER_COLORChanged()
    End Sub
    Partial Private Sub OnFONT_TYPEChanging(value As Short)
    End Sub
    Partial Private Sub OnFONT_TYPEChanged()
    End Sub
    Partial Private Sub OnCHANGE_PSWChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCHANGE_PSWChanged()
    End Sub
    Partial Private Sub OnAGREES_TO_STATEMENTChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAGREES_TO_STATEMENTChanged()
    End Sub
    Partial Private Sub OnINDICATIVES_VISIBLEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnINDICATIVES_VISIBLEChanged()
    End Sub
    Partial Private Sub OnONE_CLICK_HITChanging(value As Boolean)
    End Sub
    Partial Private Sub OnONE_CLICK_HITChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DESK_TRADER_VOICEs = New EntitySet(Of DESK_TRADER_VOICE)(AddressOf Me.attach_DESK_TRADER_VOICEs, AddressOf Me.detach_DESK_TRADER_VOICEs)
		Me._DESK_TRADERS_IM_SUBSCRIPTIONs = New EntitySet(Of DESK_TRADERS_IM_SUBSCRIPTION)(AddressOf Me.attach_DESK_TRADERS_IM_SUBSCRIPTIONs, AddressOf Me.detach_DESK_TRADERS_IM_SUBSCRIPTIONs)
		Me._IM_CLIENTs = New EntitySet(Of IM_CLIENT)(AddressOf Me.attach_IM_CLIENTs, AddressOf Me.detach_IM_CLIENTs)
		Me._LAYOUTs = New EntitySet(Of LAYOUT)(AddressOf Me.attach_LAYOUTs, AddressOf Me.detach_LAYOUTs)
		Me._ORDERS_FFA_SPREADs = New EntitySet(Of ORDERS_FFA_SPREAD)(AddressOf Me.attach_ORDERS_FFA_SPREADs, AddressOf Me.detach_ORDERS_FFA_SPREADs)
		Me._ORDERS_FFA_SPREADs1 = New EntitySet(Of ORDERS_FFA_SPREAD)(AddressOf Me.attach_ORDERS_FFA_SPREADs1, AddressOf Me.detach_ORDERS_FFA_SPREADs1)
		Me._ORDERS_FFA_SPREADs2 = New EntitySet(Of ORDERS_FFA_SPREAD)(AddressOf Me.attach_ORDERS_FFA_SPREADs2, AddressOf Me.detach_ORDERS_FFA_SPREADs2)
		Me._TRADES_FFAs = New EntitySet(Of TRADES_FFA)(AddressOf Me.attach_TRADES_FFAs, AddressOf Me.detach_TRADES_FFAs)
		Me._TRADES_FFAs1 = New EntitySet(Of TRADES_FFA)(AddressOf Me.attach_TRADES_FFAs1, AddressOf Me.detach_TRADES_FFAs1)
		Me._ORDERS_FFAs = New EntitySet(Of ORDERS_FFA)(AddressOf Me.attach_ORDERS_FFAs, AddressOf Me.detach_ORDERS_FFAs)
		Me._ORDERS_FFAs1 = New EntitySet(Of ORDERS_FFA)(AddressOf Me.attach_ORDERS_FFAs1, AddressOf Me.detach_ORDERS_FFAs1)
		Me._ORDERS_FFAs2 = New EntitySet(Of ORDERS_FFA)(AddressOf Me.attach_ORDERS_FFAs2, AddressOf Me.detach_ORDERS_FFAs2)
		Me._ACCOUNT_DESK = CType(Nothing, EntityRef(Of ACCOUNT_DESK))
		Me._CONTACT = CType(Nothing, EntityRef(Of CONTACT))
		Me._TRADE_AUTHORITy1 = CType(Nothing, EntityRef(Of TRADE_AUTHORITy))
		Me._TRADE_CLASS = CType(Nothing, EntityRef(Of TRADE_CLASS))
		Me._ACCOUNT = CType(Nothing, EntityRef(Of ACCOUNT))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESK_TRADER_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DESK_TRADER_ID() As Integer
		Get
			Return Me._DESK_TRADER_ID
		End Get
		Set
			If ((Me._DESK_TRADER_ID = value)  _
						= false) Then
				Me.OnDESK_TRADER_IDChanging(value)
				Me.SendPropertyChanging
				Me._DESK_TRADER_ID = value
				Me.SendPropertyChanged("DESK_TRADER_ID")
				Me.OnDESK_TRADER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_DESK_ID", DbType:="Int NOT NULL")>  _
	Public Property ACCOUNT_DESK_ID() As Integer
		Get
			Return Me._ACCOUNT_DESK_ID
		End Get
		Set
			If ((Me._ACCOUNT_DESK_ID = value)  _
						= false) Then
				If Me._ACCOUNT_DESK.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACCOUNT_DESK_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_DESK_ID = value
				Me.SendPropertyChanged("ACCOUNT_DESK_ID")
				Me.OnACCOUNT_DESK_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_ID", DbType:="Int NOT NULL")>  _
	Public Property ACCOUNT_ID() As Integer
		Get
			Return Me._ACCOUNT_ID
		End Get
		Set
			If ((Me._ACCOUNT_ID = value)  _
						= false) Then
				If Me._ACCOUNT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACCOUNT_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_ID = value
				Me.SendPropertyChanged("ACCOUNT_ID")
				Me.OnACCOUNT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONTACT_ID", DbType:="Int NOT NULL")>  _
	Public Property CONTACT_ID() As Integer
		Get
			Return Me._CONTACT_ID
		End Get
		Set
			If ((Me._CONTACT_ID = value)  _
						= false) Then
				If Me._CONTACT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCONTACT_IDChanging(value)
				Me.SendPropertyChanging
				Me._CONTACT_ID = value
				Me.SendPropertyChanged("CONTACT_ID")
				Me.OnCONTACT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AUTHORISED", DbType:="Bit NOT NULL")>  _
	Public Property AUTHORISED() As Boolean
		Get
			Return Me._AUTHORISED
		End Get
		Set
			If ((Me._AUTHORISED = value)  _
						= false) Then
				Me.OnAUTHORISEDChanging(value)
				Me.SendPropertyChanging
				Me._AUTHORISED = value
				Me.SendPropertyChanged("AUTHORISED")
				Me.OnAUTHORISEDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AUTHORISATION_RECEIVED", DbType:="Bit NOT NULL")>  _
	Public Property AUTHORISATION_RECEIVED() As Boolean
		Get
			Return Me._AUTHORISATION_RECEIVED
		End Get
		Set
			If ((Me._AUTHORISATION_RECEIVED = value)  _
						= false) Then
				Me.OnAUTHORISATION_RECEIVEDChanging(value)
				Me.SendPropertyChanging
				Me._AUTHORISATION_RECEIVED = value
				Me.SendPropertyChanged("AUTHORISATION_RECEIVED")
				Me.OnAUTHORISATION_RECEIVEDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RECEIVED_WHEN", DbType:="DateTime")>  _
	Public Property RECEIVED_WHEN() As System.Nullable(Of Date)
		Get
			Return Me._RECEIVED_WHEN
		End Get
		Set
			If (Me._RECEIVED_WHEN.Equals(value) = false) Then
				Me.OnRECEIVED_WHENChanging(value)
				Me.SendPropertyChanging
				Me._RECEIVED_WHEN = value
				Me.SendPropertyChanged("RECEIVED_WHEN")
				Me.OnRECEIVED_WHENChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXPIRES_WHEN", DbType:="DateTime")>  _
	Public Property EXPIRES_WHEN() As System.Nullable(Of Date)
		Get
			Return Me._EXPIRES_WHEN
		End Get
		Set
			If (Me._EXPIRES_WHEN.Equals(value) = false) Then
				Me.OnEXPIRES_WHENChanging(value)
				Me.SendPropertyChanging
				Me._EXPIRES_WHEN = value
				Me.SendPropertyChanged("EXPIRES_WHEN")
				Me.OnEXPIRES_WHENChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_AUTHORITY", DbType:="SmallInt NOT NULL")>  _
	Public Property TRADE_AUTHORITY() As Short
		Get
			Return Me._TRADE_AUTHORITY
		End Get
		Set
			If ((Me._TRADE_AUTHORITY = value)  _
						= false) Then
				If Me._TRADE_AUTHORITy1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTRADE_AUTHORITYChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_AUTHORITY = value
				Me.SendPropertyChanged("TRADE_AUTHORITY")
				Me.OnTRADE_AUTHORITYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_USERNAME", DbType:="NVarChar(50)")>  _
	Public Property USERNAME() As String
		Get
			Return Me._USERNAME
		End Get
		Set
			If (String.Equals(Me._USERNAME, value) = false) Then
				Me.OnUSERNAMEChanging(value)
				Me.SendPropertyChanging
				Me._USERNAME = value
				Me.SendPropertyChanged("USERNAME")
				Me.OnUSERNAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PASSWORD", DbType:="NVarChar(50)")>  _
	Public Property PASSWORD() As String
		Get
			Return Me._PASSWORD
		End Get
		Set
			If (String.Equals(Me._PASSWORD, value) = false) Then
				Me.OnPASSWORDChanging(value)
				Me.SendPropertyChanging
				Me._PASSWORD = value
				Me.SendPropertyChanged("PASSWORD")
				Me.OnPASSWORDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXPIRED", DbType:="Bit NOT NULL")>  _
	Public Property EXPIRED() As Boolean
		Get
			Return Me._EXPIRED
		End Get
		Set
			If ((Me._EXPIRED = value)  _
						= false) Then
				Me.OnEXPIREDChanging(value)
				Me.SendPropertyChanging
				Me._EXPIRED = value
				Me.SendPropertyChanged("EXPIRED")
				Me.OnEXPIREDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OF_ID", DbType:="NVarChar(50)")>  _
	Public Property OF_ID() As String
		Get
			Return Me._OF_ID
		End Get
		Set
			If (String.Equals(Me._OF_ID, value) = false) Then
				Me.OnOF_IDChanging(value)
				Me.SendPropertyChanging
				Me._OF_ID = value
				Me.SendPropertyChanged("OF_ID")
				Me.OnOF_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OF_PASSWORD", DbType:="NVarChar(50)")>  _
	Public Property OF_PASSWORD() As String
		Get
			Return Me._OF_PASSWORD
		End Get
		Set
			If (String.Equals(Me._OF_PASSWORD, value) = false) Then
				Me.OnOF_PASSWORDChanging(value)
				Me.SendPropertyChanging
				Me._OF_PASSWORD = value
				Me.SendPropertyChanged("OF_PASSWORD")
				Me.OnOF_PASSWORDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IS_DESK_ADMIN", DbType:="Bit NOT NULL")>  _
	Public Property IS_DESK_ADMIN() As Boolean
		Get
			Return Me._IS_DESK_ADMIN
		End Get
		Set
			If ((Me._IS_DESK_ADMIN = value)  _
						= false) Then
				Me.OnIS_DESK_ADMINChanging(value)
				Me.SendPropertyChanging
				Me._IS_DESK_ADMIN = value
				Me.SendPropertyChanged("IS_DESK_ADMIN")
				Me.OnIS_DESK_ADMINChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SUSPENDED", DbType:="Bit NOT NULL")>  _
	Public Property SUSPENDED() As Boolean
		Get
			Return Me._SUSPENDED
		End Get
		Set
			If ((Me._SUSPENDED = value)  _
						= false) Then
				Me.OnSUSPENDEDChanging(value)
				Me.SendPropertyChanging
				Me._SUSPENDED = value
				Me.SendPropertyChanged("SUSPENDED")
				Me.OnSUSPENDEDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TOOLBAR_SHOW", DbType:="Bit NOT NULL")>  _
	Public Property TOOLBAR_SHOW() As Boolean
		Get
			Return Me._TOOLBAR_SHOW
		End Get
		Set
			If ((Me._TOOLBAR_SHOW = value)  _
						= false) Then
				Me.OnTOOLBAR_SHOWChanging(value)
				Me.SendPropertyChanging
				Me._TOOLBAR_SHOW = value
				Me.SendPropertyChanged("TOOLBAR_SHOW")
				Me.OnTOOLBAR_SHOWChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEFAULT_MARKET", DbType:="Char(1) NOT NULL")>  _
	Public Property DEFAULT_MARKET() As Char
		Get
			Return Me._DEFAULT_MARKET
		End Get
		Set
			If ((Me._DEFAULT_MARKET = value)  _
						= false) Then
				If Me._TRADE_CLASS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDEFAULT_MARKETChanging(value)
				Me.SendPropertyChanging
				Me._DEFAULT_MARKET = value
				Me.SendPropertyChanged("DEFAULT_MARKET")
				Me.OnDEFAULT_MARKETChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEFAULT_SHOW_NAMES", DbType:="Bit NOT NULL")>  _
	Public Property DEFAULT_SHOW_NAMES() As Boolean
		Get
			Return Me._DEFAULT_SHOW_NAMES
		End Get
		Set
			If ((Me._DEFAULT_SHOW_NAMES = value)  _
						= false) Then
				Me.OnDEFAULT_SHOW_NAMESChanging(value)
				Me.SendPropertyChanging
				Me._DEFAULT_SHOW_NAMES = value
				Me.SendPropertyChanged("DEFAULT_SHOW_NAMES")
				Me.OnDEFAULT_SHOW_NAMESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GRID_MARKET_DEPTH", DbType:="Int NOT NULL")>  _
	Public Property GRID_MARKET_DEPTH() As Integer
		Get
			Return Me._GRID_MARKET_DEPTH
		End Get
		Set
			If ((Me._GRID_MARKET_DEPTH = value)  _
						= false) Then
				Me.OnGRID_MARKET_DEPTHChanging(value)
				Me.SendPropertyChanging
				Me._GRID_MARKET_DEPTH = value
				Me.SendPropertyChanged("GRID_MARKET_DEPTH")
				Me.OnGRID_MARKET_DEPTHChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BID_COLOR", DbType:="Int NOT NULL")>  _
	Public Property BID_COLOR() As Integer
		Get
			Return Me._BID_COLOR
		End Get
		Set
			If ((Me._BID_COLOR = value)  _
						= false) Then
				Me.OnBID_COLORChanging(value)
				Me.SendPropertyChanging
				Me._BID_COLOR = value
				Me.SendPropertyChanged("BID_COLOR")
				Me.OnBID_COLORChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OFFER_COLOR", DbType:="Int NOT NULL")>  _
	Public Property OFFER_COLOR() As Integer
		Get
			Return Me._OFFER_COLOR
		End Get
		Set
			If ((Me._OFFER_COLOR = value)  _
						= false) Then
				Me.OnOFFER_COLORChanging(value)
				Me.SendPropertyChanging
				Me._OFFER_COLOR = value
				Me.SendPropertyChanged("OFFER_COLOR")
				Me.OnOFFER_COLORChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FONT_TYPE", DbType:="SmallInt NOT NULL")>  _
	Public Property FONT_TYPE() As Short
		Get
			Return Me._FONT_TYPE
		End Get
		Set
			If ((Me._FONT_TYPE = value)  _
						= false) Then
				Me.OnFONT_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._FONT_TYPE = value
				Me.SendPropertyChanged("FONT_TYPE")
				Me.OnFONT_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CHANGE_PSW", DbType:="Bit NOT NULL")>  _
	Public Property CHANGE_PSW() As Boolean
		Get
			Return Me._CHANGE_PSW
		End Get
		Set
			If ((Me._CHANGE_PSW = value)  _
						= false) Then
				Me.OnCHANGE_PSWChanging(value)
				Me.SendPropertyChanging
				Me._CHANGE_PSW = value
				Me.SendPropertyChanged("CHANGE_PSW")
				Me.OnCHANGE_PSWChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AGREES_TO_STATEMENT", DbType:="Bit NOT NULL")>  _
	Public Property AGREES_TO_STATEMENT() As Boolean
		Get
			Return Me._AGREES_TO_STATEMENT
		End Get
		Set
			If ((Me._AGREES_TO_STATEMENT = value)  _
						= false) Then
				Me.OnAGREES_TO_STATEMENTChanging(value)
				Me.SendPropertyChanging
				Me._AGREES_TO_STATEMENT = value
				Me.SendPropertyChanged("AGREES_TO_STATEMENT")
				Me.OnAGREES_TO_STATEMENTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_INDICATIVES_VISIBLE", DbType:="Bit NOT NULL")>  _
	Public Property INDICATIVES_VISIBLE() As Boolean
		Get
			Return Me._INDICATIVES_VISIBLE
		End Get
		Set
			If ((Me._INDICATIVES_VISIBLE = value)  _
						= false) Then
				Me.OnINDICATIVES_VISIBLEChanging(value)
				Me.SendPropertyChanging
				Me._INDICATIVES_VISIBLE = value
				Me.SendPropertyChanged("INDICATIVES_VISIBLE")
				Me.OnINDICATIVES_VISIBLEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ONE_CLICK_HIT", DbType:="Bit NOT NULL")>  _
	Public Property ONE_CLICK_HIT() As Boolean
		Get
			Return Me._ONE_CLICK_HIT
		End Get
		Set
			If ((Me._ONE_CLICK_HIT = value)  _
						= false) Then
				Me.OnONE_CLICK_HITChanging(value)
				Me.SendPropertyChanging
				Me._ONE_CLICK_HIT = value
				Me.SendPropertyChanged("ONE_CLICK_HIT")
				Me.OnONE_CLICK_HITChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADER_DESK_TRADER_VOICE", Storage:="_DESK_TRADER_VOICEs", ThisKey:="DESK_TRADER_ID", OtherKey:="DESK_TRADER_ID")>  _
	Public Property DESK_TRADER_VOICEs() As EntitySet(Of DESK_TRADER_VOICE)
		Get
			Return Me._DESK_TRADER_VOICEs
		End Get
		Set
			Me._DESK_TRADER_VOICEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADER_DESK_TRADERS_IM_SUBSCRIPTION", Storage:="_DESK_TRADERS_IM_SUBSCRIPTIONs", ThisKey:="DESK_TRADER_ID", OtherKey:="DESK_TRADER_ID")>  _
	Public Property DESK_TRADERS_IM_SUBSCRIPTIONs() As EntitySet(Of DESK_TRADERS_IM_SUBSCRIPTION)
		Get
			Return Me._DESK_TRADERS_IM_SUBSCRIPTIONs
		End Get
		Set
			Me._DESK_TRADERS_IM_SUBSCRIPTIONs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADER_IM_CLIENT", Storage:="_IM_CLIENTs", ThisKey:="DESK_TRADER_ID", OtherKey:="DESK_TRADER_ID")>  _
	Public Property IM_CLIENTs() As EntitySet(Of IM_CLIENT)
		Get
			Return Me._IM_CLIENTs
		End Get
		Set
			Me._IM_CLIENTs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADER_LAYOUT", Storage:="_LAYOUTs", ThisKey:="DESK_TRADER_ID", OtherKey:="DESK_TRADER_ID")>  _
	Public Property LAYOUTs() As EntitySet(Of LAYOUT)
		Get
			Return Me._LAYOUTs
		End Get
		Set
			Me._LAYOUTs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADER_ORDERS_FFA_SPREAD", Storage:="_ORDERS_FFA_SPREADs", ThisKey:="DESK_TRADER_ID", OtherKey:="DESK_TRADER_ID")>  _
	Public Property ORDERS_FFA_SPREADs() As EntitySet(Of ORDERS_FFA_SPREAD)
		Get
			Return Me._ORDERS_FFA_SPREADs
		End Get
		Set
			Me._ORDERS_FFA_SPREADs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADER_ORDERS_FFA_SPREAD1", Storage:="_ORDERS_FFA_SPREADs1", ThisKey:="DESK_TRADER_ID", OtherKey:="FOR_DESK_TRADER_ID")>  _
	Public Property ORDERS_FFA_SPREADs1() As EntitySet(Of ORDERS_FFA_SPREAD)
		Get
			Return Me._ORDERS_FFA_SPREADs1
		End Get
		Set
			Me._ORDERS_FFA_SPREADs1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADER_ORDERS_FFA_SPREAD2", Storage:="_ORDERS_FFA_SPREADs2", ThisKey:="DESK_TRADER_ID", OtherKey:="LOCK_DESK_TRADER_ID")>  _
	Public Property ORDERS_FFA_SPREADs2() As EntitySet(Of ORDERS_FFA_SPREAD)
		Get
			Return Me._ORDERS_FFA_SPREADs2
		End Get
		Set
			Me._ORDERS_FFA_SPREADs2.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADER_TRADES_FFA", Storage:="_TRADES_FFAs", ThisKey:="DESK_TRADER_ID", OtherKey:="DESK_TRADER_ID1")>  _
	Public Property TRADES_FFAs() As EntitySet(Of TRADES_FFA)
		Get
			Return Me._TRADES_FFAs
		End Get
		Set
			Me._TRADES_FFAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADER_TRADES_FFA1", Storage:="_TRADES_FFAs1", ThisKey:="DESK_TRADER_ID", OtherKey:="DESK_TRADER_ID2")>  _
	Public Property TRADES_FFAs1() As EntitySet(Of TRADES_FFA)
		Get
			Return Me._TRADES_FFAs1
		End Get
		Set
			Me._TRADES_FFAs1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADER_ORDERS_FFA", Storage:="_ORDERS_FFAs", ThisKey:="DESK_TRADER_ID", OtherKey:="LOCK_DESK_TRADER_ID")>  _
	Public Property ORDERS_FFAs() As EntitySet(Of ORDERS_FFA)
		Get
			Return Me._ORDERS_FFAs
		End Get
		Set
			Me._ORDERS_FFAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADER_ORDERS_FFA1", Storage:="_ORDERS_FFAs1", ThisKey:="DESK_TRADER_ID", OtherKey:="DESK_TRADER_ID")>  _
	Public Property ORDERS_FFAs1() As EntitySet(Of ORDERS_FFA)
		Get
			Return Me._ORDERS_FFAs1
		End Get
		Set
			Me._ORDERS_FFAs1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADER_ORDERS_FFA2", Storage:="_ORDERS_FFAs2", ThisKey:="DESK_TRADER_ID", OtherKey:="FOR_DESK_TRADER_ID")>  _
	Public Property ORDERS_FFAs2() As EntitySet(Of ORDERS_FFA)
		Get
			Return Me._ORDERS_FFAs2
		End Get
		Set
			Me._ORDERS_FFAs2.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESK_DESK_TRADER", Storage:="_ACCOUNT_DESK", ThisKey:="ACCOUNT_DESK_ID", OtherKey:="ACCOUNT_DESK_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT_DESK() As ACCOUNT_DESK
		Get
			Return Me._ACCOUNT_DESK.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT_DESK = Me._ACCOUNT_DESK.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT_DESK.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT_DESK.Entity = Nothing
					previousValue.DESK_TRADERs.Remove(Me)
				End If
				Me._ACCOUNT_DESK.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADERs.Add(Me)
					Me._ACCOUNT_DESK_ID = value.ACCOUNT_DESK_ID
				Else
					Me._ACCOUNT_DESK_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNT_DESK")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONTACT_DESK_TRADER", Storage:="_CONTACT", ThisKey:="CONTACT_ID", OtherKey:="CONTACT_ID", IsForeignKey:=true)>  _
	Public Property CONTACT() As CONTACT
		Get
			Return Me._CONTACT.Entity
		End Get
		Set
			Dim previousValue As CONTACT = Me._CONTACT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CONTACT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CONTACT.Entity = Nothing
					previousValue.DESK_TRADERs.Remove(Me)
				End If
				Me._CONTACT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADERs.Add(Me)
					Me._CONTACT_ID = value.CONTACT_ID
				Else
					Me._CONTACT_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CONTACT")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_AUTHORITy_DESK_TRADER", Storage:="_TRADE_AUTHORITy1", ThisKey:="TRADE_AUTHORITY", OtherKey:="TRADE_AUTHORITY", IsForeignKey:=true)>  _
	Public Property TRADE_AUTHORITy1() As TRADE_AUTHORITy
		Get
			Return Me._TRADE_AUTHORITy1.Entity
		End Get
		Set
			Dim previousValue As TRADE_AUTHORITy = Me._TRADE_AUTHORITy1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TRADE_AUTHORITy1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TRADE_AUTHORITy1.Entity = Nothing
					previousValue.DESK_TRADERs.Remove(Me)
				End If
				Me._TRADE_AUTHORITy1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADERs.Add(Me)
					Me._TRADE_AUTHORITY = value.TRADE_AUTHORITY
				Else
					Me._TRADE_AUTHORITY = CType(Nothing, Short)
				End If
				Me.SendPropertyChanged("TRADE_AUTHORITy1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASS_DESK_TRADER", Storage:="_TRADE_CLASS", ThisKey:="DEFAULT_MARKET", OtherKey:="TRADE_CLASS_SHORT", IsForeignKey:=true)>  _
	Public Property TRADE_CLASS() As TRADE_CLASS
		Get
			Return Me._TRADE_CLASS.Entity
		End Get
		Set
			Dim previousValue As TRADE_CLASS = Me._TRADE_CLASS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TRADE_CLASS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TRADE_CLASS.Entity = Nothing
					previousValue.DESK_TRADERs.Remove(Me)
				End If
				Me._TRADE_CLASS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADERs.Add(Me)
					Me._DEFAULT_MARKET = value.TRADE_CLASS_SHORT
				Else
					Me._DEFAULT_MARKET = CType(Nothing, Char)
				End If
				Me.SendPropertyChanged("TRADE_CLASS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESK_TRADER", Storage:="_ACCOUNT", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT() As ACCOUNT
		Get
			Return Me._ACCOUNT.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT = Me._ACCOUNT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT.Entity = Nothing
					previousValue.DESK_TRADERs.Remove(Me)
				End If
				Me._ACCOUNT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADERs.Add(Me)
					Me._ACCOUNT_ID = value.ACCOUNT_ID
				Else
					Me._ACCOUNT_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNT")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DESK_TRADER_VOICEs(ByVal entity As DESK_TRADER_VOICE)
		Me.SendPropertyChanging
		entity.DESK_TRADER = Me
	End Sub
	
	Private Sub detach_DESK_TRADER_VOICEs(ByVal entity As DESK_TRADER_VOICE)
		Me.SendPropertyChanging
		entity.DESK_TRADER = Nothing
	End Sub
	
	Private Sub attach_DESK_TRADERS_IM_SUBSCRIPTIONs(ByVal entity As DESK_TRADERS_IM_SUBSCRIPTION)
		Me.SendPropertyChanging
		entity.DESK_TRADER = Me
	End Sub
	
	Private Sub detach_DESK_TRADERS_IM_SUBSCRIPTIONs(ByVal entity As DESK_TRADERS_IM_SUBSCRIPTION)
		Me.SendPropertyChanging
		entity.DESK_TRADER = Nothing
	End Sub
	
	Private Sub attach_IM_CLIENTs(ByVal entity As IM_CLIENT)
		Me.SendPropertyChanging
		entity.DESK_TRADER = Me
	End Sub
	
	Private Sub detach_IM_CLIENTs(ByVal entity As IM_CLIENT)
		Me.SendPropertyChanging
		entity.DESK_TRADER = Nothing
	End Sub
	
	Private Sub attach_LAYOUTs(ByVal entity As LAYOUT)
		Me.SendPropertyChanging
		entity.DESK_TRADER = Me
	End Sub
	
	Private Sub detach_LAYOUTs(ByVal entity As LAYOUT)
		Me.SendPropertyChanging
		entity.DESK_TRADER = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFA_SPREADs(ByVal entity As ORDERS_FFA_SPREAD)
		Me.SendPropertyChanging
		entity.DESK_TRADER = Me
	End Sub
	
	Private Sub detach_ORDERS_FFA_SPREADs(ByVal entity As ORDERS_FFA_SPREAD)
		Me.SendPropertyChanging
		entity.DESK_TRADER = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFA_SPREADs1(ByVal entity As ORDERS_FFA_SPREAD)
		Me.SendPropertyChanging
		entity.DESK_TRADER1 = Me
	End Sub
	
	Private Sub detach_ORDERS_FFA_SPREADs1(ByVal entity As ORDERS_FFA_SPREAD)
		Me.SendPropertyChanging
		entity.DESK_TRADER1 = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFA_SPREADs2(ByVal entity As ORDERS_FFA_SPREAD)
		Me.SendPropertyChanging
		entity.DESK_TRADER2 = Me
	End Sub
	
	Private Sub detach_ORDERS_FFA_SPREADs2(ByVal entity As ORDERS_FFA_SPREAD)
		Me.SendPropertyChanging
		entity.DESK_TRADER2 = Nothing
	End Sub
	
	Private Sub attach_TRADES_FFAs(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.DESK_TRADER = Me
	End Sub
	
	Private Sub detach_TRADES_FFAs(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.DESK_TRADER = Nothing
	End Sub
	
	Private Sub attach_TRADES_FFAs1(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.DESK_TRADER1 = Me
	End Sub
	
	Private Sub detach_TRADES_FFAs1(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.DESK_TRADER1 = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFAs(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.DESK_TRADER = Me
	End Sub
	
	Private Sub detach_ORDERS_FFAs(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.DESK_TRADER = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFAs1(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.DESK_TRADER1 = Me
	End Sub
	
	Private Sub detach_ORDERS_FFAs1(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.DESK_TRADER1 = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFAs2(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.DESK_TRADER2 = Me
	End Sub
	
	Private Sub detach_ORDERS_FFAs2(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.DESK_TRADER2 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DESK_TRADE_CLASSES")>  _
Partial Public Class DESK_TRADE_CLASS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ACCOUNT_DESK_ID As Integer
	
	Private _TRADE_CLASS_SHORT As Char
	
	Private _ACTIVE As Boolean
	
	Private _BROKER_ID As Integer
	
	Private _DESK_EXCHANGEs As EntitySet(Of DESK_EXCHANGE)
	
	Private _ACCOUNT_DESK As EntityRef(Of ACCOUNT_DESK)
	
	Private _TRADE_CLASS As EntityRef(Of TRADE_CLASS)
	
	Private _ACCOUNT As EntityRef(Of ACCOUNT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnACCOUNT_DESK_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_DESK_IDChanged()
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanging(value As Char)
    End Sub
    Partial Private Sub OnTRADE_CLASS_SHORTChanged()
    End Sub
    Partial Private Sub OnACTIVEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnACTIVEChanged()
    End Sub
    Partial Private Sub OnBROKER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBROKER_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DESK_EXCHANGEs = New EntitySet(Of DESK_EXCHANGE)(AddressOf Me.attach_DESK_EXCHANGEs, AddressOf Me.detach_DESK_EXCHANGEs)
		Me._ACCOUNT_DESK = CType(Nothing, EntityRef(Of ACCOUNT_DESK))
		Me._TRADE_CLASS = CType(Nothing, EntityRef(Of TRADE_CLASS))
		Me._ACCOUNT = CType(Nothing, EntityRef(Of ACCOUNT))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_DESK_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ACCOUNT_DESK_ID() As Integer
		Get
			Return Me._ACCOUNT_DESK_ID
		End Get
		Set
			If ((Me._ACCOUNT_DESK_ID = value)  _
						= false) Then
				If Me._ACCOUNT_DESK.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACCOUNT_DESK_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_DESK_ID = value
				Me.SendPropertyChanged("ACCOUNT_DESK_ID")
				Me.OnACCOUNT_DESK_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_CLASS_SHORT", DbType:="Char(1) NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TRADE_CLASS_SHORT() As Char
		Get
			Return Me._TRADE_CLASS_SHORT
		End Get
		Set
			If ((Me._TRADE_CLASS_SHORT = value)  _
						= false) Then
				If Me._TRADE_CLASS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTRADE_CLASS_SHORTChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_CLASS_SHORT = value
				Me.SendPropertyChanged("TRADE_CLASS_SHORT")
				Me.OnTRADE_CLASS_SHORTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACTIVE", DbType:="Bit NOT NULL")>  _
	Public Property ACTIVE() As Boolean
		Get
			Return Me._ACTIVE
		End Get
		Set
			If ((Me._ACTIVE = value)  _
						= false) Then
				Me.OnACTIVEChanging(value)
				Me.SendPropertyChanging
				Me._ACTIVE = value
				Me.SendPropertyChanged("ACTIVE")
				Me.OnACTIVEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BROKER_ID", DbType:="Int NOT NULL")>  _
	Public Property BROKER_ID() As Integer
		Get
			Return Me._BROKER_ID
		End Get
		Set
			If ((Me._BROKER_ID = value)  _
						= false) Then
				If Me._ACCOUNT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBROKER_IDChanging(value)
				Me.SendPropertyChanging
				Me._BROKER_ID = value
				Me.SendPropertyChanged("BROKER_ID")
				Me.OnBROKER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DESK_TRADE_CLASS_DESK_EXCHANGE", Storage:="_DESK_EXCHANGEs", ThisKey:="ACCOUNT_DESK_ID,TRADE_CLASS_SHORT", OtherKey:="ACCOUNT_DESK_ID,TRADE_CLASS_SHORT")>  _
	Public Property DESK_EXCHANGEs() As EntitySet(Of DESK_EXCHANGE)
		Get
			Return Me._DESK_EXCHANGEs
		End Get
		Set
			Me._DESK_EXCHANGEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESK_DESK_TRADE_CLASS", Storage:="_ACCOUNT_DESK", ThisKey:="ACCOUNT_DESK_ID", OtherKey:="ACCOUNT_DESK_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT_DESK() As ACCOUNT_DESK
		Get
			Return Me._ACCOUNT_DESK.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT_DESK = Me._ACCOUNT_DESK.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT_DESK.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT_DESK.Entity = Nothing
					previousValue.DESK_TRADE_CLASSes.Remove(Me)
				End If
				Me._ACCOUNT_DESK.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADE_CLASSes.Add(Me)
					Me._ACCOUNT_DESK_ID = value.ACCOUNT_DESK_ID
				Else
					Me._ACCOUNT_DESK_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNT_DESK")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TRADE_CLASS_DESK_TRADE_CLASS", Storage:="_TRADE_CLASS", ThisKey:="TRADE_CLASS_SHORT", OtherKey:="TRADE_CLASS_SHORT", IsForeignKey:=true)>  _
	Public Property TRADE_CLASS() As TRADE_CLASS
		Get
			Return Me._TRADE_CLASS.Entity
		End Get
		Set
			Dim previousValue As TRADE_CLASS = Me._TRADE_CLASS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TRADE_CLASS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TRADE_CLASS.Entity = Nothing
					previousValue.DESK_TRADE_CLASSes.Remove(Me)
				End If
				Me._TRADE_CLASS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADE_CLASSes.Add(Me)
					Me._TRADE_CLASS_SHORT = value.TRADE_CLASS_SHORT
				Else
					Me._TRADE_CLASS_SHORT = CType(Nothing, Char)
				End If
				Me.SendPropertyChanged("TRADE_CLASS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESK_TRADE_CLASS", Storage:="_ACCOUNT", ThisKey:="BROKER_ID", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT() As ACCOUNT
		Get
			Return Me._ACCOUNT.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT = Me._ACCOUNT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT.Entity = Nothing
					previousValue.DESK_TRADE_CLASSes.Remove(Me)
				End If
				Me._ACCOUNT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DESK_TRADE_CLASSes.Add(Me)
					Me._BROKER_ID = value.ACCOUNT_ID
				Else
					Me._BROKER_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNT")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DESK_EXCHANGEs(ByVal entity As DESK_EXCHANGE)
		Me.SendPropertyChanging
		entity.DESK_TRADE_CLASS = Me
	End Sub
	
	Private Sub detach_DESK_EXCHANGEs(ByVal entity As DESK_EXCHANGE)
		Me.SendPropertyChanging
		entity.DESK_TRADE_CLASS = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ACCOUNTS")>  _
Partial Public Class ACCOUNT
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ACCOUNT_ID As Integer
	
	Private _FULL_NAME As String
	
	Private _SHORT_NAME As String
	
	Private _STREET As String
	
	Private _CITY As String
	
	Private _REGION As String
	
	Private _ZIPCODE As String
	
	Private _COUNTRY_ID As Integer
	
	Private _TEL_B1 As String
	
	Private _TEL_B2 As String
	
	Private _FAX_B As String
	
	Private _EMAIL As String
	
	Private _WEBSITE As String
	
	Private _ACCOUNT_TYPE_ID As Integer
	
	Private _TRADE_AUTHORISED As Boolean
	
	Private _DEFAULT_CCY As Integer
	
	Private _CAN_DELETE As Boolean
	
	Private _BROKER_ID As Integer
	
	Private _SUSPENDED As Boolean
	
	Private _DEFAULT_BROKER_CLIENT As System.Nullable(Of Integer)
	
	Private _ACCOUNTS_ADMINs As EntitySet(Of ACCOUNTS_ADMIN)
	
	Private _ACCOUNTS_CONTACTs As EntitySet(Of ACCOUNTS_CONTACT)
	
	Private _CONTRACT_SERies As EntitySet(Of CONTRACT_SERy)
	
	Private _DESK_EXCHANGES_CLEARERs As EntitySet(Of DESK_EXCHANGES_CLEARER)
	
	Private _EXCHANGEs As EntitySet(Of EXCHANGE)
	
	Private _EXCHANGEs1 As EntitySet(Of EXCHANGE)
	
	Private _ORDERS_FFA_EXCHANGEs As EntitySet(Of ORDERS_FFA_EXCHANGE)
	
	Private _TRADES_FFAs As EntitySet(Of TRADES_FFA)
	
	Private _TRADES_FFAs1 As EntitySet(Of TRADES_FFA)
	
	Private _TRADES_FFAs2 As EntitySet(Of TRADES_FFA)
	
	Private _TRADES_FFAs3 As EntitySet(Of TRADES_FFA)
	
	Private _ORDERS_FFAs As EntitySet(Of ORDERS_FFA)
	
	Private _ACCOUNT_DESKs As EntitySet(Of ACCOUNT_DESK)
	
	Private _DESK_TRADERs As EntitySet(Of DESK_TRADER)
	
	Private _DESK_TRADE_CLASSes As EntitySet(Of DESK_TRADE_CLASS)
	
	Private _ACCOUNTs As EntitySet(Of ACCOUNT)
	
	Private _ACCOUNTs1 As EntitySet(Of ACCOUNT)
	
	Private _ACCOUNT_TYPE As EntityRef(Of ACCOUNT_TYPE)
	
	Private _ACCOUNT As EntityRef(Of ACCOUNT)
	
	Private _CCY As EntityRef(Of CCY)
	
	Private _COUNTRy As EntityRef(Of COUNTRy)
	
	Private _ACCOUNT1 As EntityRef(Of ACCOUNT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnACCOUNT_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_IDChanged()
    End Sub
    Partial Private Sub OnFULL_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnFULL_NAMEChanged()
    End Sub
    Partial Private Sub OnSHORT_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnSHORT_NAMEChanged()
    End Sub
    Partial Private Sub OnSTREETChanging(value As String)
    End Sub
    Partial Private Sub OnSTREETChanged()
    End Sub
    Partial Private Sub OnCITYChanging(value As String)
    End Sub
    Partial Private Sub OnCITYChanged()
    End Sub
    Partial Private Sub OnREGIONChanging(value As String)
    End Sub
    Partial Private Sub OnREGIONChanged()
    End Sub
    Partial Private Sub OnZIPCODEChanging(value As String)
    End Sub
    Partial Private Sub OnZIPCODEChanged()
    End Sub
    Partial Private Sub OnCOUNTRY_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCOUNTRY_IDChanged()
    End Sub
    Partial Private Sub OnTEL_B1Changing(value As String)
    End Sub
    Partial Private Sub OnTEL_B1Changed()
    End Sub
    Partial Private Sub OnTEL_B2Changing(value As String)
    End Sub
    Partial Private Sub OnTEL_B2Changed()
    End Sub
    Partial Private Sub OnFAX_BChanging(value As String)
    End Sub
    Partial Private Sub OnFAX_BChanged()
    End Sub
    Partial Private Sub OnEMAILChanging(value As String)
    End Sub
    Partial Private Sub OnEMAILChanged()
    End Sub
    Partial Private Sub OnWEBSITEChanging(value As String)
    End Sub
    Partial Private Sub OnWEBSITEChanged()
    End Sub
    Partial Private Sub OnACCOUNT_TYPE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACCOUNT_TYPE_IDChanged()
    End Sub
    Partial Private Sub OnTRADE_AUTHORISEDChanging(value As Boolean)
    End Sub
    Partial Private Sub OnTRADE_AUTHORISEDChanged()
    End Sub
    Partial Private Sub OnDEFAULT_CCYChanging(value As Integer)
    End Sub
    Partial Private Sub OnDEFAULT_CCYChanged()
    End Sub
    Partial Private Sub OnCAN_DELETEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCAN_DELETEChanged()
    End Sub
    Partial Private Sub OnBROKER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBROKER_IDChanged()
    End Sub
    Partial Private Sub OnSUSPENDEDChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSUSPENDEDChanged()
    End Sub
    Partial Private Sub OnDEFAULT_BROKER_CLIENTChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDEFAULT_BROKER_CLIENTChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ACCOUNTS_ADMINs = New EntitySet(Of ACCOUNTS_ADMIN)(AddressOf Me.attach_ACCOUNTS_ADMINs, AddressOf Me.detach_ACCOUNTS_ADMINs)
		Me._ACCOUNTS_CONTACTs = New EntitySet(Of ACCOUNTS_CONTACT)(AddressOf Me.attach_ACCOUNTS_CONTACTs, AddressOf Me.detach_ACCOUNTS_CONTACTs)
		Me._CONTRACT_SERies = New EntitySet(Of CONTRACT_SERy)(AddressOf Me.attach_CONTRACT_SERies, AddressOf Me.detach_CONTRACT_SERies)
		Me._DESK_EXCHANGES_CLEARERs = New EntitySet(Of DESK_EXCHANGES_CLEARER)(AddressOf Me.attach_DESK_EXCHANGES_CLEARERs, AddressOf Me.detach_DESK_EXCHANGES_CLEARERs)
		Me._EXCHANGEs = New EntitySet(Of EXCHANGE)(AddressOf Me.attach_EXCHANGEs, AddressOf Me.detach_EXCHANGEs)
		Me._EXCHANGEs1 = New EntitySet(Of EXCHANGE)(AddressOf Me.attach_EXCHANGEs1, AddressOf Me.detach_EXCHANGEs1)
		Me._ORDERS_FFA_EXCHANGEs = New EntitySet(Of ORDERS_FFA_EXCHANGE)(AddressOf Me.attach_ORDERS_FFA_EXCHANGEs, AddressOf Me.detach_ORDERS_FFA_EXCHANGEs)
		Me._TRADES_FFAs = New EntitySet(Of TRADES_FFA)(AddressOf Me.attach_TRADES_FFAs, AddressOf Me.detach_TRADES_FFAs)
		Me._TRADES_FFAs1 = New EntitySet(Of TRADES_FFA)(AddressOf Me.attach_TRADES_FFAs1, AddressOf Me.detach_TRADES_FFAs1)
		Me._TRADES_FFAs2 = New EntitySet(Of TRADES_FFA)(AddressOf Me.attach_TRADES_FFAs2, AddressOf Me.detach_TRADES_FFAs2)
		Me._TRADES_FFAs3 = New EntitySet(Of TRADES_FFA)(AddressOf Me.attach_TRADES_FFAs3, AddressOf Me.detach_TRADES_FFAs3)
		Me._ORDERS_FFAs = New EntitySet(Of ORDERS_FFA)(AddressOf Me.attach_ORDERS_FFAs, AddressOf Me.detach_ORDERS_FFAs)
		Me._ACCOUNT_DESKs = New EntitySet(Of ACCOUNT_DESK)(AddressOf Me.attach_ACCOUNT_DESKs, AddressOf Me.detach_ACCOUNT_DESKs)
		Me._DESK_TRADERs = New EntitySet(Of DESK_TRADER)(AddressOf Me.attach_DESK_TRADERs, AddressOf Me.detach_DESK_TRADERs)
		Me._DESK_TRADE_CLASSes = New EntitySet(Of DESK_TRADE_CLASS)(AddressOf Me.attach_DESK_TRADE_CLASSes, AddressOf Me.detach_DESK_TRADE_CLASSes)
		Me._ACCOUNTs = New EntitySet(Of ACCOUNT)(AddressOf Me.attach_ACCOUNTs, AddressOf Me.detach_ACCOUNTs)
		Me._ACCOUNTs1 = New EntitySet(Of ACCOUNT)(AddressOf Me.attach_ACCOUNTs1, AddressOf Me.detach_ACCOUNTs1)
		Me._ACCOUNT_TYPE = CType(Nothing, EntityRef(Of ACCOUNT_TYPE))
		Me._ACCOUNT = CType(Nothing, EntityRef(Of ACCOUNT))
		Me._CCY = CType(Nothing, EntityRef(Of CCY))
		Me._COUNTRy = CType(Nothing, EntityRef(Of COUNTRy))
		Me._ACCOUNT1 = CType(Nothing, EntityRef(Of ACCOUNT))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ACCOUNT_ID() As Integer
		Get
			Return Me._ACCOUNT_ID
		End Get
		Set
			If ((Me._ACCOUNT_ID = value)  _
						= false) Then
				Me.OnACCOUNT_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_ID = value
				Me.SendPropertyChanged("ACCOUNT_ID")
				Me.OnACCOUNT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FULL_NAME", DbType:="NVarChar(50)")>  _
	Public Property FULL_NAME() As String
		Get
			Return Me._FULL_NAME
		End Get
		Set
			If (String.Equals(Me._FULL_NAME, value) = false) Then
				Me.OnFULL_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._FULL_NAME = value
				Me.SendPropertyChanged("FULL_NAME")
				Me.OnFULL_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SHORT_NAME", DbType:="NVarChar(50)")>  _
	Public Property SHORT_NAME() As String
		Get
			Return Me._SHORT_NAME
		End Get
		Set
			If (String.Equals(Me._SHORT_NAME, value) = false) Then
				Me.OnSHORT_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._SHORT_NAME = value
				Me.SendPropertyChanged("SHORT_NAME")
				Me.OnSHORT_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_STREET", DbType:="NVarChar(50)")>  _
	Public Property STREET() As String
		Get
			Return Me._STREET
		End Get
		Set
			If (String.Equals(Me._STREET, value) = false) Then
				Me.OnSTREETChanging(value)
				Me.SendPropertyChanging
				Me._STREET = value
				Me.SendPropertyChanged("STREET")
				Me.OnSTREETChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CITY", DbType:="NVarChar(50)")>  _
	Public Property CITY() As String
		Get
			Return Me._CITY
		End Get
		Set
			If (String.Equals(Me._CITY, value) = false) Then
				Me.OnCITYChanging(value)
				Me.SendPropertyChanging
				Me._CITY = value
				Me.SendPropertyChanged("CITY")
				Me.OnCITYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REGION", DbType:="NVarChar(50)")>  _
	Public Property REGION() As String
		Get
			Return Me._REGION
		End Get
		Set
			If (String.Equals(Me._REGION, value) = false) Then
				Me.OnREGIONChanging(value)
				Me.SendPropertyChanging
				Me._REGION = value
				Me.SendPropertyChanged("REGION")
				Me.OnREGIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ZIPCODE", DbType:="NVarChar(50)")>  _
	Public Property ZIPCODE() As String
		Get
			Return Me._ZIPCODE
		End Get
		Set
			If (String.Equals(Me._ZIPCODE, value) = false) Then
				Me.OnZIPCODEChanging(value)
				Me.SendPropertyChanging
				Me._ZIPCODE = value
				Me.SendPropertyChanged("ZIPCODE")
				Me.OnZIPCODEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COUNTRY_ID", DbType:="Int NOT NULL")>  _
	Public Property COUNTRY_ID() As Integer
		Get
			Return Me._COUNTRY_ID
		End Get
		Set
			If ((Me._COUNTRY_ID = value)  _
						= false) Then
				If Me._COUNTRy.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCOUNTRY_IDChanging(value)
				Me.SendPropertyChanging
				Me._COUNTRY_ID = value
				Me.SendPropertyChanged("COUNTRY_ID")
				Me.OnCOUNTRY_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TEL_B1", DbType:="NVarChar(50)")>  _
	Public Property TEL_B1() As String
		Get
			Return Me._TEL_B1
		End Get
		Set
			If (String.Equals(Me._TEL_B1, value) = false) Then
				Me.OnTEL_B1Changing(value)
				Me.SendPropertyChanging
				Me._TEL_B1 = value
				Me.SendPropertyChanged("TEL_B1")
				Me.OnTEL_B1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TEL_B2", DbType:="NVarChar(50)")>  _
	Public Property TEL_B2() As String
		Get
			Return Me._TEL_B2
		End Get
		Set
			If (String.Equals(Me._TEL_B2, value) = false) Then
				Me.OnTEL_B2Changing(value)
				Me.SendPropertyChanging
				Me._TEL_B2 = value
				Me.SendPropertyChanged("TEL_B2")
				Me.OnTEL_B2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FAX_B", DbType:="NVarChar(50)")>  _
	Public Property FAX_B() As String
		Get
			Return Me._FAX_B
		End Get
		Set
			If (String.Equals(Me._FAX_B, value) = false) Then
				Me.OnFAX_BChanging(value)
				Me.SendPropertyChanging
				Me._FAX_B = value
				Me.SendPropertyChanged("FAX_B")
				Me.OnFAX_BChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMAIL", DbType:="NVarChar(50)")>  _
	Public Property EMAIL() As String
		Get
			Return Me._EMAIL
		End Get
		Set
			If (String.Equals(Me._EMAIL, value) = false) Then
				Me.OnEMAILChanging(value)
				Me.SendPropertyChanging
				Me._EMAIL = value
				Me.SendPropertyChanged("EMAIL")
				Me.OnEMAILChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WEBSITE", DbType:="NVarChar(50)")>  _
	Public Property WEBSITE() As String
		Get
			Return Me._WEBSITE
		End Get
		Set
			If (String.Equals(Me._WEBSITE, value) = false) Then
				Me.OnWEBSITEChanging(value)
				Me.SendPropertyChanging
				Me._WEBSITE = value
				Me.SendPropertyChanged("WEBSITE")
				Me.OnWEBSITEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCOUNT_TYPE_ID", DbType:="Int NOT NULL")>  _
	Public Property ACCOUNT_TYPE_ID() As Integer
		Get
			Return Me._ACCOUNT_TYPE_ID
		End Get
		Set
			If ((Me._ACCOUNT_TYPE_ID = value)  _
						= false) Then
				If Me._ACCOUNT_TYPE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACCOUNT_TYPE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACCOUNT_TYPE_ID = value
				Me.SendPropertyChanged("ACCOUNT_TYPE_ID")
				Me.OnACCOUNT_TYPE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_AUTHORISED", DbType:="Bit NOT NULL")>  _
	Public Property TRADE_AUTHORISED() As Boolean
		Get
			Return Me._TRADE_AUTHORISED
		End Get
		Set
			If ((Me._TRADE_AUTHORISED = value)  _
						= false) Then
				Me.OnTRADE_AUTHORISEDChanging(value)
				Me.SendPropertyChanging
				Me._TRADE_AUTHORISED = value
				Me.SendPropertyChanged("TRADE_AUTHORISED")
				Me.OnTRADE_AUTHORISEDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEFAULT_CCY", DbType:="Int NOT NULL")>  _
	Public Property DEFAULT_CCY() As Integer
		Get
			Return Me._DEFAULT_CCY
		End Get
		Set
			If ((Me._DEFAULT_CCY = value)  _
						= false) Then
				If Me._CCY.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDEFAULT_CCYChanging(value)
				Me.SendPropertyChanging
				Me._DEFAULT_CCY = value
				Me.SendPropertyChanged("DEFAULT_CCY")
				Me.OnDEFAULT_CCYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CAN_DELETE", DbType:="Bit NOT NULL")>  _
	Public Property CAN_DELETE() As Boolean
		Get
			Return Me._CAN_DELETE
		End Get
		Set
			If ((Me._CAN_DELETE = value)  _
						= false) Then
				Me.OnCAN_DELETEChanging(value)
				Me.SendPropertyChanging
				Me._CAN_DELETE = value
				Me.SendPropertyChanged("CAN_DELETE")
				Me.OnCAN_DELETEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BROKER_ID", DbType:="Int NOT NULL")>  _
	Public Property BROKER_ID() As Integer
		Get
			Return Me._BROKER_ID
		End Get
		Set
			If ((Me._BROKER_ID = value)  _
						= false) Then
				If Me._ACCOUNT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBROKER_IDChanging(value)
				Me.SendPropertyChanging
				Me._BROKER_ID = value
				Me.SendPropertyChanged("BROKER_ID")
				Me.OnBROKER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SUSPENDED", DbType:="Bit NOT NULL")>  _
	Public Property SUSPENDED() As Boolean
		Get
			Return Me._SUSPENDED
		End Get
		Set
			If ((Me._SUSPENDED = value)  _
						= false) Then
				Me.OnSUSPENDEDChanging(value)
				Me.SendPropertyChanging
				Me._SUSPENDED = value
				Me.SendPropertyChanged("SUSPENDED")
				Me.OnSUSPENDEDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEFAULT_BROKER_CLIENT", DbType:="Int")>  _
	Public Property DEFAULT_BROKER_CLIENT() As System.Nullable(Of Integer)
		Get
			Return Me._DEFAULT_BROKER_CLIENT
		End Get
		Set
			If (Me._DEFAULT_BROKER_CLIENT.Equals(value) = false) Then
				If Me._ACCOUNT1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDEFAULT_BROKER_CLIENTChanging(value)
				Me.SendPropertyChanging
				Me._DEFAULT_BROKER_CLIENT = value
				Me.SendPropertyChanged("DEFAULT_BROKER_CLIENT")
				Me.OnDEFAULT_BROKER_CLIENTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_ACCOUNTS_ADMIN", Storage:="_ACCOUNTS_ADMINs", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID")>  _
	Public Property ACCOUNTS_ADMINs() As EntitySet(Of ACCOUNTS_ADMIN)
		Get
			Return Me._ACCOUNTS_ADMINs
		End Get
		Set
			Me._ACCOUNTS_ADMINs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_ACCOUNTS_CONTACT", Storage:="_ACCOUNTS_CONTACTs", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID")>  _
	Public Property ACCOUNTS_CONTACTs() As EntitySet(Of ACCOUNTS_CONTACT)
		Get
			Return Me._ACCOUNTS_CONTACTs
		End Get
		Set
			Me._ACCOUNTS_CONTACTs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_CONTRACT_SERy", Storage:="_CONTRACT_SERies", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID")>  _
	Public Property CONTRACT_SERies() As EntitySet(Of CONTRACT_SERy)
		Get
			Return Me._CONTRACT_SERies
		End Get
		Set
			Me._CONTRACT_SERies.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESK_EXCHANGES_CLEARER", Storage:="_DESK_EXCHANGES_CLEARERs", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID")>  _
	Public Property DESK_EXCHANGES_CLEARERs() As EntitySet(Of DESK_EXCHANGES_CLEARER)
		Get
			Return Me._DESK_EXCHANGES_CLEARERs
		End Get
		Set
			Me._DESK_EXCHANGES_CLEARERs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_EXCHANGE", Storage:="_EXCHANGEs", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID")>  _
	Public Property EXCHANGEs() As EntitySet(Of EXCHANGE)
		Get
			Return Me._EXCHANGEs
		End Get
		Set
			Me._EXCHANGEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_EXCHANGE1", Storage:="_EXCHANGEs1", ThisKey:="ACCOUNT_ID", OtherKey:="DEFAULT_CLEARER_ID")>  _
	Public Property EXCHANGEs1() As EntitySet(Of EXCHANGE)
		Get
			Return Me._EXCHANGEs1
		End Get
		Set
			Me._EXCHANGEs1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_ORDERS_FFA_EXCHANGE", Storage:="_ORDERS_FFA_EXCHANGEs", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID")>  _
	Public Property ORDERS_FFA_EXCHANGEs() As EntitySet(Of ORDERS_FFA_EXCHANGE)
		Get
			Return Me._ORDERS_FFA_EXCHANGEs
		End Get
		Set
			Me._ORDERS_FFA_EXCHANGEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_TRADES_FFA", Storage:="_TRADES_FFAs", ThisKey:="ACCOUNT_ID", OtherKey:="CLEARING_ID1")>  _
	Public Property TRADES_FFAs() As EntitySet(Of TRADES_FFA)
		Get
			Return Me._TRADES_FFAs
		End Get
		Set
			Me._TRADES_FFAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_TRADES_FFA1", Storage:="_TRADES_FFAs1", ThisKey:="ACCOUNT_ID", OtherKey:="CLEARING_ID2")>  _
	Public Property TRADES_FFAs1() As EntitySet(Of TRADES_FFA)
		Get
			Return Me._TRADES_FFAs1
		End Get
		Set
			Me._TRADES_FFAs1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_TRADES_FFA2", Storage:="_TRADES_FFAs2", ThisKey:="ACCOUNT_ID", OtherKey:="BROKER_ID1")>  _
	Public Property TRADES_FFAs2() As EntitySet(Of TRADES_FFA)
		Get
			Return Me._TRADES_FFAs2
		End Get
		Set
			Me._TRADES_FFAs2.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_TRADES_FFA3", Storage:="_TRADES_FFAs3", ThisKey:="ACCOUNT_ID", OtherKey:="BROKER_ID2")>  _
	Public Property TRADES_FFAs3() As EntitySet(Of TRADES_FFA)
		Get
			Return Me._TRADES_FFAs3
		End Get
		Set
			Me._TRADES_FFAs3.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_ORDERS_FFA", Storage:="_ORDERS_FFAs", ThisKey:="ACCOUNT_ID", OtherKey:="CLEARER_ID")>  _
	Public Property ORDERS_FFAs() As EntitySet(Of ORDERS_FFA)
		Get
			Return Me._ORDERS_FFAs
		End Get
		Set
			Me._ORDERS_FFAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_ACCOUNT_DESK", Storage:="_ACCOUNT_DESKs", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID")>  _
	Public Property ACCOUNT_DESKs() As EntitySet(Of ACCOUNT_DESK)
		Get
			Return Me._ACCOUNT_DESKs
		End Get
		Set
			Me._ACCOUNT_DESKs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESK_TRADER", Storage:="_DESK_TRADERs", ThisKey:="ACCOUNT_ID", OtherKey:="ACCOUNT_ID")>  _
	Public Property DESK_TRADERs() As EntitySet(Of DESK_TRADER)
		Get
			Return Me._DESK_TRADERs
		End Get
		Set
			Me._DESK_TRADERs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_DESK_TRADE_CLASS", Storage:="_DESK_TRADE_CLASSes", ThisKey:="ACCOUNT_ID", OtherKey:="BROKER_ID")>  _
	Public Property DESK_TRADE_CLASSes() As EntitySet(Of DESK_TRADE_CLASS)
		Get
			Return Me._DESK_TRADE_CLASSes
		End Get
		Set
			Me._DESK_TRADE_CLASSes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_ACCOUNT", Storage:="_ACCOUNTs", ThisKey:="ACCOUNT_ID", OtherKey:="BROKER_ID")>  _
	Public Property ACCOUNTs() As EntitySet(Of ACCOUNT)
		Get
			Return Me._ACCOUNTs
		End Get
		Set
			Me._ACCOUNTs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_ACCOUNT1", Storage:="_ACCOUNTs1", ThisKey:="ACCOUNT_ID", OtherKey:="DEFAULT_BROKER_CLIENT")>  _
	Public Property ACCOUNTs1() As EntitySet(Of ACCOUNT)
		Get
			Return Me._ACCOUNTs1
		End Get
		Set
			Me._ACCOUNTs1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_TYPE_ACCOUNT", Storage:="_ACCOUNT_TYPE", ThisKey:="ACCOUNT_TYPE_ID", OtherKey:="ACCOUNT_TYPE_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT_TYPE() As ACCOUNT_TYPE
		Get
			Return Me._ACCOUNT_TYPE.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT_TYPE = Me._ACCOUNT_TYPE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT_TYPE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT_TYPE.Entity = Nothing
					previousValue.ACCOUNTs.Remove(Me)
				End If
				Me._ACCOUNT_TYPE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ACCOUNTs.Add(Me)
					Me._ACCOUNT_TYPE_ID = value.ACCOUNT_TYPE_ID
				Else
					Me._ACCOUNT_TYPE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNT_TYPE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_ACCOUNT", Storage:="_ACCOUNT", ThisKey:="BROKER_ID", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT() As ACCOUNT
		Get
			Return Me._ACCOUNT.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT = Me._ACCOUNT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT.Entity = Nothing
					previousValue.ACCOUNTs.Remove(Me)
				End If
				Me._ACCOUNT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ACCOUNTs.Add(Me)
					Me._BROKER_ID = value.ACCOUNT_ID
				Else
					Me._BROKER_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ACCOUNT")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CCY_ACCOUNT", Storage:="_CCY", ThisKey:="DEFAULT_CCY", OtherKey:="CCY_ID", IsForeignKey:=true)>  _
	Public Property CCY() As CCY
		Get
			Return Me._CCY.Entity
		End Get
		Set
			Dim previousValue As CCY = Me._CCY.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CCY.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CCY.Entity = Nothing
					previousValue.ACCOUNTs.Remove(Me)
				End If
				Me._CCY.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ACCOUNTs.Add(Me)
					Me._DEFAULT_CCY = value.CCY_ID
				Else
					Me._DEFAULT_CCY = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CCY")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="COUNTRy_ACCOUNT", Storage:="_COUNTRy", ThisKey:="COUNTRY_ID", OtherKey:="COUNTRY_ID", IsForeignKey:=true)>  _
	Public Property COUNTRy() As COUNTRy
		Get
			Return Me._COUNTRy.Entity
		End Get
		Set
			Dim previousValue As COUNTRy = Me._COUNTRy.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._COUNTRy.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._COUNTRy.Entity = Nothing
					previousValue.ACCOUNTs.Remove(Me)
				End If
				Me._COUNTRy.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ACCOUNTs.Add(Me)
					Me._COUNTRY_ID = value.COUNTRY_ID
				Else
					Me._COUNTRY_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("COUNTRy")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACCOUNT_ACCOUNT1", Storage:="_ACCOUNT1", ThisKey:="DEFAULT_BROKER_CLIENT", OtherKey:="ACCOUNT_ID", IsForeignKey:=true)>  _
	Public Property ACCOUNT1() As ACCOUNT
		Get
			Return Me._ACCOUNT1.Entity
		End Get
		Set
			Dim previousValue As ACCOUNT = Me._ACCOUNT1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACCOUNT1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACCOUNT1.Entity = Nothing
					previousValue.ACCOUNTs1.Remove(Me)
				End If
				Me._ACCOUNT1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ACCOUNTs1.Add(Me)
					Me._DEFAULT_BROKER_CLIENT = value.ACCOUNT_ID
				Else
					Me._DEFAULT_BROKER_CLIENT = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ACCOUNT1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ACCOUNTS_ADMINs(ByVal entity As ACCOUNTS_ADMIN)
		Me.SendPropertyChanging
		entity.ACCOUNT = Me
	End Sub
	
	Private Sub detach_ACCOUNTS_ADMINs(ByVal entity As ACCOUNTS_ADMIN)
		Me.SendPropertyChanging
		entity.ACCOUNT = Nothing
	End Sub
	
	Private Sub attach_ACCOUNTS_CONTACTs(ByVal entity As ACCOUNTS_CONTACT)
		Me.SendPropertyChanging
		entity.ACCOUNT = Me
	End Sub
	
	Private Sub detach_ACCOUNTS_CONTACTs(ByVal entity As ACCOUNTS_CONTACT)
		Me.SendPropertyChanging
		entity.ACCOUNT = Nothing
	End Sub
	
	Private Sub attach_CONTRACT_SERies(ByVal entity As CONTRACT_SERy)
		Me.SendPropertyChanging
		entity.ACCOUNT = Me
	End Sub
	
	Private Sub detach_CONTRACT_SERies(ByVal entity As CONTRACT_SERy)
		Me.SendPropertyChanging
		entity.ACCOUNT = Nothing
	End Sub
	
	Private Sub attach_DESK_EXCHANGES_CLEARERs(ByVal entity As DESK_EXCHANGES_CLEARER)
		Me.SendPropertyChanging
		entity.ACCOUNT = Me
	End Sub
	
	Private Sub detach_DESK_EXCHANGES_CLEARERs(ByVal entity As DESK_EXCHANGES_CLEARER)
		Me.SendPropertyChanging
		entity.ACCOUNT = Nothing
	End Sub
	
	Private Sub attach_EXCHANGEs(ByVal entity As EXCHANGE)
		Me.SendPropertyChanging
		entity.ACCOUNT = Me
	End Sub
	
	Private Sub detach_EXCHANGEs(ByVal entity As EXCHANGE)
		Me.SendPropertyChanging
		entity.ACCOUNT = Nothing
	End Sub
	
	Private Sub attach_EXCHANGEs1(ByVal entity As EXCHANGE)
		Me.SendPropertyChanging
		entity.ACCOUNT1 = Me
	End Sub
	
	Private Sub detach_EXCHANGEs1(ByVal entity As EXCHANGE)
		Me.SendPropertyChanging
		entity.ACCOUNT1 = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFA_EXCHANGEs(ByVal entity As ORDERS_FFA_EXCHANGE)
		Me.SendPropertyChanging
		entity.ACCOUNT = Me
	End Sub
	
	Private Sub detach_ORDERS_FFA_EXCHANGEs(ByVal entity As ORDERS_FFA_EXCHANGE)
		Me.SendPropertyChanging
		entity.ACCOUNT = Nothing
	End Sub
	
	Private Sub attach_TRADES_FFAs(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNT = Me
	End Sub
	
	Private Sub detach_TRADES_FFAs(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNT = Nothing
	End Sub
	
	Private Sub attach_TRADES_FFAs1(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNT1 = Me
	End Sub
	
	Private Sub detach_TRADES_FFAs1(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNT1 = Nothing
	End Sub
	
	Private Sub attach_TRADES_FFAs2(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNT2 = Me
	End Sub
	
	Private Sub detach_TRADES_FFAs2(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNT2 = Nothing
	End Sub
	
	Private Sub attach_TRADES_FFAs3(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNT3 = Me
	End Sub
	
	Private Sub detach_TRADES_FFAs3(ByVal entity As TRADES_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNT3 = Nothing
	End Sub
	
	Private Sub attach_ORDERS_FFAs(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNT = Me
	End Sub
	
	Private Sub detach_ORDERS_FFAs(ByVal entity As ORDERS_FFA)
		Me.SendPropertyChanging
		entity.ACCOUNT = Nothing
	End Sub
	
	Private Sub attach_ACCOUNT_DESKs(ByVal entity As ACCOUNT_DESK)
		Me.SendPropertyChanging
		entity.ACCOUNT = Me
	End Sub
	
	Private Sub detach_ACCOUNT_DESKs(ByVal entity As ACCOUNT_DESK)
		Me.SendPropertyChanging
		entity.ACCOUNT = Nothing
	End Sub
	
	Private Sub attach_DESK_TRADERs(ByVal entity As DESK_TRADER)
		Me.SendPropertyChanging
		entity.ACCOUNT = Me
	End Sub
	
	Private Sub detach_DESK_TRADERs(ByVal entity As DESK_TRADER)
		Me.SendPropertyChanging
		entity.ACCOUNT = Nothing
	End Sub
	
	Private Sub attach_DESK_TRADE_CLASSes(ByVal entity As DESK_TRADE_CLASS)
		Me.SendPropertyChanging
		entity.ACCOUNT = Me
	End Sub
	
	Private Sub detach_DESK_TRADE_CLASSes(ByVal entity As DESK_TRADE_CLASS)
		Me.SendPropertyChanging
		entity.ACCOUNT = Nothing
	End Sub
	
	Private Sub attach_ACCOUNTs(ByVal entity As ACCOUNT)
		Me.SendPropertyChanging
		entity.ACCOUNT = Me
	End Sub
	
	Private Sub detach_ACCOUNTs(ByVal entity As ACCOUNT)
		Me.SendPropertyChanging
		entity.ACCOUNT = Nothing
	End Sub
	
	Private Sub attach_ACCOUNTs1(ByVal entity As ACCOUNT)
		Me.SendPropertyChanging
		entity.ACCOUNT1 = Me
	End Sub
	
	Private Sub detach_ACCOUNTs1(ByVal entity As ACCOUNT)
		Me.SendPropertyChanging
		entity.ACCOUNT1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BALTIC_MONTHLY_SETTLEMENTS")>  _
Partial Public Class BALTIC_MONTHLY_SETTLEMENT
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ROUTE_ID As Integer
	
	Private _FIXING_DATE As Date
	
	Private _FIXINGEM As String
	
	Private _FIXING7 As Double
	
	Private _FIXING10 As Double
	
	Private _FIXING_MONTH As Short
	
	Private _FIXING_YEAR As Integer
	
	Private _ROUTE As EntityRef(Of ROUTE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnROUTE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnROUTE_IDChanged()
    End Sub
    Partial Private Sub OnFIXING_DATEChanging(value As Date)
    End Sub
    Partial Private Sub OnFIXING_DATEChanged()
    End Sub
    Partial Private Sub OnFIXINGEMChanging(value As String)
    End Sub
    Partial Private Sub OnFIXINGEMChanged()
    End Sub
    Partial Private Sub OnFIXING7Changing(value As Double)
    End Sub
    Partial Private Sub OnFIXING7Changed()
    End Sub
    Partial Private Sub OnFIXING10Changing(value As Double)
    End Sub
    Partial Private Sub OnFIXING10Changed()
    End Sub
    Partial Private Sub OnFIXING_MONTHChanging(value As Short)
    End Sub
    Partial Private Sub OnFIXING_MONTHChanged()
    End Sub
    Partial Private Sub OnFIXING_YEARChanging(value As Integer)
    End Sub
    Partial Private Sub OnFIXING_YEARChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ROUTE = CType(Nothing, EntityRef(Of ROUTE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ROUTE_ID() As Integer
		Get
			Return Me._ROUTE_ID
		End Get
		Set
			If ((Me._ROUTE_ID = value)  _
						= false) Then
				If Me._ROUTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnROUTE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ROUTE_ID = value
				Me.SendPropertyChanged("ROUTE_ID")
				Me.OnROUTE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING_DATE", DbType:="Date NOT NULL", IsPrimaryKey:=true)>  _
	Public Property FIXING_DATE() As Date
		Get
			Return Me._FIXING_DATE
		End Get
		Set
			If ((Me._FIXING_DATE = value)  _
						= false) Then
				Me.OnFIXING_DATEChanging(value)
				Me.SendPropertyChanging
				Me._FIXING_DATE = value
				Me.SendPropertyChanged("FIXING_DATE")
				Me.OnFIXING_DATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXINGEM", DbType:="NChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property FIXINGEM() As String
		Get
			Return Me._FIXINGEM
		End Get
		Set
			If (String.Equals(Me._FIXINGEM, value) = false) Then
				Me.OnFIXINGEMChanging(value)
				Me.SendPropertyChanging
				Me._FIXINGEM = value
				Me.SendPropertyChanged("FIXINGEM")
				Me.OnFIXINGEMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING7", DbType:="Float NOT NULL")>  _
	Public Property FIXING7() As Double
		Get
			Return Me._FIXING7
		End Get
		Set
			If ((Me._FIXING7 = value)  _
						= false) Then
				Me.OnFIXING7Changing(value)
				Me.SendPropertyChanging
				Me._FIXING7 = value
				Me.SendPropertyChanged("FIXING7")
				Me.OnFIXING7Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING10", DbType:="Float NOT NULL")>  _
	Public Property FIXING10() As Double
		Get
			Return Me._FIXING10
		End Get
		Set
			If ((Me._FIXING10 = value)  _
						= false) Then
				Me.OnFIXING10Changing(value)
				Me.SendPropertyChanging
				Me._FIXING10 = value
				Me.SendPropertyChanged("FIXING10")
				Me.OnFIXING10Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING_MONTH", DbType:="SmallInt NOT NULL")>  _
	Public Property FIXING_MONTH() As Short
		Get
			Return Me._FIXING_MONTH
		End Get
		Set
			If ((Me._FIXING_MONTH = value)  _
						= false) Then
				Me.OnFIXING_MONTHChanging(value)
				Me.SendPropertyChanging
				Me._FIXING_MONTH = value
				Me.SendPropertyChanged("FIXING_MONTH")
				Me.OnFIXING_MONTHChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING_YEAR", DbType:="Int NOT NULL")>  _
	Public Property FIXING_YEAR() As Integer
		Get
			Return Me._FIXING_YEAR
		End Get
		Set
			If ((Me._FIXING_YEAR = value)  _
						= false) Then
				Me.OnFIXING_YEARChanging(value)
				Me.SendPropertyChanging
				Me._FIXING_YEAR = value
				Me.SendPropertyChanged("FIXING_YEAR")
				Me.OnFIXING_YEARChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROUTE_BALTIC_MONTHLY_SETTLEMENT", Storage:="_ROUTE", ThisKey:="ROUTE_ID", OtherKey:="ROUTE_ID", IsForeignKey:=true)>  _
	Public Property ROUTE() As ROUTE
		Get
			Return Me._ROUTE.Entity
		End Get
		Set
			Dim previousValue As ROUTE = Me._ROUTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROUTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROUTE.Entity = Nothing
					previousValue.BALTIC_MONTHLY_SETTLEMENTs.Remove(Me)
				End If
				Me._ROUTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BALTIC_MONTHLY_SETTLEMENTs.Add(Me)
					Me._ROUTE_ID = value.ROUTE_ID
				Else
					Me._ROUTE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROUTE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.INTEREST_RATES")>  _
Partial Public Class INTEREST_RATE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CCY_ID As Integer
	
	Private _FIXING_DATE As Date
	
	Private _PERIOD As Integer
	
	Private _RATE As Double
	
	Private _CCY As EntityRef(Of CCY)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCCY_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCCY_IDChanged()
    End Sub
    Partial Private Sub OnFIXING_DATEChanging(value As Date)
    End Sub
    Partial Private Sub OnFIXING_DATEChanged()
    End Sub
    Partial Private Sub OnPERIODChanging(value As Integer)
    End Sub
    Partial Private Sub OnPERIODChanged()
    End Sub
    Partial Private Sub OnRATEChanging(value As Double)
    End Sub
    Partial Private Sub OnRATEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CCY = CType(Nothing, EntityRef(Of CCY))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCY_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CCY_ID() As Integer
		Get
			Return Me._CCY_ID
		End Get
		Set
			If ((Me._CCY_ID = value)  _
						= false) Then
				If Me._CCY.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCCY_IDChanging(value)
				Me.SendPropertyChanging
				Me._CCY_ID = value
				Me.SendPropertyChanged("CCY_ID")
				Me.OnCCY_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIXING_DATE", DbType:="Date NOT NULL", IsPrimaryKey:=true)>  _
	Public Property FIXING_DATE() As Date
		Get
			Return Me._FIXING_DATE
		End Get
		Set
			If ((Me._FIXING_DATE = value)  _
						= false) Then
				Me.OnFIXING_DATEChanging(value)
				Me.SendPropertyChanging
				Me._FIXING_DATE = value
				Me.SendPropertyChanged("FIXING_DATE")
				Me.OnFIXING_DATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PERIOD", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property PERIOD() As Integer
		Get
			Return Me._PERIOD
		End Get
		Set
			If ((Me._PERIOD = value)  _
						= false) Then
				Me.OnPERIODChanging(value)
				Me.SendPropertyChanging
				Me._PERIOD = value
				Me.SendPropertyChanged("PERIOD")
				Me.OnPERIODChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RATE", DbType:="Float NOT NULL")>  _
	Public Property RATE() As Double
		Get
			Return Me._RATE
		End Get
		Set
			If ((Me._RATE = value)  _
						= false) Then
				Me.OnRATEChanging(value)
				Me.SendPropertyChanging
				Me._RATE = value
				Me.SendPropertyChanged("RATE")
				Me.OnRATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CCY_INTEREST_RATE", Storage:="_CCY", ThisKey:="CCY_ID", OtherKey:="CCY_ID", IsForeignKey:=true)>  _
	Public Property CCY() As CCY
		Get
			Return Me._CCY.Entity
		End Get
		Set
			Dim previousValue As CCY = Me._CCY.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CCY.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CCY.Entity = Nothing
					previousValue.INTEREST_RATEs.Remove(Me)
				End If
				Me._CCY.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.INTEREST_RATEs.Add(Me)
					Me._CCY_ID = value.CCY_ID
				Else
					Me._CCY_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CCY")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

Partial Public Class TradeConfosResult
	
	Private _TRADE_ID As Integer
	
	Private _CONFIRMATION_SENT As Boolean
	
	Private _SIDE As Integer
	
	Private _TRADE_TYPE As Short
	
	Private _SPREAD_TRADE_ID As System.Nullable(Of Integer)
	
	Private _TRADE_BS As Char
	
	Private _TRADER_ID1 As Integer
	
	Private _TRADER_ID2 As Integer
	
	Private _EXCHANGE_ID As System.Nullable(Of Integer)
	
	Private _PRICE_TRADED As Double
	
	Private _PRICE_TRADED2 As System.Nullable(Of Double)
	
	Private _IS_SYNTHETIC As Boolean
	
	Private _DAY_QUALIFIER As Byte
	
	Private _QUANTITY As Integer
	
	Private _DAY_QUALIFIER2 As System.Nullable(Of Byte)
	
	Private _QUANTITY2 As System.Nullable(Of Integer)
	
	Private _ROUTE_ID1 As Integer
	
	Private _ROUTE_ID2 As Integer
	
	Private _SHORTDES As String
	
	Private _SEND_TRADE_EMAIL As Boolean
	
	Private _SEND_TRADE_SMS As Boolean
	
	Private _EMAIL1 As String
	
	Private _TEL_MBL1 As String
	
	Private _ROUTE_SHORT1 As String
	
	Private _TICK1 As Double
	
	Private _VESSEL_CLASS1 As String
	
	Private _QUOTEDES1 As String
	
	Private _QDES1 As String
	
	Private _ROUTE_SHORT2 As String
	
	Private _TICK2 As Double
	
	Private _VESSEL_CLASS2 As String
	
	Private _QUOTEDES2 As String
	
	Private _QDES2 As String
	
	Private _EXCHANGE_NAME As String
	
	Private _CPT As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_ID", DbType:="Int NOT NULL")>  _
	Public Property TRADE_ID() As Integer
		Get
			Return Me._TRADE_ID
		End Get
		Set
			If ((Me._TRADE_ID = value)  _
						= false) Then
				Me._TRADE_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONFIRMATION_SENT", DbType:="Bit NOT NULL")>  _
	Public Property CONFIRMATION_SENT() As Boolean
		Get
			Return Me._CONFIRMATION_SENT
		End Get
		Set
			If ((Me._CONFIRMATION_SENT = value)  _
						= false) Then
				Me._CONFIRMATION_SENT = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SIDE", DbType:="Int NOT NULL")>  _
	Public Property SIDE() As Integer
		Get
			Return Me._SIDE
		End Get
		Set
			If ((Me._SIDE = value)  _
						= false) Then
				Me._SIDE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_TYPE", DbType:="SmallInt NOT NULL")>  _
	Public Property TRADE_TYPE() As Short
		Get
			Return Me._TRADE_TYPE
		End Get
		Set
			If ((Me._TRADE_TYPE = value)  _
						= false) Then
				Me._TRADE_TYPE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SPREAD_TRADE_ID", DbType:="Int")>  _
	Public Property SPREAD_TRADE_ID() As System.Nullable(Of Integer)
		Get
			Return Me._SPREAD_TRADE_ID
		End Get
		Set
			If (Me._SPREAD_TRADE_ID.Equals(value) = false) Then
				Me._SPREAD_TRADE_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADE_BS", DbType:="Char(1) NOT NULL")>  _
	Public Property TRADE_BS() As Char
		Get
			Return Me._TRADE_BS
		End Get
		Set
			If ((Me._TRADE_BS = value)  _
						= false) Then
				Me._TRADE_BS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADER_ID1", DbType:="Int NOT NULL")>  _
	Public Property TRADER_ID1() As Integer
		Get
			Return Me._TRADER_ID1
		End Get
		Set
			If ((Me._TRADER_ID1 = value)  _
						= false) Then
				Me._TRADER_ID1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRADER_ID2", DbType:="Int NOT NULL")>  _
	Public Property TRADER_ID2() As Integer
		Get
			Return Me._TRADER_ID2
		End Get
		Set
			If ((Me._TRADER_ID2 = value)  _
						= false) Then
				Me._TRADER_ID2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_ID", DbType:="Int")>  _
	Public Property EXCHANGE_ID() As System.Nullable(Of Integer)
		Get
			Return Me._EXCHANGE_ID
		End Get
		Set
			If (Me._EXCHANGE_ID.Equals(value) = false) Then
				Me._EXCHANGE_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE_TRADED", DbType:="Float NOT NULL")>  _
	Public Property PRICE_TRADED() As Double
		Get
			Return Me._PRICE_TRADED
		End Get
		Set
			If ((Me._PRICE_TRADED = value)  _
						= false) Then
				Me._PRICE_TRADED = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE_TRADED2", DbType:="Float")>  _
	Public Property PRICE_TRADED2() As System.Nullable(Of Double)
		Get
			Return Me._PRICE_TRADED2
		End Get
		Set
			If (Me._PRICE_TRADED2.Equals(value) = false) Then
				Me._PRICE_TRADED2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IS_SYNTHETIC", DbType:="Bit NOT NULL")>  _
	Public Property IS_SYNTHETIC() As Boolean
		Get
			Return Me._IS_SYNTHETIC
		End Get
		Set
			If ((Me._IS_SYNTHETIC = value)  _
						= false) Then
				Me._IS_SYNTHETIC = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DAY_QUALIFIER", DbType:="TinyInt NOT NULL")>  _
	Public Property DAY_QUALIFIER() As Byte
		Get
			Return Me._DAY_QUALIFIER
		End Get
		Set
			If ((Me._DAY_QUALIFIER = value)  _
						= false) Then
				Me._DAY_QUALIFIER = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUANTITY", DbType:="Int NOT NULL")>  _
	Public Property QUANTITY() As Integer
		Get
			Return Me._QUANTITY
		End Get
		Set
			If ((Me._QUANTITY = value)  _
						= false) Then
				Me._QUANTITY = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DAY_QUALIFIER2", DbType:="TinyInt")>  _
	Public Property DAY_QUALIFIER2() As System.Nullable(Of Byte)
		Get
			Return Me._DAY_QUALIFIER2
		End Get
		Set
			If (Me._DAY_QUALIFIER2.Equals(value) = false) Then
				Me._DAY_QUALIFIER2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUANTITY2", DbType:="Int")>  _
	Public Property QUANTITY2() As System.Nullable(Of Integer)
		Get
			Return Me._QUANTITY2
		End Get
		Set
			If (Me._QUANTITY2.Equals(value) = false) Then
				Me._QUANTITY2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID1", DbType:="Int NOT NULL")>  _
	Public Property ROUTE_ID1() As Integer
		Get
			Return Me._ROUTE_ID1
		End Get
		Set
			If ((Me._ROUTE_ID1 = value)  _
						= false) Then
				Me._ROUTE_ID1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_ID2", DbType:="Int NOT NULL")>  _
	Public Property ROUTE_ID2() As Integer
		Get
			Return Me._ROUTE_ID2
		End Get
		Set
			If ((Me._ROUTE_ID2 = value)  _
						= false) Then
				Me._ROUTE_ID2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SHORTDES", DbType:="NVarChar(50)")>  _
	Public Property SHORTDES() As String
		Get
			Return Me._SHORTDES
		End Get
		Set
			If (String.Equals(Me._SHORTDES, value) = false) Then
				Me._SHORTDES = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SEND_TRADE_EMAIL", DbType:="Bit NOT NULL")>  _
	Public Property SEND_TRADE_EMAIL() As Boolean
		Get
			Return Me._SEND_TRADE_EMAIL
		End Get
		Set
			If ((Me._SEND_TRADE_EMAIL = value)  _
						= false) Then
				Me._SEND_TRADE_EMAIL = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SEND_TRADE_SMS", DbType:="Bit NOT NULL")>  _
	Public Property SEND_TRADE_SMS() As Boolean
		Get
			Return Me._SEND_TRADE_SMS
		End Get
		Set
			If ((Me._SEND_TRADE_SMS = value)  _
						= false) Then
				Me._SEND_TRADE_SMS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMAIL1", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property EMAIL1() As String
		Get
			Return Me._EMAIL1
		End Get
		Set
			If (String.Equals(Me._EMAIL1, value) = false) Then
				Me._EMAIL1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TEL_MBL1", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TEL_MBL1() As String
		Get
			Return Me._TEL_MBL1
		End Get
		Set
			If (String.Equals(Me._TEL_MBL1, value) = false) Then
				Me._TEL_MBL1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_SHORT1", DbType:="NVarChar(10)")>  _
	Public Property ROUTE_SHORT1() As String
		Get
			Return Me._ROUTE_SHORT1
		End Get
		Set
			If (String.Equals(Me._ROUTE_SHORT1, value) = false) Then
				Me._ROUTE_SHORT1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TICK1", DbType:="Float NOT NULL")>  _
	Public Property TICK1() As Double
		Get
			Return Me._TICK1
		End Get
		Set
			If ((Me._TICK1 = value)  _
						= false) Then
				Me._TICK1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VESSEL_CLASS1", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property VESSEL_CLASS1() As String
		Get
			Return Me._VESSEL_CLASS1
		End Get
		Set
			If (String.Equals(Me._VESSEL_CLASS1, value) = false) Then
				Me._VESSEL_CLASS1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUOTEDES1", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property QUOTEDES1() As String
		Get
			Return Me._QUOTEDES1
		End Get
		Set
			If (String.Equals(Me._QUOTEDES1, value) = false) Then
				Me._QUOTEDES1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QDES1", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property QDES1() As String
		Get
			Return Me._QDES1
		End Get
		Set
			If (String.Equals(Me._QDES1, value) = false) Then
				Me._QDES1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROUTE_SHORT2", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property ROUTE_SHORT2() As String
		Get
			Return Me._ROUTE_SHORT2
		End Get
		Set
			If (String.Equals(Me._ROUTE_SHORT2, value) = false) Then
				Me._ROUTE_SHORT2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TICK2", DbType:="Float NOT NULL")>  _
	Public Property TICK2() As Double
		Get
			Return Me._TICK2
		End Get
		Set
			If ((Me._TICK2 = value)  _
						= false) Then
				Me._TICK2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VESSEL_CLASS2", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property VESSEL_CLASS2() As String
		Get
			Return Me._VESSEL_CLASS2
		End Get
		Set
			If (String.Equals(Me._VESSEL_CLASS2, value) = false) Then
				Me._VESSEL_CLASS2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUOTEDES2", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property QUOTEDES2() As String
		Get
			Return Me._QUOTEDES2
		End Get
		Set
			If (String.Equals(Me._QUOTEDES2, value) = false) Then
				Me._QUOTEDES2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QDES2", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property QDES2() As String
		Get
			Return Me._QDES2
		End Get
		Set
			If (String.Equals(Me._QDES2, value) = false) Then
				Me._QDES2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXCHANGE_NAME", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property EXCHANGE_NAME() As String
		Get
			Return Me._EXCHANGE_NAME
		End Get
		Set
			If (String.Equals(Me._EXCHANGE_NAME, value) = false) Then
				Me._EXCHANGE_NAME = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CPT", DbType:="VarChar(255)")>  _
	Public Property CPT() As String
		Get
			Return Me._CPT
		End Get
		Set
			If (String.Equals(Me._CPT, value) = false) Then
				Me._CPT = value
			End If
		End Set
	End Property
End Class
